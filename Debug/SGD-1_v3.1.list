
SGD-1_v3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003234  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000fc  20000000  080033f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000038c  200000fc  080034f4  000200fc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000488  080034f4  00020488  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d3b3  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003c4d  00000000  00000000  0003d4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0001147f  00000000  00000000  00041124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001078  00000000  00000000  000525a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f50  00000000  00000000  00053620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00013322  00000000  00000000  00054570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b6b4  00000000  00000000  00067892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00069f48  00000000  00000000  00082f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000ece8e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f0c  00000000  00000000  000ecee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stabstr      000001b9  00000000  00000000  000efdf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000fc 	.word	0x200000fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032dc 	.word	0x080032dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000100 	.word	0x20000100
 8000104:	080032dc 	.word	0x080032dc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000234:	4770      	bx	lr
	...

08000238 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000238:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800023a:	4a06      	ldr	r2, [pc, #24]	; (8000254 <HAL_Init+0x1c>)
 800023c:	6813      	ldr	r3, [r2, #0]
 800023e:	2110      	movs	r1, #16
 8000240:	430b      	orrs	r3, r1
 8000242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000244:	2000      	movs	r0, #0
 8000246:	f002 f851 	bl	80022ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800024a:	f001 ff81 	bl	8002150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40022000 	.word	0x40022000

08000258 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000258:	4a03      	ldr	r2, [pc, #12]	; (8000268 <HAL_IncTick+0x10>)
 800025a:	6811      	ldr	r1, [r2, #0]
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <HAL_IncTick+0x14>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	185b      	adds	r3, r3, r1
 8000262:	6013      	str	r3, [r2, #0]
}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000254 	.word	0x20000254
 800026c:	20000004 	.word	0x20000004

08000270 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000270:	4b01      	ldr	r3, [pc, #4]	; (8000278 <HAL_GetTick+0x8>)
 8000272:	6818      	ldr	r0, [r3, #0]
}
 8000274:	4770      	bx	lr
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	20000254 	.word	0x20000254

0800027c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800027c:	b570      	push	{r4, r5, r6, lr}
 800027e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000280:	f7ff fff6 	bl	8000270 <HAL_GetTick>
 8000284:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000286:	1c63      	adds	r3, r4, #1
 8000288:	d002      	beq.n	8000290 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <HAL_Delay+0x20>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000290:	f7ff ffee 	bl	8000270 <HAL_GetTick>
 8000294:	1b40      	subs	r0, r0, r5
 8000296:	42a0      	cmp	r0, r4
 8000298:	d3fa      	bcc.n	8000290 <HAL_Delay+0x14>
  {
  }
}
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	20000004 	.word	0x20000004

080002a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a0:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80002a2:	2800      	cmp	r0, #0
 80002a4:	db11      	blt.n	80002ca <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a6:	0883      	lsrs	r3, r0, #2
 80002a8:	4e13      	ldr	r6, [pc, #76]	; (80002f8 <HAL_NVIC_SetPriority+0x58>)
 80002aa:	33c0      	adds	r3, #192	; 0xc0
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	599d      	ldr	r5, [r3, r6]
 80002b0:	2403      	movs	r4, #3
 80002b2:	4020      	ands	r0, r4
 80002b4:	00c0      	lsls	r0, r0, #3
 80002b6:	22ff      	movs	r2, #255	; 0xff
 80002b8:	0014      	movs	r4, r2
 80002ba:	4084      	lsls	r4, r0
 80002bc:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002be:	0189      	lsls	r1, r1, #6
 80002c0:	400a      	ands	r2, r1
 80002c2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c4:	432a      	orrs	r2, r5
 80002c6:	519a      	str	r2, [r3, r6]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80002c8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ca:	230f      	movs	r3, #15
 80002cc:	4003      	ands	r3, r0
 80002ce:	3b08      	subs	r3, #8
 80002d0:	089b      	lsrs	r3, r3, #2
 80002d2:	3306      	adds	r3, #6
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	4a09      	ldr	r2, [pc, #36]	; (80002fc <HAL_NVIC_SetPriority+0x5c>)
 80002d8:	4694      	mov	ip, r2
 80002da:	4463      	add	r3, ip
 80002dc:	685c      	ldr	r4, [r3, #4]
 80002de:	2203      	movs	r2, #3
 80002e0:	4010      	ands	r0, r2
 80002e2:	00c0      	lsls	r0, r0, #3
 80002e4:	32fc      	adds	r2, #252	; 0xfc
 80002e6:	0015      	movs	r5, r2
 80002e8:	4085      	lsls	r5, r0
 80002ea:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ec:	0189      	lsls	r1, r1, #6
 80002ee:	400a      	ands	r2, r1
 80002f0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f2:	4322      	orrs	r2, r4
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	e7e7      	b.n	80002c8 <HAL_NVIC_SetPriority+0x28>
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000300:	2800      	cmp	r0, #0
 8000302:	db05      	blt.n	8000310 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000304:	231f      	movs	r3, #31
 8000306:	4018      	ands	r0, r3
 8000308:	3b1e      	subs	r3, #30
 800030a:	4083      	lsls	r3, r0
 800030c:	4a01      	ldr	r2, [pc, #4]	; (8000314 <HAL_NVIC_EnableIRQ+0x14>)
 800030e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000310:	4770      	bx	lr
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	e000e100 	.word	0xe000e100

08000318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	3801      	subs	r0, #1
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	045b      	lsls	r3, r3, #17
 800031e:	4298      	cmp	r0, r3
 8000320:	d20f      	bcs.n	8000342 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <HAL_SYSTICK_Config+0x30>)
 8000324:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	4809      	ldr	r0, [pc, #36]	; (800034c <HAL_SYSTICK_Config+0x34>)
 8000328:	6a03      	ldr	r3, [r0, #32]
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	21c0      	movs	r1, #192	; 0xc0
 8000330:	0609      	lsls	r1, r1, #24
 8000332:	430b      	orrs	r3, r1
 8000334:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	2300      	movs	r3, #0
 8000338:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033a:	3307      	adds	r3, #7
 800033c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000340:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000342:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000344:	e7fc      	b.n	8000340 <HAL_SYSTICK_Config+0x28>
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000350:	2804      	cmp	r0, #4
 8000352:	d005      	beq.n	8000360 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000354:	4a05      	ldr	r2, [pc, #20]	; (800036c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	2104      	movs	r1, #4
 800035a:	438b      	bics	r3, r1
 800035c:	6013      	str	r3, [r2, #0]
  }
}
 800035e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000360:	4a02      	ldr	r2, [pc, #8]	; (800036c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000362:	6813      	ldr	r3, [r2, #0]
 8000364:	2104      	movs	r1, #4
 8000366:	430b      	orrs	r3, r1
 8000368:	6013      	str	r3, [r2, #0]
 800036a:	e7f8      	b.n	800035e <HAL_SYSTICK_CLKSourceConfig+0xe>
 800036c:	e000e010 	.word	0xe000e010

08000370 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000370:	4770      	bx	lr

08000372 <HAL_SYSTICK_IRQHandler>:
{
 8000372:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000374:	f7ff fffc 	bl	8000370 <HAL_SYSTICK_Callback>
}
 8000378:	bd10      	pop	{r4, pc}

0800037a <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800037a:	b510      	push	{r4, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800037c:	2321      	movs	r3, #33	; 0x21
 800037e:	5cc3      	ldrb	r3, [r0, r3]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d006      	beq.n	8000392 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000384:	2304      	movs	r3, #4
 8000386:	6383      	str	r3, [r0, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000388:	331c      	adds	r3, #28
 800038a:	2200      	movs	r2, #0
 800038c:	54c2      	strb	r2, [r0, r3]

    return HAL_ERROR;
 800038e:	2001      	movs	r0, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8000390:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000392:	6802      	ldr	r2, [r0, #0]
 8000394:	6813      	ldr	r3, [r2, #0]
 8000396:	210e      	movs	r1, #14
 8000398:	438b      	bics	r3, r1
 800039a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800039c:	6801      	ldr	r1, [r0, #0]
 800039e:	680a      	ldr	r2, [r1, #0]
 80003a0:	2301      	movs	r3, #1
 80003a2:	439a      	bics	r2, r3
 80003a4:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80003a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80003a8:	0019      	movs	r1, r3
 80003aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80003ac:	40a1      	lsls	r1, r4
 80003ae:	6051      	str	r1, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80003b0:	2221      	movs	r2, #33	; 0x21
 80003b2:	5483      	strb	r3, [r0, r2]
  __HAL_UNLOCK(hdma);
 80003b4:	331f      	adds	r3, #31
 80003b6:	2200      	movs	r2, #0
 80003b8:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80003ba:	2000      	movs	r0, #0
 80003bc:	e7e8      	b.n	8000390 <HAL_DMA_Abort+0x16>

080003be <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80003be:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80003c0:	2321      	movs	r3, #33	; 0x21
 80003c2:	5cc3      	ldrb	r3, [r0, r3]
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	d003      	beq.n	80003d0 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003c8:	2304      	movs	r3, #4
 80003ca:	6383      	str	r3, [r0, #56]	; 0x38

    status = HAL_ERROR;
 80003cc:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80003ce:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80003d0:	6802      	ldr	r2, [r0, #0]
 80003d2:	6813      	ldr	r3, [r2, #0]
 80003d4:	210e      	movs	r1, #14
 80003d6:	438b      	bics	r3, r1
 80003d8:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80003da:	6801      	ldr	r1, [r0, #0]
 80003dc:	680a      	ldr	r2, [r1, #0]
 80003de:	2301      	movs	r3, #1
 80003e0:	439a      	bics	r2, r3
 80003e2:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80003e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80003e6:	0019      	movs	r1, r3
 80003e8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80003ea:	40a1      	lsls	r1, r4
 80003ec:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80003ee:	2221      	movs	r2, #33	; 0x21
 80003f0:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80003f2:	331f      	adds	r3, #31
 80003f4:	2200      	movs	r2, #0
 80003f6:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80003f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d002      	beq.n	8000404 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80003fe:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000400:	2000      	movs	r0, #0
 8000402:	e7e4      	b.n	80003ce <HAL_DMA_Abort_IT+0x10>
 8000404:	2000      	movs	r0, #0
 8000406:	e7e2      	b.n	80003ce <HAL_DMA_Abort_IT+0x10>

08000408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800040c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800040e:	e057      	b.n	80004c0 <HAL_GPIO_Init+0xb8>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000410:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000412:	005f      	lsls	r7, r3, #1
 8000414:	2603      	movs	r6, #3
 8000416:	40be      	lsls	r6, r7
 8000418:	43b4      	bics	r4, r6
 800041a:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800041c:	68cc      	ldr	r4, [r1, #12]
 800041e:	40bc      	lsls	r4, r7
 8000420:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000422:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000424:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000426:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000428:	684a      	ldr	r2, [r1, #4]
 800042a:	0916      	lsrs	r6, r2, #4
 800042c:	2201      	movs	r2, #1
 800042e:	4032      	ands	r2, r6
 8000430:	409a      	lsls	r2, r3
 8000432:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000434:	6042      	str	r2, [r0, #4]
 8000436:	e053      	b.n	80004e0 <HAL_GPIO_Init+0xd8>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000438:	08dc      	lsrs	r4, r3, #3
 800043a:	3408      	adds	r4, #8
 800043c:	00a4      	lsls	r4, r4, #2
 800043e:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000440:	3205      	adds	r2, #5
 8000442:	401a      	ands	r2, r3
 8000444:	0092      	lsls	r2, r2, #2
 8000446:	270f      	movs	r7, #15
 8000448:	4097      	lsls	r7, r2
 800044a:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800044c:	690f      	ldr	r7, [r1, #16]
 800044e:	4097      	lsls	r7, r2
 8000450:	003a      	movs	r2, r7
 8000452:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 8000454:	5022      	str	r2, [r4, r0]
 8000456:	e057      	b.n	8000508 <HAL_GPIO_Init+0x100>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000458:	2603      	movs	r6, #3
 800045a:	e000      	b.n	800045e <HAL_GPIO_Init+0x56>
 800045c:	2600      	movs	r6, #0
 800045e:	40a6      	lsls	r6, r4
 8000460:	0034      	movs	r4, r6
 8000462:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000464:	3202      	adds	r2, #2
 8000466:	0092      	lsls	r2, r2, #2
 8000468:	4e44      	ldr	r6, [pc, #272]	; (800057c <HAL_GPIO_Init+0x174>)
 800046a:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800046c:	4a44      	ldr	r2, [pc, #272]	; (8000580 <HAL_GPIO_Init+0x178>)
 800046e:	6894      	ldr	r4, [r2, #8]
        temp &= ~(iocurrent);
 8000470:	43ea      	mvns	r2, r5
 8000472:	0026      	movs	r6, r4
 8000474:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000476:	684f      	ldr	r7, [r1, #4]
 8000478:	02ff      	lsls	r7, r7, #11
 800047a:	d501      	bpl.n	8000480 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 800047c:	432c      	orrs	r4, r5
 800047e:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8000480:	4c3f      	ldr	r4, [pc, #252]	; (8000580 <HAL_GPIO_Init+0x178>)
 8000482:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000484:	68e4      	ldr	r4, [r4, #12]
        temp &= ~(iocurrent);
 8000486:	0026      	movs	r6, r4
 8000488:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800048a:	684f      	ldr	r7, [r1, #4]
 800048c:	02bf      	lsls	r7, r7, #10
 800048e:	d501      	bpl.n	8000494 <HAL_GPIO_Init+0x8c>
        {
          temp |= iocurrent;
 8000490:	432c      	orrs	r4, r5
 8000492:	0026      	movs	r6, r4
        }
        EXTI->FTSR = temp;
 8000494:	4c3a      	ldr	r4, [pc, #232]	; (8000580 <HAL_GPIO_Init+0x178>)
 8000496:	60e6      	str	r6, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000498:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 800049a:	0026      	movs	r6, r4
 800049c:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800049e:	684f      	ldr	r7, [r1, #4]
 80004a0:	03bf      	lsls	r7, r7, #14
 80004a2:	d501      	bpl.n	80004a8 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80004a4:	432c      	orrs	r4, r5
 80004a6:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 80004a8:	4c35      	ldr	r4, [pc, #212]	; (8000580 <HAL_GPIO_Init+0x178>)
 80004aa:	6066      	str	r6, [r4, #4]

        temp = EXTI->IMR;
 80004ac:	6824      	ldr	r4, [r4, #0]
        temp &= ~(iocurrent);
 80004ae:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80004b0:	684e      	ldr	r6, [r1, #4]
 80004b2:	03f6      	lsls	r6, r6, #15
 80004b4:	d501      	bpl.n	80004ba <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 80004b6:	002a      	movs	r2, r5
 80004b8:	4322      	orrs	r2, r4
        }
        EXTI->IMR = temp;
 80004ba:	4c31      	ldr	r4, [pc, #196]	; (8000580 <HAL_GPIO_Init+0x178>)
 80004bc:	6022      	str	r2, [r4, #0]
      }
    }

    position++;
 80004be:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004c0:	680c      	ldr	r4, [r1, #0]
 80004c2:	0022      	movs	r2, r4
 80004c4:	40da      	lsrs	r2, r3
 80004c6:	d057      	beq.n	8000578 <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004c8:	2201      	movs	r2, #1
 80004ca:	409a      	lsls	r2, r3
 80004cc:	0025      	movs	r5, r4
 80004ce:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 80004d0:	4214      	tst	r4, r2
 80004d2:	d0f4      	beq.n	80004be <HAL_GPIO_Init+0xb6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80004d4:	2403      	movs	r4, #3
 80004d6:	684e      	ldr	r6, [r1, #4]
 80004d8:	4034      	ands	r4, r6
 80004da:	3c01      	subs	r4, #1
 80004dc:	2c01      	cmp	r4, #1
 80004de:	d997      	bls.n	8000410 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80004e0:	2203      	movs	r2, #3
 80004e2:	684c      	ldr	r4, [r1, #4]
 80004e4:	4022      	ands	r2, r4
 80004e6:	2a03      	cmp	r2, #3
 80004e8:	d009      	beq.n	80004fe <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 80004ea:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80004ec:	005e      	lsls	r6, r3, #1
 80004ee:	2403      	movs	r4, #3
 80004f0:	40b4      	lsls	r4, r6
 80004f2:	43a2      	bics	r2, r4
 80004f4:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80004f6:	688a      	ldr	r2, [r1, #8]
 80004f8:	40b2      	lsls	r2, r6
 80004fa:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80004fc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80004fe:	2203      	movs	r2, #3
 8000500:	684c      	ldr	r4, [r1, #4]
 8000502:	4022      	ands	r2, r4
 8000504:	2a02      	cmp	r2, #2
 8000506:	d097      	beq.n	8000438 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8000508:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800050a:	005e      	lsls	r6, r3, #1
 800050c:	2203      	movs	r2, #3
 800050e:	0017      	movs	r7, r2
 8000510:	40b7      	lsls	r7, r6
 8000512:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000514:	684f      	ldr	r7, [r1, #4]
 8000516:	403a      	ands	r2, r7
 8000518:	40b2      	lsls	r2, r6
 800051a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800051c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800051e:	22c0      	movs	r2, #192	; 0xc0
 8000520:	0292      	lsls	r2, r2, #10
 8000522:	684c      	ldr	r4, [r1, #4]
 8000524:	4214      	tst	r4, r2
 8000526:	d0ca      	beq.n	80004be <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000528:	4c16      	ldr	r4, [pc, #88]	; (8000584 <HAL_GPIO_Init+0x17c>)
 800052a:	69a6      	ldr	r6, [r4, #24]
 800052c:	2201      	movs	r2, #1
 800052e:	4316      	orrs	r6, r2
 8000530:	61a6      	str	r6, [r4, #24]
 8000532:	69a4      	ldr	r4, [r4, #24]
 8000534:	4022      	ands	r2, r4
 8000536:	9201      	str	r2, [sp, #4]
 8000538:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800053a:	089a      	lsrs	r2, r3, #2
 800053c:	1c94      	adds	r4, r2, #2
 800053e:	00a4      	lsls	r4, r4, #2
 8000540:	4e0e      	ldr	r6, [pc, #56]	; (800057c <HAL_GPIO_Init+0x174>)
 8000542:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000544:	2403      	movs	r4, #3
 8000546:	401c      	ands	r4, r3
 8000548:	00a4      	lsls	r4, r4, #2
 800054a:	260f      	movs	r6, #15
 800054c:	40a6      	lsls	r6, r4
 800054e:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000550:	2690      	movs	r6, #144	; 0x90
 8000552:	05f6      	lsls	r6, r6, #23
 8000554:	42b0      	cmp	r0, r6
 8000556:	d081      	beq.n	800045c <HAL_GPIO_Init+0x54>
 8000558:	4e0b      	ldr	r6, [pc, #44]	; (8000588 <HAL_GPIO_Init+0x180>)
 800055a:	42b0      	cmp	r0, r6
 800055c:	d008      	beq.n	8000570 <HAL_GPIO_Init+0x168>
 800055e:	4e0b      	ldr	r6, [pc, #44]	; (800058c <HAL_GPIO_Init+0x184>)
 8000560:	42b0      	cmp	r0, r6
 8000562:	d007      	beq.n	8000574 <HAL_GPIO_Init+0x16c>
 8000564:	4e0a      	ldr	r6, [pc, #40]	; (8000590 <HAL_GPIO_Init+0x188>)
 8000566:	42b0      	cmp	r0, r6
 8000568:	d100      	bne.n	800056c <HAL_GPIO_Init+0x164>
 800056a:	e775      	b.n	8000458 <HAL_GPIO_Init+0x50>
 800056c:	2605      	movs	r6, #5
 800056e:	e776      	b.n	800045e <HAL_GPIO_Init+0x56>
 8000570:	2601      	movs	r6, #1
 8000572:	e774      	b.n	800045e <HAL_GPIO_Init+0x56>
 8000574:	2602      	movs	r6, #2
 8000576:	e772      	b.n	800045e <HAL_GPIO_Init+0x56>
  } 
}
 8000578:	b003      	add	sp, #12
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	40010000 	.word	0x40010000
 8000580:	40010400 	.word	0x40010400
 8000584:	40021000 	.word	0x40021000
 8000588:	48000400 	.word	0x48000400
 800058c:	48000800 	.word	0x48000800
 8000590:	48000c00 	.word	0x48000c00

08000594 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000594:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000596:	0013      	movs	r3, r2
 8000598:	400b      	ands	r3, r1
 800059a:	041b      	lsls	r3, r3, #16
 800059c:	4391      	bics	r1, r2
 800059e:	4319      	orrs	r1, r3
 80005a0:	6181      	str	r1, [r0, #24]
}
 80005a2:	4770      	bx	lr

080005a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80005aa:	d100      	bne.n	80005ae <HAL_RCC_OscConfig+0xa>
 80005ac:	e22e      	b.n	8000a0c <HAL_RCC_OscConfig+0x468>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005ae:	6803      	ldr	r3, [r0, #0]
 80005b0:	07db      	lsls	r3, r3, #31
 80005b2:	d526      	bpl.n	8000602 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005b4:	4bae      	ldr	r3, [pc, #696]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	230c      	movs	r3, #12
 80005ba:	4013      	ands	r3, r2
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d018      	beq.n	80005f2 <HAL_RCC_OscConfig+0x4e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005c0:	4bab      	ldr	r3, [pc, #684]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	230c      	movs	r3, #12
 80005c6:	4013      	ands	r3, r2
 80005c8:	2b08      	cmp	r3, #8
 80005ca:	d00e      	beq.n	80005ea <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005cc:	6863      	ldr	r3, [r4, #4]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d03c      	beq.n	800064c <HAL_RCC_OscConfig+0xa8>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d151      	bne.n	800067a <HAL_RCC_OscConfig+0xd6>
 80005d6:	4ba6      	ldr	r3, [pc, #664]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	49a6      	ldr	r1, [pc, #664]	; (8000874 <HAL_RCC_OscConfig+0x2d0>)
 80005dc:	400a      	ands	r2, r1
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	49a5      	ldr	r1, [pc, #660]	; (8000878 <HAL_RCC_OscConfig+0x2d4>)
 80005e4:	400a      	ands	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	e036      	b.n	8000658 <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005ea:	4ba1      	ldr	r3, [pc, #644]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	03db      	lsls	r3, r3, #15
 80005f0:	d5ec      	bpl.n	80005cc <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005f2:	4b9f      	ldr	r3, [pc, #636]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	039b      	lsls	r3, r3, #14
 80005f8:	d503      	bpl.n	8000602 <HAL_RCC_OscConfig+0x5e>
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d100      	bne.n	8000602 <HAL_RCC_OscConfig+0x5e>
 8000600:	e207      	b.n	8000a12 <HAL_RCC_OscConfig+0x46e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	079b      	lsls	r3, r3, #30
 8000606:	d572      	bpl.n	80006ee <HAL_RCC_OscConfig+0x14a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000608:	4b99      	ldr	r3, [pc, #612]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	220c      	movs	r2, #12
 800060e:	421a      	tst	r2, r3
 8000610:	d05d      	beq.n	80006ce <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000612:	4b97      	ldr	r3, [pc, #604]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000614:	685a      	ldr	r2, [r3, #4]
 8000616:	230c      	movs	r3, #12
 8000618:	4013      	ands	r3, r2
 800061a:	2b08      	cmp	r3, #8
 800061c:	d053      	beq.n	80006c6 <HAL_RCC_OscConfig+0x122>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800061e:	68e3      	ldr	r3, [r4, #12]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d100      	bne.n	8000626 <HAL_RCC_OscConfig+0x82>
 8000624:	e085      	b.n	8000732 <HAL_RCC_OscConfig+0x18e>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000626:	4a92      	ldr	r2, [pc, #584]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000628:	6813      	ldr	r3, [r2, #0]
 800062a:	2101      	movs	r1, #1
 800062c:	430b      	orrs	r3, r1
 800062e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000630:	f7ff fe1e 	bl	8000270 <HAL_GetTick>
 8000634:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000636:	4b8e      	ldr	r3, [pc, #568]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	079b      	lsls	r3, r3, #30
 800063c:	d470      	bmi.n	8000720 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800063e:	f7ff fe17 	bl	8000270 <HAL_GetTick>
 8000642:	1b40      	subs	r0, r0, r5
 8000644:	2802      	cmp	r0, #2
 8000646:	d9f6      	bls.n	8000636 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8000648:	2003      	movs	r0, #3
 800064a:	e1e0      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800064c:	4a88      	ldr	r2, [pc, #544]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 800064e:	6811      	ldr	r1, [r2, #0]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	025b      	lsls	r3, r3, #9
 8000654:	430b      	orrs	r3, r1
 8000656:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000658:	6863      	ldr	r3, [r4, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d025      	beq.n	80006aa <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800065e:	f7ff fe07 	bl	8000270 <HAL_GetTick>
 8000662:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000664:	4b82      	ldr	r3, [pc, #520]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	039b      	lsls	r3, r3, #14
 800066a:	d4ca      	bmi.n	8000602 <HAL_RCC_OscConfig+0x5e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800066c:	f7ff fe00 	bl	8000270 <HAL_GetTick>
 8000670:	1b40      	subs	r0, r0, r5
 8000672:	2864      	cmp	r0, #100	; 0x64
 8000674:	d9f6      	bls.n	8000664 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8000676:	2003      	movs	r0, #3
 8000678:	e1c9      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800067a:	2b05      	cmp	r3, #5
 800067c:	d009      	beq.n	8000692 <HAL_RCC_OscConfig+0xee>
 800067e:	4b7c      	ldr	r3, [pc, #496]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	497c      	ldr	r1, [pc, #496]	; (8000874 <HAL_RCC_OscConfig+0x2d0>)
 8000684:	400a      	ands	r2, r1
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	497b      	ldr	r1, [pc, #492]	; (8000878 <HAL_RCC_OscConfig+0x2d4>)
 800068c:	400a      	ands	r2, r1
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	e7e2      	b.n	8000658 <HAL_RCC_OscConfig+0xb4>
 8000692:	4b77      	ldr	r3, [pc, #476]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	02d2      	lsls	r2, r2, #11
 800069a:	430a      	orrs	r2, r1
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	6819      	ldr	r1, [r3, #0]
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	0252      	lsls	r2, r2, #9
 80006a4:	430a      	orrs	r2, r1
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	e7d6      	b.n	8000658 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 80006aa:	f7ff fde1 	bl	8000270 <HAL_GetTick>
 80006ae:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006b0:	4b6f      	ldr	r3, [pc, #444]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	039b      	lsls	r3, r3, #14
 80006b6:	d5a4      	bpl.n	8000602 <HAL_RCC_OscConfig+0x5e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006b8:	f7ff fdda 	bl	8000270 <HAL_GetTick>
 80006bc:	1b40      	subs	r0, r0, r5
 80006be:	2864      	cmp	r0, #100	; 0x64
 80006c0:	d9f6      	bls.n	80006b0 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80006c2:	2003      	movs	r0, #3
 80006c4:	e1a3      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006c6:	4b6a      	ldr	r3, [pc, #424]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	03db      	lsls	r3, r3, #15
 80006cc:	d4a7      	bmi.n	800061e <HAL_RCC_OscConfig+0x7a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006ce:	4b68      	ldr	r3, [pc, #416]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	079b      	lsls	r3, r3, #30
 80006d4:	d503      	bpl.n	80006de <HAL_RCC_OscConfig+0x13a>
 80006d6:	68e3      	ldr	r3, [r4, #12]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d000      	beq.n	80006de <HAL_RCC_OscConfig+0x13a>
 80006dc:	e19b      	b.n	8000a16 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006de:	4964      	ldr	r1, [pc, #400]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80006e0:	680b      	ldr	r3, [r1, #0]
 80006e2:	22f8      	movs	r2, #248	; 0xf8
 80006e4:	4393      	bics	r3, r2
 80006e6:	6922      	ldr	r2, [r4, #16]
 80006e8:	00d2      	lsls	r2, r2, #3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006ee:	6823      	ldr	r3, [r4, #0]
 80006f0:	071b      	lsls	r3, r3, #28
 80006f2:	d544      	bpl.n	800077e <HAL_RCC_OscConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006f4:	69e3      	ldr	r3, [r4, #28]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d02e      	beq.n	8000758 <HAL_RCC_OscConfig+0x1b4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006fa:	4a5d      	ldr	r2, [pc, #372]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80006fc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80006fe:	2101      	movs	r1, #1
 8000700:	430b      	orrs	r3, r1
 8000702:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000704:	f7ff fdb4 	bl	8000270 <HAL_GetTick>
 8000708:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800070a:	4b59      	ldr	r3, [pc, #356]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 800070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070e:	079b      	lsls	r3, r3, #30
 8000710:	d435      	bmi.n	800077e <HAL_RCC_OscConfig+0x1da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000712:	f7ff fdad 	bl	8000270 <HAL_GetTick>
 8000716:	1b40      	subs	r0, r0, r5
 8000718:	2802      	cmp	r0, #2
 800071a:	d9f6      	bls.n	800070a <HAL_RCC_OscConfig+0x166>
        {
          return HAL_TIMEOUT;
 800071c:	2003      	movs	r0, #3
 800071e:	e176      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000720:	4953      	ldr	r1, [pc, #332]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000722:	680b      	ldr	r3, [r1, #0]
 8000724:	22f8      	movs	r2, #248	; 0xf8
 8000726:	4393      	bics	r3, r2
 8000728:	6922      	ldr	r2, [r4, #16]
 800072a:	00d2      	lsls	r2, r2, #3
 800072c:	4313      	orrs	r3, r2
 800072e:	600b      	str	r3, [r1, #0]
 8000730:	e7dd      	b.n	80006ee <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8000732:	4a4f      	ldr	r2, [pc, #316]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000734:	6813      	ldr	r3, [r2, #0]
 8000736:	2101      	movs	r1, #1
 8000738:	438b      	bics	r3, r1
 800073a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800073c:	f7ff fd98 	bl	8000270 <HAL_GetTick>
 8000740:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000742:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	079b      	lsls	r3, r3, #30
 8000748:	d5d1      	bpl.n	80006ee <HAL_RCC_OscConfig+0x14a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800074a:	f7ff fd91 	bl	8000270 <HAL_GetTick>
 800074e:	1b40      	subs	r0, r0, r5
 8000750:	2802      	cmp	r0, #2
 8000752:	d9f6      	bls.n	8000742 <HAL_RCC_OscConfig+0x19e>
            return HAL_TIMEOUT;
 8000754:	2003      	movs	r0, #3
 8000756:	e15a      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000758:	4a45      	ldr	r2, [pc, #276]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 800075a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800075c:	2101      	movs	r1, #1
 800075e:	438b      	bics	r3, r1
 8000760:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000762:	f7ff fd85 	bl	8000270 <HAL_GetTick>
 8000766:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000768:	4b41      	ldr	r3, [pc, #260]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 800076a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800076c:	079b      	lsls	r3, r3, #30
 800076e:	d506      	bpl.n	800077e <HAL_RCC_OscConfig+0x1da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000770:	f7ff fd7e 	bl	8000270 <HAL_GetTick>
 8000774:	1b40      	subs	r0, r0, r5
 8000776:	2802      	cmp	r0, #2
 8000778:	d9f6      	bls.n	8000768 <HAL_RCC_OscConfig+0x1c4>
        {
          return HAL_TIMEOUT;
 800077a:	2003      	movs	r0, #3
 800077c:	e147      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	075b      	lsls	r3, r3, #29
 8000782:	d400      	bmi.n	8000786 <HAL_RCC_OscConfig+0x1e2>
 8000784:	e080      	b.n	8000888 <HAL_RCC_OscConfig+0x2e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000786:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	d40b      	bmi.n	80007a6 <HAL_RCC_OscConfig+0x202>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4a38      	ldr	r2, [pc, #224]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000790:	69d1      	ldr	r1, [r2, #28]
 8000792:	2080      	movs	r0, #128	; 0x80
 8000794:	0540      	lsls	r0, r0, #21
 8000796:	4301      	orrs	r1, r0
 8000798:	61d1      	str	r1, [r2, #28]
 800079a:	69d3      	ldr	r3, [r2, #28]
 800079c:	4003      	ands	r3, r0
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007a2:	2501      	movs	r5, #1
 80007a4:	e000      	b.n	80007a8 <HAL_RCC_OscConfig+0x204>
    FlagStatus       pwrclkchanged = RESET;
 80007a6:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007a8:	4b34      	ldr	r3, [pc, #208]	; (800087c <HAL_RCC_OscConfig+0x2d8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	d50e      	bpl.n	80007ce <HAL_RCC_OscConfig+0x22a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007b0:	68a3      	ldr	r3, [r4, #8]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d01f      	beq.n	80007f6 <HAL_RCC_OscConfig+0x252>
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d134      	bne.n	8000824 <HAL_RCC_OscConfig+0x280>
 80007ba:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80007bc:	6a1a      	ldr	r2, [r3, #32]
 80007be:	2101      	movs	r1, #1
 80007c0:	438a      	bics	r2, r1
 80007c2:	621a      	str	r2, [r3, #32]
 80007c4:	6a1a      	ldr	r2, [r3, #32]
 80007c6:	3103      	adds	r1, #3
 80007c8:	438a      	bics	r2, r1
 80007ca:	621a      	str	r2, [r3, #32]
 80007cc:	e018      	b.n	8000800 <HAL_RCC_OscConfig+0x25c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007ce:	4a2b      	ldr	r2, [pc, #172]	; (800087c <HAL_RCC_OscConfig+0x2d8>)
 80007d0:	6811      	ldr	r1, [r2, #0]
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	430b      	orrs	r3, r1
 80007d8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80007da:	f7ff fd49 	bl	8000270 <HAL_GetTick>
 80007de:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <HAL_RCC_OscConfig+0x2d8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	d4e3      	bmi.n	80007b0 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007e8:	f7ff fd42 	bl	8000270 <HAL_GetTick>
 80007ec:	1b80      	subs	r0, r0, r6
 80007ee:	2864      	cmp	r0, #100	; 0x64
 80007f0:	d9f6      	bls.n	80007e0 <HAL_RCC_OscConfig+0x23c>
          return HAL_TIMEOUT;
 80007f2:	2003      	movs	r0, #3
 80007f4:	e10b      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 80007f8:	6a13      	ldr	r3, [r2, #32]
 80007fa:	2101      	movs	r1, #1
 80007fc:	430b      	orrs	r3, r1
 80007fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000800:	68a3      	ldr	r3, [r4, #8]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d024      	beq.n	8000850 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000806:	f7ff fd33 	bl	8000270 <HAL_GetTick>
 800080a:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 800080e:	6a1b      	ldr	r3, [r3, #32]
 8000810:	079b      	lsls	r3, r3, #30
 8000812:	d437      	bmi.n	8000884 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000814:	f7ff fd2c 	bl	8000270 <HAL_GetTick>
 8000818:	1b80      	subs	r0, r0, r6
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_RCC_OscConfig+0x2dc>)
 800081c:	4298      	cmp	r0, r3
 800081e:	d9f5      	bls.n	800080c <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 8000820:	2003      	movs	r0, #3
 8000822:	e0f4      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000824:	2b05      	cmp	r3, #5
 8000826:	d009      	beq.n	800083c <HAL_RCC_OscConfig+0x298>
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 800082a:	6a1a      	ldr	r2, [r3, #32]
 800082c:	2101      	movs	r1, #1
 800082e:	438a      	bics	r2, r1
 8000830:	621a      	str	r2, [r3, #32]
 8000832:	6a1a      	ldr	r2, [r3, #32]
 8000834:	3103      	adds	r1, #3
 8000836:	438a      	bics	r2, r1
 8000838:	621a      	str	r2, [r3, #32]
 800083a:	e7e1      	b.n	8000800 <HAL_RCC_OscConfig+0x25c>
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 800083e:	6a1a      	ldr	r2, [r3, #32]
 8000840:	2104      	movs	r1, #4
 8000842:	430a      	orrs	r2, r1
 8000844:	621a      	str	r2, [r3, #32]
 8000846:	6a1a      	ldr	r2, [r3, #32]
 8000848:	3903      	subs	r1, #3
 800084a:	430a      	orrs	r2, r1
 800084c:	621a      	str	r2, [r3, #32]
 800084e:	e7d7      	b.n	8000800 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000850:	f7ff fd0e 	bl	8000270 <HAL_GetTick>
 8000854:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_RCC_OscConfig+0x2cc>)
 8000858:	6a1b      	ldr	r3, [r3, #32]
 800085a:	079b      	lsls	r3, r3, #30
 800085c:	d512      	bpl.n	8000884 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800085e:	f7ff fd07 	bl	8000270 <HAL_GetTick>
 8000862:	1b80      	subs	r0, r0, r6
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_RCC_OscConfig+0x2dc>)
 8000866:	4298      	cmp	r0, r3
 8000868:	d9f5      	bls.n	8000856 <HAL_RCC_OscConfig+0x2b2>
        {
          return HAL_TIMEOUT;
 800086a:	2003      	movs	r0, #3
 800086c:	e0cf      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40021000 	.word	0x40021000
 8000874:	fffeffff 	.word	0xfffeffff
 8000878:	fffbffff 	.word	0xfffbffff
 800087c:	40007000 	.word	0x40007000
 8000880:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000884:	2d01      	cmp	r5, #1
 8000886:	d033      	beq.n	80008f0 <HAL_RCC_OscConfig+0x34c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	06db      	lsls	r3, r3, #27
 800088c:	d510      	bpl.n	80008b0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800088e:	6963      	ldr	r3, [r4, #20]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d033      	beq.n	80008fc <HAL_RCC_OscConfig+0x358>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000894:	3305      	adds	r3, #5
 8000896:	d151      	bne.n	800093c <HAL_RCC_OscConfig+0x398>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000898:	4a65      	ldr	r2, [pc, #404]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 800089a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800089c:	2104      	movs	r1, #4
 800089e:	438b      	bics	r3, r1
 80008a0:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80008a2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80008a4:	31f4      	adds	r1, #244	; 0xf4
 80008a6:	438b      	bics	r3, r1
 80008a8:	69a1      	ldr	r1, [r4, #24]
 80008aa:	00c9      	lsls	r1, r1, #3
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008b0:	6a23      	ldr	r3, [r4, #32]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d100      	bne.n	80008b8 <HAL_RCC_OscConfig+0x314>
 80008b6:	e0b0      	b.n	8000a1a <HAL_RCC_OscConfig+0x476>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008b8:	4a5d      	ldr	r2, [pc, #372]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 80008ba:	6851      	ldr	r1, [r2, #4]
 80008bc:	220c      	movs	r2, #12
 80008be:	400a      	ands	r2, r1
 80008c0:	2a08      	cmp	r2, #8
 80008c2:	d100      	bne.n	80008c6 <HAL_RCC_OscConfig+0x322>
 80008c4:	e08a      	b.n	80009dc <HAL_RCC_OscConfig+0x438>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d04f      	beq.n	800096a <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80008ca:	4a59      	ldr	r2, [pc, #356]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 80008cc:	6813      	ldr	r3, [r2, #0]
 80008ce:	4959      	ldr	r1, [pc, #356]	; (8000a34 <HAL_RCC_OscConfig+0x490>)
 80008d0:	400b      	ands	r3, r1
 80008d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008d4:	f7ff fccc 	bl	8000270 <HAL_GetTick>
 80008d8:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008da:	4b55      	ldr	r3, [pc, #340]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	019b      	lsls	r3, r3, #6
 80008e0:	d57a      	bpl.n	80009d8 <HAL_RCC_OscConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008e2:	f7ff fcc5 	bl	8000270 <HAL_GetTick>
 80008e6:	1b00      	subs	r0, r0, r4
 80008e8:	2802      	cmp	r0, #2
 80008ea:	d9f6      	bls.n	80008da <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 80008ec:	2003      	movs	r0, #3
 80008ee:	e08e      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008f0:	4a4f      	ldr	r2, [pc, #316]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 80008f2:	69d3      	ldr	r3, [r2, #28]
 80008f4:	4950      	ldr	r1, [pc, #320]	; (8000a38 <HAL_RCC_OscConfig+0x494>)
 80008f6:	400b      	ands	r3, r1
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	e7c5      	b.n	8000888 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_HSI14ADC_DISABLE();
 80008fc:	4b4c      	ldr	r3, [pc, #304]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 80008fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000900:	2104      	movs	r1, #4
 8000902:	430a      	orrs	r2, r1
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000908:	3903      	subs	r1, #3
 800090a:	430a      	orrs	r2, r1
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800090e:	f7ff fcaf 	bl	8000270 <HAL_GetTick>
 8000912:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000914:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 8000916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000918:	079b      	lsls	r3, r3, #30
 800091a:	d406      	bmi.n	800092a <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800091c:	f7ff fca8 	bl	8000270 <HAL_GetTick>
 8000920:	1b40      	subs	r0, r0, r5
 8000922:	2802      	cmp	r0, #2
 8000924:	d9f6      	bls.n	8000914 <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 8000926:	2003      	movs	r0, #3
 8000928:	e071      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800092a:	4941      	ldr	r1, [pc, #260]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 800092c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800092e:	22f8      	movs	r2, #248	; 0xf8
 8000930:	4393      	bics	r3, r2
 8000932:	69a2      	ldr	r2, [r4, #24]
 8000934:	00d2      	lsls	r2, r2, #3
 8000936:	4313      	orrs	r3, r2
 8000938:	634b      	str	r3, [r1, #52]	; 0x34
 800093a:	e7b9      	b.n	80008b0 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI14ADC_DISABLE();
 800093c:	4b3c      	ldr	r3, [pc, #240]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 800093e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000940:	2104      	movs	r1, #4
 8000942:	430a      	orrs	r2, r1
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000948:	3903      	subs	r1, #3
 800094a:	438a      	bics	r2, r1
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800094e:	f7ff fc8f 	bl	8000270 <HAL_GetTick>
 8000952:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000954:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 8000956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000958:	079b      	lsls	r3, r3, #30
 800095a:	d5a9      	bpl.n	80008b0 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800095c:	f7ff fc88 	bl	8000270 <HAL_GetTick>
 8000960:	1b40      	subs	r0, r0, r5
 8000962:	2802      	cmp	r0, #2
 8000964:	d9f6      	bls.n	8000954 <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 8000966:	2003      	movs	r0, #3
 8000968:	e051      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_PLL_DISABLE();
 800096a:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 800096c:	6813      	ldr	r3, [r2, #0]
 800096e:	4931      	ldr	r1, [pc, #196]	; (8000a34 <HAL_RCC_OscConfig+0x490>)
 8000970:	400b      	ands	r3, r1
 8000972:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000974:	f7ff fc7c 	bl	8000270 <HAL_GetTick>
 8000978:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	019b      	lsls	r3, r3, #6
 8000980:	d506      	bpl.n	8000990 <HAL_RCC_OscConfig+0x3ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000982:	f7ff fc75 	bl	8000270 <HAL_GetTick>
 8000986:	1b40      	subs	r0, r0, r5
 8000988:	2802      	cmp	r0, #2
 800098a:	d9f6      	bls.n	800097a <HAL_RCC_OscConfig+0x3d6>
            return HAL_TIMEOUT;
 800098c:	2003      	movs	r0, #3
 800098e:	e03e      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 8000992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000994:	210f      	movs	r1, #15
 8000996:	438a      	bics	r2, r1
 8000998:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800099a:	430a      	orrs	r2, r1
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	4926      	ldr	r1, [pc, #152]	; (8000a3c <HAL_RCC_OscConfig+0x498>)
 80009a2:	400a      	ands	r2, r1
 80009a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80009a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80009a8:	4301      	orrs	r1, r0
 80009aa:	430a      	orrs	r2, r1
 80009ac:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80009ae:	6819      	ldr	r1, [r3, #0]
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	0452      	lsls	r2, r2, #17
 80009b4:	430a      	orrs	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009b8:	f7ff fc5a 	bl	8000270 <HAL_GetTick>
 80009bc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	019b      	lsls	r3, r3, #6
 80009c4:	d406      	bmi.n	80009d4 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c6:	f7ff fc53 	bl	8000270 <HAL_GetTick>
 80009ca:	1b00      	subs	r0, r0, r4
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d9f6      	bls.n	80009be <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 80009d0:	2003      	movs	r0, #3
 80009d2:	e01c      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }

  return HAL_OK;
 80009d4:	2000      	movs	r0, #0
 80009d6:	e01a      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
 80009d8:	2000      	movs	r0, #0
 80009da:	e018      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d01e      	beq.n	8000a1e <HAL_RCC_OscConfig+0x47a>
        pll_config  = RCC->CFGR;
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_RCC_OscConfig+0x48c>)
 80009e2:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 80009e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	025b      	lsls	r3, r3, #9
 80009ea:	4013      	ands	r3, r2
 80009ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80009ee:	4283      	cmp	r3, r0
 80009f0:	d117      	bne.n	8000a22 <HAL_RCC_OscConfig+0x47e>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80009f2:	230f      	movs	r3, #15
 80009f4:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80009f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009f8:	428b      	cmp	r3, r1
 80009fa:	d114      	bne.n	8000a26 <HAL_RCC_OscConfig+0x482>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80009fc:	23f0      	movs	r3, #240	; 0xf0
 80009fe:	039b      	lsls	r3, r3, #14
 8000a00:	401a      	ands	r2, r3
 8000a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d110      	bne.n	8000a2a <HAL_RCC_OscConfig+0x486>
  return HAL_OK;
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e000      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
    return HAL_ERROR;
 8000a0c:	2001      	movs	r0, #1
}
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
 8000a14:	e7fb      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
        return HAL_ERROR;
 8000a16:	2001      	movs	r0, #1
 8000a18:	e7f9      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
  return HAL_OK;
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e7f7      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
        return HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
 8000a20:	e7f5      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
          return HAL_ERROR;
 8000a22:	2001      	movs	r0, #1
 8000a24:	e7f3      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
 8000a26:	2001      	movs	r0, #1
 8000a28:	e7f1      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	e7ef      	b.n	8000a0e <HAL_RCC_OscConfig+0x46a>
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	40021000 	.word	0x40021000
 8000a34:	feffffff 	.word	0xfeffffff
 8000a38:	efffffff 	.word	0xefffffff
 8000a3c:	ffc2ffff 	.word	0xffc2ffff

08000a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a40:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_RCC_GetSysClockFreq+0x44>)
 8000a44:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a46:	230c      	movs	r3, #12
 8000a48:	4013      	ands	r3, r2
 8000a4a:	2b08      	cmp	r3, #8
 8000a4c:	d001      	beq.n	8000a52 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a50:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000a52:	0c90      	lsrs	r0, r2, #18
 8000a54:	210f      	movs	r1, #15
 8000a56:	4008      	ands	r0, r1
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x4c>)
 8000a5a:	5c1c      	ldrb	r4, [r3, r0]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <HAL_RCC_GetSysClockFreq+0x44>)
 8000a5e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000a60:	4001      	ands	r1, r0
 8000a62:	185b      	adds	r3, r3, r1
 8000a64:	7c19      	ldrb	r1, [r3, #16]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000a66:	03d3      	lsls	r3, r2, #15
 8000a68:	d504      	bpl.n	8000a74 <HAL_RCC_GetSysClockFreq+0x34>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <HAL_RCC_GetSysClockFreq+0x48>)
 8000a6c:	f7ff fb56 	bl	800011c <__udivsi3>
 8000a70:	4360      	muls	r0, r4
 8000a72:	e7ed      	b.n	8000a50 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000a74:	0163      	lsls	r3, r4, #5
 8000a76:	1b1b      	subs	r3, r3, r4
 8000a78:	0198      	lsls	r0, r3, #6
 8000a7a:	1ac0      	subs	r0, r0, r3
 8000a7c:	00c0      	lsls	r0, r0, #3
 8000a7e:	1900      	adds	r0, r0, r4
 8000a80:	0200      	lsls	r0, r0, #8
 8000a82:	e7e5      	b.n	8000a50 <HAL_RCC_GetSysClockFreq+0x10>
 8000a84:	40021000 	.word	0x40021000
 8000a88:	007a1200 	.word	0x007a1200
 8000a8c:	0800330c 	.word	0x0800330c

08000a90 <HAL_RCC_ClockConfig>:
{
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	0004      	movs	r4, r0
 8000a94:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a96:	2800      	cmp	r0, #0
 8000a98:	d100      	bne.n	8000a9c <HAL_RCC_ClockConfig+0xc>
 8000a9a:	e07e      	b.n	8000b9a <HAL_RCC_ClockConfig+0x10a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a9c:	4b43      	ldr	r3, [pc, #268]	; (8000bac <HAL_RCC_ClockConfig+0x11c>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d20a      	bcs.n	8000abe <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aa8:	4940      	ldr	r1, [pc, #256]	; (8000bac <HAL_RCC_ClockConfig+0x11c>)
 8000aaa:	680b      	ldr	r3, [r1, #0]
 8000aac:	2201      	movs	r2, #1
 8000aae:	4393      	bics	r3, r2
 8000ab0:	432b      	orrs	r3, r5
 8000ab2:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ab4:	680b      	ldr	r3, [r1, #0]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	42aa      	cmp	r2, r5
 8000aba:	d000      	beq.n	8000abe <HAL_RCC_ClockConfig+0x2e>
 8000abc:	e06f      	b.n	8000b9e <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	079a      	lsls	r2, r3, #30
 8000ac2:	d50e      	bpl.n	8000ae2 <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ac4:	075b      	lsls	r3, r3, #29
 8000ac6:	d505      	bpl.n	8000ad4 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000ac8:	4a39      	ldr	r2, [pc, #228]	; (8000bb0 <HAL_RCC_ClockConfig+0x120>)
 8000aca:	6851      	ldr	r1, [r2, #4]
 8000acc:	23e0      	movs	r3, #224	; 0xe0
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ad4:	4a36      	ldr	r2, [pc, #216]	; (8000bb0 <HAL_RCC_ClockConfig+0x120>)
 8000ad6:	6853      	ldr	r3, [r2, #4]
 8000ad8:	21f0      	movs	r1, #240	; 0xf0
 8000ada:	438b      	bics	r3, r1
 8000adc:	68a1      	ldr	r1, [r4, #8]
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	07db      	lsls	r3, r3, #31
 8000ae6:	d52d      	bpl.n	8000b44 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae8:	6863      	ldr	r3, [r4, #4]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d01e      	beq.n	8000b2c <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d022      	beq.n	8000b38 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000af2:	4a2f      	ldr	r2, [pc, #188]	; (8000bb0 <HAL_RCC_ClockConfig+0x120>)
 8000af4:	6812      	ldr	r2, [r2, #0]
 8000af6:	0792      	lsls	r2, r2, #30
 8000af8:	d553      	bpl.n	8000ba2 <HAL_RCC_ClockConfig+0x112>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000afa:	492d      	ldr	r1, [pc, #180]	; (8000bb0 <HAL_RCC_ClockConfig+0x120>)
 8000afc:	684a      	ldr	r2, [r1, #4]
 8000afe:	2003      	movs	r0, #3
 8000b00:	4382      	bics	r2, r0
 8000b02:	4313      	orrs	r3, r2
 8000b04:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000b06:	f7ff fbb3 	bl	8000270 <HAL_GetTick>
 8000b0a:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <HAL_RCC_ClockConfig+0x120>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	220c      	movs	r2, #12
 8000b12:	401a      	ands	r2, r3
 8000b14:	6863      	ldr	r3, [r4, #4]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d013      	beq.n	8000b44 <HAL_RCC_ClockConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1c:	f7ff fba8 	bl	8000270 <HAL_GetTick>
 8000b20:	1b80      	subs	r0, r0, r6
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <HAL_RCC_ClockConfig+0x124>)
 8000b24:	4298      	cmp	r0, r3
 8000b26:	d9f1      	bls.n	8000b0c <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8000b28:	2003      	movs	r0, #3
 8000b2a:	e035      	b.n	8000b98 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b2c:	4a20      	ldr	r2, [pc, #128]	; (8000bb0 <HAL_RCC_ClockConfig+0x120>)
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	0392      	lsls	r2, r2, #14
 8000b32:	d4e2      	bmi.n	8000afa <HAL_RCC_ClockConfig+0x6a>
        return HAL_ERROR;
 8000b34:	2001      	movs	r0, #1
 8000b36:	e02f      	b.n	8000b98 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_RCC_ClockConfig+0x120>)
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	0192      	lsls	r2, r2, #6
 8000b3e:	d4dc      	bmi.n	8000afa <HAL_RCC_ClockConfig+0x6a>
        return HAL_ERROR;
 8000b40:	2001      	movs	r0, #1
 8000b42:	e029      	b.n	8000b98 <HAL_RCC_ClockConfig+0x108>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_RCC_ClockConfig+0x11c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d909      	bls.n	8000b64 <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b50:	4916      	ldr	r1, [pc, #88]	; (8000bac <HAL_RCC_ClockConfig+0x11c>)
 8000b52:	680b      	ldr	r3, [r1, #0]
 8000b54:	2201      	movs	r2, #1
 8000b56:	4393      	bics	r3, r2
 8000b58:	432b      	orrs	r3, r5
 8000b5a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b5c:	680b      	ldr	r3, [r1, #0]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	42aa      	cmp	r2, r5
 8000b62:	d120      	bne.n	8000ba6 <HAL_RCC_ClockConfig+0x116>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	075b      	lsls	r3, r3, #29
 8000b68:	d506      	bpl.n	8000b78 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000b6a:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <HAL_RCC_ClockConfig+0x120>)
 8000b6c:	6853      	ldr	r3, [r2, #4]
 8000b6e:	4912      	ldr	r1, [pc, #72]	; (8000bb8 <HAL_RCC_ClockConfig+0x128>)
 8000b70:	400b      	ands	r3, r1
 8000b72:	68e1      	ldr	r1, [r4, #12]
 8000b74:	430b      	orrs	r3, r1
 8000b76:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b78:	f7ff ff62 	bl	8000a40 <HAL_RCC_GetSysClockFreq>
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_RCC_ClockConfig+0x120>)
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	0912      	lsrs	r2, r2, #4
 8000b82:	230f      	movs	r3, #15
 8000b84:	4013      	ands	r3, r2
 8000b86:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_RCC_ClockConfig+0x12c>)
 8000b88:	5cd3      	ldrb	r3, [r2, r3]
 8000b8a:	40d8      	lsrs	r0, r3
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_RCC_ClockConfig+0x130>)
 8000b8e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f001 fbab 	bl	80022ec <HAL_InitTick>
  return HAL_OK;
 8000b96:	2000      	movs	r0, #0
}
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	e7fc      	b.n	8000b98 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	e7fa      	b.n	8000b98 <HAL_RCC_ClockConfig+0x108>
        return HAL_ERROR;
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	e7f8      	b.n	8000b98 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	e7f6      	b.n	8000b98 <HAL_RCC_ClockConfig+0x108>
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40022000 	.word	0x40022000
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	00001388 	.word	0x00001388
 8000bb8:	fffff8ff 	.word	0xfffff8ff
 8000bbc:	080032f4 	.word	0x080032f4
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000bc4:	4b01      	ldr	r3, [pc, #4]	; (8000bcc <HAL_RCC_GetHCLKFreq+0x8>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
}
 8000bc8:	4770      	bx	lr
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000000 	.word	0x20000000

08000bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000bd0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000bd2:	f7ff fff7 	bl	8000bc4 <HAL_RCC_GetHCLKFreq>
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	0a12      	lsrs	r2, r2, #8
 8000bdc:	2307      	movs	r3, #7
 8000bde:	4013      	ands	r3, r2
 8000be0:	4a02      	ldr	r2, [pc, #8]	; (8000bec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	40d8      	lsrs	r0, r3
}    
 8000be6:	bd10      	pop	{r4, pc}
 8000be8:	40021000 	.word	0x40021000
 8000bec:	08003304 	.word	0x08003304

08000bf0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000bf0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_RCC_GetClockConfig+0x30>)
 8000bf8:	685c      	ldr	r4, [r3, #4]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	4022      	ands	r2, r4
 8000bfe:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000c00:	685c      	ldr	r4, [r3, #4]
 8000c02:	22f0      	movs	r2, #240	; 0xf0
 8000c04:	4022      	ands	r2, r4
 8000c06:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	22e0      	movs	r2, #224	; 0xe0
 8000c0c:	00d2      	lsls	r2, r2, #3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <HAL_RCC_GetClockConfig+0x34>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	2301      	movs	r3, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	600b      	str	r3, [r1, #0]
}
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000c28:	b570      	push	{r4, r5, r6, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c2e:	6803      	ldr	r3, [r0, #0]
 8000c30:	03db      	lsls	r3, r3, #15
 8000c32:	d537      	bpl.n	8000ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c34:	4b3d      	ldr	r3, [pc, #244]	; (8000d2c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	d449      	bmi.n	8000cd0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c3c:	4a3b      	ldr	r2, [pc, #236]	; (8000d2c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c3e:	69d1      	ldr	r1, [r2, #28]
 8000c40:	2080      	movs	r0, #128	; 0x80
 8000c42:	0540      	lsls	r0, r0, #21
 8000c44:	4301      	orrs	r1, r0
 8000c46:	61d1      	str	r1, [r2, #28]
 8000c48:	69d3      	ldr	r3, [r2, #28]
 8000c4a:	4003      	ands	r3, r0
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c50:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c52:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	d53c      	bpl.n	8000cd4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
 8000c5e:	23c0      	movs	r3, #192	; 0xc0
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	0011      	movs	r1, r2
 8000c64:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c66:	421a      	tst	r2, r3
 8000c68:	d013      	beq.n	8000c92 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8000c6a:	6862      	ldr	r2, [r4, #4]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d00f      	beq.n	8000c92 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c74:	6a18      	ldr	r0, [r3, #32]
 8000c76:	4a2f      	ldr	r2, [pc, #188]	; (8000d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000c78:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c7a:	6a1e      	ldr	r6, [r3, #32]
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	0249      	lsls	r1, r1, #9
 8000c80:	4331      	orrs	r1, r6
 8000c82:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c84:	6a19      	ldr	r1, [r3, #32]
 8000c86:	4e2c      	ldr	r6, [pc, #176]	; (8000d38 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8000c88:	4031      	ands	r1, r6
 8000c8a:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000c8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c8e:	07c3      	lsls	r3, r0, #31
 8000c90:	d434      	bmi.n	8000cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000c92:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c94:	6a13      	ldr	r3, [r2, #32]
 8000c96:	4927      	ldr	r1, [pc, #156]	; (8000d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000c98:	400b      	ands	r3, r1
 8000c9a:	6861      	ldr	r1, [r4, #4]
 8000c9c:	430b      	orrs	r3, r1
 8000c9e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ca0:	2d01      	cmp	r5, #1
 8000ca2:	d03a      	beq.n	8000d1a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000ca4:	6823      	ldr	r3, [r4, #0]
 8000ca6:	07db      	lsls	r3, r3, #31
 8000ca8:	d506      	bpl.n	8000cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000caa:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000cac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cae:	2103      	movs	r1, #3
 8000cb0:	438b      	bics	r3, r1
 8000cb2:	68a1      	ldr	r1, [r4, #8]
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	069b      	lsls	r3, r3, #26
 8000cbc:	d532      	bpl.n	8000d24 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000cc0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	438b      	bics	r3, r1
 8000cc6:	68e1      	ldr	r1, [r4, #12]
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e02a      	b.n	8000d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    FlagStatus       pwrclkchanged = RESET;
 8000cd0:	2500      	movs	r5, #0
 8000cd2:	e7be      	b.n	8000c52 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cd4:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000cd6:	6811      	ldr	r1, [r2, #0]
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ce0:	f7ff fac6 	bl	8000270 <HAL_GetTick>
 8000ce4:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	d4b5      	bmi.n	8000c5a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cee:	f7ff fabf 	bl	8000270 <HAL_GetTick>
 8000cf2:	1b80      	subs	r0, r0, r6
 8000cf4:	2864      	cmp	r0, #100	; 0x64
 8000cf6:	d9f6      	bls.n	8000ce6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	e014      	b.n	8000d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        tickstart = HAL_GetTick();
 8000cfc:	f7ff fab8 	bl	8000270 <HAL_GetTick>
 8000d00:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000d04:	6a1b      	ldr	r3, [r3, #32]
 8000d06:	079b      	lsls	r3, r3, #30
 8000d08:	d4c3      	bmi.n	8000c92 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fab1 	bl	8000270 <HAL_GetTick>
 8000d0e:	1b80      	subs	r0, r0, r6
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000d12:	4298      	cmp	r0, r3
 8000d14:	d9f5      	bls.n	8000d02 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
 8000d16:	2003      	movs	r0, #3
 8000d18:	e005      	b.n	8000d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d1a:	69d3      	ldr	r3, [r2, #28]
 8000d1c:	4908      	ldr	r1, [pc, #32]	; (8000d40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000d1e:	400b      	ands	r3, r1
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	e7bf      	b.n	8000ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8000d24:	2000      	movs	r0, #0
}
 8000d26:	b002      	add	sp, #8
 8000d28:	bd70      	pop	{r4, r5, r6, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40007000 	.word	0x40007000
 8000d34:	fffffcff 	.word	0xfffffcff
 8000d38:	fffeffff 	.word	0xfffeffff
 8000d3c:	00001388 	.word	0x00001388
 8000d40:	efffffff 	.word	0xefffffff

08000d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	1e04      	subs	r4, r0, #0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000d48:	d100      	bne.n	8000d4c <HAL_SPI_Init+0x8>
 8000d4a:	e078      	b.n	8000e3e <HAL_SPI_Init+0xfa>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000d4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d107      	bne.n	8000d62 <HAL_SPI_Init+0x1e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000d52:	3305      	adds	r3, #5
 8000d54:	33ff      	adds	r3, #255	; 0xff
 8000d56:	6842      	ldr	r2, [r0, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d005      	beq.n	8000d68 <HAL_SPI_Init+0x24>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61c3      	str	r3, [r0, #28]
 8000d60:	e002      	b.n	8000d68 <HAL_SPI_Init+0x24>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000d66:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000d6c:	335d      	adds	r3, #93	; 0x5d
 8000d6e:	5ce3      	ldrb	r3, [r4, r3]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d05a      	beq.n	8000e2a <HAL_SPI_Init+0xe6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000d74:	235d      	movs	r3, #93	; 0x5d
 8000d76:	2202      	movs	r2, #2
 8000d78:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d7a:	6822      	ldr	r2, [r4, #0]
 8000d7c:	6813      	ldr	r3, [r2, #0]
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	438b      	bics	r3, r1
 8000d82:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d84:	68e3      	ldr	r3, [r4, #12]
 8000d86:	22e0      	movs	r2, #224	; 0xe0
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d954      	bls.n	8000e38 <HAL_SPI_Init+0xf4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000d8e:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000d90:	21f0      	movs	r1, #240	; 0xf0
 8000d92:	0109      	lsls	r1, r1, #4
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d005      	beq.n	8000da4 <HAL_SPI_Init+0x60>
 8000d98:	21e0      	movs	r1, #224	; 0xe0
 8000d9a:	00c9      	lsls	r1, r1, #3
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d001      	beq.n	8000da4 <HAL_SPI_Init+0x60>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000da4:	2382      	movs	r3, #130	; 0x82
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	6861      	ldr	r1, [r4, #4]
 8000daa:	400b      	ands	r3, r1
 8000dac:	2184      	movs	r1, #132	; 0x84
 8000dae:	0209      	lsls	r1, r1, #8
 8000db0:	68a0      	ldr	r0, [r4, #8]
 8000db2:	4001      	ands	r1, r0
 8000db4:	430b      	orrs	r3, r1
 8000db6:	2102      	movs	r1, #2
 8000db8:	6920      	ldr	r0, [r4, #16]
 8000dba:	4001      	ands	r1, r0
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	6960      	ldr	r0, [r4, #20]
 8000dc2:	4008      	ands	r0, r1
 8000dc4:	4303      	orrs	r3, r0
 8000dc6:	2080      	movs	r0, #128	; 0x80
 8000dc8:	0080      	lsls	r0, r0, #2
 8000dca:	69a5      	ldr	r5, [r4, #24]
 8000dcc:	4028      	ands	r0, r5
 8000dce:	4303      	orrs	r3, r0
 8000dd0:	2038      	movs	r0, #56	; 0x38
 8000dd2:	69e5      	ldr	r5, [r4, #28]
 8000dd4:	4028      	ands	r0, r5
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	2080      	movs	r0, #128	; 0x80
 8000dda:	6a25      	ldr	r5, [r4, #32]
 8000ddc:	4028      	ands	r0, r5
 8000dde:	4303      	orrs	r3, r0
 8000de0:	2080      	movs	r0, #128	; 0x80
 8000de2:	0180      	lsls	r0, r0, #6
 8000de4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000de6:	4028      	ands	r0, r5
 8000de8:	6825      	ldr	r5, [r4, #0]
 8000dea:	4303      	orrs	r3, r0
 8000dec:	602b      	str	r3, [r5, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8000dee:	8b60      	ldrh	r0, [r4, #26]
 8000df0:	2304      	movs	r3, #4
 8000df2:	4003      	ands	r3, r0
 8000df4:	2010      	movs	r0, #16
 8000df6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000df8:	4028      	ands	r0, r5
 8000dfa:	4303      	orrs	r3, r0
 8000dfc:	2008      	movs	r0, #8
 8000dfe:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000e00:	4028      	ands	r0, r5
 8000e02:	4303      	orrs	r3, r0
 8000e04:	20f0      	movs	r0, #240	; 0xf0
 8000e06:	0100      	lsls	r0, r0, #4
 8000e08:	68e5      	ldr	r5, [r4, #12]
 8000e0a:	4028      	ands	r0, r5
 8000e0c:	4303      	orrs	r3, r0
 8000e0e:	6820      	ldr	r0, [r4, #0]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	6043      	str	r3, [r0, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e14:	6822      	ldr	r2, [r4, #0]
 8000e16:	69d3      	ldr	r3, [r2, #28]
 8000e18:	480a      	ldr	r0, [pc, #40]	; (8000e44 <HAL_SPI_Init+0x100>)
 8000e1a:	4003      	ands	r3, r0
 8000e1c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000e22:	335d      	adds	r3, #93	; 0x5d
 8000e24:	54e1      	strb	r1, [r4, r3]

  return HAL_OK;
 8000e26:	2000      	movs	r0, #0
}
 8000e28:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8000e2a:	335c      	adds	r3, #92	; 0x5c
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8000e30:	0020      	movs	r0, r4
 8000e32:	f001 f9b7 	bl	80021a4 <HAL_SPI_MspInit>
 8000e36:	e79d      	b.n	8000d74 <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0152      	lsls	r2, r2, #5
 8000e3c:	e7a8      	b.n	8000d90 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8000e3e:	2001      	movs	r0, #1
 8000e40:	e7f2      	b.n	8000e28 <HAL_SPI_Init+0xe4>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	fffff7ff 	.word	0xfffff7ff

08000e48 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8000e48:	4770      	bx	lr
	...

08000e4c <HAL_SPI_IRQHandler>:
{
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8000e52:	6802      	ldr	r2, [r0, #0]
 8000e54:	6855      	ldr	r5, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8000e56:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8000e58:	0999      	lsrs	r1, r3, #6
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	0006      	movs	r6, r0
 8000e5e:	400e      	ands	r6, r1
 8000e60:	4208      	tst	r0, r1
 8000e62:	d103      	bne.n	8000e6c <HAL_SPI_IRQHandler+0x20>
 8000e64:	07d9      	lsls	r1, r3, #31
 8000e66:	d501      	bpl.n	8000e6c <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8000e68:	0669      	lsls	r1, r5, #25
 8000e6a:	d46a      	bmi.n	8000f42 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8000e6c:	0799      	lsls	r1, r3, #30
 8000e6e:	d501      	bpl.n	8000e74 <HAL_SPI_IRQHandler+0x28>
 8000e70:	0629      	lsls	r1, r5, #24
 8000e72:	d46a      	bmi.n	8000f4a <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8000e74:	0959      	lsrs	r1, r3, #5
 8000e76:	2001      	movs	r0, #1
 8000e78:	0007      	movs	r7, r0
 8000e7a:	400f      	ands	r7, r1
 8000e7c:	4208      	tst	r0, r1
 8000e7e:	d103      	bne.n	8000e88 <HAL_SPI_IRQHandler+0x3c>
 8000e80:	2e00      	cmp	r6, #0
 8000e82:	d101      	bne.n	8000e88 <HAL_SPI_IRQHandler+0x3c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8000e84:	05d9      	lsls	r1, r3, #23
 8000e86:	d563      	bpl.n	8000f50 <HAL_SPI_IRQHandler+0x104>
 8000e88:	06a9      	lsls	r1, r5, #26
 8000e8a:	d561      	bpl.n	8000f50 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8000e8c:	2e00      	cmp	r6, #0
 8000e8e:	d00e      	beq.n	8000eae <HAL_SPI_IRQHandler+0x62>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8000e90:	215d      	movs	r1, #93	; 0x5d
 8000e92:	5c61      	ldrb	r1, [r4, r1]
 8000e94:	2903      	cmp	r1, #3
 8000e96:	d05d      	beq.n	8000f54 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000e98:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8000e9a:	2004      	movs	r0, #4
 8000e9c:	4301      	orrs	r1, r0
 8000e9e:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	9100      	str	r1, [sp, #0]
 8000ea4:	68d1      	ldr	r1, [r2, #12]
 8000ea6:	9100      	str	r1, [sp, #0]
 8000ea8:	6891      	ldr	r1, [r2, #8]
 8000eaa:	9100      	str	r1, [sp, #0]
 8000eac:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8000eae:	2f00      	cmp	r7, #0
 8000eb0:	d00c      	beq.n	8000ecc <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8000eb2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	4301      	orrs	r1, r0
 8000eb8:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	9102      	str	r1, [sp, #8]
 8000ebe:	6891      	ldr	r1, [r2, #8]
 8000ec0:	9102      	str	r1, [sp, #8]
 8000ec2:	6811      	ldr	r1, [r2, #0]
 8000ec4:	303f      	adds	r0, #63	; 0x3f
 8000ec6:	4381      	bics	r1, r0
 8000ec8:	6011      	str	r1, [r2, #0]
 8000eca:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	d509      	bpl.n	8000ee4 <HAL_SPI_IRQHandler+0x98>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000ed0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	9303      	str	r3, [sp, #12]
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	9303      	str	r3, [sp, #12]
 8000ee2:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000ee4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d032      	beq.n	8000f50 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8000eea:	6822      	ldr	r2, [r4, #0]
 8000eec:	6853      	ldr	r3, [r2, #4]
 8000eee:	21e0      	movs	r1, #224	; 0xe0
 8000ef0:	438b      	bics	r3, r1
 8000ef2:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8000ef4:	235d      	movs	r3, #93	; 0x5d
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8000efa:	07ab      	lsls	r3, r5, #30
 8000efc:	d032      	beq.n	8000f64 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000efe:	6822      	ldr	r2, [r4, #0]
 8000f00:	6853      	ldr	r3, [r2, #4]
 8000f02:	39dd      	subs	r1, #221	; 0xdd
 8000f04:	438b      	bics	r3, r1
 8000f06:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8000f08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00a      	beq.n	8000f24 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_SPI_IRQHandler+0x120>)
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8000f12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f14:	f7ff fa53 	bl	80003be <HAL_DMA_Abort_IT>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8000f1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000f1e:	2240      	movs	r2, #64	; 0x40
 8000f20:	4313      	orrs	r3, r2
 8000f22:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8000f24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d012      	beq.n	8000f50 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_SPI_IRQHandler+0x120>)
 8000f2c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8000f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f30:	f7ff fa45 	bl	80003be <HAL_DMA_Abort_IT>
 8000f34:	2800      	cmp	r0, #0
 8000f36:	d00b      	beq.n	8000f50 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8000f38:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000f3a:	2240      	movs	r2, #64	; 0x40
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	6623      	str	r3, [r4, #96]	; 0x60
 8000f40:	e006      	b.n	8000f50 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8000f42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f44:	0020      	movs	r0, r4
 8000f46:	4798      	blx	r3
    return;
 8000f48:	e002      	b.n	8000f50 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 8000f4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f4c:	0020      	movs	r0, r4
 8000f4e:	4798      	blx	r3
}
 8000f50:	b005      	add	sp, #20
 8000f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000f54:	2300      	movs	r3, #0
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	68d3      	ldr	r3, [r2, #12]
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	6893      	ldr	r3, [r2, #8]
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	9b01      	ldr	r3, [sp, #4]
        return;
 8000f62:	e7f5      	b.n	8000f50 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8000f64:	0020      	movs	r0, r4
 8000f66:	f7ff ff6f 	bl	8000e48 <HAL_SPI_ErrorCallback>
    return;
 8000f6a:	e7f1      	b.n	8000f50 <HAL_SPI_IRQHandler+0x104>
 8000f6c:	08000f71 	.word	0x08000f71

08000f70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000f70:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8000f72:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	2246      	movs	r2, #70	; 0x46
 8000f78:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 8000f7a:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8000f7c:	f7ff ff64 	bl	8000e48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8000f80:	bd10      	pop	{r4, pc}
	...

08000f84 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000f84:	233d      	movs	r3, #61	; 0x3d
 8000f86:	5cc3      	ldrb	r3, [r0, r3]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d122      	bne.n	8000fd2 <HAL_TIM_Base_Start_IT+0x4e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f8c:	333c      	adds	r3, #60	; 0x3c
 8000f8e:	2202      	movs	r2, #2
 8000f90:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f92:	6802      	ldr	r2, [r0, #0]
 8000f94:	68d3      	ldr	r3, [r2, #12]
 8000f96:	2101      	movs	r1, #1
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000f9c:	6803      	ldr	r3, [r0, #0]
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <HAL_TIM_Base_Start_IT+0x58>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d00b      	beq.n	8000fbc <HAL_TIM_Base_Start_IT+0x38>
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_TIM_Base_Start_IT+0x5c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d008      	beq.n	8000fbc <HAL_TIM_Base_Start_IT+0x38>
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_TIM_Base_Start_IT+0x60>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d005      	beq.n	8000fbc <HAL_TIM_Base_Start_IT+0x38>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000fb8:	2000      	movs	r0, #0
 8000fba:	e00b      	b.n	8000fd4 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000fbc:	6899      	ldr	r1, [r3, #8]
 8000fbe:	2207      	movs	r2, #7
 8000fc0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fc2:	2a06      	cmp	r2, #6
 8000fc4:	d007      	beq.n	8000fd6 <HAL_TIM_Base_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000fce:	2000      	movs	r0, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
}
 8000fd4:	4770      	bx	lr
  return HAL_OK;
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e7fc      	b.n	8000fd4 <HAL_TIM_Base_Start_IT+0x50>
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	40012c00 	.word	0x40012c00
 8000fe0:	40000400 	.word	0x40000400
 8000fe4:	40014000 	.word	0x40014000

08000fe8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000fe8:	4770      	bx	lr

08000fea <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000fea:	4770      	bx	lr

08000fec <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000fec:	4770      	bx	lr

08000fee <HAL_TIM_IRQHandler>:
{
 8000fee:	b570      	push	{r4, r5, r6, lr}
 8000ff0:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8000ff2:	6803      	ldr	r3, [r0, #0]
 8000ff4:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8000ff6:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8000ff8:	07aa      	lsls	r2, r5, #30
 8000ffa:	d50e      	bpl.n	800101a <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8000ffc:	07b2      	lsls	r2, r6, #30
 8000ffe:	d50c      	bpl.n	800101a <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001000:	2203      	movs	r2, #3
 8001002:	4252      	negs	r2, r2
 8001004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001006:	2301      	movs	r3, #1
 8001008:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800100a:	6803      	ldr	r3, [r0, #0]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	079b      	lsls	r3, r3, #30
 8001010:	d051      	beq.n	80010b6 <HAL_TIM_IRQHandler+0xc8>
          HAL_TIM_IC_CaptureCallback(htim);
 8001012:	f001 fcc9 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001016:	2300      	movs	r3, #0
 8001018:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800101a:	076b      	lsls	r3, r5, #29
 800101c:	d512      	bpl.n	8001044 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800101e:	0773      	lsls	r3, r6, #29
 8001020:	d510      	bpl.n	8001044 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	2205      	movs	r2, #5
 8001026:	4252      	negs	r2, r2
 8001028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800102a:	2302      	movs	r3, #2
 800102c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	23c0      	movs	r3, #192	; 0xc0
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	421a      	tst	r2, r3
 8001038:	d043      	beq.n	80010c2 <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 800103a:	0020      	movs	r0, r4
 800103c:	f001 fcb4 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001040:	2300      	movs	r3, #0
 8001042:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001044:	072b      	lsls	r3, r5, #28
 8001046:	d510      	bpl.n	800106a <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001048:	0733      	lsls	r3, r6, #28
 800104a:	d50e      	bpl.n	800106a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	2209      	movs	r2, #9
 8001050:	4252      	negs	r2, r2
 8001052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001054:	2304      	movs	r3, #4
 8001056:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	079b      	lsls	r3, r3, #30
 800105e:	d037      	beq.n	80010d0 <HAL_TIM_IRQHandler+0xe2>
        HAL_TIM_IC_CaptureCallback(htim);
 8001060:	0020      	movs	r0, r4
 8001062:	f001 fca1 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001066:	2300      	movs	r3, #0
 8001068:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800106a:	06eb      	lsls	r3, r5, #27
 800106c:	d512      	bpl.n	8001094 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800106e:	06f3      	lsls	r3, r6, #27
 8001070:	d510      	bpl.n	8001094 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	2211      	movs	r2, #17
 8001076:	4252      	negs	r2, r2
 8001078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800107a:	2308      	movs	r3, #8
 800107c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	69da      	ldr	r2, [r3, #28]
 8001082:	23c0      	movs	r3, #192	; 0xc0
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	421a      	tst	r2, r3
 8001088:	d029      	beq.n	80010de <HAL_TIM_IRQHandler+0xf0>
        HAL_TIM_IC_CaptureCallback(htim);
 800108a:	0020      	movs	r0, r4
 800108c:	f001 fc8c 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001090:	2300      	movs	r3, #0
 8001092:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001094:	07eb      	lsls	r3, r5, #31
 8001096:	d501      	bpl.n	800109c <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001098:	07f3      	lsls	r3, r6, #31
 800109a:	d427      	bmi.n	80010ec <HAL_TIM_IRQHandler+0xfe>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800109c:	062b      	lsls	r3, r5, #24
 800109e:	d501      	bpl.n	80010a4 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80010a0:	0633      	lsls	r3, r6, #24
 80010a2:	d42b      	bmi.n	80010fc <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80010a4:	066b      	lsls	r3, r5, #25
 80010a6:	d501      	bpl.n	80010ac <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80010a8:	0673      	lsls	r3, r6, #25
 80010aa:	d42f      	bmi.n	800110c <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80010ac:	06ab      	lsls	r3, r5, #26
 80010ae:	d501      	bpl.n	80010b4 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80010b0:	06b3      	lsls	r3, r6, #26
 80010b2:	d433      	bmi.n	800111c <HAL_TIM_IRQHandler+0x12e>
}
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010b6:	f7ff ff97 	bl	8000fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ba:	0020      	movs	r0, r4
 80010bc:	f7ff ff95 	bl	8000fea <HAL_TIM_PWM_PulseFinishedCallback>
 80010c0:	e7a9      	b.n	8001016 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010c2:	0020      	movs	r0, r4
 80010c4:	f7ff ff90 	bl	8000fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c8:	0020      	movs	r0, r4
 80010ca:	f7ff ff8e 	bl	8000fea <HAL_TIM_PWM_PulseFinishedCallback>
 80010ce:	e7b7      	b.n	8001040 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010d0:	0020      	movs	r0, r4
 80010d2:	f7ff ff89 	bl	8000fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010d6:	0020      	movs	r0, r4
 80010d8:	f7ff ff87 	bl	8000fea <HAL_TIM_PWM_PulseFinishedCallback>
 80010dc:	e7c3      	b.n	8001066 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010de:	0020      	movs	r0, r4
 80010e0:	f7ff ff82 	bl	8000fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010e4:	0020      	movs	r0, r4
 80010e6:	f7ff ff80 	bl	8000fea <HAL_TIM_PWM_PulseFinishedCallback>
 80010ea:	e7d1      	b.n	8001090 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	2202      	movs	r2, #2
 80010f0:	4252      	negs	r2, r2
 80010f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80010f4:	0020      	movs	r0, r4
 80010f6:	f000 fe3b 	bl	8001d70 <HAL_TIM_PeriodElapsedCallback>
 80010fa:	e7cf      	b.n	800109c <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	2281      	movs	r2, #129	; 0x81
 8001100:	4252      	negs	r2, r2
 8001102:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001104:	0020      	movs	r0, r4
 8001106:	f000 f88c 	bl	8001222 <HAL_TIMEx_BreakCallback>
 800110a:	e7cb      	b.n	80010a4 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	2241      	movs	r2, #65	; 0x41
 8001110:	4252      	negs	r2, r2
 8001112:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001114:	0020      	movs	r0, r4
 8001116:	f7ff ff69 	bl	8000fec <HAL_TIM_TriggerCallback>
 800111a:	e7c7      	b.n	80010ac <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	2221      	movs	r2, #33	; 0x21
 8001120:	4252      	negs	r2, r2
 8001122:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001124:	0020      	movs	r0, r4
 8001126:	f000 f87b 	bl	8001220 <HAL_TIMEx_CommutCallback>
}
 800112a:	e7c3      	b.n	80010b4 <HAL_TIM_IRQHandler+0xc6>

0800112c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800112c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <TIM_Base_SetConfig+0x80>)
 8001130:	4290      	cmp	r0, r2
 8001132:	d002      	beq.n	800113a <TIM_Base_SetConfig+0xe>
 8001134:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <TIM_Base_SetConfig+0x84>)
 8001136:	4290      	cmp	r0, r2
 8001138:	d103      	bne.n	8001142 <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800113a:	2270      	movs	r2, #112	; 0x70
 800113c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800113e:	684a      	ldr	r2, [r1, #4]
 8001140:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001142:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <TIM_Base_SetConfig+0x80>)
 8001144:	4290      	cmp	r0, r2
 8001146:	d00e      	beq.n	8001166 <TIM_Base_SetConfig+0x3a>
 8001148:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <TIM_Base_SetConfig+0x84>)
 800114a:	4290      	cmp	r0, r2
 800114c:	d00b      	beq.n	8001166 <TIM_Base_SetConfig+0x3a>
 800114e:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <TIM_Base_SetConfig+0x88>)
 8001150:	4290      	cmp	r0, r2
 8001152:	d008      	beq.n	8001166 <TIM_Base_SetConfig+0x3a>
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <TIM_Base_SetConfig+0x8c>)
 8001156:	4290      	cmp	r0, r2
 8001158:	d005      	beq.n	8001166 <TIM_Base_SetConfig+0x3a>
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <TIM_Base_SetConfig+0x90>)
 800115c:	4290      	cmp	r0, r2
 800115e:	d002      	beq.n	8001166 <TIM_Base_SetConfig+0x3a>
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <TIM_Base_SetConfig+0x94>)
 8001162:	4290      	cmp	r0, r2
 8001164:	d103      	bne.n	800116e <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001166:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <TIM_Base_SetConfig+0x98>)
 8001168:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800116a:	68ca      	ldr	r2, [r1, #12]
 800116c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	4393      	bics	r3, r2
 8001172:	694a      	ldr	r2, [r1, #20]
 8001174:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001176:	688a      	ldr	r2, [r1, #8]
 8001178:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800117a:	680a      	ldr	r2, [r1, #0]
 800117c:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <TIM_Base_SetConfig+0x80>)
 8001180:	4290      	cmp	r0, r2
 8001182:	d008      	beq.n	8001196 <TIM_Base_SetConfig+0x6a>
 8001184:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <TIM_Base_SetConfig+0x8c>)
 8001186:	4290      	cmp	r0, r2
 8001188:	d005      	beq.n	8001196 <TIM_Base_SetConfig+0x6a>
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <TIM_Base_SetConfig+0x90>)
 800118c:	4290      	cmp	r0, r2
 800118e:	d002      	beq.n	8001196 <TIM_Base_SetConfig+0x6a>
 8001190:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <TIM_Base_SetConfig+0x94>)
 8001192:	4290      	cmp	r0, r2
 8001194:	d101      	bne.n	800119a <TIM_Base_SetConfig+0x6e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001196:	690a      	ldr	r2, [r1, #16]
 8001198:	6302      	str	r2, [r0, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800119a:	6802      	ldr	r2, [r0, #0]
 800119c:	2104      	movs	r1, #4
 800119e:	430a      	orrs	r2, r1
 80011a0:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80011a2:	2201      	movs	r2, #1
 80011a4:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 80011a6:	6003      	str	r3, [r0, #0]
}
 80011a8:	4770      	bx	lr
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40012c00 	.word	0x40012c00
 80011b0:	40000400 	.word	0x40000400
 80011b4:	40002000 	.word	0x40002000
 80011b8:	40014000 	.word	0x40014000
 80011bc:	40014400 	.word	0x40014400
 80011c0:	40014800 	.word	0x40014800
 80011c4:	fffffcff 	.word	0xfffffcff

080011c8 <HAL_TIM_Base_Init>:
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80011cc:	d026      	beq.n	800121c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80011ce:	233d      	movs	r3, #61	; 0x3d
 80011d0:	5cc3      	ldrb	r3, [r0, r3]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01c      	beq.n	8001210 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80011d6:	253d      	movs	r5, #61	; 0x3d
 80011d8:	2302      	movs	r3, #2
 80011da:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011dc:	0021      	movs	r1, r4
 80011de:	c901      	ldmia	r1!, {r0}
 80011e0:	f7ff ffa4 	bl	800112c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80011e4:	2301      	movs	r3, #1
 80011e6:	2246      	movs	r2, #70	; 0x46
 80011e8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011ea:	3a08      	subs	r2, #8
 80011ec:	54a3      	strb	r3, [r4, r2]
 80011ee:	3201      	adds	r2, #1
 80011f0:	54a3      	strb	r3, [r4, r2]
 80011f2:	3201      	adds	r2, #1
 80011f4:	54a3      	strb	r3, [r4, r2]
 80011f6:	3201      	adds	r2, #1
 80011f8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011fa:	3201      	adds	r2, #1
 80011fc:	54a3      	strb	r3, [r4, r2]
 80011fe:	3201      	adds	r2, #1
 8001200:	54a3      	strb	r3, [r4, r2]
 8001202:	3201      	adds	r2, #1
 8001204:	54a3      	strb	r3, [r4, r2]
 8001206:	3201      	adds	r2, #1
 8001208:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800120a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800120c:	2000      	movs	r0, #0
}
 800120e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001210:	333c      	adds	r3, #60	; 0x3c
 8001212:	2200      	movs	r2, #0
 8001214:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001216:	f000 fff3 	bl	8002200 <HAL_TIM_Base_MspInit>
 800121a:	e7dc      	b.n	80011d6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800121c:	2001      	movs	r0, #1
 800121e:	e7f6      	b.n	800120e <HAL_TIM_Base_Init+0x46>

08001220 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001220:	4770      	bx	lr

08001222 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001222:	4770      	bx	lr

08001224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001224:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001226:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800122a:	2201      	movs	r2, #1
 800122c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001230:	6801      	ldr	r1, [r0, #0]
 8001232:	680b      	ldr	r3, [r1, #0]
 8001234:	4d12      	ldr	r5, [pc, #72]	; (8001280 <UART_EndRxTransfer+0x5c>)
 8001236:	402b      	ands	r3, r5
 8001238:	600b      	str	r3, [r1, #0]
 800123a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800123e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001242:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001246:	6801      	ldr	r1, [r0, #0]
 8001248:	688b      	ldr	r3, [r1, #8]
 800124a:	4393      	bics	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
 800124e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001252:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001254:	2b01      	cmp	r3, #1
 8001256:	d006      	beq.n	8001266 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	2220      	movs	r2, #32
 800125c:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800125e:	2300      	movs	r3, #0
 8001260:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001262:	6683      	str	r3, [r0, #104]	; 0x68
}
 8001264:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001266:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800126a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800126e:	6802      	ldr	r2, [r0, #0]
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	2410      	movs	r4, #16
 8001274:	43a3      	bics	r3, r4
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	f381 8810 	msr	PRIMASK, r1
}
 800127c:	e7ec      	b.n	8001258 <UART_EndRxTransfer+0x34>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	fffffedf 	.word	0xfffffedf

08001284 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001284:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001286:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800128a:	2301      	movs	r3, #1
 800128c:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001290:	6802      	ldr	r2, [r0, #0]
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	2440      	movs	r4, #64	; 0x40
 8001296:	43a3      	bics	r3, r4
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800129e:	2320      	movs	r3, #32
 80012a0:	67c3      	str	r3, [r0, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80012a6:	f001 fb69 	bl	800297c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80012aa:	bd10      	pop	{r4, pc}

080012ac <HAL_UART_ErrorCallback>:
}
 80012ac:	4770      	bx	lr

080012ae <UART_DMAAbortOnError>:
{
 80012ae:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80012b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80012b2:	235a      	movs	r3, #90	; 0x5a
 80012b4:	2200      	movs	r2, #0
 80012b6:	52c2      	strh	r2, [r0, r3]
  HAL_UART_ErrorCallback(huart);
 80012b8:	f7ff fff8 	bl	80012ac <HAL_UART_ErrorCallback>
}
 80012bc:	bd10      	pop	{r4, pc}

080012be <HAL_UARTEx_RxEventCallback>:
}
 80012be:	4770      	bx	lr

080012c0 <HAL_UART_IRQHandler>:
{
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80012c4:	6802      	ldr	r2, [r0, #0]
 80012c6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80012c8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80012ca:	6896      	ldr	r6, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80012cc:	49ae      	ldr	r1, [pc, #696]	; (8001588 <HAL_UART_IRQHandler+0x2c8>)
 80012ce:	001d      	movs	r5, r3
 80012d0:	400d      	ands	r5, r1
  if (errorflags == 0U)
 80012d2:	420b      	tst	r3, r1
 80012d4:	d103      	bne.n	80012de <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80012d6:	0699      	lsls	r1, r3, #26
 80012d8:	d501      	bpl.n	80012de <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80012da:	0681      	lsls	r1, r0, #26
 80012dc:	d418      	bmi.n	8001310 <HAL_UART_IRQHandler+0x50>
  if ((errorflags != 0U)
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_UART_IRQHandler+0x32>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80012e2:	2101      	movs	r1, #1
 80012e4:	000d      	movs	r5, r1
 80012e6:	4035      	ands	r5, r6
 80012e8:	4231      	tst	r1, r6
 80012ea:	d117      	bne.n	800131c <HAL_UART_IRQHandler+0x5c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80012ec:	49a7      	ldr	r1, [pc, #668]	; (800158c <HAL_UART_IRQHandler+0x2cc>)
 80012ee:	4208      	tst	r0, r1
 80012f0:	d114      	bne.n	800131c <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80012f2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80012f4:	2901      	cmp	r1, #1
 80012f6:	d100      	bne.n	80012fa <HAL_UART_IRQHandler+0x3a>
 80012f8:	e093      	b.n	8001422 <HAL_UART_IRQHandler+0x162>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80012fa:	061a      	lsls	r2, r3, #24
 80012fc:	d502      	bpl.n	8001304 <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80012fe:	0602      	lsls	r2, r0, #24
 8001300:	d500      	bpl.n	8001304 <HAL_UART_IRQHandler+0x44>
 8001302:	e135      	b.n	8001570 <HAL_UART_IRQHandler+0x2b0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001304:	065b      	lsls	r3, r3, #25
 8001306:	d502      	bpl.n	800130e <HAL_UART_IRQHandler+0x4e>
 8001308:	0643      	lsls	r3, r0, #25
 800130a:	d500      	bpl.n	800130e <HAL_UART_IRQHandler+0x4e>
 800130c:	e137      	b.n	800157e <HAL_UART_IRQHandler+0x2be>
}
 800130e:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8001310:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0fb      	beq.n	800130e <HAL_UART_IRQHandler+0x4e>
        huart->RxISR(huart);
 8001316:	0020      	movs	r0, r4
 8001318:	4798      	blx	r3
      return;
 800131a:	e7f8      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800131c:	07d9      	lsls	r1, r3, #31
 800131e:	d507      	bpl.n	8001330 <HAL_UART_IRQHandler+0x70>
 8001320:	05c1      	lsls	r1, r0, #23
 8001322:	d505      	bpl.n	8001330 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001324:	2601      	movs	r6, #1
 8001326:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001328:	2184      	movs	r1, #132	; 0x84
 800132a:	5862      	ldr	r2, [r4, r1]
 800132c:	4332      	orrs	r2, r6
 800132e:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001330:	079a      	lsls	r2, r3, #30
 8001332:	d509      	bpl.n	8001348 <HAL_UART_IRQHandler+0x88>
 8001334:	2d00      	cmp	r5, #0
 8001336:	d007      	beq.n	8001348 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001338:	6822      	ldr	r2, [r4, #0]
 800133a:	2102      	movs	r1, #2
 800133c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800133e:	3182      	adds	r1, #130	; 0x82
 8001340:	5862      	ldr	r2, [r4, r1]
 8001342:	2604      	movs	r6, #4
 8001344:	4332      	orrs	r2, r6
 8001346:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001348:	075a      	lsls	r2, r3, #29
 800134a:	d509      	bpl.n	8001360 <HAL_UART_IRQHandler+0xa0>
 800134c:	2d00      	cmp	r5, #0
 800134e:	d007      	beq.n	8001360 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001350:	6822      	ldr	r2, [r4, #0]
 8001352:	2104      	movs	r1, #4
 8001354:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001356:	3180      	adds	r1, #128	; 0x80
 8001358:	5862      	ldr	r2, [r4, r1]
 800135a:	2602      	movs	r6, #2
 800135c:	4332      	orrs	r2, r6
 800135e:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001360:	071a      	lsls	r2, r3, #28
 8001362:	d50a      	bpl.n	800137a <HAL_UART_IRQHandler+0xba>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001364:	0682      	lsls	r2, r0, #26
 8001366:	d401      	bmi.n	800136c <HAL_UART_IRQHandler+0xac>
 8001368:	2d00      	cmp	r5, #0
 800136a:	d006      	beq.n	800137a <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800136c:	6822      	ldr	r2, [r4, #0]
 800136e:	2508      	movs	r5, #8
 8001370:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001372:	2184      	movs	r1, #132	; 0x84
 8001374:	5862      	ldr	r2, [r4, r1]
 8001376:	432a      	orrs	r2, r5
 8001378:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800137a:	051a      	lsls	r2, r3, #20
 800137c:	d50a      	bpl.n	8001394 <HAL_UART_IRQHandler+0xd4>
 800137e:	0142      	lsls	r2, r0, #5
 8001380:	d508      	bpl.n	8001394 <HAL_UART_IRQHandler+0xd4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001382:	6822      	ldr	r2, [r4, #0]
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0109      	lsls	r1, r1, #4
 8001388:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800138a:	2184      	movs	r1, #132	; 0x84
 800138c:	5862      	ldr	r2, [r4, r1]
 800138e:	2520      	movs	r5, #32
 8001390:	432a      	orrs	r2, r5
 8001392:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001394:	2284      	movs	r2, #132	; 0x84
 8001396:	58a2      	ldr	r2, [r4, r2]
 8001398:	2a00      	cmp	r2, #0
 800139a:	d0b8      	beq.n	800130e <HAL_UART_IRQHandler+0x4e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800139c:	069b      	lsls	r3, r3, #26
 800139e:	d506      	bpl.n	80013ae <HAL_UART_IRQHandler+0xee>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80013a0:	0683      	lsls	r3, r0, #26
 80013a2:	d504      	bpl.n	80013ae <HAL_UART_IRQHandler+0xee>
        if (huart->RxISR != NULL)
 80013a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_IRQHandler+0xee>
          huart->RxISR(huart);
 80013aa:	0020      	movs	r0, r4
 80013ac:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80013ae:	2384      	movs	r3, #132	; 0x84
 80013b0:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	065b      	lsls	r3, r3, #25
 80013b8:	d402      	bmi.n	80013c0 <HAL_UART_IRQHandler+0x100>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80013ba:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80013bc:	4213      	tst	r3, r2
 80013be:	d029      	beq.n	8001414 <HAL_UART_IRQHandler+0x154>
        UART_EndRxTransfer(huart);
 80013c0:	0020      	movs	r0, r4
 80013c2:	f7ff ff2f 	bl	8001224 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	065b      	lsls	r3, r3, #25
 80013cc:	d51e      	bpl.n	800140c <HAL_UART_IRQHandler+0x14c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013ce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013d2:	2301      	movs	r3, #1
 80013d4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80013d8:	6822      	ldr	r2, [r4, #0]
 80013da:	6893      	ldr	r3, [r2, #8]
 80013dc:	2040      	movs	r0, #64	; 0x40
 80013de:	4383      	bics	r3, r0
 80013e0:	6093      	str	r3, [r2, #8]
 80013e2:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80013e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00b      	beq.n	8001404 <HAL_UART_IRQHandler+0x144>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80013ec:	4a68      	ldr	r2, [pc, #416]	; (8001590 <HAL_UART_IRQHandler+0x2d0>)
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013f0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80013f2:	f7fe ffe4 	bl	80003be <HAL_DMA_Abort_IT>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d100      	bne.n	80013fc <HAL_UART_IRQHandler+0x13c>
 80013fa:	e788      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013fc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80013fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001400:	4798      	blx	r3
 8001402:	e784      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
            HAL_UART_ErrorCallback(huart);
 8001404:	0020      	movs	r0, r4
 8001406:	f7ff ff51 	bl	80012ac <HAL_UART_ErrorCallback>
 800140a:	e780      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
          HAL_UART_ErrorCallback(huart);
 800140c:	0020      	movs	r0, r4
 800140e:	f7ff ff4d 	bl	80012ac <HAL_UART_ErrorCallback>
 8001412:	e77c      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
        HAL_UART_ErrorCallback(huart);
 8001414:	0020      	movs	r0, r4
 8001416:	f7ff ff49 	bl	80012ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800141a:	2384      	movs	r3, #132	; 0x84
 800141c:	2200      	movs	r2, #0
 800141e:	50e2      	str	r2, [r4, r3]
    return;
 8001420:	e775      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001422:	06d9      	lsls	r1, r3, #27
 8001424:	d400      	bmi.n	8001428 <HAL_UART_IRQHandler+0x168>
 8001426:	e768      	b.n	80012fa <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001428:	06c1      	lsls	r1, r0, #27
 800142a:	d400      	bmi.n	800142e <HAL_UART_IRQHandler+0x16e>
 800142c:	e765      	b.n	80012fa <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800142e:	2310      	movs	r3, #16
 8001430:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	065b      	lsls	r3, r3, #25
 8001438:	d55f      	bpl.n	80014fa <HAL_UART_IRQHandler+0x23a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800143a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800143c:	6813      	ldr	r3, [r2, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8001442:	2b00      	cmp	r3, #0
 8001444:	d04a      	beq.n	80014dc <HAL_UART_IRQHandler+0x21c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001446:	2158      	movs	r1, #88	; 0x58
 8001448:	5a61      	ldrh	r1, [r4, r1]
 800144a:	4299      	cmp	r1, r3
 800144c:	d946      	bls.n	80014dc <HAL_UART_IRQHandler+0x21c>
        huart->RxXferCount = nb_remaining_rx_data;
 800144e:	215a      	movs	r1, #90	; 0x5a
 8001450:	5263      	strh	r3, [r4, r1]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001452:	6993      	ldr	r3, [r2, #24]
 8001454:	2b20      	cmp	r3, #32
 8001456:	d10b      	bne.n	8001470 <HAL_UART_IRQHandler+0x1b0>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001458:	2302      	movs	r3, #2
 800145a:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800145c:	3356      	adds	r3, #86	; 0x56
 800145e:	5ae1      	ldrh	r1, [r4, r3]
 8001460:	3302      	adds	r3, #2
 8001462:	5ae3      	ldrh	r3, [r4, r3]
 8001464:	1ac9      	subs	r1, r1, r3
 8001466:	b289      	uxth	r1, r1
 8001468:	0020      	movs	r0, r4
 800146a:	f7ff ff28 	bl	80012be <HAL_UARTEx_RxEventCallback>
 800146e:	e74e      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001470:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001474:	2301      	movs	r3, #1
 8001476:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800147a:	6821      	ldr	r1, [r4, #0]
 800147c:	680a      	ldr	r2, [r1, #0]
 800147e:	4d45      	ldr	r5, [pc, #276]	; (8001594 <HAL_UART_IRQHandler+0x2d4>)
 8001480:	402a      	ands	r2, r5
 8001482:	600a      	str	r2, [r1, #0]
 8001484:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001488:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800148c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001490:	6821      	ldr	r1, [r4, #0]
 8001492:	688a      	ldr	r2, [r1, #8]
 8001494:	439a      	bics	r2, r3
 8001496:	608a      	str	r2, [r1, #8]
 8001498:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800149c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014a0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014a4:	6821      	ldr	r1, [r4, #0]
 80014a6:	688a      	ldr	r2, [r1, #8]
 80014a8:	3542      	adds	r5, #66	; 0x42
 80014aa:	35ff      	adds	r5, #255	; 0xff
 80014ac:	43aa      	bics	r2, r5
 80014ae:	608a      	str	r2, [r1, #8]
 80014b0:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	2120      	movs	r1, #32
 80014b8:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014ba:	2200      	movs	r2, #0
 80014bc:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014be:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014c2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80014c6:	6822      	ldr	r2, [r4, #0]
 80014c8:	6813      	ldr	r3, [r2, #0]
 80014ca:	2010      	movs	r0, #16
 80014cc:	4383      	bics	r3, r0
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 80014d4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80014d6:	f7fe ff50 	bl	800037a <HAL_DMA_Abort>
 80014da:	e7bd      	b.n	8001458 <HAL_UART_IRQHandler+0x198>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80014dc:	2158      	movs	r1, #88	; 0x58
 80014de:	5a61      	ldrh	r1, [r4, r1]
 80014e0:	4299      	cmp	r1, r3
 80014e2:	d000      	beq.n	80014e6 <HAL_UART_IRQHandler+0x226>
 80014e4:	e713      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80014e6:	6993      	ldr	r3, [r2, #24]
 80014e8:	2b20      	cmp	r3, #32
 80014ea:	d000      	beq.n	80014ee <HAL_UART_IRQHandler+0x22e>
 80014ec:	e70f      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80014ee:	3b1e      	subs	r3, #30
 80014f0:	6663      	str	r3, [r4, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80014f2:	0020      	movs	r0, r4
 80014f4:	f7ff fee3 	bl	80012be <HAL_UARTEx_RxEventCallback>
      return;
 80014f8:	e709      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80014fa:	2358      	movs	r3, #88	; 0x58
 80014fc:	5ae1      	ldrh	r1, [r4, r3]
 80014fe:	3302      	adds	r3, #2
 8001500:	5ae2      	ldrh	r2, [r4, r3]
 8001502:	1a89      	subs	r1, r1, r2
 8001504:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8001506:	5ae3      	ldrh	r3, [r4, r3]
 8001508:	b29b      	uxth	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d100      	bne.n	8001510 <HAL_UART_IRQHandler+0x250>
 800150e:	e6fe      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
          && (nb_rx_data > 0U))
 8001510:	2900      	cmp	r1, #0
 8001512:	d100      	bne.n	8001516 <HAL_UART_IRQHandler+0x256>
 8001514:	e6fb      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001516:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800151a:	2301      	movs	r3, #1
 800151c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001520:	6820      	ldr	r0, [r4, #0]
 8001522:	6802      	ldr	r2, [r0, #0]
 8001524:	4e1c      	ldr	r6, [pc, #112]	; (8001598 <HAL_UART_IRQHandler+0x2d8>)
 8001526:	4032      	ands	r2, r6
 8001528:	6002      	str	r2, [r0, #0]
 800152a:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800152e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001532:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001536:	6820      	ldr	r0, [r4, #0]
 8001538:	6882      	ldr	r2, [r0, #8]
 800153a:	439a      	bics	r2, r3
 800153c:	6082      	str	r2, [r0, #8]
 800153e:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	2020      	movs	r0, #32
 8001546:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001548:	2200      	movs	r2, #0
 800154a:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 800154c:	66a2      	str	r2, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800154e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001552:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001556:	6822      	ldr	r2, [r4, #0]
 8001558:	6813      	ldr	r3, [r2, #0]
 800155a:	2510      	movs	r5, #16
 800155c:	43ab      	bics	r3, r5
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001564:	2302      	movs	r3, #2
 8001566:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001568:	0020      	movs	r0, r4
 800156a:	f7ff fea8 	bl	80012be <HAL_UARTEx_RxEventCallback>
      return;
 800156e:	e6ce      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
    if (huart->TxISR != NULL)
 8001570:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d100      	bne.n	8001578 <HAL_UART_IRQHandler+0x2b8>
 8001576:	e6ca      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
      huart->TxISR(huart);
 8001578:	0020      	movs	r0, r4
 800157a:	4798      	blx	r3
    return;
 800157c:	e6c7      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
    UART_EndTransmit_IT(huart);
 800157e:	0020      	movs	r0, r4
 8001580:	f7ff fe80 	bl	8001284 <UART_EndTransmit_IT>
    return;
 8001584:	e6c3      	b.n	800130e <HAL_UART_IRQHandler+0x4e>
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	0000080f 	.word	0x0000080f
 800158c:	04000120 	.word	0x04000120
 8001590:	080012af 	.word	0x080012af
 8001594:	fffffeff 	.word	0xfffffeff
 8001598:	fffffedf 	.word	0xfffffedf

0800159c <UART_SetConfig>:
{
 800159c:	b510      	push	{r4, lr}
 800159e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015a0:	6883      	ldr	r3, [r0, #8]
 80015a2:	6902      	ldr	r2, [r0, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	6942      	ldr	r2, [r0, #20]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	69c2      	ldr	r2, [r0, #28]
 80015ac:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015ae:	6801      	ldr	r1, [r0, #0]
 80015b0:	680a      	ldr	r2, [r1, #0]
 80015b2:	484f      	ldr	r0, [pc, #316]	; (80016f0 <UART_SetConfig+0x154>)
 80015b4:	4002      	ands	r2, r0
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015ba:	6822      	ldr	r2, [r4, #0]
 80015bc:	6853      	ldr	r3, [r2, #4]
 80015be:	494d      	ldr	r1, [pc, #308]	; (80016f4 <UART_SetConfig+0x158>)
 80015c0:	400b      	ands	r3, r1
 80015c2:	68e1      	ldr	r1, [r4, #12]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80015c8:	6a22      	ldr	r2, [r4, #32]
 80015ca:	69a3      	ldr	r3, [r4, #24]
 80015cc:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80015ce:	6821      	ldr	r1, [r4, #0]
 80015d0:	688b      	ldr	r3, [r1, #8]
 80015d2:	4849      	ldr	r0, [pc, #292]	; (80016f8 <UART_SetConfig+0x15c>)
 80015d4:	4003      	ands	r3, r0
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	4a47      	ldr	r2, [pc, #284]	; (80016fc <UART_SetConfig+0x160>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d022      	beq.n	8001628 <UART_SetConfig+0x8c>
 80015e2:	4a47      	ldr	r2, [pc, #284]	; (8001700 <UART_SetConfig+0x164>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d030      	beq.n	800164a <UART_SetConfig+0xae>
 80015e8:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ea:	69e0      	ldr	r0, [r4, #28]
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	0212      	lsls	r2, r2, #8
 80015f0:	4290      	cmp	r0, r2
 80015f2:	d034      	beq.n	800165e <UART_SetConfig+0xc2>
    switch (clocksource)
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d100      	bne.n	80015fa <UART_SetConfig+0x5e>
 80015f8:	e072      	b.n	80016e0 <UART_SetConfig+0x144>
 80015fa:	d860      	bhi.n	80016be <UART_SetConfig+0x122>
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d068      	beq.n	80016d2 <UART_SetConfig+0x136>
 8001600:	2b02      	cmp	r3, #2
 8001602:	d15a      	bne.n	80016ba <UART_SetConfig+0x11e>
 8001604:	483f      	ldr	r0, [pc, #252]	; (8001704 <UART_SetConfig+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001606:	6863      	ldr	r3, [r4, #4]
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	1818      	adds	r0, r3, r0
 800160c:	6861      	ldr	r1, [r4, #4]
 800160e:	f7fe fd85 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001612:	0002      	movs	r2, r0
 8001614:	3a10      	subs	r2, #16
 8001616:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <UART_SetConfig+0x16c>)
 8001618:	429a      	cmp	r2, r3
 800161a:	d866      	bhi.n	80016ea <UART_SetConfig+0x14e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	0400      	lsls	r0, r0, #16
 8001620:	0c00      	lsrs	r0, r0, #16
 8001622:	60d8      	str	r0, [r3, #12]
 8001624:	2000      	movs	r0, #0
 8001626:	e050      	b.n	80016ca <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001628:	4b38      	ldr	r3, [pc, #224]	; (800170c <UART_SetConfig+0x170>)
 800162a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800162c:	2303      	movs	r3, #3
 800162e:	4013      	ands	r3, r2
 8001630:	2b02      	cmp	r3, #2
 8001632:	d00c      	beq.n	800164e <UART_SetConfig+0xb2>
 8001634:	d805      	bhi.n	8001642 <UART_SetConfig+0xa6>
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <UART_SetConfig+0xb6>
 800163a:	2b01      	cmp	r3, #1
 800163c:	d10b      	bne.n	8001656 <UART_SetConfig+0xba>
 800163e:	3303      	adds	r3, #3
 8001640:	e7d3      	b.n	80015ea <UART_SetConfig+0x4e>
 8001642:	2b03      	cmp	r3, #3
 8001644:	d109      	bne.n	800165a <UART_SetConfig+0xbe>
 8001646:	3b01      	subs	r3, #1
 8001648:	e7cf      	b.n	80015ea <UART_SetConfig+0x4e>
 800164a:	2300      	movs	r3, #0
 800164c:	e7cd      	b.n	80015ea <UART_SetConfig+0x4e>
 800164e:	2308      	movs	r3, #8
 8001650:	e7cb      	b.n	80015ea <UART_SetConfig+0x4e>
 8001652:	2300      	movs	r3, #0
 8001654:	e7c9      	b.n	80015ea <UART_SetConfig+0x4e>
 8001656:	2310      	movs	r3, #16
 8001658:	e7c7      	b.n	80015ea <UART_SetConfig+0x4e>
 800165a:	2310      	movs	r3, #16
 800165c:	e7c5      	b.n	80015ea <UART_SetConfig+0x4e>
    switch (clocksource)
 800165e:	2b04      	cmp	r3, #4
 8001660:	d028      	beq.n	80016b4 <UART_SetConfig+0x118>
 8001662:	d81d      	bhi.n	80016a0 <UART_SetConfig+0x104>
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01f      	beq.n	80016a8 <UART_SetConfig+0x10c>
 8001668:	2b02      	cmp	r3, #2
 800166a:	d117      	bne.n	800169c <UART_SetConfig+0x100>
        pclk = (uint32_t) HSI_VALUE;
 800166c:	4825      	ldr	r0, [pc, #148]	; (8001704 <UART_SetConfig+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800166e:	0040      	lsls	r0, r0, #1
 8001670:	6863      	ldr	r3, [r4, #4]
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	18c0      	adds	r0, r0, r3
 8001676:	6861      	ldr	r1, [r4, #4]
 8001678:	f7fe fd50 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800167c:	0002      	movs	r2, r0
 800167e:	3a10      	subs	r2, #16
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <UART_SetConfig+0x16c>)
 8001682:	429a      	cmp	r2, r3
 8001684:	d82f      	bhi.n	80016e6 <UART_SetConfig+0x14a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001686:	b282      	uxth	r2, r0
 8001688:	230f      	movs	r3, #15
 800168a:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800168c:	0840      	lsrs	r0, r0, #1
 800168e:	3b08      	subs	r3, #8
 8001690:	4018      	ands	r0, r3
 8001692:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	60d8      	str	r0, [r3, #12]
 8001698:	2000      	movs	r0, #0
 800169a:	e016      	b.n	80016ca <UART_SetConfig+0x12e>
    switch (clocksource)
 800169c:	2001      	movs	r0, #1
 800169e:	e014      	b.n	80016ca <UART_SetConfig+0x12e>
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d0e4      	beq.n	800166e <UART_SetConfig+0xd2>
 80016a4:	2001      	movs	r0, #1
 80016a6:	e010      	b.n	80016ca <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80016a8:	f7ff fa92 	bl	8000bd0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d1de      	bne.n	800166e <UART_SetConfig+0xd2>
 80016b0:	2000      	movs	r0, #0
 80016b2:	e00a      	b.n	80016ca <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetSysClockFreq();
 80016b4:	f7ff f9c4 	bl	8000a40 <HAL_RCC_GetSysClockFreq>
        break;
 80016b8:	e7f8      	b.n	80016ac <UART_SetConfig+0x110>
    switch (clocksource)
 80016ba:	2001      	movs	r0, #1
 80016bc:	e005      	b.n	80016ca <UART_SetConfig+0x12e>
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d102      	bne.n	80016c8 <UART_SetConfig+0x12c>
        pclk = (uint32_t) LSE_VALUE;
 80016c2:	2080      	movs	r0, #128	; 0x80
 80016c4:	0200      	lsls	r0, r0, #8
 80016c6:	e79e      	b.n	8001606 <UART_SetConfig+0x6a>
    switch (clocksource)
 80016c8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80016ce:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80016d0:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 80016d2:	f7ff fa7d 	bl	8000bd0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80016d6:	2800      	cmp	r0, #0
 80016d8:	d000      	beq.n	80016dc <UART_SetConfig+0x140>
 80016da:	e794      	b.n	8001606 <UART_SetConfig+0x6a>
 80016dc:	2000      	movs	r0, #0
 80016de:	e7f4      	b.n	80016ca <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetSysClockFreq();
 80016e0:	f7ff f9ae 	bl	8000a40 <HAL_RCC_GetSysClockFreq>
        break;
 80016e4:	e7f7      	b.n	80016d6 <UART_SetConfig+0x13a>
        ret = HAL_ERROR;
 80016e6:	2001      	movs	r0, #1
 80016e8:	e7ef      	b.n	80016ca <UART_SetConfig+0x12e>
        ret = HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
 80016ec:	e7ed      	b.n	80016ca <UART_SetConfig+0x12e>
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	ffff69f3 	.word	0xffff69f3
 80016f4:	ffffcfff 	.word	0xffffcfff
 80016f8:	fffff4ff 	.word	0xfffff4ff
 80016fc:	40013800 	.word	0x40013800
 8001700:	40004400 	.word	0x40004400
 8001704:	007a1200 	.word	0x007a1200
 8001708:	0000ffef 	.word	0x0000ffef
 800170c:	40021000 	.word	0x40021000

08001710 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001710:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001712:	071b      	lsls	r3, r3, #28
 8001714:	d506      	bpl.n	8001724 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001716:	6802      	ldr	r2, [r0, #0]
 8001718:	6853      	ldr	r3, [r2, #4]
 800171a:	492c      	ldr	r1, [pc, #176]	; (80017cc <UART_AdvFeatureConfig+0xbc>)
 800171c:	400b      	ands	r3, r1
 800171e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001720:	430b      	orrs	r3, r1
 8001722:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001724:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001726:	07db      	lsls	r3, r3, #31
 8001728:	d506      	bpl.n	8001738 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800172a:	6802      	ldr	r2, [r0, #0]
 800172c:	6853      	ldr	r3, [r2, #4]
 800172e:	4928      	ldr	r1, [pc, #160]	; (80017d0 <UART_AdvFeatureConfig+0xc0>)
 8001730:	400b      	ands	r3, r1
 8001732:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001734:	430b      	orrs	r3, r1
 8001736:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001738:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800173a:	079b      	lsls	r3, r3, #30
 800173c:	d506      	bpl.n	800174c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800173e:	6802      	ldr	r2, [r0, #0]
 8001740:	6853      	ldr	r3, [r2, #4]
 8001742:	4924      	ldr	r1, [pc, #144]	; (80017d4 <UART_AdvFeatureConfig+0xc4>)
 8001744:	400b      	ands	r3, r1
 8001746:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001748:	430b      	orrs	r3, r1
 800174a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800174c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800174e:	075b      	lsls	r3, r3, #29
 8001750:	d506      	bpl.n	8001760 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001752:	6802      	ldr	r2, [r0, #0]
 8001754:	6853      	ldr	r3, [r2, #4]
 8001756:	4920      	ldr	r1, [pc, #128]	; (80017d8 <UART_AdvFeatureConfig+0xc8>)
 8001758:	400b      	ands	r3, r1
 800175a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800175c:	430b      	orrs	r3, r1
 800175e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001760:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001762:	06db      	lsls	r3, r3, #27
 8001764:	d506      	bpl.n	8001774 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001766:	6802      	ldr	r2, [r0, #0]
 8001768:	6893      	ldr	r3, [r2, #8]
 800176a:	491c      	ldr	r1, [pc, #112]	; (80017dc <UART_AdvFeatureConfig+0xcc>)
 800176c:	400b      	ands	r3, r1
 800176e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001770:	430b      	orrs	r3, r1
 8001772:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001774:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001776:	069b      	lsls	r3, r3, #26
 8001778:	d506      	bpl.n	8001788 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800177a:	6802      	ldr	r2, [r0, #0]
 800177c:	6893      	ldr	r3, [r2, #8]
 800177e:	4918      	ldr	r1, [pc, #96]	; (80017e0 <UART_AdvFeatureConfig+0xd0>)
 8001780:	400b      	ands	r3, r1
 8001782:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001784:	430b      	orrs	r3, r1
 8001786:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001788:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800178a:	065b      	lsls	r3, r3, #25
 800178c:	d50b      	bpl.n	80017a6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800178e:	6802      	ldr	r2, [r0, #0]
 8001790:	6853      	ldr	r3, [r2, #4]
 8001792:	4914      	ldr	r1, [pc, #80]	; (80017e4 <UART_AdvFeatureConfig+0xd4>)
 8001794:	400b      	ands	r3, r1
 8001796:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001798:	430b      	orrs	r3, r1
 800179a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	035b      	lsls	r3, r3, #13
 80017a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d00a      	beq.n	80017bc <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80017a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	d506      	bpl.n	80017ba <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017ac:	6802      	ldr	r2, [r0, #0]
 80017ae:	6853      	ldr	r3, [r2, #4]
 80017b0:	490d      	ldr	r1, [pc, #52]	; (80017e8 <UART_AdvFeatureConfig+0xd8>)
 80017b2:	400b      	ands	r3, r1
 80017b4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017b6:	430b      	orrs	r3, r1
 80017b8:	6053      	str	r3, [r2, #4]
}
 80017ba:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017bc:	6802      	ldr	r2, [r0, #0]
 80017be:	6853      	ldr	r3, [r2, #4]
 80017c0:	490a      	ldr	r1, [pc, #40]	; (80017ec <UART_AdvFeatureConfig+0xdc>)
 80017c2:	400b      	ands	r3, r1
 80017c4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80017c6:	430b      	orrs	r3, r1
 80017c8:	6053      	str	r3, [r2, #4]
 80017ca:	e7ec      	b.n	80017a6 <UART_AdvFeatureConfig+0x96>
 80017cc:	ffff7fff 	.word	0xffff7fff
 80017d0:	fffdffff 	.word	0xfffdffff
 80017d4:	fffeffff 	.word	0xfffeffff
 80017d8:	fffbffff 	.word	0xfffbffff
 80017dc:	ffffefff 	.word	0xffffefff
 80017e0:	ffffdfff 	.word	0xffffdfff
 80017e4:	ffefffff 	.word	0xffefffff
 80017e8:	fff7ffff 	.word	0xfff7ffff
 80017ec:	ff9fffff 	.word	0xff9fffff

080017f0 <UART_WaitOnFlagUntilTimeout>:
{
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	46ce      	mov	lr, r9
 80017f4:	4647      	mov	r7, r8
 80017f6:	b580      	push	{r7, lr}
 80017f8:	0006      	movs	r6, r0
 80017fa:	000d      	movs	r5, r1
 80017fc:	0017      	movs	r7, r2
 80017fe:	4699      	mov	r9, r3
 8001800:	9b08      	ldr	r3, [sp, #32]
 8001802:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001804:	6833      	ldr	r3, [r6, #0]
 8001806:	69dc      	ldr	r4, [r3, #28]
 8001808:	402c      	ands	r4, r5
 800180a:	1b64      	subs	r4, r4, r5
 800180c:	4263      	negs	r3, r4
 800180e:	415c      	adcs	r4, r3
 8001810:	42bc      	cmp	r4, r7
 8001812:	d133      	bne.n	800187c <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8001814:	4643      	mov	r3, r8
 8001816:	3301      	adds	r3, #1
 8001818:	d0f4      	beq.n	8001804 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800181a:	f7fe fd29 	bl	8000270 <HAL_GetTick>
 800181e:	464b      	mov	r3, r9
 8001820:	1ac0      	subs	r0, r0, r3
 8001822:	4540      	cmp	r0, r8
 8001824:	d82f      	bhi.n	8001886 <UART_WaitOnFlagUntilTimeout+0x96>
 8001826:	4643      	mov	r3, r8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d02e      	beq.n	800188a <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800182c:	6833      	ldr	r3, [r6, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	0752      	lsls	r2, r2, #29
 8001832:	d5e7      	bpl.n	8001804 <UART_WaitOnFlagUntilTimeout+0x14>
 8001834:	2d80      	cmp	r5, #128	; 0x80
 8001836:	d0e5      	beq.n	8001804 <UART_WaitOnFlagUntilTimeout+0x14>
 8001838:	2d40      	cmp	r5, #64	; 0x40
 800183a:	d0e3      	beq.n	8001804 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	0712      	lsls	r2, r2, #28
 8001840:	d410      	bmi.n	8001864 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001842:	69da      	ldr	r2, [r3, #28]
 8001844:	0512      	lsls	r2, r2, #20
 8001846:	d5dd      	bpl.n	8001804 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800184e:	0030      	movs	r0, r6
 8001850:	f7ff fce8 	bl	8001224 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001854:	2384      	movs	r3, #132	; 0x84
 8001856:	2220      	movs	r2, #32
 8001858:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 800185a:	3b0c      	subs	r3, #12
 800185c:	2200      	movs	r2, #0
 800185e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8001860:	2003      	movs	r0, #3
 8001862:	e00c      	b.n	800187e <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001864:	2408      	movs	r4, #8
 8001866:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8001868:	0030      	movs	r0, r6
 800186a:	f7ff fcdb 	bl	8001224 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800186e:	2384      	movs	r3, #132	; 0x84
 8001870:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8001872:	3b0c      	subs	r3, #12
 8001874:	2200      	movs	r2, #0
 8001876:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8001878:	2001      	movs	r0, #1
 800187a:	e000      	b.n	800187e <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 800187c:	2000      	movs	r0, #0
}
 800187e:	bcc0      	pop	{r6, r7}
 8001880:	46b9      	mov	r9, r7
 8001882:	46b0      	mov	r8, r6
 8001884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001886:	2003      	movs	r0, #3
 8001888:	e7f9      	b.n	800187e <UART_WaitOnFlagUntilTimeout+0x8e>
 800188a:	2003      	movs	r0, #3
 800188c:	e7f7      	b.n	800187e <UART_WaitOnFlagUntilTimeout+0x8e>
	...

08001890 <UART_CheckIdleState>:
{
 8001890:	b530      	push	{r4, r5, lr}
 8001892:	b083      	sub	sp, #12
 8001894:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001896:	2384      	movs	r3, #132	; 0x84
 8001898:	2200      	movs	r2, #0
 800189a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800189c:	f7fe fce8 	bl	8000270 <HAL_GetTick>
 80018a0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	071b      	lsls	r3, r3, #28
 80018a8:	d40f      	bmi.n	80018ca <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	075b      	lsls	r3, r3, #29
 80018b0:	d429      	bmi.n	8001906 <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 80018b2:	2320      	movs	r3, #32
 80018b4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018ba:	2300      	movs	r3, #0
 80018bc:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018be:	6663      	str	r3, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80018c0:	3a08      	subs	r2, #8
 80018c2:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80018c4:	2000      	movs	r0, #0
}
 80018c6:	b003      	add	sp, #12
 80018c8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <UART_CheckIdleState+0xc8>)
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	0003      	movs	r3, r0
 80018d2:	2200      	movs	r2, #0
 80018d4:	0389      	lsls	r1, r1, #14
 80018d6:	0020      	movs	r0, r4
 80018d8:	f7ff ff8a 	bl	80017f0 <UART_WaitOnFlagUntilTimeout>
 80018dc:	2800      	cmp	r0, #0
 80018de:	d0e4      	beq.n	80018aa <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018e4:	2301      	movs	r3, #1
 80018e6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80018ea:	6822      	ldr	r2, [r4, #0]
 80018ec:	6813      	ldr	r3, [r2, #0]
 80018ee:	2080      	movs	r0, #128	; 0x80
 80018f0:	4383      	bics	r3, r0
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80018f8:	2320      	movs	r3, #32
 80018fa:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80018fc:	3358      	adds	r3, #88	; 0x58
 80018fe:	2200      	movs	r2, #0
 8001900:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001902:	387d      	subs	r0, #125	; 0x7d
 8001904:	e7df      	b.n	80018c6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <UART_CheckIdleState+0xc8>)
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	002b      	movs	r3, r5
 800190e:	2200      	movs	r2, #0
 8001910:	03c9      	lsls	r1, r1, #15
 8001912:	0020      	movs	r0, r4
 8001914:	f7ff ff6c 	bl	80017f0 <UART_WaitOnFlagUntilTimeout>
 8001918:	2800      	cmp	r0, #0
 800191a:	d0ca      	beq.n	80018b2 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800191c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001920:	2201      	movs	r2, #1
 8001922:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001926:	6821      	ldr	r1, [r4, #0]
 8001928:	680b      	ldr	r3, [r1, #0]
 800192a:	4d0c      	ldr	r5, [pc, #48]	; (800195c <UART_CheckIdleState+0xcc>)
 800192c:	402b      	ands	r3, r5
 800192e:	600b      	str	r3, [r1, #0]
 8001930:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001934:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001938:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800193c:	6821      	ldr	r1, [r4, #0]
 800193e:	688b      	ldr	r3, [r1, #8]
 8001940:	4393      	bics	r3, r2
 8001942:	608b      	str	r3, [r1, #8]
 8001944:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	321f      	adds	r2, #31
 800194c:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 800194e:	3b08      	subs	r3, #8
 8001950:	2200      	movs	r2, #0
 8001952:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001954:	2003      	movs	r0, #3
 8001956:	e7b6      	b.n	80018c6 <UART_CheckIdleState+0x36>
 8001958:	01ffffff 	.word	0x01ffffff
 800195c:	fffffedf 	.word	0xfffffedf

08001960 <HAL_UART_Init>:
{
 8001960:	b510      	push	{r4, lr}
 8001962:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001964:	d02e      	beq.n	80019c4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001966:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001968:	2b00      	cmp	r3, #0
 800196a:	d021      	beq.n	80019b0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800196c:	2324      	movs	r3, #36	; 0x24
 800196e:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8001970:	6822      	ldr	r2, [r4, #0]
 8001972:	6813      	ldr	r3, [r2, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	438b      	bics	r3, r1
 8001978:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800197a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800197c:	2b00      	cmp	r3, #0
 800197e:	d11d      	bne.n	80019bc <HAL_UART_Init+0x5c>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001980:	0020      	movs	r0, r4
 8001982:	f7ff fe0b 	bl	800159c <UART_SetConfig>
 8001986:	2801      	cmp	r0, #1
 8001988:	d011      	beq.n	80019ae <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	6853      	ldr	r3, [r2, #4]
 800198e:	490e      	ldr	r1, [pc, #56]	; (80019c8 <HAL_UART_Init+0x68>)
 8001990:	400b      	ands	r3, r1
 8001992:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	6893      	ldr	r3, [r2, #8]
 8001998:	2108      	movs	r1, #8
 800199a:	438b      	bics	r3, r1
 800199c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800199e:	6822      	ldr	r2, [r4, #0]
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	3907      	subs	r1, #7
 80019a4:	430b      	orrs	r3, r1
 80019a6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80019a8:	0020      	movs	r0, r4
 80019aa:	f7ff ff71 	bl	8001890 <UART_CheckIdleState>
}
 80019ae:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80019b0:	3378      	adds	r3, #120	; 0x78
 80019b2:	2200      	movs	r2, #0
 80019b4:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80019b6:	f000 fc43 	bl	8002240 <HAL_UART_MspInit>
 80019ba:	e7d7      	b.n	800196c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80019bc:	0020      	movs	r0, r4
 80019be:	f7ff fea7 	bl	8001710 <UART_AdvFeatureConfig>
 80019c2:	e7dd      	b.n	8001980 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 80019c4:	2001      	movs	r0, #1
 80019c6:	e7f2      	b.n	80019ae <HAL_UART_Init+0x4e>
 80019c8:	fffff7ff 	.word	0xfffff7ff

080019cc <InitTIM14>:
}

void InitTIM14()
{
	// Включение тактирования TIM14
	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <InitTIM14+0x30>)
 80019ce:	69d1      	ldr	r1, [r2, #28]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	430b      	orrs	r3, r1
 80019d6:	61d3      	str	r3, [r2, #28]
	TIM14->CR1 = 0; //СЧЕТЧИК ИСПОЛЬЗУЕТСЯ КАК ПОВЫШАЮЩИЙ and ВЫРАВНИВАНИЕ ПО КРАЯМ
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <InitTIM14+0x34>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]

	// Коэффициент предделителя таймера - 48 (частота тактирования - 1 MГц)
	TIM14->PSC = 48 - 1;
 80019de:	322f      	adds	r2, #47	; 0x2f
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
	// Значение регистра автоматической перезагрузки (длительность импульса - 1 мс)
	TIM14->ARR = 1000;
 80019e2:	22fa      	movs	r2, #250	; 0xfa
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <InitTIM14+0x38>)
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	0309      	lsls	r1, r1, #12
 80019ee:	6011      	str	r1, [r2, #0]
	// Обработчик прерываний от TIM14
	NVIC_EnableIRQ(TIM14_IRQn);
	// Утановить приоритет прерываний 1
//	NVIC_SetPriority(TIM17_IRQn, 14);
	// Разрешение прерывания от TIM17
	TIM14->DIER |= TIM_DIER_UIE;
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	2101      	movs	r1, #1
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]


}
 80019f8:	4770      	bx	lr
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40002000 	.word	0x40002000
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <InitTIM15>:

void InitTIM15()
{
	// Включение тактирования TIM14
	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <InitTIM15+0x30>)
 8001a0a:	6991      	ldr	r1, [r2, #24]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	025b      	lsls	r3, r3, #9
 8001a10:	430b      	orrs	r3, r1
 8001a12:	6193      	str	r3, [r2, #24]
	TIM15->CR1 = 0; //СЧЕТЧИК ИСПОЛЬЗУЕТСЯ КАК ПОВЫШАЮЩИЙ and ВЫРАВНИВАНИЕ ПО КРАЯМ
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <InitTIM15+0x34>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

	// Коэффициент предделителя таймера - 48 (частота тактирования - 1 kГц)
	TIM15->PSC = 480 - 1;
 8001a1a:	22e0      	movs	r2, #224	; 0xe0
 8001a1c:	32ff      	adds	r2, #255	; 0xff
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
	// Значение регистра автоматической перезагрузки (длительность импульса - 500 мс)
	TIM15->ARR = 50000;
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <InitTIM15+0x38>)
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <InitTIM15+0x3c>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0349      	lsls	r1, r1, #13
 8001a2a:	6011      	str	r1, [r2, #0]
	// Обработчик прерываний от TIM15
	NVIC_EnableIRQ(TIM15_IRQn);

	// Разрешение прерывания от TIM15
	TIM15->DIER |= TIM_DIER_UIE;
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	2101      	movs	r1, #1
 8001a30:	430a      	orrs	r2, r1
 8001a32:	60da      	str	r2, [r3, #12]
}
 8001a34:	4770      	bx	lr
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40014000 	.word	0x40014000
 8001a40:	0000c350 	.word	0x0000c350
 8001a44:	e000e100 	.word	0xe000e100

08001a48 <MX_GPIO_Init>:
  }

}

static void MX_GPIO_Init(void)
{
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a4c:	4a46      	ldr	r2, [pc, #280]	; (8001b68 <MX_GPIO_Init+0x120>)
 8001a4e:	6951      	ldr	r1, [r2, #20]
 8001a50:	2080      	movs	r0, #128	; 0x80
 8001a52:	03c0      	lsls	r0, r0, #15
 8001a54:	4301      	orrs	r1, r0
 8001a56:	6151      	str	r1, [r2, #20]
 8001a58:	6953      	ldr	r3, [r2, #20]
 8001a5a:	4003      	ands	r3, r0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	6951      	ldr	r1, [r2, #20]
 8001a62:	2080      	movs	r0, #128	; 0x80
 8001a64:	0280      	lsls	r0, r0, #10
 8001a66:	4301      	orrs	r1, r0
 8001a68:	6151      	str	r1, [r2, #20]
 8001a6a:	6953      	ldr	r3, [r2, #20]
 8001a6c:	4003      	ands	r3, r0
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	6953      	ldr	r3, [r2, #20]
 8001a74:	2080      	movs	r0, #128	; 0x80
 8001a76:	02c0      	lsls	r0, r0, #11
 8001a78:	4303      	orrs	r3, r0
 8001a7a:	6153      	str	r3, [r2, #20]
 8001a7c:	6953      	ldr	r3, [r2, #20]
 8001a7e:	4003      	ands	r3, r0
 8001a80:	9302      	str	r3, [sp, #8]
 8001a82:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a84:	6951      	ldr	r1, [r2, #20]
 8001a86:	2480      	movs	r4, #128	; 0x80
 8001a88:	0324      	lsls	r4, r4, #12
 8001a8a:	4321      	orrs	r1, r4
 8001a8c:	6151      	str	r1, [r2, #20]
 8001a8e:	6953      	ldr	r3, [r2, #20]
 8001a90:	4023      	ands	r3, r4
 8001a92:	9303      	str	r3, [sp, #12]
 8001a94:	9b03      	ldr	r3, [sp, #12]

  //DE-RE:
  GPIOA->MODER |= 0b01<<GPIO_MODER_MODER0;//OUTPUT MODE
 8001a96:	2390      	movs	r3, #144	; 0x90
 8001a98:	05db      	lsls	r3, r3, #23
 8001a9a:	6819      	ldr	r1, [r3, #0]
 8001a9c:	2408      	movs	r4, #8
 8001a9e:	4321      	orrs	r1, r4
 8001aa0:	6019      	str	r1, [r3, #0]
  GPIOA->OTYPER |= 0b01<<GPIO_OTYPER_OT_0;//OPEN-DRAIN
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	3c06      	subs	r4, #6
 8001aa6:	4321      	orrs	r1, r4
 8001aa8:	6059      	str	r1, [r3, #4]
  GPIOA->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR0_Pos;//HIGH SPEED
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	3401      	adds	r4, #1
 8001aae:	4321      	orrs	r1, r4
 8001ab0:	6099      	str	r1, [r3, #8]

  //LED G:
  GPIOC->MODER = 10;
 8001ab2:	492e      	ldr	r1, [pc, #184]	; (8001b6c <MX_GPIO_Init+0x124>)
 8001ab4:	3407      	adds	r4, #7
 8001ab6:	600c      	str	r4, [r1, #0]
  GPIOC->MODER |= 0b01<<GPIO_MODER_MODER13_Pos; //OUTPUT MODE
 8001ab8:	680d      	ldr	r5, [r1, #0]
 8001aba:	2480      	movs	r4, #128	; 0x80
 8001abc:	04e4      	lsls	r4, r4, #19
 8001abe:	432c      	orrs	r4, r5
 8001ac0:	600c      	str	r4, [r1, #0]
  GPIOC->OTYPER &= ~GPIO_OTYPER_OT_13;//PUSH-PULL
 8001ac2:	684c      	ldr	r4, [r1, #4]
 8001ac4:	4d2a      	ldr	r5, [pc, #168]	; (8001b70 <MX_GPIO_Init+0x128>)
 8001ac6:	402c      	ands	r4, r5
 8001ac8:	604c      	str	r4, [r1, #4]
  GPIOC->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR13_Pos;//HIGH SPEED
 8001aca:	688d      	ldr	r5, [r1, #8]
 8001acc:	24c0      	movs	r4, #192	; 0xc0
 8001ace:	0524      	lsls	r4, r4, #20
 8001ad0:	432c      	orrs	r4, r5
 8001ad2:	608c      	str	r4, [r1, #8]
  GPIOC->PUPDR |= 0b10<<GPIO_PUPDR_PUPDR13_Pos; //PULL DOWN
 8001ad4:	68cd      	ldr	r5, [r1, #12]
 8001ad6:	2480      	movs	r4, #128	; 0x80
 8001ad8:	0524      	lsls	r4, r4, #20
 8001ada:	432c      	orrs	r4, r5
 8001adc:	60cc      	str	r4, [r1, #12]

  //TER:
  GPIOA->MODER |= 0b01<<GPIO_MODER_MODER12_Pos;//OUTPUT MODE
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	2580      	movs	r5, #128	; 0x80
 8001ae2:	046d      	lsls	r5, r5, #17
 8001ae4:	4329      	orrs	r1, r5
 8001ae6:	6019      	str	r1, [r3, #0]
  GPIOA->OTYPER |= GPIO_OTYPER_OT_12;//OPEN-DRAIN
 8001ae8:	6859      	ldr	r1, [r3, #4]
 8001aea:	2480      	movs	r4, #128	; 0x80
 8001aec:	0164      	lsls	r4, r4, #5
 8001aee:	4321      	orrs	r1, r4
 8001af0:	6059      	str	r1, [r3, #4]
  GPIOA->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR12_Pos;//HIGH SPEED
 8001af2:	689e      	ldr	r6, [r3, #8]
 8001af4:	21c0      	movs	r1, #192	; 0xc0
 8001af6:	0489      	lsls	r1, r1, #18
 8001af8:	430e      	orrs	r6, r1
 8001afa:	609e      	str	r6, [r3, #8]

  //REL:
  GPIOB->MODER |= 0b01<<GPIO_MODER_MODER12_Pos;//OUTPUT MODE
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <MX_GPIO_Init+0x12c>)
 8001afe:	681e      	ldr	r6, [r3, #0]
 8001b00:	4335      	orrs	r5, r6
 8001b02:	601d      	str	r5, [r3, #0]
  GPIOB->OTYPER |= GPIO_OTYPER_OT_12;//OPEN-DRAIN
 8001b04:	685d      	ldr	r5, [r3, #4]
 8001b06:	432c      	orrs	r4, r5
 8001b08:	605c      	str	r4, [r3, #4]
  GPIOB->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR12_Pos;//HIGH SPEED
 8001b0a:	689c      	ldr	r4, [r3, #8]
 8001b0c:	4321      	orrs	r1, r4
 8001b0e:	6099      	str	r1, [r3, #8]

  /*EXTI PB2 и PB8*/
  GPIOB->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER8);
 8001b10:	6819      	ldr	r1, [r3, #0]
 8001b12:	4c19      	ldr	r4, [pc, #100]	; (8001b78 <MX_GPIO_Init+0x130>)
 8001b14:	4021      	ands	r1, r4
 8001b16:	6019      	str	r1, [r3, #0]
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001b18:	6994      	ldr	r4, [r2, #24]
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	432c      	orrs	r4, r5
 8001b1e:	6194      	str	r4, [r2, #24]
  SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PB;
 8001b20:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <MX_GPIO_Init+0x134>)
 8001b22:	6891      	ldr	r1, [r2, #8]
 8001b24:	2480      	movs	r4, #128	; 0x80
 8001b26:	0064      	lsls	r4, r4, #1
 8001b28:	430c      	orrs	r4, r1
 8001b2a:	6094      	str	r4, [r2, #8]
  SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI8_PB;
 8001b2c:	6911      	ldr	r1, [r2, #16]
 8001b2e:	4329      	orrs	r1, r5
 8001b30:	6111      	str	r1, [r2, #16]
  EXTI->IMR = 0b100000100;// Настройка битов маски
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <MX_GPIO_Init+0x138>)
 8001b34:	2182      	movs	r1, #130	; 0x82
 8001b36:	0049      	lsls	r1, r1, #1
 8001b38:	6011      	str	r1, [r2, #0]
  EXTI->RTSR = 0b100000100;// Срабатывание по переднему фронту
 8001b3a:	6091      	str	r1, [r2, #8]
  EXTI->FTSR = 0b100000100;// Срабатывание по заднему фронту
 8001b3c:	60d1      	str	r1, [r2, #12]
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <MX_GPIO_Init+0x13c>)
 8001b40:	39c4      	subs	r1, #196	; 0xc4
 8001b42:	6011      	str	r1, [r2, #0]
 8001b44:	3140      	adds	r1, #64	; 0x40
 8001b46:	6011      	str	r1, [r2, #0]
  // Разрешение прерываний
  NVIC_EnableIRQ(EXTI2_3_IRQn);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

  //RCLK
  GPIOB->MODER |= 0b01<<GPIO_MODER_MODER9_Pos;//OUTPUT MODE
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4310      	orrs	r0, r2
 8001b4c:	6018      	str	r0, [r3, #0]
  GPIOB->OTYPER |= GPIO_OTYPER_OT_9;//OPEN-DRAIN
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
  GPIOB->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR9_Pos;//HIGH SPEED
 8001b58:	6899      	ldr	r1, [r3, #8]
 8001b5a:	22c0      	movs	r2, #192	; 0xc0
 8001b5c:	0312      	lsls	r2, r2, #12
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]
}
 8001b62:	b004      	add	sp, #16
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48000800 	.word	0x48000800
 8001b70:	ffffdfff 	.word	0xffffdfff
 8001b74:	48000400 	.word	0x48000400
 8001b78:	fffcffcf 	.word	0xfffcffcf
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40010400 	.word	0x40010400
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //Обработчик прерываний EXTI
{
	if((EXTI->PR & EXTI_PR_PR2) > 0)
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	075b      	lsls	r3, r3, #29
 8001b8e:	d511      	bpl.n	8001bb4 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		EXTI->PR |= EXTI_PR_PR2;
 8001b90:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001b92:	6953      	ldr	r3, [r2, #20]
 8001b94:	2104      	movs	r1, #4
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6153      	str	r3, [r2, #20]
		if(!ClickFlag_PB2)
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d120      	bne.n	8001be4 <HAL_GPIO_EXTI_Callback+0x5c>
		{
			ClickFlag_PB2=1;
 8001ba2:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001ba4:	3903      	subs	r1, #3
 8001ba6:	7019      	strb	r1, [r3, #0]
			TimerCounterTIM14=0;
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
			TIM14->CR1 |= TIM_CR1_CEN;//Включение таймер
 8001bac:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_GPIO_EXTI_Callback+0xac>)
 8001bae:	6813      	ldr	r3, [r2, #0]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6013      	str	r3, [r2, #0]
			ClickFlag_PB2=0;
			TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение таймера
		}
	}

	if((EXTI->PR & EXTI_PR_PR8) > 0)
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	05db      	lsls	r3, r3, #23
 8001bba:	d512      	bpl.n	8001be2 <HAL_GPIO_EXTI_Callback+0x5a>
	{
		EXTI->PR |= EXTI_PR_PR8;
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001bbe:	6951      	ldr	r1, [r2, #20]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6153      	str	r3, [r2, #20]
		if(!ClickFlag_PB8)
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001bca:	7a5b      	ldrb	r3, [r3, #9]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d11b      	bne.n	8001c08 <HAL_GPIO_EXTI_Callback+0x80>
		{
			ClickFlag_PB8=1;
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	7259      	strb	r1, [r3, #9]
			TimerCounterTIM14=0;
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
			TIM14->CR1 |= TIM_CR1_CEN;//Включение таймер
 8001bda:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <HAL_GPIO_EXTI_Callback+0xac>)
 8001bdc:	6813      	ldr	r3, [r2, #0]
 8001bde:	430b      	orrs	r3, r1
 8001be0:	6013      	str	r3, [r2, #0]
			ClickFlag_PB8=0;
			TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение счетчика
		}
	}

}
 8001be2:	4770      	bx	lr
			if(TimerCounterTIM14<3000)
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d802      	bhi.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x6c>
				ShortPressKey_PB2=1;
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	721a      	strb	r2, [r3, #8]
			TimerCounterTIM14=0;
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
			ClickFlag_PB2=0;
 8001bfa:	701a      	strb	r2, [r3, #0]
			TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение таймера
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <HAL_GPIO_EXTI_Callback+0xac>)
 8001bfe:	6813      	ldr	r3, [r2, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	438b      	bics	r3, r1
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e7d5      	b.n	8001bb4 <HAL_GPIO_EXTI_Callback+0x2c>
			if(TimerCounterTIM14<3000)
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d802      	bhi.n	8001c18 <HAL_GPIO_EXTI_Callback+0x90>
				ShortPressKey_PB8=1;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	729a      	strb	r2, [r3, #10]
			TimerCounterTIM14=0;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	605a      	str	r2, [r3, #4]
			ClickFlag_PB8=0;
 8001c1e:	725a      	strb	r2, [r3, #9]
			TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение счетчика
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_GPIO_EXTI_Callback+0xac>)
 8001c22:	6813      	ldr	r3, [r2, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	438b      	bics	r3, r1
 8001c28:	6013      	str	r3, [r2, #0]
}
 8001c2a:	e7da      	b.n	8001be2 <HAL_GPIO_EXTI_Callback+0x5a>
 8001c2c:	40010400 	.word	0x40010400
 8001c30:	20000118 	.word	0x20000118
 8001c34:	40002000 	.word	0x40002000
 8001c38:	00000bb7 	.word	0x00000bb7

08001c3c <CallbackTIM14>:
void CallbackTIM14()
{
	TimerCounterTIM14++;
 8001c3c:	4a20      	ldr	r2, [pc, #128]	; (8001cc0 <CallbackTIM14+0x84>)
 8001c3e:	6853      	ldr	r3, [r2, #4]
 8001c40:	3301      	adds	r3, #1
 8001c42:	6053      	str	r3, [r2, #4]
	if(TimerCounterTIM14>=3000 && ClickFlag_PB8==1 && ClickFlag_PB2==0)
 8001c44:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <CallbackTIM14+0x88>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d903      	bls.n	8001c52 <CallbackTIM14+0x16>
 8001c4a:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <CallbackTIM14+0x84>)
 8001c4c:	7a52      	ldrb	r2, [r2, #9]
 8001c4e:	2a01      	cmp	r2, #1
 8001c50:	d00e      	beq.n	8001c70 <CallbackTIM14+0x34>
		//ДЛИННОЕ НАЖАТИ
		LongPressKey_PB8=1;
		TimerCounterTIM14=0;
		TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение счетчика
	}
	else if(TimerCounterTIM14>=3000 && ClickFlag_PB2==1 && ClickFlag_PB8==0)
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <CallbackTIM14+0x88>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d903      	bls.n	8001c60 <CallbackTIM14+0x24>
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <CallbackTIM14+0x84>)
 8001c5a:	7812      	ldrb	r2, [r2, #0]
 8001c5c:	2a01      	cmp	r2, #1
 8001c5e:	d014      	beq.n	8001c8a <CallbackTIM14+0x4e>
		//ДЛИННОЕ НАЖАТИ
		LongPressKey_PB2=1;
		TimerCounterTIM14=0;
		TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение счетчика
	}
	else if(TimerCounterTIM14>=3000 && ClickFlag_PB8==1 && ClickFlag_PB2==1)
 8001c60:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <CallbackTIM14+0x88>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d903      	bls.n	8001c6e <CallbackTIM14+0x32>
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <CallbackTIM14+0x84>)
 8001c68:	7a5b      	ldrb	r3, [r3, #9]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d01a      	beq.n	8001ca4 <CallbackTIM14+0x68>
	{
		LongDoublePressKey_PB2_PB8=1;
		TimerCounterTIM14=0;
		TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение счетчика
	}
}
 8001c6e:	4770      	bx	lr
	if(TimerCounterTIM14>=3000 && ClickFlag_PB8==1 && ClickFlag_PB2==0)
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <CallbackTIM14+0x84>)
 8001c72:	7812      	ldrb	r2, [r2, #0]
 8001c74:	2a00      	cmp	r2, #0
 8001c76:	d1ec      	bne.n	8001c52 <CallbackTIM14+0x16>
		LongPressKey_PB8=1;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <CallbackTIM14+0x84>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	72d9      	strb	r1, [r3, #11]
		TimerCounterTIM14=0;
 8001c7e:	605a      	str	r2, [r3, #4]
		TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение счетчика
 8001c80:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <CallbackTIM14+0x8c>)
 8001c82:	6813      	ldr	r3, [r2, #0]
 8001c84:	438b      	bics	r3, r1
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e7f1      	b.n	8001c6e <CallbackTIM14+0x32>
	else if(TimerCounterTIM14>=3000 && ClickFlag_PB2==1 && ClickFlag_PB8==0)
 8001c8a:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <CallbackTIM14+0x84>)
 8001c8c:	7a52      	ldrb	r2, [r2, #9]
 8001c8e:	2a00      	cmp	r2, #0
 8001c90:	d1e6      	bne.n	8001c60 <CallbackTIM14+0x24>
		LongPressKey_PB2=1;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <CallbackTIM14+0x84>)
 8001c94:	2101      	movs	r1, #1
 8001c96:	7319      	strb	r1, [r3, #12]
		TimerCounterTIM14=0;
 8001c98:	605a      	str	r2, [r3, #4]
		TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение счетчика
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <CallbackTIM14+0x8c>)
 8001c9c:	6813      	ldr	r3, [r2, #0]
 8001c9e:	438b      	bics	r3, r1
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e7e4      	b.n	8001c6e <CallbackTIM14+0x32>
	else if(TimerCounterTIM14>=3000 && ClickFlag_PB8==1 && ClickFlag_PB2==1)
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <CallbackTIM14+0x84>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d1e0      	bne.n	8001c6e <CallbackTIM14+0x32>
		LongDoublePressKey_PB2_PB8=1;
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <CallbackTIM14+0x84>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	7359      	strb	r1, [r3, #13]
		TimerCounterTIM14=0;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
		TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение счетчика
 8001cb6:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <CallbackTIM14+0x8c>)
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	438b      	bics	r3, r1
 8001cbc:	6013      	str	r3, [r2, #0]
}
 8001cbe:	e7d6      	b.n	8001c6e <CallbackTIM14+0x32>
 8001cc0:	20000118 	.word	0x20000118
 8001cc4:	00000bb7 	.word	0x00000bb7
 8001cc8:	40002000 	.word	0x40002000

08001ccc <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
 8001ccc:	b510      	push	{r4, lr}
  eMBErrorCode eStatus = MB_ENOERR;
  int iRegIndex;

  if ((usAddress >= REG_ADRESS_INPUT_START) &&
 8001cce:	2900      	cmp	r1, #0
 8001cd0:	d012      	beq.n	8001cf8 <eMBRegInputCB+0x2c>
      (usAddress + usNRegs <= REG_ADRESS_INPUT_START + REG_INPUT_NUMBER_REGS))
 8001cd2:	1853      	adds	r3, r2, r1
  if ((usAddress >= REG_ADRESS_INPUT_START) &&
 8001cd4:	2b65      	cmp	r3, #101	; 0x65
 8001cd6:	dc11      	bgt.n	8001cfc <eMBRegInputCB+0x30>
  {
    iRegIndex = (int)(usAddress - usRegAdressInputStart);
 8001cd8:	3901      	subs	r1, #1

    while(usNRegs > 0)
 8001cda:	2a00      	cmp	r2, #0
 8001cdc:	d00a      	beq.n	8001cf4 <eMBRegInputCB+0x28>
    {
        *pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] >> 8);
 8001cde:	004c      	lsls	r4, r1, #1
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <eMBRegInputCB+0x34>)
 8001ce2:	5ae3      	ldrh	r3, [r4, r3]
 8001ce4:	0a1c      	lsrs	r4, r3, #8
 8001ce6:	7004      	strb	r4, [r0, #0]
        *pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 8001ce8:	7043      	strb	r3, [r0, #1]

        iRegIndex++;
 8001cea:	3101      	adds	r1, #1
        usNRegs--;
 8001cec:	3a01      	subs	r2, #1
 8001cee:	b292      	uxth	r2, r2
        *pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 8001cf0:	3002      	adds	r0, #2
 8001cf2:	e7f2      	b.n	8001cda <eMBRegInputCB+0xe>
  eMBErrorCode eStatus = MB_ENOERR;
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	e000      	b.n	8001cfa <eMBRegInputCB+0x2e>
    }
  }
  else
  {
    eStatus = MB_ENOREG;
 8001cf8:	2001      	movs	r0, #1
  }

  return eStatus;
}
 8001cfa:	bd10      	pop	{r4, pc}
    eStatus = MB_ENOREG;
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	e7fc      	b.n	8001cfa <eMBRegInputCB+0x2e>
 8001d00:	20000130 	.word	0x20000130

08001d04 <eMBRegHoldingCB>:


/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                             eMBRegisterMode eMode)
{
 8001d04:	b530      	push	{r4, r5, lr}
	eMBErrorCode eStatus = MB_ENOERR;
	int iRegIndex=0;
	if ((usAddress >= REG_ADRESS_INPUT_START) &&
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d025      	beq.n	8001d56 <eMBRegHoldingCB+0x52>
	      (usAddress + usNRegs <= REG_ADRESS_INPUT_START + REG_INPUT_NUMBER_REGS))
 8001d0a:	1854      	adds	r4, r2, r1
	if ((usAddress >= REG_ADRESS_INPUT_START) &&
 8001d0c:	2c65      	cmp	r4, #101	; 0x65
 8001d0e:	dc24      	bgt.n	8001d5a <eMBRegHoldingCB+0x56>
	  {
		if(eMode==MB_REG_READ)
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <eMBRegHoldingCB+0x18>

				iRegIndex++;
				usNRegs--;
			}
		}
		else if(eMode==MB_REG_WRITE)
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d011      	beq.n	8001d3c <eMBRegHoldingCB+0x38>
	eMBErrorCode eStatus = MB_ENOERR;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	e01d      	b.n	8001d58 <eMBRegHoldingCB+0x54>
	int iRegIndex=0;
 8001d1c:	2100      	movs	r1, #0
			while(usNRegs > 0)
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	d00a      	beq.n	8001d38 <eMBRegHoldingCB+0x34>
				*pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] >> 8);
 8001d22:	004d      	lsls	r5, r1, #1
 8001d24:	4c0e      	ldr	r4, [pc, #56]	; (8001d60 <eMBRegHoldingCB+0x5c>)
 8001d26:	5b2c      	ldrh	r4, [r5, r4]
 8001d28:	0a25      	lsrs	r5, r4, #8
 8001d2a:	7005      	strb	r5, [r0, #0]
				*pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 8001d2c:	7044      	strb	r4, [r0, #1]
				iRegIndex++;
 8001d2e:	3101      	adds	r1, #1
				usNRegs--;
 8001d30:	3a01      	subs	r2, #1
 8001d32:	b292      	uxth	r2, r2
				*pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 8001d34:	3002      	adds	r0, #2
 8001d36:	e7f2      	b.n	8001d1e <eMBRegHoldingCB+0x1a>
	eMBErrorCode eStatus = MB_ENOERR;
 8001d38:	0018      	movs	r0, r3
 8001d3a:	e00d      	b.n	8001d58 <eMBRegHoldingCB+0x54>
		{
			FlagAnalogMessageFromMaster=1;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <eMBRegHoldingCB+0x60>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	739a      	strb	r2, [r3, #14]
			/*Если выставлен флаг на запись в регистр, то pucRegBuffer хранит в себе данные о числах
			 	 записываемых в регистр
			 	 если число больше 255, то по адресу pucRegBuffer[0] записывается количественное значение*/
			usRegAnalog[usAddress-1] = pucRegBuffer[1] + 256*pucRegBuffer[0];
 8001d42:	7843      	ldrb	r3, [r0, #1]
 8001d44:	7802      	ldrb	r2, [r0, #0]
 8001d46:	3901      	subs	r1, #1
 8001d48:	0212      	lsls	r2, r2, #8
 8001d4a:	189b      	adds	r3, r3, r2
 8001d4c:	0049      	lsls	r1, r1, #1
 8001d4e:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <eMBRegHoldingCB+0x5c>)
 8001d50:	5253      	strh	r3, [r2, r1]
	eMBErrorCode eStatus = MB_ENOERR;
 8001d52:	2000      	movs	r0, #0
 8001d54:	e000      	b.n	8001d58 <eMBRegHoldingCB+0x54>
		}

	  }
	else
	{
		eStatus = MB_ENOREG;
 8001d56:	2001      	movs	r0, #1
	}

  return eStatus;
}
 8001d58:	bd30      	pop	{r4, r5, pc}
		eStatus = MB_ENOREG;
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	e7fc      	b.n	8001d58 <eMBRegHoldingCB+0x54>
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	20000130 	.word	0x20000130
 8001d64:	20000118 	.word	0x20000118

08001d68 <eMBRegCoilsCB>:
		eStatus = MB_ENOREG;
	}*/
	eStatus = MB_ENOREG;

  return eStatus;
}
 8001d68:	2001      	movs	r0, #1
 8001d6a:	4770      	bx	lr

08001d6c <eMBRegDiscreteCB>:
	{
		eStatus = MB_ENOREG;
	}*/
	eStatus = MB_ENOREG;
  return eStatus;
}
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	4770      	bx	lr

08001d70 <HAL_TIM_PeriodElapsedCallback>:
	}
}
/* USER CODE END 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b510      	push	{r4, lr}
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d72:	6802      	ldr	r2, [r0, #0]
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d000      	beq.n	8001d7c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8001d7a:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8001d7c:	f7fe fa6c 	bl	8000258 <HAL_IncTick>
}
 8001d80:	e7fb      	b.n	8001d7a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40001000 	.word	0x40001000

08001d88 <_Error_Handler>:

void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8001d88:	e7fe      	b.n	8001d88 <_Error_Handler>
	...

08001d8c <MX_SPI1_Init>:
{
 8001d8c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8001d8e:	4813      	ldr	r0, [pc, #76]	; (8001ddc <MX_SPI1_Init+0x50>)
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <MX_SPI1_Init+0x54>)
 8001d92:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d94:	2382      	movs	r3, #130	; 0x82
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da0:	23e0      	movs	r3, #224	; 0xe0
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001daa:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001db2:	3ad9      	subs	r2, #217	; 0xd9
 8001db4:	3aff      	subs	r2, #255	; 0xff
 8001db6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dba:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dbc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dbe:	3a21      	subs	r2, #33	; 0x21
 8001dc0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dc2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dc4:	3308      	adds	r3, #8
 8001dc6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dc8:	f7fe ffbc 	bl	8000d44 <HAL_SPI_Init>
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d100      	bne.n	8001dd2 <MX_SPI1_Init+0x46>
}
 8001dd0:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001dd2:	21a6      	movs	r1, #166	; 0xa6
 8001dd4:	0049      	lsls	r1, r1, #1
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <MX_SPI1_Init+0x58>)
 8001dd8:	f7ff ffd6 	bl	8001d88 <_Error_Handler>
 8001ddc:	200002e0 	.word	0x200002e0
 8001de0:	40013000 	.word	0x40013000
 8001de4:	08003344 	.word	0x08003344

08001de8 <MX_USART1_UART_Init>:
{
 8001de8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8001dea:	480d      	ldr	r0, [pc, #52]	; (8001e20 <MX_USART1_UART_Init+0x38>)
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <MX_USART1_UART_Init+0x3c>)
 8001dee:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8001df0:	2396      	movs	r3, #150	; 0x96
 8001df2:	019b      	lsls	r3, r3, #6
 8001df4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	2300      	movs	r3, #0
 8001df8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dfa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dfc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dfe:	220c      	movs	r2, #12
 8001e00:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e06:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e08:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e0a:	f7ff fda9 	bl	8001960 <HAL_UART_Init>
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d100      	bne.n	8001e14 <MX_USART1_UART_Init+0x2c>
}
 8001e12:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001e14:	2174      	movs	r1, #116	; 0x74
 8001e16:	31ff      	adds	r1, #255	; 0xff
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <MX_USART1_UART_Init+0x40>)
 8001e1a:	f7ff ffb5 	bl	8001d88 <_Error_Handler>
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	20000258 	.word	0x20000258
 8001e24:	40013800 	.word	0x40013800
 8001e28:	08003344 	.word	0x08003344

08001e2c <MX_USART2_UART_Init>:
{
 8001e2c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8001e2e:	480d      	ldr	r0, [pc, #52]	; (8001e64 <MX_USART2_UART_Init+0x38>)
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <MX_USART2_UART_Init+0x3c>)
 8001e32:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = BaudRateModBusRTU;
 8001e34:	2396      	movs	r3, #150	; 0x96
 8001e36:	019b      	lsls	r3, r3, #6
 8001e38:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e3e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e40:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e42:	220c      	movs	r2, #12
 8001e44:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e4c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4e:	f7ff fd87 	bl	8001960 <HAL_UART_Init>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d100      	bne.n	8001e58 <MX_USART2_UART_Init+0x2c>
}
 8001e56:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001e58:	21c4      	movs	r1, #196	; 0xc4
 8001e5a:	0049      	lsls	r1, r1, #1
 8001e5c:	4803      	ldr	r0, [pc, #12]	; (8001e6c <MX_USART2_UART_Init+0x40>)
 8001e5e:	f7ff ff93 	bl	8001d88 <_Error_Handler>
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	20000344 	.word	0x20000344
 8001e68:	40004400 	.word	0x40004400
 8001e6c:	08003344 	.word	0x08003344

08001e70 <MX_TIM16_Init>:
{
 8001e70:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8001e72:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <MX_TIM16_Init+0x30>)
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <MX_TIM16_Init+0x34>)
 8001e76:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 47;
 8001e78:	232f      	movs	r3, #47	; 0x2f
 8001e7a:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 50;
 8001e80:	2232      	movs	r2, #50	; 0x32
 8001e82:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e84:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e86:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e88:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e8a:	f7ff f99d 	bl	80011c8 <HAL_TIM_Base_Init>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d100      	bne.n	8001e94 <MX_TIM16_Init+0x24>
}
 8001e92:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001e94:	21af      	movs	r1, #175	; 0xaf
 8001e96:	0049      	lsls	r1, r1, #1
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <MX_TIM16_Init+0x38>)
 8001e9a:	f7ff ff75 	bl	8001d88 <_Error_Handler>
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	200003cc 	.word	0x200003cc
 8001ea4:	40014400 	.word	0x40014400
 8001ea8:	08003344 	.word	0x08003344

08001eac <SystemClock_Config>:
{
 8001eac:	b500      	push	{lr}
 8001eae:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001eb8:	320f      	adds	r2, #15
 8001eba:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ebc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001ec2:	22a0      	movs	r2, #160	; 0xa0
 8001ec4:	0392      	lsls	r2, r2, #14
 8001ec6:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001ec8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eca:	a808      	add	r0, sp, #32
 8001ecc:	f7fe fb6a 	bl	80005a4 <HAL_RCC_OscConfig>
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d128      	bne.n	8001f26 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed8:	3b05      	subs	r3, #5
 8001eda:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ee0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	a804      	add	r0, sp, #16
 8001ee6:	f7fe fdd3 	bl	8000a90 <HAL_RCC_ClockConfig>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d120      	bne.n	8001f30 <SystemClock_Config+0x84>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef6:	4668      	mov	r0, sp
 8001ef8:	f7fe fe96 	bl	8000c28 <HAL_RCCEx_PeriphCLKConfig>
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d11c      	bne.n	8001f3a <SystemClock_Config+0x8e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f00:	f7fe fe60 	bl	8000bc4 <HAL_RCC_GetHCLKFreq>
 8001f04:	21fa      	movs	r1, #250	; 0xfa
 8001f06:	0089      	lsls	r1, r1, #2
 8001f08:	f7fe f908 	bl	800011c <__udivsi3>
 8001f0c:	f7fe fa04 	bl	8000318 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f10:	2004      	movs	r0, #4
 8001f12:	f7fe fa1d 	bl	8000350 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f16:	2001      	movs	r0, #1
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4240      	negs	r0, r0
 8001f1e:	f7fe f9bf 	bl	80002a0 <HAL_NVIC_SetPriority>
}
 8001f22:	b015      	add	sp, #84	; 0x54
 8001f24:	bd00      	pop	{pc}
    _Error_Handler(__FILE__, __LINE__);
 8001f26:	2116      	movs	r1, #22
 8001f28:	31ff      	adds	r1, #255	; 0xff
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <SystemClock_Config+0x98>)
 8001f2c:	f7ff ff2c 	bl	8001d88 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001f30:	2191      	movs	r1, #145	; 0x91
 8001f32:	0049      	lsls	r1, r1, #1
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <SystemClock_Config+0x98>)
 8001f36:	f7ff ff27 	bl	8001d88 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001f3a:	212a      	movs	r1, #42	; 0x2a
 8001f3c:	31ff      	adds	r1, #255	; 0xff
 8001f3e:	4801      	ldr	r0, [pc, #4]	; (8001f44 <SystemClock_Config+0x98>)
 8001f40:	f7ff ff22 	bl	8001d88 <_Error_Handler>
 8001f44:	08003344 	.word	0x08003344

08001f48 <main>:
{
 8001f48:	b510      	push	{r4, lr}
  HAL_Init();
 8001f4a:	f7fe f975 	bl	8000238 <HAL_Init>
  SystemClock_Config();
 8001f4e:	f7ff ffad 	bl	8001eac <SystemClock_Config>
  MX_GPIO_Init();
 8001f52:	f7ff fd79 	bl	8001a48 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001f56:	f7ff ff19 	bl	8001d8c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001f5a:	f7ff ff45 	bl	8001de8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f5e:	f7ff ff65 	bl	8001e2c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001f62:	f7ff ff85 	bl	8001e70 <MX_TIM16_Init>
  InitTIM14();
 8001f66:	f7ff fd31 	bl	80019cc <InitTIM14>
  InitTIM15();
 8001f6a:	f7ff fd4d 	bl	8001a08 <InitTIM15>
 8001f6e:	e0c2      	b.n	80020f6 <main+0x1ae>
		  TimerCounterTIM15=0;
 8001f70:	4b71      	ldr	r3, [pc, #452]	; (8002138 <main+0x1f0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
		  HAL_Delay(1000);
 8001f76:	20fa      	movs	r0, #250	; 0xfa
 8001f78:	0080      	lsls	r0, r0, #2
 8001f7a:	f7fe f97f 	bl	800027c <HAL_Delay>
		  TIM15->CR1 |= TIM_CR1_CEN;
 8001f7e:	4a6f      	ldr	r2, [pc, #444]	; (800213c <main+0x1f4>)
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	430b      	orrs	r3, r1
 8001f86:	6013      	str	r3, [r2, #0]
		  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8001f88:	e00f      	b.n	8001faa <main+0x62>
					GlobalAdres = 99;
 8001f8a:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <main+0x1f0>)
 8001f8c:	2263      	movs	r2, #99	; 0x63
 8001f8e:	751a      	strb	r2, [r3, #20]
				sprintf(GlobalAdres_str, "%d", GlobalAdres);
 8001f90:	4c69      	ldr	r4, [pc, #420]	; (8002138 <main+0x1f0>)
 8001f92:	7d22      	ldrb	r2, [r4, #20]
 8001f94:	496a      	ldr	r1, [pc, #424]	; (8002140 <main+0x1f8>)
 8001f96:	486b      	ldr	r0, [pc, #428]	; (8002144 <main+0x1fc>)
 8001f98:	f000 fef6 	bl	8002d88 <siprintf>
				TimerCounterTIM15=0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6123      	str	r3, [r4, #16]
				ShortPressKey_PB8=0;
 8001fa0:	72a3      	strb	r3, [r4, #10]
			if(ShortPressKey_PB2)//короткое нжатие
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <main+0x1f0>)
 8001fa4:	7a1b      	ldrb	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <main+0x82>
		  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8001faa:	4b63      	ldr	r3, [pc, #396]	; (8002138 <main+0x1f0>)
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d820      	bhi.n	8001ff4 <main+0xac>
			if(ShortPressKey_PB8)//короткое нжатие
 8001fb2:	4b61      	ldr	r3, [pc, #388]	; (8002138 <main+0x1f0>)
 8001fb4:	7a9b      	ldrb	r3, [r3, #10]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f3      	beq.n	8001fa2 <main+0x5a>
				if(GlobalAdres<99)
 8001fba:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <main+0x1f0>)
 8001fbc:	7d1b      	ldrb	r3, [r3, #20]
 8001fbe:	2b62      	cmp	r3, #98	; 0x62
 8001fc0:	d8e3      	bhi.n	8001f8a <main+0x42>
					GlobalAdres++;
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4a5c      	ldr	r2, [pc, #368]	; (8002138 <main+0x1f0>)
 8001fc6:	7513      	strb	r3, [r2, #20]
 8001fc8:	e7e2      	b.n	8001f90 <main+0x48>
				if(GlobalAdres>0)
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <main+0x1f0>)
 8001fcc:	7d1b      	ldrb	r3, [r3, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00c      	beq.n	8001fec <main+0xa4>
					GlobalAdres--;
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	4a58      	ldr	r2, [pc, #352]	; (8002138 <main+0x1f0>)
 8001fd6:	7513      	strb	r3, [r2, #20]
				sprintf(GlobalAdres_str, "%d", GlobalAdres);
 8001fd8:	4c57      	ldr	r4, [pc, #348]	; (8002138 <main+0x1f0>)
 8001fda:	7d22      	ldrb	r2, [r4, #20]
 8001fdc:	4958      	ldr	r1, [pc, #352]	; (8002140 <main+0x1f8>)
 8001fde:	4859      	ldr	r0, [pc, #356]	; (8002144 <main+0x1fc>)
 8001fe0:	f000 fed2 	bl	8002d88 <siprintf>
				TimerCounterTIM15=0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	6123      	str	r3, [r4, #16]
				ShortPressKey_PB2=0;
 8001fe8:	7223      	strb	r3, [r4, #8]
 8001fea:	e7de      	b.n	8001faa <main+0x62>
					GlobalAdres = 0;
 8001fec:	4b52      	ldr	r3, [pc, #328]	; (8002138 <main+0x1f0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	751a      	strb	r2, [r3, #20]
 8001ff2:	e7f1      	b.n	8001fd8 <main+0x90>
		  TIM15->CR1 &= ~TIM_CR1_CEN;//выключаем таймер мигания
 8001ff4:	4a51      	ldr	r2, [pc, #324]	; (800213c <main+0x1f4>)
 8001ff6:	6813      	ldr	r3, [r2, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	438b      	bics	r3, r1
 8001ffc:	6013      	str	r3, [r2, #0]
		  GPIOC->BSRR &= ~GPIO_BSRR_BR_13;
 8001ffe:	4a52      	ldr	r2, [pc, #328]	; (8002148 <main+0x200>)
 8002000:	6993      	ldr	r3, [r2, #24]
 8002002:	4952      	ldr	r1, [pc, #328]	; (800214c <main+0x204>)
 8002004:	400b      	ands	r3, r1
 8002006:	6193      	str	r3, [r2, #24]
		  LongPressKey_PB8=0;
 8002008:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <main+0x1f0>)
 800200a:	2200      	movs	r2, #0
 800200c:	72da      	strb	r2, [r3, #11]
 800200e:	e077      	b.n	8002100 <main+0x1b8>
		  TimerCounterTIM15=0;
 8002010:	4b49      	ldr	r3, [pc, #292]	; (8002138 <main+0x1f0>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
		  HAL_Delay(1000);
 8002016:	20fa      	movs	r0, #250	; 0xfa
 8002018:	0080      	lsls	r0, r0, #2
 800201a:	f7fe f92f 	bl	800027c <HAL_Delay>
		  TIM15->CR1 |= TIM_CR1_CEN;
 800201e:	4a47      	ldr	r2, [pc, #284]	; (800213c <main+0x1f4>)
 8002020:	6813      	ldr	r3, [r2, #0]
 8002022:	2101      	movs	r1, #1
 8002024:	430b      	orrs	r3, r1
 8002026:	6013      	str	r3, [r2, #0]
		  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8002028:	e00a      	b.n	8002040 <main+0xf8>
					Sensitivity++;
 800202a:	3301      	adds	r3, #1
 800202c:	4a42      	ldr	r2, [pc, #264]	; (8002138 <main+0x1f0>)
 800202e:	7553      	strb	r3, [r2, #21]
				TimerCounterTIM15=0;
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <main+0x1f0>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
				ShortPressKey_PB8=0;
 8002036:	729a      	strb	r2, [r3, #10]
			  if(ShortPressKey_PB2)//короткое нжатие
 8002038:	4b3f      	ldr	r3, [pc, #252]	; (8002138 <main+0x1f0>)
 800203a:	7a1b      	ldrb	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10f      	bne.n	8002060 <main+0x118>
		  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8002040:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <main+0x1f0>)
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	2b06      	cmp	r3, #6
 8002046:	d81b      	bhi.n	8002080 <main+0x138>
			  if(ShortPressKey_PB8)//короткое нжатие
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <main+0x1f0>)
 800204a:	7a9b      	ldrb	r3, [r3, #10]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f3      	beq.n	8002038 <main+0xf0>
				if(Sensitivity>=3)
 8002050:	4b39      	ldr	r3, [pc, #228]	; (8002138 <main+0x1f0>)
 8002052:	7d5b      	ldrb	r3, [r3, #21]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d9e8      	bls.n	800202a <main+0xe2>
					Sensitivity = 0;
 8002058:	4b37      	ldr	r3, [pc, #220]	; (8002138 <main+0x1f0>)
 800205a:	2200      	movs	r2, #0
 800205c:	755a      	strb	r2, [r3, #21]
 800205e:	e7e7      	b.n	8002030 <main+0xe8>
				if(Sensitivity<=0)
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <main+0x1f0>)
 8002062:	7d5b      	ldrb	r3, [r3, #21]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <main+0x130>
					Sensitivity = 3;
 8002068:	4b33      	ldr	r3, [pc, #204]	; (8002138 <main+0x1f0>)
 800206a:	2203      	movs	r2, #3
 800206c:	755a      	strb	r2, [r3, #21]
				TimerCounterTIM15=0;
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <main+0x1f0>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
				ShortPressKey_PB2=0;
 8002074:	721a      	strb	r2, [r3, #8]
 8002076:	e7e3      	b.n	8002040 <main+0xf8>
					Sensitivity--;
 8002078:	3b01      	subs	r3, #1
 800207a:	4a2f      	ldr	r2, [pc, #188]	; (8002138 <main+0x1f0>)
 800207c:	7553      	strb	r3, [r2, #21]
 800207e:	e7f6      	b.n	800206e <main+0x126>
		  TIM15->CR1 &= ~TIM_CR1_CEN;//выключаем таймер мигания
 8002080:	4a2e      	ldr	r2, [pc, #184]	; (800213c <main+0x1f4>)
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	438b      	bics	r3, r1
 8002088:	6013      	str	r3, [r2, #0]
		  GPIOC->BSRR &= ~GPIO_BSRR_BR_13;
 800208a:	4a2f      	ldr	r2, [pc, #188]	; (8002148 <main+0x200>)
 800208c:	6993      	ldr	r3, [r2, #24]
 800208e:	492f      	ldr	r1, [pc, #188]	; (800214c <main+0x204>)
 8002090:	400b      	ands	r3, r1
 8002092:	6193      	str	r3, [r2, #24]
		  LongPressKey_PB2=0;
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <main+0x1f0>)
 8002096:	2200      	movs	r2, #0
 8002098:	731a      	strb	r2, [r3, #12]
 800209a:	e035      	b.n	8002108 <main+0x1c0>
				  ModeRele = 0b111;
 800209c:	4b26      	ldr	r3, [pc, #152]	; (8002138 <main+0x1f0>)
 800209e:	2207      	movs	r2, #7
 80020a0:	759a      	strb	r2, [r3, #22]
				  sprintf(ModeRele_str, "%d", ModeRele);
 80020a2:	4828      	ldr	r0, [pc, #160]	; (8002144 <main+0x1fc>)
 80020a4:	4926      	ldr	r1, [pc, #152]	; (8002140 <main+0x1f8>)
 80020a6:	3004      	adds	r0, #4
 80020a8:	f000 fe6e 	bl	8002d88 <siprintf>
			  if(ShortPressKey_PB2)//короткое нжатие
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <main+0x1f0>)
 80020ae:	7a1b      	ldrb	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d108      	bne.n	80020c6 <main+0x17e>
		  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <main+0x1f0>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b06      	cmp	r3, #6
 80020ba:	d80d      	bhi.n	80020d8 <main+0x190>
			  if(ShortPressKey_PB8)//короткое нжатие
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <main+0x1f0>)
 80020be:	7a9b      	ldrb	r3, [r3, #10]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f3      	beq.n	80020ac <main+0x164>
 80020c4:	e7ea      	b.n	800209c <main+0x154>
				  ModeRele = 0b000;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <main+0x1f0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	759a      	strb	r2, [r3, #22]
				  sprintf(ModeRele_str, "%d", ModeRele);
 80020cc:	481d      	ldr	r0, [pc, #116]	; (8002144 <main+0x1fc>)
 80020ce:	491c      	ldr	r1, [pc, #112]	; (8002140 <main+0x1f8>)
 80020d0:	3004      	adds	r0, #4
 80020d2:	f000 fe59 	bl	8002d88 <siprintf>
 80020d6:	e7ed      	b.n	80020b4 <main+0x16c>
		  TIM15->CR1 &= ~TIM_CR1_CEN;//выключаем таймер мигания
 80020d8:	4a18      	ldr	r2, [pc, #96]	; (800213c <main+0x1f4>)
 80020da:	6813      	ldr	r3, [r2, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	438b      	bics	r3, r1
 80020e0:	6013      	str	r3, [r2, #0]
		  GPIOC->BSRR &= ~GPIO_BSRR_BR_13;
 80020e2:	4a19      	ldr	r2, [pc, #100]	; (8002148 <main+0x200>)
 80020e4:	6993      	ldr	r3, [r2, #24]
 80020e6:	4919      	ldr	r1, [pc, #100]	; (800214c <main+0x204>)
 80020e8:	400b      	ands	r3, r1
 80020ea:	6193      	str	r3, [r2, #24]
		  LongDoublePressKey_PB2_PB8=0;
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <main+0x1f0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	735a      	strb	r2, [r3, #13]
	  eMBPoll();
 80020f2:	f000 fbaf 	bl	8002854 <eMBPoll>
	  if((LongPressKey_PB8))//Сработало длинное нажатие ЭТО ДЛЯ НАСТРОЙКИ АДРЕСА
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <main+0x1f0>)
 80020f8:	7adb      	ldrb	r3, [r3, #11]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d000      	beq.n	8002100 <main+0x1b8>
 80020fe:	e737      	b.n	8001f70 <main+0x28>
	  if((LongPressKey_PB2))//Сработало длинное нажатие ЭТО ДЛЯ НАСТРОЙКИ ЧУВСТВИТЕЛЬНОСТИ
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <main+0x1f0>)
 8002102:	7b1b      	ldrb	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d183      	bne.n	8002010 <main+0xc8>
	  if(LongDoublePressKey_PB2_PB8) //сработали обе кнопки в длинную ЭТО ДЛЯ НАСТРОЙКИ ЗАЛИПАНИЯ
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <main+0x1f0>)
 800210a:	7b5b      	ldrb	r3, [r3, #13]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <main+0x1aa>
		  TimerCounterTIM15=0;
 8002110:	4c09      	ldr	r4, [pc, #36]	; (8002138 <main+0x1f0>)
 8002112:	2300      	movs	r3, #0
 8002114:	6123      	str	r3, [r4, #16]
		  HAL_Delay(1000);
 8002116:	20fa      	movs	r0, #250	; 0xfa
 8002118:	0080      	lsls	r0, r0, #2
 800211a:	f7fe f8af 	bl	800027c <HAL_Delay>
		  sprintf(ModeRele_str, "%d", ModeRele);
 800211e:	7da2      	ldrb	r2, [r4, #22]
 8002120:	4808      	ldr	r0, [pc, #32]	; (8002144 <main+0x1fc>)
 8002122:	4907      	ldr	r1, [pc, #28]	; (8002140 <main+0x1f8>)
 8002124:	3004      	adds	r0, #4
 8002126:	f000 fe2f 	bl	8002d88 <siprintf>
		  TIM15->CR1 |= TIM_CR1_CEN;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <main+0x1f4>)
 800212c:	6813      	ldr	r3, [r2, #0]
 800212e:	2101      	movs	r1, #1
 8002130:	430b      	orrs	r3, r1
 8002132:	6013      	str	r3, [r2, #0]
		  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8002134:	e7be      	b.n	80020b4 <main+0x16c>
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	20000118 	.word	0x20000118
 800213c:	40014000 	.word	0x40014000
 8002140:	08003354 	.word	0x08003354
 8002144:	2000000c 	.word	0x2000000c
 8002148:	48000800 	.word	0x48000800
 800214c:	dfffffff 	.word	0xdfffffff

08002150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002150:	b500      	push	{lr}
 8002152:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_MspInit+0x50>)
 8002156:	6991      	ldr	r1, [r2, #24]
 8002158:	2301      	movs	r3, #1
 800215a:	4319      	orrs	r1, r3
 800215c:	6191      	str	r1, [r2, #24]
 800215e:	6992      	ldr	r2, [r2, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002166:	2005      	movs	r0, #5
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	4240      	negs	r0, r0
 800216e:	f7fe f897 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002172:	2002      	movs	r0, #2
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	4240      	negs	r0, r0
 800217a:	f7fe f891 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800217e:	2001      	movs	r0, #1
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	4240      	negs	r0, r0
 8002186:	f7fe f88b 	bl	80002a0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2004      	movs	r0, #4
 8002190:	f7fe f886 	bl	80002a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002194:	2004      	movs	r0, #4
 8002196:	f7fe f8b3 	bl	8000300 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219a:	b003      	add	sp, #12
 800219c:	bd00      	pop	{pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	40021000 	.word	0x40021000

080021a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a4:	b500      	push	{lr}
 80021a6:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80021a8:	6802      	ldr	r2, [r0, #0]
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_SPI_MspInit+0x54>)
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_SPI_MspInit+0x10>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021b0:	b007      	add	sp, #28
 80021b2:	bd00      	pop	{pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_SPI_MspInit+0x58>)
 80021b6:	6991      	ldr	r1, [r2, #24]
 80021b8:	2080      	movs	r0, #128	; 0x80
 80021ba:	0140      	lsls	r0, r0, #5
 80021bc:	4301      	orrs	r1, r0
 80021be:	6191      	str	r1, [r2, #24]
 80021c0:	6993      	ldr	r3, [r2, #24]
 80021c2:	4003      	ands	r3, r0
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021c8:	23a0      	movs	r3, #160	; 0xa0
 80021ca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	3b9e      	subs	r3, #158	; 0x9e
 80021ce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d4:	2203      	movs	r2, #3
 80021d6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80021d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	2090      	movs	r0, #144	; 0x90
 80021dc:	a901      	add	r1, sp, #4
 80021de:	05c0      	lsls	r0, r0, #23
 80021e0:	f7fe f912 	bl	8000408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2100      	movs	r1, #0
 80021e8:	2019      	movs	r0, #25
 80021ea:	f7fe f859 	bl	80002a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80021ee:	2019      	movs	r0, #25
 80021f0:	f7fe f886 	bl	8000300 <HAL_NVIC_EnableIRQ>
}
 80021f4:	e7dc      	b.n	80021b0 <HAL_SPI_MspInit+0xc>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40013000 	.word	0x40013000
 80021fc:	40021000 	.word	0x40021000

08002200 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002200:	b500      	push	{lr}
 8002202:	b083      	sub	sp, #12

  if(htim_base->Instance==TIM17)
 8002204:	6802      	ldr	r2, [r0, #0]
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_TIM_Base_MspInit+0x38>)
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800220c:	b003      	add	sp, #12
 800220e:	bd00      	pop	{pc}
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002210:	4a0a      	ldr	r2, [pc, #40]	; (800223c <HAL_TIM_Base_MspInit+0x3c>)
 8002212:	6991      	ldr	r1, [r2, #24]
 8002214:	2080      	movs	r0, #128	; 0x80
 8002216:	02c0      	lsls	r0, r0, #11
 8002218:	4301      	orrs	r1, r0
 800221a:	6191      	str	r1, [r2, #24]
 800221c:	6993      	ldr	r3, [r2, #24]
 800221e:	4003      	ands	r3, r0
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	2016      	movs	r0, #22
 800222a:	f7fe f839 	bl	80002a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800222e:	2016      	movs	r0, #22
 8002230:	f7fe f866 	bl	8000300 <HAL_NVIC_EnableIRQ>
}
 8002234:	e7ea      	b.n	800220c <HAL_TIM_Base_MspInit+0xc>
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	40014800 	.word	0x40014800
 800223c:	40021000 	.word	0x40021000

08002240 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002240:	b500      	push	{lr}
 8002242:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002244:	6803      	ldr	r3, [r0, #0]
 8002246:	4a25      	ldr	r2, [pc, #148]	; (80022dc <HAL_UART_MspInit+0x9c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_UART_MspInit+0x16>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800224c:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <HAL_UART_MspInit+0xa0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d022      	beq.n	8002298 <HAL_UART_MspInit+0x58>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002252:	b009      	add	sp, #36	; 0x24
 8002254:	bd00      	pop	{pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002256:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <HAL_UART_MspInit+0xa4>)
 8002258:	6991      	ldr	r1, [r2, #24]
 800225a:	2080      	movs	r0, #128	; 0x80
 800225c:	01c0      	lsls	r0, r0, #7
 800225e:	4301      	orrs	r1, r0
 8002260:	6191      	str	r1, [r2, #24]
 8002262:	6993      	ldr	r3, [r2, #24]
 8002264:	4003      	ands	r3, r0
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800226a:	23c0      	movs	r3, #192	; 0xc0
 800226c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	3bbe      	subs	r3, #190	; 0xbe
 8002270:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002272:	3b01      	subs	r3, #1
 8002274:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002276:	3302      	adds	r3, #2
 8002278:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800227a:	2300      	movs	r3, #0
 800227c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	a903      	add	r1, sp, #12
 8002280:	4819      	ldr	r0, [pc, #100]	; (80022e8 <HAL_UART_MspInit+0xa8>)
 8002282:	f7fe f8c1 	bl	8000408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	201b      	movs	r0, #27
 800228c:	f7fe f808 	bl	80002a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002290:	201b      	movs	r0, #27
 8002292:	f7fe f835 	bl	8000300 <HAL_NVIC_EnableIRQ>
 8002296:	e7dc      	b.n	8002252 <HAL_UART_MspInit+0x12>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <HAL_UART_MspInit+0xa4>)
 800229a:	69d1      	ldr	r1, [r2, #28]
 800229c:	2080      	movs	r0, #128	; 0x80
 800229e:	0280      	lsls	r0, r0, #10
 80022a0:	4301      	orrs	r1, r0
 80022a2:	61d1      	str	r1, [r2, #28]
 80022a4:	69d3      	ldr	r3, [r2, #28]
 80022a6:	4003      	ands	r3, r0
 80022a8:	9302      	str	r3, [sp, #8]
 80022aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022ac:	230c      	movs	r3, #12
 80022ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	3b0a      	subs	r3, #10
 80022b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b4:	3b01      	subs	r3, #1
 80022b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b8:	2203      	movs	r2, #3
 80022ba:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80022bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	2090      	movs	r0, #144	; 0x90
 80022c0:	a903      	add	r1, sp, #12
 80022c2:	05c0      	lsls	r0, r0, #23
 80022c4:	f7fe f8a0 	bl	8000408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	201c      	movs	r0, #28
 80022ce:	f7fd ffe7 	bl	80002a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022d2:	201c      	movs	r0, #28
 80022d4:	f7fe f814 	bl	8000300 <HAL_NVIC_EnableIRQ>
}
 80022d8:	e7bb      	b.n	8002252 <HAL_UART_MspInit+0x12>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	40013800 	.word	0x40013800
 80022e0:	40004400 	.word	0x40004400
 80022e4:	40021000 	.word	0x40021000
 80022e8:	48000400 	.word	0x48000400

080022ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ec:	b500      	push	{lr}
 80022ee:	b087      	sub	sp, #28
 80022f0:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 80022f2:	2200      	movs	r2, #0
 80022f4:	2011      	movs	r0, #17
 80022f6:	f7fd ffd3 	bl	80002a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 80022fa:	2011      	movs	r0, #17
 80022fc:	f7fe f800 	bl	8000300 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <HAL_InitTick+0x64>)
 8002302:	69d1      	ldr	r1, [r2, #28]
 8002304:	2310      	movs	r3, #16
 8002306:	4319      	orrs	r1, r3
 8002308:	61d1      	str	r1, [r2, #28]
 800230a:	69d2      	ldr	r2, [r2, #28]
 800230c:	4013      	ands	r3, r2
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002312:	a901      	add	r1, sp, #4
 8002314:	a802      	add	r0, sp, #8
 8002316:	f7fe fc6b 	bl	8000bf0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800231a:	f7fe fc59 	bl	8000bd0 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800231e:	490d      	ldr	r1, [pc, #52]	; (8002354 <HAL_InitTick+0x68>)
 8002320:	f7fd fefc 	bl	800011c <__udivsi3>
 8002324:	1e43      	subs	r3, r0, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002326:	480c      	ldr	r0, [pc, #48]	; (8002358 <HAL_InitTick+0x6c>)
 8002328:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_InitTick+0x70>)
 800232a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800232c:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_InitTick+0x74>)
 800232e:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002330:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002336:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002338:	f7fe ff46 	bl	80011c8 <HAL_TIM_Base_Init>
 800233c:	2800      	cmp	r0, #0
 800233e:	d002      	beq.n	8002346 <HAL_InitTick+0x5a>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002340:	2001      	movs	r0, #1
}
 8002342:	b007      	add	sp, #28
 8002344:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8002346:	4804      	ldr	r0, [pc, #16]	; (8002358 <HAL_InitTick+0x6c>)
 8002348:	f7fe fe1c 	bl	8000f84 <HAL_TIM_Base_Start_IT>
 800234c:	e7f9      	b.n	8002342 <HAL_InitTick+0x56>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	40021000 	.word	0x40021000
 8002354:	000f4240 	.word	0x000f4240
 8002358:	20000414 	.word	0x20000414
 800235c:	40001000 	.word	0x40001000
 8002360:	000003e7 	.word	0x000003e7

08002364 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002364:	4770      	bx	lr

08002366 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <HardFault_Handler>

08002368 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002368:	4770      	bx	lr

0800236a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236a:	4770      	bx	lr

0800236c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800236c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 800236e:	f7fe f800 	bl	8000372 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002372:	bd10      	pop	{r4, pc}

08002374 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002374:	4770      	bx	lr
	...

08002378 <TIM6_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt.
*/
void TIM6_IRQHandler(void)
{
 8002378:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800237a:	4802      	ldr	r0, [pc, #8]	; (8002384 <TIM6_IRQHandler+0xc>)
 800237c:	f7fe fe37 	bl	8000fee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002380:	bd10      	pop	{r4, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	20000414 	.word	0x20000414

08002388 <TIM14_IRQHandler>:

void TIM14_IRQHandler(void)
{
 8002388:	b510      	push	{r4, lr}
	if (READ_BIT(TIM14->SR, TIM_SR_UIF))
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <TIM14_IRQHandler+0x1c>)
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	07db      	lsls	r3, r3, #31
 8002390:	d504      	bpl.n	800239c <TIM14_IRQHandler+0x14>
	{
		CLEAR_BIT(TIM14->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <TIM14_IRQHandler+0x1c>)
 8002394:	6913      	ldr	r3, [r2, #16]
 8002396:	2101      	movs	r1, #1
 8002398:	438b      	bics	r3, r1
 800239a:	6113      	str	r3, [r2, #16]
	}
	CallbackTIM14();
 800239c:	f7ff fc4e 	bl	8001c3c <CallbackTIM14>


}
 80023a0:	bd10      	pop	{r4, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40002000 	.word	0x40002000

080023a8 <TIM16_IRQHandler>:

void TIM16_IRQHandler(void)
{
 80023a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80023aa:	4802      	ldr	r0, [pc, #8]	; (80023b4 <TIM16_IRQHandler+0xc>)
 80023ac:	f7fe fe1f 	bl	8000fee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	200003cc 	.word	0x200003cc

080023b8 <TIM17_IRQHandler>:

void TIM17_IRQHandler(void)
{
	if (READ_BIT(TIM17->SR, TIM_SR_UIF))
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <TIM17_IRQHandler+0x20>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	07db      	lsls	r3, r3, #31
 80023be:	d504      	bpl.n	80023ca <TIM17_IRQHandler+0x12>
	{
		CLEAR_BIT(TIM17->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 80023c0:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <TIM17_IRQHandler+0x20>)
 80023c2:	6913      	ldr	r3, [r2, #16]
 80023c4:	2101      	movs	r1, #1
 80023c6:	438b      	bics	r3, r1
 80023c8:	6113      	str	r3, [r2, #16]
	}
    // PB9 = 0
    GPIOB->ODR &= ~GPIO_ODR_9;
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <TIM17_IRQHandler+0x24>)
 80023cc:	6953      	ldr	r3, [r2, #20]
 80023ce:	4904      	ldr	r1, [pc, #16]	; (80023e0 <TIM17_IRQHandler+0x28>)
 80023d0:	400b      	ands	r3, r1
 80023d2:	6153      	str	r3, [r2, #20]
}
 80023d4:	4770      	bx	lr
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	40014800 	.word	0x40014800
 80023dc:	48000400 	.word	0x48000400
 80023e0:	fffffdff 	.word	0xfffffdff

080023e4 <TIM15_IRQHandler>:

void TIM15_IRQHandler(void)
{
 80023e4:	b510      	push	{r4, lr}
	if (READ_BIT(TIM15->SR, TIM_SR_UIF))
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <TIM15_IRQHandler+0x28>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	07db      	lsls	r3, r3, #31
 80023ec:	d504      	bpl.n	80023f8 <TIM15_IRQHandler+0x14>
	{
		CLEAR_BIT(TIM15->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <TIM15_IRQHandler+0x28>)
 80023f0:	6913      	ldr	r3, [r2, #16]
 80023f2:	2101      	movs	r1, #1
 80023f4:	438b      	bics	r3, r1
 80023f6:	6113      	str	r3, [r2, #16]
	}
	TimerCounterTIM15++;
 80023f8:	4a05      	ldr	r2, [pc, #20]	; (8002410 <TIM15_IRQHandler+0x2c>)
 80023fa:	6813      	ldr	r3, [r2, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	0189      	lsls	r1, r1, #6
 8002404:	4803      	ldr	r0, [pc, #12]	; (8002414 <TIM15_IRQHandler+0x30>)
 8002406:	f7fe f8c5 	bl	8000594 <HAL_GPIO_TogglePin>

}
 800240a:	bd10      	pop	{r4, pc}
 800240c:	40014000 	.word	0x40014000
 8002410:	20000128 	.word	0x20000128
 8002414:	48000800 	.word	0x48000800

08002418 <SPI1_IRQHandler>:
/**
* @brief This function handles SPI1 global interrupt.
*/
void SPI1_IRQHandler(void)
{
 8002418:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800241a:	4802      	ldr	r0, [pc, #8]	; (8002424 <SPI1_IRQHandler+0xc>)
 800241c:	f7fe fd16 	bl	8000e4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002420:	bd10      	pop	{r4, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	200002e0 	.word	0x200002e0

08002428 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8002428:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800242a:	4802      	ldr	r0, [pc, #8]	; (8002434 <USART1_IRQHandler+0xc>)
 800242c:	f7fe ff48 	bl	80012c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002430:	bd10      	pop	{r4, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	20000258 	.word	0x20000258

08002438 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8002438:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800243a:	4802      	ldr	r0, [pc, #8]	; (8002444 <USART2_IRQHandler+0xc>)
 800243c:	f7fe ff40 	bl	80012c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002440:	bd10      	pop	{r4, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	20000344 	.word	0x20000344

08002448 <EXTI2_3_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI2_3_IRQHandler (void) //Прерывания от PB2
{
 8002448:	b510      	push	{r4, lr}
	if((EXTI->PR & EXTI_PR_PR2) > 0)
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <EXTI2_3_IRQHandler+0x14>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	075b      	lsls	r3, r3, #29
 8002450:	d400      	bmi.n	8002454 <EXTI2_3_IRQHandler+0xc>
	{
		HAL_GPIO_EXTI_Callback(GPIO_PIN_2);
	}
}
 8002452:	bd10      	pop	{r4, pc}
		HAL_GPIO_EXTI_Callback(GPIO_PIN_2);
 8002454:	2004      	movs	r0, #4
 8002456:	f7ff fb97 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
}
 800245a:	e7fa      	b.n	8002452 <EXTI2_3_IRQHandler+0xa>
 800245c:	40010400 	.word	0x40010400

08002460 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler (void) //Прерывания от PB8
{
 8002460:	b510      	push	{r4, lr}
	if((EXTI->PR & EXTI_PR_PR8) > 0)
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <EXTI4_15_IRQHandler+0x18>)
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	05db      	lsls	r3, r3, #23
 8002468:	d400      	bmi.n	800246c <EXTI4_15_IRQHandler+0xc>
	{
		HAL_GPIO_EXTI_Callback(GPIO_PIN_8);
	}

}
 800246a:	bd10      	pop	{r4, pc}
		HAL_GPIO_EXTI_Callback(GPIO_PIN_8);
 800246c:	2080      	movs	r0, #128	; 0x80
 800246e:	0040      	lsls	r0, r0, #1
 8002470:	f7ff fb8a 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
}
 8002474:	e7f9      	b.n	800246a <EXTI4_15_IRQHandler+0xa>
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	40010400 	.word	0x40010400

0800247c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	0003      	movs	r3, r0
 8002480:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002482:	880a      	ldrh	r2, [r1, #0]
 8002484:	2a05      	cmp	r2, #5
 8002486:	d001      	beq.n	800248c <eMBFuncReadCoils+0x10>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002488:	2003      	movs	r0, #3
    }
    return eStatus;
}
 800248a:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800248c:	7842      	ldrb	r2, [r0, #1]
 800248e:	0212      	lsls	r2, r2, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002490:	7881      	ldrb	r1, [r0, #2]
 8002492:	4311      	orrs	r1, r2
        usRegAddress++;
 8002494:	3101      	adds	r1, #1
 8002496:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002498:	78c2      	ldrb	r2, [r0, #3]
 800249a:	0212      	lsls	r2, r2, #8
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 800249c:	7900      	ldrb	r0, [r0, #4]
 800249e:	4302      	orrs	r2, r0
        if( ( usCoilCount >= 1 ) &&
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	b280      	uxth	r0, r0
 80024a4:	4d12      	ldr	r5, [pc, #72]	; (80024f0 <eMBFuncReadCoils+0x74>)
 80024a6:	42a8      	cmp	r0, r5
 80024a8:	d820      	bhi.n	80024ec <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 80024aa:	2000      	movs	r0, #0
 80024ac:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80024ae:	3001      	adds	r0, #1
 80024b0:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 80024b2:	8820      	ldrh	r0, [r4, #0]
 80024b4:	3001      	adds	r0, #1
 80024b6:	8020      	strh	r0, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 80024b8:	0750      	lsls	r0, r2, #29
 80024ba:	d011      	beq.n	80024e0 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80024bc:	08d5      	lsrs	r5, r2, #3
 80024be:	b2ed      	uxtb	r5, r5
 80024c0:	3501      	adds	r5, #1
 80024c2:	b2ed      	uxtb	r5, r5
            *pucFrameCur++ = ucNBytes;
 80024c4:	1c98      	adds	r0, r3, #2
 80024c6:	705d      	strb	r5, [r3, #1]
            *usLen += 1;
 80024c8:	8823      	ldrh	r3, [r4, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80024ce:	2300      	movs	r3, #0
 80024d0:	f7ff fc4a 	bl	8001d68 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d106      	bne.n	80024e6 <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 80024d8:	8823      	ldrh	r3, [r4, #0]
 80024da:	195d      	adds	r5, r3, r5
 80024dc:	8025      	strh	r5, [r4, #0]
 80024de:	e7d4      	b.n	800248a <eMBFuncReadCoils+0xe>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80024e0:	08d5      	lsrs	r5, r2, #3
 80024e2:	b2ed      	uxtb	r5, r5
 80024e4:	e7ee      	b.n	80024c4 <eMBFuncReadCoils+0x48>
                eStatus = prveMBError2Exception( eRegStatus );
 80024e6:	f000 f9a9 	bl	800283c <prveMBError2Exception>
 80024ea:	e7ce      	b.n	800248a <eMBFuncReadCoils+0xe>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80024ec:	2003      	movs	r0, #3
 80024ee:	e7cc      	b.n	800248a <eMBFuncReadCoils+0xe>
 80024f0:	000007ce 	.word	0x000007ce

080024f4 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80024f4:	b500      	push	{lr}
 80024f6:	b083      	sub	sp, #12
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80024f8:	880b      	ldrh	r3, [r1, #0]
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d002      	beq.n	8002504 <eMBFuncWriteCoil+0x10>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80024fe:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8002500:	b003      	add	sp, #12
 8002502:	bd00      	pop	{pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002504:	7843      	ldrb	r3, [r0, #1]
 8002506:	021b      	lsls	r3, r3, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002508:	7881      	ldrb	r1, [r0, #2]
 800250a:	4319      	orrs	r1, r3
        usRegAddress++;
 800250c:	3101      	adds	r1, #1
 800250e:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002510:	7903      	ldrb	r3, [r0, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d119      	bne.n	800254a <eMBFuncWriteCoil+0x56>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002516:	78c2      	ldrb	r2, [r0, #3]
 8002518:	1e53      	subs	r3, r2, #1
 800251a:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800251c:	2bfd      	cmp	r3, #253	; 0xfd
 800251e:	d916      	bls.n	800254e <eMBFuncWriteCoil+0x5a>
            ucBuf[1] = 0;
 8002520:	ab01      	add	r3, sp, #4
 8002522:	2000      	movs	r0, #0
 8002524:	7058      	strb	r0, [r3, #1]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002526:	2aff      	cmp	r2, #255	; 0xff
 8002528:	d00c      	beq.n	8002544 <eMBFuncWriteCoil+0x50>
                ucBuf[0] = 0;
 800252a:	ab01      	add	r3, sp, #4
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8002530:	2301      	movs	r3, #1
 8002532:	2201      	movs	r2, #1
 8002534:	a801      	add	r0, sp, #4
 8002536:	f7ff fc17 	bl	8001d68 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 800253a:	2800      	cmp	r0, #0
 800253c:	d0e0      	beq.n	8002500 <eMBFuncWriteCoil+0xc>
                eStatus = prveMBError2Exception( eRegStatus );
 800253e:	f000 f97d 	bl	800283c <prveMBError2Exception>
 8002542:	e7dd      	b.n	8002500 <eMBFuncWriteCoil+0xc>
                ucBuf[0] = 1;
 8002544:	3afe      	subs	r2, #254	; 0xfe
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e7f2      	b.n	8002530 <eMBFuncWriteCoil+0x3c>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800254a:	2003      	movs	r0, #3
 800254c:	e7d8      	b.n	8002500 <eMBFuncWriteCoil+0xc>
 800254e:	2003      	movs	r0, #3
 8002550:	e7d6      	b.n	8002500 <eMBFuncWriteCoil+0xc>

08002552 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002554:	000c      	movs	r4, r1
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002556:	880b      	ldrh	r3, [r1, #0]
 8002558:	2b05      	cmp	r3, #5
 800255a:	d929      	bls.n	80025b0 <eMBFuncWriteMultipleCoils+0x5e>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800255c:	7841      	ldrb	r1, [r0, #1]
 800255e:	0209      	lsls	r1, r1, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002560:	7883      	ldrb	r3, [r0, #2]
 8002562:	430b      	orrs	r3, r1
        usRegAddress++;
 8002564:	3301      	adds	r3, #1
 8002566:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002568:	78c2      	ldrb	r2, [r0, #3]
 800256a:	0212      	lsls	r2, r2, #8
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 800256c:	7903      	ldrb	r3, [r0, #4]
 800256e:	431a      	orrs	r2, r3

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8002570:	7946      	ldrb	r6, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002572:	075b      	lsls	r3, r3, #29
 8002574:	d00d      	beq.n	8002592 <eMBFuncWriteMultipleCoils+0x40>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002576:	08d3      	lsrs	r3, r2, #3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	b2db      	uxtb	r3, r3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 800257e:	1e55      	subs	r5, r2, #1
 8002580:	b2ad      	uxth	r5, r5
 8002582:	27f6      	movs	r7, #246	; 0xf6
 8002584:	00ff      	lsls	r7, r7, #3
 8002586:	42bd      	cmp	r5, r7
 8002588:	d214      	bcs.n	80025b4 <eMBFuncWriteMultipleCoils+0x62>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 800258a:	42b3      	cmp	r3, r6
 800258c:	d004      	beq.n	8002598 <eMBFuncWriteMultipleCoils+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800258e:	2003      	movs	r0, #3
 8002590:	e00f      	b.n	80025b2 <eMBFuncWriteMultipleCoils+0x60>
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002592:	08d3      	lsrs	r3, r2, #3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e7f2      	b.n	800257e <eMBFuncWriteMultipleCoils+0x2c>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002598:	3006      	adds	r0, #6
 800259a:	2301      	movs	r3, #1
 800259c:	f7ff fbe4 	bl	8001d68 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80025a0:	2800      	cmp	r0, #0
 80025a2:	d102      	bne.n	80025aa <eMBFuncWriteMultipleCoils+0x58>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80025a4:	2305      	movs	r3, #5
 80025a6:	8023      	strh	r3, [r4, #0]
 80025a8:	e003      	b.n	80025b2 <eMBFuncWriteMultipleCoils+0x60>
                eStatus = prveMBError2Exception( eRegStatus );
 80025aa:	f000 f947 	bl	800283c <prveMBError2Exception>
 80025ae:	e000      	b.n	80025b2 <eMBFuncWriteMultipleCoils+0x60>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80025b0:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80025b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80025b4:	2003      	movs	r0, #3
 80025b6:	e7fc      	b.n	80025b2 <eMBFuncWriteMultipleCoils+0x60>

080025b8 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	0003      	movs	r3, r0
 80025bc:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80025be:	880a      	ldrh	r2, [r1, #0]
 80025c0:	2a05      	cmp	r2, #5
 80025c2:	d001      	beq.n	80025c8 <eMBFuncReadDiscreteInputs+0x10>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80025c4:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80025c8:	7842      	ldrb	r2, [r0, #1]
 80025ca:	0212      	lsls	r2, r2, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80025cc:	7881      	ldrb	r1, [r0, #2]
 80025ce:	4311      	orrs	r1, r2
        usRegAddress++;
 80025d0:	3101      	adds	r1, #1
 80025d2:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80025d4:	78c2      	ldrb	r2, [r0, #3]
 80025d6:	0212      	lsls	r2, r2, #8
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80025d8:	7900      	ldrb	r0, [r0, #4]
 80025da:	4302      	orrs	r2, r0
        if( ( usDiscreteCnt >= 1 ) &&
 80025dc:	1e50      	subs	r0, r2, #1
 80025de:	b280      	uxth	r0, r0
 80025e0:	4d12      	ldr	r5, [pc, #72]	; (800262c <eMBFuncReadDiscreteInputs+0x74>)
 80025e2:	42a8      	cmp	r0, r5
 80025e4:	d81f      	bhi.n	8002626 <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 80025e6:	2000      	movs	r0, #0
 80025e8:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 80025ea:	3002      	adds	r0, #2
 80025ec:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 80025ee:	8820      	ldrh	r0, [r4, #0]
 80025f0:	3001      	adds	r0, #1
 80025f2:	8020      	strh	r0, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80025f4:	0750      	lsls	r0, r2, #29
 80025f6:	d010      	beq.n	800261a <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80025f8:	08d5      	lsrs	r5, r2, #3
 80025fa:	b2ed      	uxtb	r5, r5
 80025fc:	3501      	adds	r5, #1
 80025fe:	b2ed      	uxtb	r5, r5
            *pucFrameCur++ = ucNBytes;
 8002600:	1c98      	adds	r0, r3, #2
 8002602:	705d      	strb	r5, [r3, #1]
            *usLen += 1;
 8002604:	8823      	ldrh	r3, [r4, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 800260a:	f7ff fbaf 	bl	8001d6c <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 800260e:	2800      	cmp	r0, #0
 8002610:	d106      	bne.n	8002620 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 8002612:	8823      	ldrh	r3, [r4, #0]
 8002614:	195d      	adds	r5, r3, r5
 8002616:	8025      	strh	r5, [r4, #0]
 8002618:	e7d5      	b.n	80025c6 <eMBFuncReadDiscreteInputs+0xe>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 800261a:	08d5      	lsrs	r5, r2, #3
 800261c:	b2ed      	uxtb	r5, r5
 800261e:	e7ef      	b.n	8002600 <eMBFuncReadDiscreteInputs+0x48>
                eStatus = prveMBError2Exception( eRegStatus );
 8002620:	f000 f90c 	bl	800283c <prveMBError2Exception>
 8002624:	e7cf      	b.n	80025c6 <eMBFuncReadDiscreteInputs+0xe>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002626:	2003      	movs	r0, #3
 8002628:	e7cd      	b.n	80025c6 <eMBFuncReadDiscreteInputs+0xe>
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	000007ce 	.word	0x000007ce

08002630 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002630:	b510      	push	{r4, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002632:	880b      	ldrh	r3, [r1, #0]
 8002634:	2b05      	cmp	r3, #5
 8002636:	d001      	beq.n	800263c <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002638:	2003      	movs	r0, #3
    }
    return eStatus;
}
 800263a:	bd10      	pop	{r4, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800263c:	7843      	ldrb	r3, [r0, #1]
 800263e:	021b      	lsls	r3, r3, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002640:	7881      	ldrb	r1, [r0, #2]
 8002642:	4319      	orrs	r1, r3
        usRegAddress++;
 8002644:	3101      	adds	r1, #1
 8002646:	b289      	uxth	r1, r1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002648:	3003      	adds	r0, #3
 800264a:	2301      	movs	r3, #1
 800264c:	2201      	movs	r2, #1
 800264e:	f7ff fb59 	bl	8001d04 <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8002652:	2800      	cmp	r0, #0
 8002654:	d0f1      	beq.n	800263a <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8002656:	f000 f8f1 	bl	800283c <prveMBError2Exception>
 800265a:	e7ee      	b.n	800263a <eMBFuncWriteHoldingRegister+0xa>

0800265c <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	000c      	movs	r4, r1
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002660:	880b      	ldrh	r3, [r1, #0]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d920      	bls.n	80026a8 <eMBFuncWriteMultipleHoldingRegister+0x4c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002666:	7841      	ldrb	r1, [r0, #1]
 8002668:	0209      	lsls	r1, r1, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800266a:	7883      	ldrb	r3, [r0, #2]
 800266c:	430b      	orrs	r3, r1
        usRegAddress++;
 800266e:	3301      	adds	r3, #1
 8002670:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8002672:	78c3      	ldrb	r3, [r0, #3]
 8002674:	021b      	lsls	r3, r3, #8
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8002676:	7902      	ldrb	r2, [r0, #4]
 8002678:	431a      	orrs	r2, r3

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800267a:	7945      	ldrb	r5, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 800267c:	1e53      	subs	r3, r2, #1
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b77      	cmp	r3, #119	; 0x77
 8002682:	d813      	bhi.n	80026ac <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8002684:	0053      	lsls	r3, r2, #1
 8002686:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002688:	42ab      	cmp	r3, r5
 800268a:	d001      	beq.n	8002690 <eMBFuncWriteMultipleHoldingRegister+0x34>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800268c:	2003      	movs	r0, #3
 800268e:	e00c      	b.n	80026aa <eMBFuncWriteMultipleHoldingRegister+0x4e>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002690:	3006      	adds	r0, #6
 8002692:	2301      	movs	r3, #1
 8002694:	f7ff fb36 	bl	8001d04 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8002698:	2800      	cmp	r0, #0
 800269a:	d102      	bne.n	80026a2 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800269c:	2305      	movs	r3, #5
 800269e:	8023      	strh	r3, [r4, #0]
 80026a0:	e003      	b.n	80026aa <eMBFuncWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
 80026a2:	f000 f8cb 	bl	800283c <prveMBError2Exception>
 80026a6:	e000      	b.n	80026aa <eMBFuncWriteMultipleHoldingRegister+0x4e>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80026a8:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80026ac:	2003      	movs	r0, #3
 80026ae:	e7fc      	b.n	80026aa <eMBFuncWriteMultipleHoldingRegister+0x4e>

080026b0 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80026b4:	880b      	ldrh	r3, [r1, #0]
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d001      	beq.n	80026be <eMBFuncReadHoldingRegister+0xe>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80026ba:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80026bc:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80026be:	7841      	ldrb	r1, [r0, #1]
 80026c0:	0209      	lsls	r1, r1, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80026c2:	7883      	ldrb	r3, [r0, #2]
 80026c4:	430b      	orrs	r3, r1
        usRegAddress++;
 80026c6:	3301      	adds	r3, #1
 80026c8:	b299      	uxth	r1, r3
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80026ca:	7902      	ldrb	r2, [r0, #4]
 80026cc:	0015      	movs	r5, r2
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80026ce:	1e53      	subs	r3, r2, #1
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b7c      	cmp	r3, #124	; 0x7c
 80026d4:	d901      	bls.n	80026da <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80026d6:	2003      	movs	r0, #3
 80026d8:	e7f0      	b.n	80026bc <eMBFuncReadHoldingRegister+0xc>
            *usLen = MB_PDU_FUNC_OFF;
 80026da:	2300      	movs	r3, #0
 80026dc:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80026de:	3303      	adds	r3, #3
 80026e0:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80026e2:	8823      	ldrh	r3, [r4, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80026e8:	1c86      	adds	r6, r0, #2
 80026ea:	0052      	lsls	r2, r2, #1
 80026ec:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 80026ee:	8823      	ldrh	r3, [r4, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	8023      	strh	r3, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80026f4:	2300      	movs	r3, #0
 80026f6:	002a      	movs	r2, r5
 80026f8:	0030      	movs	r0, r6
 80026fa:	f7ff fb03 	bl	8001d04 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80026fe:	2800      	cmp	r0, #0
 8002700:	d104      	bne.n	800270c <eMBFuncReadHoldingRegister+0x5c>
                *usLen += usRegCount * 2;
 8002702:	006d      	lsls	r5, r5, #1
 8002704:	8823      	ldrh	r3, [r4, #0]
 8002706:	195d      	adds	r5, r3, r5
 8002708:	8025      	strh	r5, [r4, #0]
 800270a:	e7d7      	b.n	80026bc <eMBFuncReadHoldingRegister+0xc>
                eStatus = prveMBError2Exception( eRegStatus );
 800270c:	f000 f896 	bl	800283c <prveMBError2Exception>
 8002710:	e7d4      	b.n	80026bc <eMBFuncReadHoldingRegister+0xc>

08002712 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002714:	0004      	movs	r4, r0
 8002716:	000d      	movs	r5, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002718:	880b      	ldrh	r3, [r1, #0]
 800271a:	2b09      	cmp	r3, #9
 800271c:	d946      	bls.n	80027ac <eMBFuncReadWriteMultipleHoldingRegister+0x9a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800271e:	7843      	ldrb	r3, [r0, #1]
 8002720:	021b      	lsls	r3, r3, #8
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002722:	7881      	ldrb	r1, [r0, #2]
 8002724:	4319      	orrs	r1, r3
        usRegReadAddress++;
 8002726:	3101      	adds	r1, #1
 8002728:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800272a:	78c7      	ldrb	r7, [r0, #3]
 800272c:	023f      	lsls	r7, r7, #8
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800272e:	7903      	ldrb	r3, [r0, #4]
 8002730:	431f      	orrs	r7, r3

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8002732:	7943      	ldrb	r3, [r0, #5]
 8002734:	021b      	lsls	r3, r3, #8
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002736:	7981      	ldrb	r1, [r0, #6]
 8002738:	4319      	orrs	r1, r3
        usRegWriteAddress++;
 800273a:	3101      	adds	r1, #1
 800273c:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800273e:	79c3      	ldrb	r3, [r0, #7]
 8002740:	021b      	lsls	r3, r3, #8
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002742:	7a02      	ldrb	r2, [r0, #8]
 8002744:	431a      	orrs	r2, r3

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8002746:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002748:	1e7b      	subs	r3, r7, #1
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b7c      	cmp	r3, #124	; 0x7c
 800274e:	d82f      	bhi.n	80027b0 <eMBFuncReadWriteMultipleHoldingRegister+0x9e>
 8002750:	2a00      	cmp	r2, #0
 8002752:	d02f      	beq.n	80027b4 <eMBFuncReadWriteMultipleHoldingRegister+0xa2>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002754:	2a79      	cmp	r2, #121	; 0x79
 8002756:	d82f      	bhi.n	80027b8 <eMBFuncReadWriteMultipleHoldingRegister+0xa6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8002758:	0053      	lsls	r3, r2, #1
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800275a:	4283      	cmp	r3, r0
 800275c:	d001      	beq.n	8002762 <eMBFuncReadWriteMultipleHoldingRegister+0x50>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800275e:	2003      	movs	r0, #3
 8002760:	e025      	b.n	80027ae <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8002762:	2301      	movs	r3, #1
 8002764:	0020      	movs	r0, r4
 8002766:	300a      	adds	r0, #10
 8002768:	f7ff facc 	bl	8001d04 <eMBRegHoldingCB>
            if( eRegStatus == MB_ENOERR )
 800276c:	2800      	cmp	r0, #0
 800276e:	d004      	beq.n	800277a <eMBFuncReadWriteMultipleHoldingRegister+0x68>
            if( eRegStatus != MB_ENOERR )
 8002770:	2800      	cmp	r0, #0
 8002772:	d01c      	beq.n	80027ae <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
                eStatus = prveMBError2Exception( eRegStatus );
 8002774:	f000 f862 	bl	800283c <prveMBError2Exception>
 8002778:	e019      	b.n	80027ae <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
                *usLen = MB_PDU_FUNC_OFF;
 800277a:	2300      	movs	r3, #0
 800277c:	802b      	strh	r3, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800277e:	3317      	adds	r3, #23
 8002780:	7023      	strb	r3, [r4, #0]
                *usLen += 1;
 8002782:	882b      	ldrh	r3, [r5, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	802b      	strh	r3, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002788:	1ca0      	adds	r0, r4, #2
 800278a:	007b      	lsls	r3, r7, #1
 800278c:	7063      	strb	r3, [r4, #1]
                *usLen += 1;
 800278e:	882b      	ldrh	r3, [r5, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	802b      	strh	r3, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8002794:	2300      	movs	r3, #0
 8002796:	003a      	movs	r2, r7
 8002798:	0031      	movs	r1, r6
 800279a:	f7ff fab3 	bl	8001d04 <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 800279e:	2800      	cmp	r0, #0
 80027a0:	d1e6      	bne.n	8002770 <eMBFuncReadWriteMultipleHoldingRegister+0x5e>
                    *usLen += 2 * usRegReadCount;
 80027a2:	007f      	lsls	r7, r7, #1
 80027a4:	882b      	ldrh	r3, [r5, #0]
 80027a6:	19df      	adds	r7, r3, r7
 80027a8:	802f      	strh	r7, [r5, #0]
 80027aa:	e7e1      	b.n	8002770 <eMBFuncReadWriteMultipleHoldingRegister+0x5e>
    eMBException    eStatus = MB_EX_NONE;
 80027ac:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 80027ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80027b0:	2003      	movs	r0, #3
 80027b2:	e7fc      	b.n	80027ae <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 80027b4:	2003      	movs	r0, #3
 80027b6:	e7fa      	b.n	80027ae <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 80027b8:	2003      	movs	r0, #3
 80027ba:	e7f8      	b.n	80027ae <eMBFuncReadWriteMultipleHoldingRegister+0x9c>

080027bc <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80027c0:	880b      	ldrh	r3, [r1, #0]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d001      	beq.n	80027ca <eMBFuncReadInputRegister+0xe>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80027c6:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80027ca:	7843      	ldrb	r3, [r0, #1]
 80027cc:	021b      	lsls	r3, r3, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80027ce:	7881      	ldrb	r1, [r0, #2]
 80027d0:	4319      	orrs	r1, r3
        usRegAddress++;
 80027d2:	3101      	adds	r1, #1
 80027d4:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80027d6:	78c5      	ldrb	r5, [r0, #3]
 80027d8:	022d      	lsls	r5, r5, #8
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80027da:	7903      	ldrb	r3, [r0, #4]
 80027dc:	431d      	orrs	r5, r3
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80027de:	1e6b      	subs	r3, r5, #1
 80027e0:	b29b      	uxth	r3, r3
        if( ( usRegCount >= 1 )
 80027e2:	2b7b      	cmp	r3, #123	; 0x7b
 80027e4:	d901      	bls.n	80027ea <eMBFuncReadInputRegister+0x2e>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80027e6:	2003      	movs	r0, #3
 80027e8:	e7ee      	b.n	80027c8 <eMBFuncReadInputRegister+0xc>
            *usLen = MB_PDU_FUNC_OFF;
 80027ea:	2300      	movs	r3, #0
 80027ec:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80027ee:	3304      	adds	r3, #4
 80027f0:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80027f2:	8823      	ldrh	r3, [r4, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80027f8:	1c86      	adds	r6, r0, #2
 80027fa:	006b      	lsls	r3, r5, #1
 80027fc:	7043      	strb	r3, [r0, #1]
            *usLen += 1;
 80027fe:	8823      	ldrh	r3, [r4, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8002804:	002a      	movs	r2, r5
 8002806:	0030      	movs	r0, r6
 8002808:	f7ff fa60 	bl	8001ccc <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 800280c:	2800      	cmp	r0, #0
 800280e:	d104      	bne.n	800281a <eMBFuncReadInputRegister+0x5e>
                *usLen += usRegCount * 2;
 8002810:	006d      	lsls	r5, r5, #1
 8002812:	8823      	ldrh	r3, [r4, #0]
 8002814:	195d      	adds	r5, r3, r5
 8002816:	8025      	strh	r5, [r4, #0]
 8002818:	e7d6      	b.n	80027c8 <eMBFuncReadInputRegister+0xc>
                eStatus = prveMBError2Exception( eRegStatus );
 800281a:	f000 f80f 	bl	800283c <prveMBError2Exception>
 800281e:	e7d3      	b.n	80027c8 <eMBFuncReadInputRegister+0xc>

08002820 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	000d      	movs	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002824:	3001      	adds	r0, #1
 8002826:	4904      	ldr	r1, [pc, #16]	; (8002838 <eMBFuncReportSlaveID+0x18>)
 8002828:	8c0c      	ldrh	r4, [r1, #32]
 800282a:	0022      	movs	r2, r4
 800282c:	f000 f922 	bl	8002a74 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002830:	3401      	adds	r4, #1
 8002832:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8002834:	2000      	movs	r0, #0
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	200001f8 	.word	0x200001f8

0800283c <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 800283c:	2801      	cmp	r0, #1
 800283e:	d005      	beq.n	800284c <prveMBError2Exception+0x10>
 8002840:	2807      	cmp	r0, #7
 8002842:	d005      	beq.n	8002850 <prveMBError2Exception+0x14>
 8002844:	2800      	cmp	r0, #0
 8002846:	d000      	beq.n	800284a <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8002848:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 800284a:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800284c:	2002      	movs	r0, #2
 800284e:	e7fc      	b.n	800284a <prveMBError2Exception+0xe>
            eStatus = MB_EX_SLAVE_BUSY;
 8002850:	2006      	movs	r0, #6
 8002852:	e7fa      	b.n	800284a <prveMBError2Exception+0xe>

08002854 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8002854:	b530      	push	{r4, r5, lr}
 8002856:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8002858:	4b36      	ldr	r3, [pc, #216]	; (8002934 <eMBPoll+0xe0>)
 800285a:	781c      	ldrb	r4, [r3, #0]
 800285c:	2c00      	cmp	r4, #0
 800285e:	d162      	bne.n	8002926 <eMBPoll+0xd2>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8002860:	466b      	mov	r3, sp
 8002862:	1dd8      	adds	r0, r3, #7
 8002864:	f000 f874 	bl	8002950 <xMBPortEventGet>
 8002868:	2801      	cmp	r0, #1
 800286a:	d002      	beq.n	8002872 <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 800286c:	0020      	movs	r0, r4
 800286e:	b003      	add	sp, #12
 8002870:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 8002872:	466b      	mov	r3, sp
 8002874:	3307      	adds	r3, #7
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d00b      	beq.n	8002894 <eMBPoll+0x40>
 800287c:	2b02      	cmp	r3, #2
 800287e:	d1f5      	bne.n	800286c <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8002880:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <eMBPoll+0xe4>)
 8002882:	69d8      	ldr	r0, [r3, #28]
 8002884:	7805      	ldrb	r5, [r0, #0]
 8002886:	2221      	movs	r2, #33	; 0x21
 8002888:	549d      	strb	r5, [r3, r2]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800288a:	3201      	adds	r2, #1
 800288c:	2101      	movs	r1, #1
 800288e:	5499      	strb	r1, [r3, r2]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8002890:	2300      	movs	r3, #0
 8002892:	e018      	b.n	80028c6 <eMBPoll+0x72>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8002894:	4b28      	ldr	r3, [pc, #160]	; (8002938 <eMBPoll+0xe4>)
 8002896:	001a      	movs	r2, r3
 8002898:	3218      	adds	r2, #24
 800289a:	0019      	movs	r1, r3
 800289c:	311c      	adds	r1, #28
 800289e:	0018      	movs	r0, r3
 80028a0:	3020      	adds	r0, #32
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	4798      	blx	r3
 80028a6:	1e05      	subs	r5, r0, #0
            if( eStatus == MB_ENOERR )
 80028a8:	d1e0      	bne.n	800286c <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <eMBPoll+0xe4>)
 80028ac:	2220      	movs	r2, #32
 80028ae:	5c9a      	ldrb	r2, [r3, r2]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <eMBPoll+0x66>
 80028b6:	2a00      	cmp	r2, #0
 80028b8:	d137      	bne.n	800292a <eMBPoll+0xd6>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80028ba:	2002      	movs	r0, #2
 80028bc:	f000 f840 	bl	8002940 <xMBPortEventPost>
    return MB_ENOERR;
 80028c0:	002c      	movs	r4, r5
 80028c2:	e7d3      	b.n	800286c <eMBPoll+0x18>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80028c4:	3301      	adds	r3, #1
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	dc0f      	bgt.n	80028ea <eMBPoll+0x96>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80028ca:	00da      	lsls	r2, r3, #3
 80028cc:	491b      	ldr	r1, [pc, #108]	; (800293c <eMBPoll+0xe8>)
 80028ce:	5c52      	ldrb	r2, [r2, r1]
 80028d0:	2a00      	cmp	r2, #0
 80028d2:	d00a      	beq.n	80028ea <eMBPoll+0x96>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80028d4:	4295      	cmp	r5, r2
 80028d6:	d1f5      	bne.n	80028c4 <eMBPoll+0x70>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	18cb      	adds	r3, r1, r3
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4d16      	ldr	r5, [pc, #88]	; (8002938 <eMBPoll+0xe4>)
 80028e0:	0029      	movs	r1, r5
 80028e2:	3118      	adds	r1, #24
 80028e4:	4798      	blx	r3
 80028e6:	2322      	movs	r3, #34	; 0x22
 80028e8:	54e8      	strb	r0, [r5, r3]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80028ea:	4a13      	ldr	r2, [pc, #76]	; (8002938 <eMBPoll+0xe4>)
 80028ec:	2320      	movs	r3, #32
 80028ee:	5cd3      	ldrb	r3, [r2, r3]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01c      	beq.n	800292e <eMBPoll+0xda>
                if( eException != MB_EX_NONE )
 80028f4:	2322      	movs	r3, #34	; 0x22
 80028f6:	5cd2      	ldrb	r2, [r2, r3]
 80028f8:	2a00      	cmp	r2, #0
 80028fa:	d00d      	beq.n	8002918 <eMBPoll+0xc4>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <eMBPoll+0xe4>)
 80028fe:	2121      	movs	r1, #33	; 0x21
 8002900:	5c58      	ldrb	r0, [r3, r1]
 8002902:	3920      	subs	r1, #32
 8002904:	8319      	strh	r1, [r3, #24]
 8002906:	3981      	subs	r1, #129	; 0x81
 8002908:	4301      	orrs	r1, r0
 800290a:	69d8      	ldr	r0, [r3, #28]
 800290c:	7001      	strb	r1, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 800290e:	69d8      	ldr	r0, [r3, #28]
 8002910:	8b19      	ldrh	r1, [r3, #24]
 8002912:	1c4d      	adds	r5, r1, #1
 8002914:	831d      	strh	r5, [r3, #24]
 8002916:	5442      	strb	r2, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <eMBPoll+0xe4>)
 800291a:	8b1a      	ldrh	r2, [r3, #24]
 800291c:	69d9      	ldr	r1, [r3, #28]
 800291e:	7818      	ldrb	r0, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4798      	blx	r3
 8002924:	e7a2      	b.n	800286c <eMBPoll+0x18>
        return MB_EILLSTATE;
 8002926:	2406      	movs	r4, #6
 8002928:	e7a0      	b.n	800286c <eMBPoll+0x18>
    return MB_ENOERR;
 800292a:	0004      	movs	r4, r0
 800292c:	e79e      	b.n	800286c <eMBPoll+0x18>
 800292e:	001c      	movs	r4, r3
 8002930:	e79c      	b.n	800286c <eMBPoll+0x18>
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	20000014 	.word	0x20000014
 8002938:	2000021c 	.word	0x2000021c
 800293c:	20000018 	.word	0x20000018

08002940 <xMBPortEventPost>:


/*----------------------------------------------------------------------------*/
BOOL xMBPortEventPost(eMBEventType eEvent)
{
  xEventInQueue = TRUE;
 8002940:	4b02      	ldr	r3, [pc, #8]	; (800294c <xMBPortEventPost+0xc>)
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
  eQueuedEvent = eEvent;
 8002946:	7058      	strb	r0, [r3, #1]
  return TRUE;
}
 8002948:	2001      	movs	r0, #1
 800294a:	4770      	bx	lr
 800294c:	2000023f 	.word	0x2000023f

08002950 <xMBPortEventGet>:



/*----------------------------------------------------------------------------*/
BOOL xMBPortEventGet(eMBEventType * eEvent)
{
 8002950:	0003      	movs	r3, r0
  BOOL xEventHappened = FALSE;

  if( xEventInQueue )
 8002952:	4a05      	ldr	r2, [pc, #20]	; (8002968 <xMBPortEventGet+0x18>)
 8002954:	7810      	ldrb	r0, [r2, #0]
 8002956:	2800      	cmp	r0, #0
 8002958:	d004      	beq.n	8002964 <xMBPortEventGet+0x14>
  {
    *eEvent = eQueuedEvent;
 800295a:	7851      	ldrb	r1, [r2, #1]
 800295c:	7019      	strb	r1, [r3, #0]
    xEventInQueue = FALSE;
 800295e:	2300      	movs	r3, #0
 8002960:	7013      	strb	r3, [r2, #0]
    xEventHappened = TRUE;
 8002962:	2001      	movs	r0, #1
  }

  return xEventHappened;
}
 8002964:	4770      	bx	lr
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	2000023f 	.word	0x2000023f

0800296c <prvvUARTTxReadyISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTTxReadyISR(void)
{
 800296c:	b510      	push	{r4, lr}
  pxMBFrameCBTransmitterEmpty();
 800296e:	4b02      	ldr	r3, [pc, #8]	; (8002978 <prvvUARTTxReadyISR+0xc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4798      	blx	r3
}
 8002974:	bd10      	pop	{r4, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	2000045c 	.word	0x2000045c

0800297c <HAL_UART_TxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800297c:	b510      	push	{r4, lr}
  if (huart->Instance == modbusUart->Instance)
 800297e:	6802      	ldr	r2, [r0, #0]
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <HAL_UART_TxCpltCallback+0x18>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d000      	beq.n	800298c <HAL_UART_TxCpltCallback+0x10>
  {
    prvvUARTTxReadyISR();
  }
}
 800298a:	bd10      	pop	{r4, pc}
    prvvUARTTxReadyISR();
 800298c:	f7ff ffee 	bl	800296c <prvvUARTTxReadyISR>
}
 8002990:	e7fb      	b.n	800298a <HAL_UART_TxCpltCallback+0xe>
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	20000470 	.word	0x20000470

08002998 <prvvTIMERExpiredISR>:



/* --------------------------------------------------------------------------*/
static void prvvTIMERExpiredISR(void)
{
 8002998:	b510      	push	{r4, lr}
    (void)pxMBPortCBTimerExpired();
 800299a:	4b02      	ldr	r3, [pc, #8]	; (80029a4 <prvvTIMERExpiredISR+0xc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4798      	blx	r3
}
 80029a0:	bd10      	pop	{r4, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	20000460 	.word	0x20000460

080029a8 <HAL_TIM_IC_CaptureCallback>:



/* --------------------------------------------------------------------------*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b510      	push	{r4, lr}
  if (htim->Instance == modbusTimer->Instance)
 80029aa:	6802      	ldr	r2, [r0, #0]
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_TIM_IC_CaptureCallback+0x28>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d000      	beq.n	80029b8 <HAL_TIM_IC_CaptureCallback+0x10>
    if (timerCounter == timerPeriod)
    {
      prvvTIMERExpiredISR();
    }
  }
}
 80029b6:	bd10      	pop	{r4, pc}
    timerCounter++;
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80029ba:	8853      	ldrh	r3, [r2, #2]
 80029bc:	3301      	adds	r3, #1
 80029be:	b29b      	uxth	r3, r3
 80029c0:	8053      	strh	r3, [r2, #2]
    if (timerCounter == timerPeriod)
 80029c2:	8812      	ldrh	r2, [r2, #0]
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d1f6      	bne.n	80029b6 <HAL_TIM_IC_CaptureCallback+0xe>
      prvvTIMERExpiredISR();
 80029c8:	f7ff ffe6 	bl	8002998 <prvvTIMERExpiredISR>
}
 80029cc:	e7f3      	b.n	80029b6 <HAL_TIM_IC_CaptureCallback+0xe>
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	20000474 	.word	0x20000474
 80029d4:	20000242 	.word	0x20000242

080029d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029d8:	480d      	ldr	r0, [pc, #52]	; (8002a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/  bl  SystemInit
 80029dc:	f7fd fc2a 	bl	8000234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80029e2:	490d      	ldr	r1, [pc, #52]	; (8002a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <LoopForever+0xe>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e8:	e002      	b.n	80029f0 <LoopCopyDataInit>

080029ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ee:	3304      	adds	r3, #4

080029f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f4:	d3f9      	bcc.n	80029ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029f8:	4c0a      	ldr	r4, [pc, #40]	; (8002a24 <LoopForever+0x16>)
  movs r3, #0
 80029fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029fc:	e001      	b.n	8002a02 <LoopFillZerobss>

080029fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a00:	3204      	adds	r2, #4

08002a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a04:	d3fb      	bcc.n	80029fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a06:	f000 f811 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a0a:	f7ff fa9d 	bl	8001f48 <main>

08002a0e <LoopForever>:

LoopForever:
    b LoopForever
 8002a0e:	e7fe      	b.n	8002a0e <LoopForever>
  ldr   r0, =_estack
 8002a10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a18:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002a1c:	080033f8 	.word	0x080033f8
  ldr r2, =_sbss
 8002a20:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8002a24:	20000488 	.word	0x20000488

08002a28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a28:	e7fe      	b.n	8002a28 <ADC1_IRQHandler>
	...

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	2600      	movs	r6, #0
 8002a30:	4d0c      	ldr	r5, [pc, #48]	; (8002a64 <__libc_init_array+0x38>)
 8002a32:	4c0d      	ldr	r4, [pc, #52]	; (8002a68 <__libc_init_array+0x3c>)
 8002a34:	1b64      	subs	r4, r4, r5
 8002a36:	10a4      	asrs	r4, r4, #2
 8002a38:	42a6      	cmp	r6, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	2600      	movs	r6, #0
 8002a3e:	f000 fc4d 	bl	80032dc <_init>
 8002a42:	4d0a      	ldr	r5, [pc, #40]	; (8002a6c <__libc_init_array+0x40>)
 8002a44:	4c0a      	ldr	r4, [pc, #40]	; (8002a70 <__libc_init_array+0x44>)
 8002a46:	1b64      	subs	r4, r4, r5
 8002a48:	10a4      	asrs	r4, r4, #2
 8002a4a:	42a6      	cmp	r6, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	00b3      	lsls	r3, r6, #2
 8002a52:	58eb      	ldr	r3, [r5, r3]
 8002a54:	4798      	blx	r3
 8002a56:	3601      	adds	r6, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	00b3      	lsls	r3, r6, #2
 8002a5c:	58eb      	ldr	r3, [r5, r3]
 8002a5e:	4798      	blx	r3
 8002a60:	3601      	adds	r6, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	080033f0 	.word	0x080033f0
 8002a68:	080033f0 	.word	0x080033f0
 8002a6c:	080033f0 	.word	0x080033f0
 8002a70:	080033f4 	.word	0x080033f4

08002a74 <memcpy>:
 8002a74:	2300      	movs	r3, #0
 8002a76:	b510      	push	{r4, lr}
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d100      	bne.n	8002a7e <memcpy+0xa>
 8002a7c:	bd10      	pop	{r4, pc}
 8002a7e:	5ccc      	ldrb	r4, [r1, r3]
 8002a80:	54c4      	strb	r4, [r0, r3]
 8002a82:	3301      	adds	r3, #1
 8002a84:	e7f8      	b.n	8002a78 <memcpy+0x4>

08002a86 <_printf_common>:
 8002a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a88:	0015      	movs	r5, r2
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	688a      	ldr	r2, [r1, #8]
 8002a8e:	690b      	ldr	r3, [r1, #16]
 8002a90:	000c      	movs	r4, r1
 8002a92:	9000      	str	r0, [sp, #0]
 8002a94:	4293      	cmp	r3, r2
 8002a96:	da00      	bge.n	8002a9a <_printf_common+0x14>
 8002a98:	0013      	movs	r3, r2
 8002a9a:	0022      	movs	r2, r4
 8002a9c:	602b      	str	r3, [r5, #0]
 8002a9e:	3243      	adds	r2, #67	; 0x43
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d001      	beq.n	8002aaa <_printf_common+0x24>
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	602b      	str	r3, [r5, #0]
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	069b      	lsls	r3, r3, #26
 8002aae:	d502      	bpl.n	8002ab6 <_printf_common+0x30>
 8002ab0:	682b      	ldr	r3, [r5, #0]
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	602b      	str	r3, [r5, #0]
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	2306      	movs	r3, #6
 8002aba:	0017      	movs	r7, r2
 8002abc:	401f      	ands	r7, r3
 8002abe:	421a      	tst	r2, r3
 8002ac0:	d027      	beq.n	8002b12 <_printf_common+0x8c>
 8002ac2:	0023      	movs	r3, r4
 8002ac4:	3343      	adds	r3, #67	; 0x43
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	4193      	sbcs	r3, r2
 8002acc:	6822      	ldr	r2, [r4, #0]
 8002ace:	0692      	lsls	r2, r2, #26
 8002ad0:	d430      	bmi.n	8002b34 <_printf_common+0xae>
 8002ad2:	0022      	movs	r2, r4
 8002ad4:	9901      	ldr	r1, [sp, #4]
 8002ad6:	9800      	ldr	r0, [sp, #0]
 8002ad8:	9e08      	ldr	r6, [sp, #32]
 8002ada:	3243      	adds	r2, #67	; 0x43
 8002adc:	47b0      	blx	r6
 8002ade:	1c43      	adds	r3, r0, #1
 8002ae0:	d025      	beq.n	8002b2e <_printf_common+0xa8>
 8002ae2:	2306      	movs	r3, #6
 8002ae4:	6820      	ldr	r0, [r4, #0]
 8002ae6:	682a      	ldr	r2, [r5, #0]
 8002ae8:	68e1      	ldr	r1, [r4, #12]
 8002aea:	2500      	movs	r5, #0
 8002aec:	4003      	ands	r3, r0
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d103      	bne.n	8002afa <_printf_common+0x74>
 8002af2:	1a8d      	subs	r5, r1, r2
 8002af4:	43eb      	mvns	r3, r5
 8002af6:	17db      	asrs	r3, r3, #31
 8002af8:	401d      	ands	r5, r3
 8002afa:	68a3      	ldr	r3, [r4, #8]
 8002afc:	6922      	ldr	r2, [r4, #16]
 8002afe:	4293      	cmp	r3, r2
 8002b00:	dd01      	ble.n	8002b06 <_printf_common+0x80>
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	18ed      	adds	r5, r5, r3
 8002b06:	2700      	movs	r7, #0
 8002b08:	42bd      	cmp	r5, r7
 8002b0a:	d120      	bne.n	8002b4e <_printf_common+0xc8>
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	e010      	b.n	8002b32 <_printf_common+0xac>
 8002b10:	3701      	adds	r7, #1
 8002b12:	68e3      	ldr	r3, [r4, #12]
 8002b14:	682a      	ldr	r2, [r5, #0]
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	42bb      	cmp	r3, r7
 8002b1a:	ddd2      	ble.n	8002ac2 <_printf_common+0x3c>
 8002b1c:	0022      	movs	r2, r4
 8002b1e:	2301      	movs	r3, #1
 8002b20:	9901      	ldr	r1, [sp, #4]
 8002b22:	9800      	ldr	r0, [sp, #0]
 8002b24:	9e08      	ldr	r6, [sp, #32]
 8002b26:	3219      	adds	r2, #25
 8002b28:	47b0      	blx	r6
 8002b2a:	1c43      	adds	r3, r0, #1
 8002b2c:	d1f0      	bne.n	8002b10 <_printf_common+0x8a>
 8002b2e:	2001      	movs	r0, #1
 8002b30:	4240      	negs	r0, r0
 8002b32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b34:	2030      	movs	r0, #48	; 0x30
 8002b36:	18e1      	adds	r1, r4, r3
 8002b38:	3143      	adds	r1, #67	; 0x43
 8002b3a:	7008      	strb	r0, [r1, #0]
 8002b3c:	0021      	movs	r1, r4
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	3145      	adds	r1, #69	; 0x45
 8002b42:	7809      	ldrb	r1, [r1, #0]
 8002b44:	18a2      	adds	r2, r4, r2
 8002b46:	3243      	adds	r2, #67	; 0x43
 8002b48:	3302      	adds	r3, #2
 8002b4a:	7011      	strb	r1, [r2, #0]
 8002b4c:	e7c1      	b.n	8002ad2 <_printf_common+0x4c>
 8002b4e:	0022      	movs	r2, r4
 8002b50:	2301      	movs	r3, #1
 8002b52:	9901      	ldr	r1, [sp, #4]
 8002b54:	9800      	ldr	r0, [sp, #0]
 8002b56:	9e08      	ldr	r6, [sp, #32]
 8002b58:	321a      	adds	r2, #26
 8002b5a:	47b0      	blx	r6
 8002b5c:	1c43      	adds	r3, r0, #1
 8002b5e:	d0e6      	beq.n	8002b2e <_printf_common+0xa8>
 8002b60:	3701      	adds	r7, #1
 8002b62:	e7d1      	b.n	8002b08 <_printf_common+0x82>

08002b64 <_printf_i>:
 8002b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b66:	b08b      	sub	sp, #44	; 0x2c
 8002b68:	9206      	str	r2, [sp, #24]
 8002b6a:	000a      	movs	r2, r1
 8002b6c:	3243      	adds	r2, #67	; 0x43
 8002b6e:	9307      	str	r3, [sp, #28]
 8002b70:	9005      	str	r0, [sp, #20]
 8002b72:	9204      	str	r2, [sp, #16]
 8002b74:	7e0a      	ldrb	r2, [r1, #24]
 8002b76:	000c      	movs	r4, r1
 8002b78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b7a:	2a78      	cmp	r2, #120	; 0x78
 8002b7c:	d806      	bhi.n	8002b8c <_printf_i+0x28>
 8002b7e:	2a62      	cmp	r2, #98	; 0x62
 8002b80:	d808      	bhi.n	8002b94 <_printf_i+0x30>
 8002b82:	2a00      	cmp	r2, #0
 8002b84:	d100      	bne.n	8002b88 <_printf_i+0x24>
 8002b86:	e0c0      	b.n	8002d0a <_printf_i+0x1a6>
 8002b88:	2a58      	cmp	r2, #88	; 0x58
 8002b8a:	d052      	beq.n	8002c32 <_printf_i+0xce>
 8002b8c:	0026      	movs	r6, r4
 8002b8e:	3642      	adds	r6, #66	; 0x42
 8002b90:	7032      	strb	r2, [r6, #0]
 8002b92:	e022      	b.n	8002bda <_printf_i+0x76>
 8002b94:	0010      	movs	r0, r2
 8002b96:	3863      	subs	r0, #99	; 0x63
 8002b98:	2815      	cmp	r0, #21
 8002b9a:	d8f7      	bhi.n	8002b8c <_printf_i+0x28>
 8002b9c:	f7fd fab4 	bl	8000108 <__gnu_thumb1_case_shi>
 8002ba0:	001f0016 	.word	0x001f0016
 8002ba4:	fff6fff6 	.word	0xfff6fff6
 8002ba8:	fff6fff6 	.word	0xfff6fff6
 8002bac:	fff6001f 	.word	0xfff6001f
 8002bb0:	fff6fff6 	.word	0xfff6fff6
 8002bb4:	00a8fff6 	.word	0x00a8fff6
 8002bb8:	009a0036 	.word	0x009a0036
 8002bbc:	fff6fff6 	.word	0xfff6fff6
 8002bc0:	fff600b9 	.word	0xfff600b9
 8002bc4:	fff60036 	.word	0xfff60036
 8002bc8:	009efff6 	.word	0x009efff6
 8002bcc:	0026      	movs	r6, r4
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	3642      	adds	r6, #66	; 0x42
 8002bd2:	1d11      	adds	r1, r2, #4
 8002bd4:	6019      	str	r1, [r3, #0]
 8002bd6:	6813      	ldr	r3, [r2, #0]
 8002bd8:	7033      	strb	r3, [r6, #0]
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0a7      	b.n	8002d2e <_printf_i+0x1ca>
 8002bde:	6808      	ldr	r0, [r1, #0]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	1d0a      	adds	r2, r1, #4
 8002be4:	0605      	lsls	r5, r0, #24
 8002be6:	d50b      	bpl.n	8002c00 <_printf_i+0x9c>
 8002be8:	680d      	ldr	r5, [r1, #0]
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	2d00      	cmp	r5, #0
 8002bee:	da03      	bge.n	8002bf8 <_printf_i+0x94>
 8002bf0:	232d      	movs	r3, #45	; 0x2d
 8002bf2:	9a04      	ldr	r2, [sp, #16]
 8002bf4:	426d      	negs	r5, r5
 8002bf6:	7013      	strb	r3, [r2, #0]
 8002bf8:	4b61      	ldr	r3, [pc, #388]	; (8002d80 <_printf_i+0x21c>)
 8002bfa:	270a      	movs	r7, #10
 8002bfc:	9303      	str	r3, [sp, #12]
 8002bfe:	e032      	b.n	8002c66 <_printf_i+0x102>
 8002c00:	680d      	ldr	r5, [r1, #0]
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	0641      	lsls	r1, r0, #25
 8002c06:	d5f1      	bpl.n	8002bec <_printf_i+0x88>
 8002c08:	b22d      	sxth	r5, r5
 8002c0a:	e7ef      	b.n	8002bec <_printf_i+0x88>
 8002c0c:	680d      	ldr	r5, [r1, #0]
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	1d08      	adds	r0, r1, #4
 8002c12:	6018      	str	r0, [r3, #0]
 8002c14:	062e      	lsls	r6, r5, #24
 8002c16:	d501      	bpl.n	8002c1c <_printf_i+0xb8>
 8002c18:	680d      	ldr	r5, [r1, #0]
 8002c1a:	e003      	b.n	8002c24 <_printf_i+0xc0>
 8002c1c:	066d      	lsls	r5, r5, #25
 8002c1e:	d5fb      	bpl.n	8002c18 <_printf_i+0xb4>
 8002c20:	680d      	ldr	r5, [r1, #0]
 8002c22:	b2ad      	uxth	r5, r5
 8002c24:	4b56      	ldr	r3, [pc, #344]	; (8002d80 <_printf_i+0x21c>)
 8002c26:	270a      	movs	r7, #10
 8002c28:	9303      	str	r3, [sp, #12]
 8002c2a:	2a6f      	cmp	r2, #111	; 0x6f
 8002c2c:	d117      	bne.n	8002c5e <_printf_i+0xfa>
 8002c2e:	2708      	movs	r7, #8
 8002c30:	e015      	b.n	8002c5e <_printf_i+0xfa>
 8002c32:	3145      	adds	r1, #69	; 0x45
 8002c34:	700a      	strb	r2, [r1, #0]
 8002c36:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <_printf_i+0x21c>)
 8002c38:	9203      	str	r2, [sp, #12]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	6821      	ldr	r1, [r4, #0]
 8002c3e:	ca20      	ldmia	r2!, {r5}
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	0608      	lsls	r0, r1, #24
 8002c44:	d550      	bpl.n	8002ce8 <_printf_i+0x184>
 8002c46:	07cb      	lsls	r3, r1, #31
 8002c48:	d502      	bpl.n	8002c50 <_printf_i+0xec>
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	4319      	orrs	r1, r3
 8002c4e:	6021      	str	r1, [r4, #0]
 8002c50:	2710      	movs	r7, #16
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	d103      	bne.n	8002c5e <_printf_i+0xfa>
 8002c56:	2320      	movs	r3, #32
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	439a      	bics	r2, r3
 8002c5c:	6022      	str	r2, [r4, #0]
 8002c5e:	0023      	movs	r3, r4
 8002c60:	2200      	movs	r2, #0
 8002c62:	3343      	adds	r3, #67	; 0x43
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	6863      	ldr	r3, [r4, #4]
 8002c68:	60a3      	str	r3, [r4, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db03      	blt.n	8002c76 <_printf_i+0x112>
 8002c6e:	2204      	movs	r2, #4
 8002c70:	6821      	ldr	r1, [r4, #0]
 8002c72:	4391      	bics	r1, r2
 8002c74:	6021      	str	r1, [r4, #0]
 8002c76:	2d00      	cmp	r5, #0
 8002c78:	d102      	bne.n	8002c80 <_printf_i+0x11c>
 8002c7a:	9e04      	ldr	r6, [sp, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00c      	beq.n	8002c9a <_printf_i+0x136>
 8002c80:	9e04      	ldr	r6, [sp, #16]
 8002c82:	0028      	movs	r0, r5
 8002c84:	0039      	movs	r1, r7
 8002c86:	f7fd facf 	bl	8000228 <__aeabi_uidivmod>
 8002c8a:	9b03      	ldr	r3, [sp, #12]
 8002c8c:	3e01      	subs	r6, #1
 8002c8e:	5c5b      	ldrb	r3, [r3, r1]
 8002c90:	7033      	strb	r3, [r6, #0]
 8002c92:	002b      	movs	r3, r5
 8002c94:	0005      	movs	r5, r0
 8002c96:	429f      	cmp	r7, r3
 8002c98:	d9f3      	bls.n	8002c82 <_printf_i+0x11e>
 8002c9a:	2f08      	cmp	r7, #8
 8002c9c:	d109      	bne.n	8002cb2 <_printf_i+0x14e>
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	07db      	lsls	r3, r3, #31
 8002ca2:	d506      	bpl.n	8002cb2 <_printf_i+0x14e>
 8002ca4:	6863      	ldr	r3, [r4, #4]
 8002ca6:	6922      	ldr	r2, [r4, #16]
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	dc02      	bgt.n	8002cb2 <_printf_i+0x14e>
 8002cac:	2330      	movs	r3, #48	; 0x30
 8002cae:	3e01      	subs	r6, #1
 8002cb0:	7033      	strb	r3, [r6, #0]
 8002cb2:	9b04      	ldr	r3, [sp, #16]
 8002cb4:	1b9b      	subs	r3, r3, r6
 8002cb6:	6123      	str	r3, [r4, #16]
 8002cb8:	9b07      	ldr	r3, [sp, #28]
 8002cba:	0021      	movs	r1, r4
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	9805      	ldr	r0, [sp, #20]
 8002cc0:	9b06      	ldr	r3, [sp, #24]
 8002cc2:	aa09      	add	r2, sp, #36	; 0x24
 8002cc4:	f7ff fedf 	bl	8002a86 <_printf_common>
 8002cc8:	1c43      	adds	r3, r0, #1
 8002cca:	d135      	bne.n	8002d38 <_printf_i+0x1d4>
 8002ccc:	2001      	movs	r0, #1
 8002cce:	4240      	negs	r0, r0
 8002cd0:	b00b      	add	sp, #44	; 0x2c
 8002cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	6809      	ldr	r1, [r1, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	6022      	str	r2, [r4, #0]
 8002cdc:	0022      	movs	r2, r4
 8002cde:	2178      	movs	r1, #120	; 0x78
 8002ce0:	3245      	adds	r2, #69	; 0x45
 8002ce2:	7011      	strb	r1, [r2, #0]
 8002ce4:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <_printf_i+0x220>)
 8002ce6:	e7a7      	b.n	8002c38 <_printf_i+0xd4>
 8002ce8:	0648      	lsls	r0, r1, #25
 8002cea:	d5ac      	bpl.n	8002c46 <_printf_i+0xe2>
 8002cec:	b2ad      	uxth	r5, r5
 8002cee:	e7aa      	b.n	8002c46 <_printf_i+0xe2>
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	680d      	ldr	r5, [r1, #0]
 8002cf4:	1d10      	adds	r0, r2, #4
 8002cf6:	6949      	ldr	r1, [r1, #20]
 8002cf8:	6018      	str	r0, [r3, #0]
 8002cfa:	6813      	ldr	r3, [r2, #0]
 8002cfc:	062e      	lsls	r6, r5, #24
 8002cfe:	d501      	bpl.n	8002d04 <_printf_i+0x1a0>
 8002d00:	6019      	str	r1, [r3, #0]
 8002d02:	e002      	b.n	8002d0a <_printf_i+0x1a6>
 8002d04:	066d      	lsls	r5, r5, #25
 8002d06:	d5fb      	bpl.n	8002d00 <_printf_i+0x19c>
 8002d08:	8019      	strh	r1, [r3, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9e04      	ldr	r6, [sp, #16]
 8002d0e:	6123      	str	r3, [r4, #16]
 8002d10:	e7d2      	b.n	8002cb8 <_printf_i+0x154>
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	1d11      	adds	r1, r2, #4
 8002d16:	6019      	str	r1, [r3, #0]
 8002d18:	6816      	ldr	r6, [r2, #0]
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	0030      	movs	r0, r6
 8002d1e:	6862      	ldr	r2, [r4, #4]
 8002d20:	f000 f854 	bl	8002dcc <memchr>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d001      	beq.n	8002d2c <_printf_i+0x1c8>
 8002d28:	1b80      	subs	r0, r0, r6
 8002d2a:	6060      	str	r0, [r4, #4]
 8002d2c:	6863      	ldr	r3, [r4, #4]
 8002d2e:	6123      	str	r3, [r4, #16]
 8002d30:	2300      	movs	r3, #0
 8002d32:	9a04      	ldr	r2, [sp, #16]
 8002d34:	7013      	strb	r3, [r2, #0]
 8002d36:	e7bf      	b.n	8002cb8 <_printf_i+0x154>
 8002d38:	6923      	ldr	r3, [r4, #16]
 8002d3a:	0032      	movs	r2, r6
 8002d3c:	9906      	ldr	r1, [sp, #24]
 8002d3e:	9805      	ldr	r0, [sp, #20]
 8002d40:	9d07      	ldr	r5, [sp, #28]
 8002d42:	47a8      	blx	r5
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	d0c1      	beq.n	8002ccc <_printf_i+0x168>
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	079b      	lsls	r3, r3, #30
 8002d4c:	d415      	bmi.n	8002d7a <_printf_i+0x216>
 8002d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d50:	68e0      	ldr	r0, [r4, #12]
 8002d52:	4298      	cmp	r0, r3
 8002d54:	dabc      	bge.n	8002cd0 <_printf_i+0x16c>
 8002d56:	0018      	movs	r0, r3
 8002d58:	e7ba      	b.n	8002cd0 <_printf_i+0x16c>
 8002d5a:	0022      	movs	r2, r4
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	9906      	ldr	r1, [sp, #24]
 8002d60:	9805      	ldr	r0, [sp, #20]
 8002d62:	9e07      	ldr	r6, [sp, #28]
 8002d64:	3219      	adds	r2, #25
 8002d66:	47b0      	blx	r6
 8002d68:	1c43      	adds	r3, r0, #1
 8002d6a:	d0af      	beq.n	8002ccc <_printf_i+0x168>
 8002d6c:	3501      	adds	r5, #1
 8002d6e:	68e3      	ldr	r3, [r4, #12]
 8002d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	42ab      	cmp	r3, r5
 8002d76:	dcf0      	bgt.n	8002d5a <_printf_i+0x1f6>
 8002d78:	e7e9      	b.n	8002d4e <_printf_i+0x1ea>
 8002d7a:	2500      	movs	r5, #0
 8002d7c:	e7f7      	b.n	8002d6e <_printf_i+0x20a>
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	08003357 	.word	0x08003357
 8002d84:	08003368 	.word	0x08003368

08002d88 <siprintf>:
 8002d88:	b40e      	push	{r1, r2, r3}
 8002d8a:	b500      	push	{lr}
 8002d8c:	490b      	ldr	r1, [pc, #44]	; (8002dbc <siprintf+0x34>)
 8002d8e:	b09c      	sub	sp, #112	; 0x70
 8002d90:	ab1d      	add	r3, sp, #116	; 0x74
 8002d92:	9002      	str	r0, [sp, #8]
 8002d94:	9006      	str	r0, [sp, #24]
 8002d96:	9107      	str	r1, [sp, #28]
 8002d98:	9104      	str	r1, [sp, #16]
 8002d9a:	4809      	ldr	r0, [pc, #36]	; (8002dc0 <siprintf+0x38>)
 8002d9c:	4909      	ldr	r1, [pc, #36]	; (8002dc4 <siprintf+0x3c>)
 8002d9e:	cb04      	ldmia	r3!, {r2}
 8002da0:	9105      	str	r1, [sp, #20]
 8002da2:	6800      	ldr	r0, [r0, #0]
 8002da4:	a902      	add	r1, sp, #8
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	f000 f95e 	bl	8003068 <_svfiprintf_r>
 8002dac:	2300      	movs	r3, #0
 8002dae:	9a02      	ldr	r2, [sp, #8]
 8002db0:	7013      	strb	r3, [r2, #0]
 8002db2:	b01c      	add	sp, #112	; 0x70
 8002db4:	bc08      	pop	{r3}
 8002db6:	b003      	add	sp, #12
 8002db8:	4718      	bx	r3
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	7fffffff 	.word	0x7fffffff
 8002dc0:	20000098 	.word	0x20000098
 8002dc4:	ffff0208 	.word	0xffff0208

08002dc8 <__retarget_lock_acquire_recursive>:
 8002dc8:	4770      	bx	lr

08002dca <__retarget_lock_release_recursive>:
 8002dca:	4770      	bx	lr

08002dcc <memchr>:
 8002dcc:	b2c9      	uxtb	r1, r1
 8002dce:	1882      	adds	r2, r0, r2
 8002dd0:	4290      	cmp	r0, r2
 8002dd2:	d101      	bne.n	8002dd8 <memchr+0xc>
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	4770      	bx	lr
 8002dd8:	7803      	ldrb	r3, [r0, #0]
 8002dda:	428b      	cmp	r3, r1
 8002ddc:	d0fb      	beq.n	8002dd6 <memchr+0xa>
 8002dde:	3001      	adds	r0, #1
 8002de0:	e7f6      	b.n	8002dd0 <memchr+0x4>

08002de2 <memmove>:
 8002de2:	b510      	push	{r4, lr}
 8002de4:	4288      	cmp	r0, r1
 8002de6:	d902      	bls.n	8002dee <memmove+0xc>
 8002de8:	188b      	adds	r3, r1, r2
 8002dea:	4298      	cmp	r0, r3
 8002dec:	d303      	bcc.n	8002df6 <memmove+0x14>
 8002dee:	2300      	movs	r3, #0
 8002df0:	e007      	b.n	8002e02 <memmove+0x20>
 8002df2:	5c8b      	ldrb	r3, [r1, r2]
 8002df4:	5483      	strb	r3, [r0, r2]
 8002df6:	3a01      	subs	r2, #1
 8002df8:	d2fb      	bcs.n	8002df2 <memmove+0x10>
 8002dfa:	bd10      	pop	{r4, pc}
 8002dfc:	5ccc      	ldrb	r4, [r1, r3]
 8002dfe:	54c4      	strb	r4, [r0, r3]
 8002e00:	3301      	adds	r3, #1
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d1fa      	bne.n	8002dfc <memmove+0x1a>
 8002e06:	e7f8      	b.n	8002dfa <memmove+0x18>

08002e08 <_free_r>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	0005      	movs	r5, r0
 8002e0c:	2900      	cmp	r1, #0
 8002e0e:	d010      	beq.n	8002e32 <_free_r+0x2a>
 8002e10:	1f0c      	subs	r4, r1, #4
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	da00      	bge.n	8002e1a <_free_r+0x12>
 8002e18:	18e4      	adds	r4, r4, r3
 8002e1a:	0028      	movs	r0, r5
 8002e1c:	f000 fa36 	bl	800328c <__malloc_lock>
 8002e20:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <_free_r+0x90>)
 8002e22:	6813      	ldr	r3, [r2, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <_free_r+0x2c>
 8002e28:	6063      	str	r3, [r4, #4]
 8002e2a:	6014      	str	r4, [r2, #0]
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fa35 	bl	800329c <__malloc_unlock>
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	42a3      	cmp	r3, r4
 8002e36:	d908      	bls.n	8002e4a <_free_r+0x42>
 8002e38:	6821      	ldr	r1, [r4, #0]
 8002e3a:	1860      	adds	r0, r4, r1
 8002e3c:	4283      	cmp	r3, r0
 8002e3e:	d1f3      	bne.n	8002e28 <_free_r+0x20>
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	1841      	adds	r1, r0, r1
 8002e46:	6021      	str	r1, [r4, #0]
 8002e48:	e7ee      	b.n	8002e28 <_free_r+0x20>
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <_free_r+0x4e>
 8002e52:	42a3      	cmp	r3, r4
 8002e54:	d9f9      	bls.n	8002e4a <_free_r+0x42>
 8002e56:	6811      	ldr	r1, [r2, #0]
 8002e58:	1850      	adds	r0, r2, r1
 8002e5a:	42a0      	cmp	r0, r4
 8002e5c:	d10b      	bne.n	8002e76 <_free_r+0x6e>
 8002e5e:	6820      	ldr	r0, [r4, #0]
 8002e60:	1809      	adds	r1, r1, r0
 8002e62:	1850      	adds	r0, r2, r1
 8002e64:	6011      	str	r1, [r2, #0]
 8002e66:	4283      	cmp	r3, r0
 8002e68:	d1e0      	bne.n	8002e2c <_free_r+0x24>
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	1841      	adds	r1, r0, r1
 8002e70:	6011      	str	r1, [r2, #0]
 8002e72:	6053      	str	r3, [r2, #4]
 8002e74:	e7da      	b.n	8002e2c <_free_r+0x24>
 8002e76:	42a0      	cmp	r0, r4
 8002e78:	d902      	bls.n	8002e80 <_free_r+0x78>
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	602b      	str	r3, [r5, #0]
 8002e7e:	e7d5      	b.n	8002e2c <_free_r+0x24>
 8002e80:	6821      	ldr	r1, [r4, #0]
 8002e82:	1860      	adds	r0, r4, r1
 8002e84:	4283      	cmp	r3, r0
 8002e86:	d103      	bne.n	8002e90 <_free_r+0x88>
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	1841      	adds	r1, r0, r1
 8002e8e:	6021      	str	r1, [r4, #0]
 8002e90:	6063      	str	r3, [r4, #4]
 8002e92:	6054      	str	r4, [r2, #4]
 8002e94:	e7ca      	b.n	8002e2c <_free_r+0x24>
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	20000248 	.word	0x20000248

08002e9c <_malloc_r>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	1ccd      	adds	r5, r1, #3
 8002ea2:	439d      	bics	r5, r3
 8002ea4:	3508      	adds	r5, #8
 8002ea6:	0006      	movs	r6, r0
 8002ea8:	2d0c      	cmp	r5, #12
 8002eaa:	d21f      	bcs.n	8002eec <_malloc_r+0x50>
 8002eac:	250c      	movs	r5, #12
 8002eae:	42a9      	cmp	r1, r5
 8002eb0:	d81e      	bhi.n	8002ef0 <_malloc_r+0x54>
 8002eb2:	0030      	movs	r0, r6
 8002eb4:	f000 f9ea 	bl	800328c <__malloc_lock>
 8002eb8:	4925      	ldr	r1, [pc, #148]	; (8002f50 <_malloc_r+0xb4>)
 8002eba:	680a      	ldr	r2, [r1, #0]
 8002ebc:	0014      	movs	r4, r2
 8002ebe:	2c00      	cmp	r4, #0
 8002ec0:	d11a      	bne.n	8002ef8 <_malloc_r+0x5c>
 8002ec2:	4f24      	ldr	r7, [pc, #144]	; (8002f54 <_malloc_r+0xb8>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <_malloc_r+0x38>
 8002eca:	0021      	movs	r1, r4
 8002ecc:	0030      	movs	r0, r6
 8002ece:	f000 f9cb 	bl	8003268 <_sbrk_r>
 8002ed2:	6038      	str	r0, [r7, #0]
 8002ed4:	0029      	movs	r1, r5
 8002ed6:	0030      	movs	r0, r6
 8002ed8:	f000 f9c6 	bl	8003268 <_sbrk_r>
 8002edc:	1c43      	adds	r3, r0, #1
 8002ede:	d12b      	bne.n	8002f38 <_malloc_r+0x9c>
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	0030      	movs	r0, r6
 8002ee4:	6033      	str	r3, [r6, #0]
 8002ee6:	f000 f9d9 	bl	800329c <__malloc_unlock>
 8002eea:	e003      	b.n	8002ef4 <_malloc_r+0x58>
 8002eec:	2d00      	cmp	r5, #0
 8002eee:	dade      	bge.n	8002eae <_malloc_r+0x12>
 8002ef0:	230c      	movs	r3, #12
 8002ef2:	6033      	str	r3, [r6, #0]
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	1b5b      	subs	r3, r3, r5
 8002efc:	d419      	bmi.n	8002f32 <_malloc_r+0x96>
 8002efe:	2b0b      	cmp	r3, #11
 8002f00:	d903      	bls.n	8002f0a <_malloc_r+0x6e>
 8002f02:	6023      	str	r3, [r4, #0]
 8002f04:	18e4      	adds	r4, r4, r3
 8002f06:	6025      	str	r5, [r4, #0]
 8002f08:	e003      	b.n	8002f12 <_malloc_r+0x76>
 8002f0a:	6863      	ldr	r3, [r4, #4]
 8002f0c:	42a2      	cmp	r2, r4
 8002f0e:	d10e      	bne.n	8002f2e <_malloc_r+0x92>
 8002f10:	600b      	str	r3, [r1, #0]
 8002f12:	0030      	movs	r0, r6
 8002f14:	f000 f9c2 	bl	800329c <__malloc_unlock>
 8002f18:	0020      	movs	r0, r4
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	300b      	adds	r0, #11
 8002f1e:	1d23      	adds	r3, r4, #4
 8002f20:	4390      	bics	r0, r2
 8002f22:	1ac2      	subs	r2, r0, r3
 8002f24:	4298      	cmp	r0, r3
 8002f26:	d0e6      	beq.n	8002ef6 <_malloc_r+0x5a>
 8002f28:	1a1b      	subs	r3, r3, r0
 8002f2a:	50a3      	str	r3, [r4, r2]
 8002f2c:	e7e3      	b.n	8002ef6 <_malloc_r+0x5a>
 8002f2e:	6053      	str	r3, [r2, #4]
 8002f30:	e7ef      	b.n	8002f12 <_malloc_r+0x76>
 8002f32:	0022      	movs	r2, r4
 8002f34:	6864      	ldr	r4, [r4, #4]
 8002f36:	e7c2      	b.n	8002ebe <_malloc_r+0x22>
 8002f38:	2303      	movs	r3, #3
 8002f3a:	1cc4      	adds	r4, r0, #3
 8002f3c:	439c      	bics	r4, r3
 8002f3e:	42a0      	cmp	r0, r4
 8002f40:	d0e1      	beq.n	8002f06 <_malloc_r+0x6a>
 8002f42:	1a21      	subs	r1, r4, r0
 8002f44:	0030      	movs	r0, r6
 8002f46:	f000 f98f 	bl	8003268 <_sbrk_r>
 8002f4a:	1c43      	adds	r3, r0, #1
 8002f4c:	d1db      	bne.n	8002f06 <_malloc_r+0x6a>
 8002f4e:	e7c7      	b.n	8002ee0 <_malloc_r+0x44>
 8002f50:	20000248 	.word	0x20000248
 8002f54:	2000024c 	.word	0x2000024c

08002f58 <_realloc_r>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	0007      	movs	r7, r0
 8002f5c:	000d      	movs	r5, r1
 8002f5e:	0016      	movs	r6, r2
 8002f60:	2900      	cmp	r1, #0
 8002f62:	d105      	bne.n	8002f70 <_realloc_r+0x18>
 8002f64:	0011      	movs	r1, r2
 8002f66:	f7ff ff99 	bl	8002e9c <_malloc_r>
 8002f6a:	0004      	movs	r4, r0
 8002f6c:	0020      	movs	r0, r4
 8002f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f70:	2a00      	cmp	r2, #0
 8002f72:	d103      	bne.n	8002f7c <_realloc_r+0x24>
 8002f74:	f7ff ff48 	bl	8002e08 <_free_r>
 8002f78:	0034      	movs	r4, r6
 8002f7a:	e7f7      	b.n	8002f6c <_realloc_r+0x14>
 8002f7c:	f000 f996 	bl	80032ac <_malloc_usable_size_r>
 8002f80:	002c      	movs	r4, r5
 8002f82:	42b0      	cmp	r0, r6
 8002f84:	d2f2      	bcs.n	8002f6c <_realloc_r+0x14>
 8002f86:	0031      	movs	r1, r6
 8002f88:	0038      	movs	r0, r7
 8002f8a:	f7ff ff87 	bl	8002e9c <_malloc_r>
 8002f8e:	1e04      	subs	r4, r0, #0
 8002f90:	d0ec      	beq.n	8002f6c <_realloc_r+0x14>
 8002f92:	0029      	movs	r1, r5
 8002f94:	0032      	movs	r2, r6
 8002f96:	f7ff fd6d 	bl	8002a74 <memcpy>
 8002f9a:	0029      	movs	r1, r5
 8002f9c:	0038      	movs	r0, r7
 8002f9e:	f7ff ff33 	bl	8002e08 <_free_r>
 8002fa2:	e7e3      	b.n	8002f6c <_realloc_r+0x14>

08002fa4 <__ssputs_r>:
 8002fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa6:	688e      	ldr	r6, [r1, #8]
 8002fa8:	b085      	sub	sp, #20
 8002faa:	0007      	movs	r7, r0
 8002fac:	000c      	movs	r4, r1
 8002fae:	9203      	str	r2, [sp, #12]
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	429e      	cmp	r6, r3
 8002fb4:	d83c      	bhi.n	8003030 <__ssputs_r+0x8c>
 8002fb6:	2390      	movs	r3, #144	; 0x90
 8002fb8:	898a      	ldrh	r2, [r1, #12]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	421a      	tst	r2, r3
 8002fbe:	d034      	beq.n	800302a <__ssputs_r+0x86>
 8002fc0:	2503      	movs	r5, #3
 8002fc2:	6909      	ldr	r1, [r1, #16]
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	1a5b      	subs	r3, r3, r1
 8002fc8:	9302      	str	r3, [sp, #8]
 8002fca:	6963      	ldr	r3, [r4, #20]
 8002fcc:	9802      	ldr	r0, [sp, #8]
 8002fce:	435d      	muls	r5, r3
 8002fd0:	0feb      	lsrs	r3, r5, #31
 8002fd2:	195d      	adds	r5, r3, r5
 8002fd4:	9b01      	ldr	r3, [sp, #4]
 8002fd6:	106d      	asrs	r5, r5, #1
 8002fd8:	3301      	adds	r3, #1
 8002fda:	181b      	adds	r3, r3, r0
 8002fdc:	42ab      	cmp	r3, r5
 8002fde:	d900      	bls.n	8002fe2 <__ssputs_r+0x3e>
 8002fe0:	001d      	movs	r5, r3
 8002fe2:	0553      	lsls	r3, r2, #21
 8002fe4:	d532      	bpl.n	800304c <__ssputs_r+0xa8>
 8002fe6:	0029      	movs	r1, r5
 8002fe8:	0038      	movs	r0, r7
 8002fea:	f7ff ff57 	bl	8002e9c <_malloc_r>
 8002fee:	1e06      	subs	r6, r0, #0
 8002ff0:	d109      	bne.n	8003006 <__ssputs_r+0x62>
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	2340      	movs	r3, #64	; 0x40
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	89a2      	ldrh	r2, [r4, #12]
 8002ffc:	4240      	negs	r0, r0
 8002ffe:	4313      	orrs	r3, r2
 8003000:	81a3      	strh	r3, [r4, #12]
 8003002:	b005      	add	sp, #20
 8003004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003006:	9a02      	ldr	r2, [sp, #8]
 8003008:	6921      	ldr	r1, [r4, #16]
 800300a:	f7ff fd33 	bl	8002a74 <memcpy>
 800300e:	89a3      	ldrh	r3, [r4, #12]
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <__ssputs_r+0xc0>)
 8003012:	401a      	ands	r2, r3
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	4313      	orrs	r3, r2
 8003018:	81a3      	strh	r3, [r4, #12]
 800301a:	9b02      	ldr	r3, [sp, #8]
 800301c:	6126      	str	r6, [r4, #16]
 800301e:	18f6      	adds	r6, r6, r3
 8003020:	6026      	str	r6, [r4, #0]
 8003022:	6165      	str	r5, [r4, #20]
 8003024:	9e01      	ldr	r6, [sp, #4]
 8003026:	1aed      	subs	r5, r5, r3
 8003028:	60a5      	str	r5, [r4, #8]
 800302a:	9b01      	ldr	r3, [sp, #4]
 800302c:	429e      	cmp	r6, r3
 800302e:	d900      	bls.n	8003032 <__ssputs_r+0x8e>
 8003030:	9e01      	ldr	r6, [sp, #4]
 8003032:	0032      	movs	r2, r6
 8003034:	9903      	ldr	r1, [sp, #12]
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	f7ff fed3 	bl	8002de2 <memmove>
 800303c:	68a3      	ldr	r3, [r4, #8]
 800303e:	2000      	movs	r0, #0
 8003040:	1b9b      	subs	r3, r3, r6
 8003042:	60a3      	str	r3, [r4, #8]
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	199e      	adds	r6, r3, r6
 8003048:	6026      	str	r6, [r4, #0]
 800304a:	e7da      	b.n	8003002 <__ssputs_r+0x5e>
 800304c:	002a      	movs	r2, r5
 800304e:	0038      	movs	r0, r7
 8003050:	f7ff ff82 	bl	8002f58 <_realloc_r>
 8003054:	1e06      	subs	r6, r0, #0
 8003056:	d1e0      	bne.n	800301a <__ssputs_r+0x76>
 8003058:	0038      	movs	r0, r7
 800305a:	6921      	ldr	r1, [r4, #16]
 800305c:	f7ff fed4 	bl	8002e08 <_free_r>
 8003060:	e7c7      	b.n	8002ff2 <__ssputs_r+0x4e>
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	fffffb7f 	.word	0xfffffb7f

08003068 <_svfiprintf_r>:
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b0a1      	sub	sp, #132	; 0x84
 800306c:	9003      	str	r0, [sp, #12]
 800306e:	001d      	movs	r5, r3
 8003070:	898b      	ldrh	r3, [r1, #12]
 8003072:	000f      	movs	r7, r1
 8003074:	0016      	movs	r6, r2
 8003076:	061b      	lsls	r3, r3, #24
 8003078:	d511      	bpl.n	800309e <_svfiprintf_r+0x36>
 800307a:	690b      	ldr	r3, [r1, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10e      	bne.n	800309e <_svfiprintf_r+0x36>
 8003080:	2140      	movs	r1, #64	; 0x40
 8003082:	f7ff ff0b 	bl	8002e9c <_malloc_r>
 8003086:	6038      	str	r0, [r7, #0]
 8003088:	6138      	str	r0, [r7, #16]
 800308a:	2800      	cmp	r0, #0
 800308c:	d105      	bne.n	800309a <_svfiprintf_r+0x32>
 800308e:	230c      	movs	r3, #12
 8003090:	9a03      	ldr	r2, [sp, #12]
 8003092:	3801      	subs	r0, #1
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	b021      	add	sp, #132	; 0x84
 8003098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800309a:	2340      	movs	r3, #64	; 0x40
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	2300      	movs	r3, #0
 80030a0:	ac08      	add	r4, sp, #32
 80030a2:	6163      	str	r3, [r4, #20]
 80030a4:	3320      	adds	r3, #32
 80030a6:	7663      	strb	r3, [r4, #25]
 80030a8:	3310      	adds	r3, #16
 80030aa:	76a3      	strb	r3, [r4, #26]
 80030ac:	9507      	str	r5, [sp, #28]
 80030ae:	0035      	movs	r5, r6
 80030b0:	782b      	ldrb	r3, [r5, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <_svfiprintf_r+0x52>
 80030b6:	2b25      	cmp	r3, #37	; 0x25
 80030b8:	d147      	bne.n	800314a <_svfiprintf_r+0xe2>
 80030ba:	1bab      	subs	r3, r5, r6
 80030bc:	9305      	str	r3, [sp, #20]
 80030be:	42b5      	cmp	r5, r6
 80030c0:	d00c      	beq.n	80030dc <_svfiprintf_r+0x74>
 80030c2:	0032      	movs	r2, r6
 80030c4:	0039      	movs	r1, r7
 80030c6:	9803      	ldr	r0, [sp, #12]
 80030c8:	f7ff ff6c 	bl	8002fa4 <__ssputs_r>
 80030cc:	1c43      	adds	r3, r0, #1
 80030ce:	d100      	bne.n	80030d2 <_svfiprintf_r+0x6a>
 80030d0:	e0ae      	b.n	8003230 <_svfiprintf_r+0x1c8>
 80030d2:	6962      	ldr	r2, [r4, #20]
 80030d4:	9b05      	ldr	r3, [sp, #20]
 80030d6:	4694      	mov	ip, r2
 80030d8:	4463      	add	r3, ip
 80030da:	6163      	str	r3, [r4, #20]
 80030dc:	782b      	ldrb	r3, [r5, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d100      	bne.n	80030e4 <_svfiprintf_r+0x7c>
 80030e2:	e0a5      	b.n	8003230 <_svfiprintf_r+0x1c8>
 80030e4:	2201      	movs	r2, #1
 80030e6:	2300      	movs	r3, #0
 80030e8:	4252      	negs	r2, r2
 80030ea:	6062      	str	r2, [r4, #4]
 80030ec:	a904      	add	r1, sp, #16
 80030ee:	3254      	adds	r2, #84	; 0x54
 80030f0:	1852      	adds	r2, r2, r1
 80030f2:	1c6e      	adds	r6, r5, #1
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	60e3      	str	r3, [r4, #12]
 80030f8:	60a3      	str	r3, [r4, #8]
 80030fa:	7013      	strb	r3, [r2, #0]
 80030fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80030fe:	2205      	movs	r2, #5
 8003100:	7831      	ldrb	r1, [r6, #0]
 8003102:	4854      	ldr	r0, [pc, #336]	; (8003254 <_svfiprintf_r+0x1ec>)
 8003104:	f7ff fe62 	bl	8002dcc <memchr>
 8003108:	1c75      	adds	r5, r6, #1
 800310a:	2800      	cmp	r0, #0
 800310c:	d11f      	bne.n	800314e <_svfiprintf_r+0xe6>
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	06d3      	lsls	r3, r2, #27
 8003112:	d504      	bpl.n	800311e <_svfiprintf_r+0xb6>
 8003114:	2353      	movs	r3, #83	; 0x53
 8003116:	a904      	add	r1, sp, #16
 8003118:	185b      	adds	r3, r3, r1
 800311a:	2120      	movs	r1, #32
 800311c:	7019      	strb	r1, [r3, #0]
 800311e:	0713      	lsls	r3, r2, #28
 8003120:	d504      	bpl.n	800312c <_svfiprintf_r+0xc4>
 8003122:	2353      	movs	r3, #83	; 0x53
 8003124:	a904      	add	r1, sp, #16
 8003126:	185b      	adds	r3, r3, r1
 8003128:	212b      	movs	r1, #43	; 0x2b
 800312a:	7019      	strb	r1, [r3, #0]
 800312c:	7833      	ldrb	r3, [r6, #0]
 800312e:	2b2a      	cmp	r3, #42	; 0x2a
 8003130:	d016      	beq.n	8003160 <_svfiprintf_r+0xf8>
 8003132:	0035      	movs	r5, r6
 8003134:	2100      	movs	r1, #0
 8003136:	200a      	movs	r0, #10
 8003138:	68e3      	ldr	r3, [r4, #12]
 800313a:	782a      	ldrb	r2, [r5, #0]
 800313c:	1c6e      	adds	r6, r5, #1
 800313e:	3a30      	subs	r2, #48	; 0x30
 8003140:	2a09      	cmp	r2, #9
 8003142:	d94e      	bls.n	80031e2 <_svfiprintf_r+0x17a>
 8003144:	2900      	cmp	r1, #0
 8003146:	d111      	bne.n	800316c <_svfiprintf_r+0x104>
 8003148:	e017      	b.n	800317a <_svfiprintf_r+0x112>
 800314a:	3501      	adds	r5, #1
 800314c:	e7b0      	b.n	80030b0 <_svfiprintf_r+0x48>
 800314e:	4b41      	ldr	r3, [pc, #260]	; (8003254 <_svfiprintf_r+0x1ec>)
 8003150:	6822      	ldr	r2, [r4, #0]
 8003152:	1ac0      	subs	r0, r0, r3
 8003154:	2301      	movs	r3, #1
 8003156:	4083      	lsls	r3, r0
 8003158:	4313      	orrs	r3, r2
 800315a:	002e      	movs	r6, r5
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	e7ce      	b.n	80030fe <_svfiprintf_r+0x96>
 8003160:	9b07      	ldr	r3, [sp, #28]
 8003162:	1d19      	adds	r1, r3, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	9107      	str	r1, [sp, #28]
 8003168:	2b00      	cmp	r3, #0
 800316a:	db01      	blt.n	8003170 <_svfiprintf_r+0x108>
 800316c:	930b      	str	r3, [sp, #44]	; 0x2c
 800316e:	e004      	b.n	800317a <_svfiprintf_r+0x112>
 8003170:	425b      	negs	r3, r3
 8003172:	60e3      	str	r3, [r4, #12]
 8003174:	2302      	movs	r3, #2
 8003176:	4313      	orrs	r3, r2
 8003178:	6023      	str	r3, [r4, #0]
 800317a:	782b      	ldrb	r3, [r5, #0]
 800317c:	2b2e      	cmp	r3, #46	; 0x2e
 800317e:	d10a      	bne.n	8003196 <_svfiprintf_r+0x12e>
 8003180:	786b      	ldrb	r3, [r5, #1]
 8003182:	2b2a      	cmp	r3, #42	; 0x2a
 8003184:	d135      	bne.n	80031f2 <_svfiprintf_r+0x18a>
 8003186:	9b07      	ldr	r3, [sp, #28]
 8003188:	3502      	adds	r5, #2
 800318a:	1d1a      	adds	r2, r3, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	9207      	str	r2, [sp, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	db2b      	blt.n	80031ec <_svfiprintf_r+0x184>
 8003194:	9309      	str	r3, [sp, #36]	; 0x24
 8003196:	4e30      	ldr	r6, [pc, #192]	; (8003258 <_svfiprintf_r+0x1f0>)
 8003198:	2203      	movs	r2, #3
 800319a:	0030      	movs	r0, r6
 800319c:	7829      	ldrb	r1, [r5, #0]
 800319e:	f7ff fe15 	bl	8002dcc <memchr>
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d006      	beq.n	80031b4 <_svfiprintf_r+0x14c>
 80031a6:	2340      	movs	r3, #64	; 0x40
 80031a8:	1b80      	subs	r0, r0, r6
 80031aa:	4083      	lsls	r3, r0
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	3501      	adds	r5, #1
 80031b0:	4313      	orrs	r3, r2
 80031b2:	6023      	str	r3, [r4, #0]
 80031b4:	7829      	ldrb	r1, [r5, #0]
 80031b6:	2206      	movs	r2, #6
 80031b8:	4828      	ldr	r0, [pc, #160]	; (800325c <_svfiprintf_r+0x1f4>)
 80031ba:	1c6e      	adds	r6, r5, #1
 80031bc:	7621      	strb	r1, [r4, #24]
 80031be:	f7ff fe05 	bl	8002dcc <memchr>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d03c      	beq.n	8003240 <_svfiprintf_r+0x1d8>
 80031c6:	4b26      	ldr	r3, [pc, #152]	; (8003260 <_svfiprintf_r+0x1f8>)
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d125      	bne.n	8003218 <_svfiprintf_r+0x1b0>
 80031cc:	2207      	movs	r2, #7
 80031ce:	9b07      	ldr	r3, [sp, #28]
 80031d0:	3307      	adds	r3, #7
 80031d2:	4393      	bics	r3, r2
 80031d4:	3308      	adds	r3, #8
 80031d6:	9307      	str	r3, [sp, #28]
 80031d8:	6963      	ldr	r3, [r4, #20]
 80031da:	9a04      	ldr	r2, [sp, #16]
 80031dc:	189b      	adds	r3, r3, r2
 80031de:	6163      	str	r3, [r4, #20]
 80031e0:	e765      	b.n	80030ae <_svfiprintf_r+0x46>
 80031e2:	4343      	muls	r3, r0
 80031e4:	0035      	movs	r5, r6
 80031e6:	2101      	movs	r1, #1
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	e7a6      	b.n	800313a <_svfiprintf_r+0xd2>
 80031ec:	2301      	movs	r3, #1
 80031ee:	425b      	negs	r3, r3
 80031f0:	e7d0      	b.n	8003194 <_svfiprintf_r+0x12c>
 80031f2:	2300      	movs	r3, #0
 80031f4:	200a      	movs	r0, #10
 80031f6:	001a      	movs	r2, r3
 80031f8:	3501      	adds	r5, #1
 80031fa:	6063      	str	r3, [r4, #4]
 80031fc:	7829      	ldrb	r1, [r5, #0]
 80031fe:	1c6e      	adds	r6, r5, #1
 8003200:	3930      	subs	r1, #48	; 0x30
 8003202:	2909      	cmp	r1, #9
 8003204:	d903      	bls.n	800320e <_svfiprintf_r+0x1a6>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0c5      	beq.n	8003196 <_svfiprintf_r+0x12e>
 800320a:	9209      	str	r2, [sp, #36]	; 0x24
 800320c:	e7c3      	b.n	8003196 <_svfiprintf_r+0x12e>
 800320e:	4342      	muls	r2, r0
 8003210:	0035      	movs	r5, r6
 8003212:	2301      	movs	r3, #1
 8003214:	1852      	adds	r2, r2, r1
 8003216:	e7f1      	b.n	80031fc <_svfiprintf_r+0x194>
 8003218:	ab07      	add	r3, sp, #28
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	003a      	movs	r2, r7
 800321e:	0021      	movs	r1, r4
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <_svfiprintf_r+0x1fc>)
 8003222:	9803      	ldr	r0, [sp, #12]
 8003224:	e000      	b.n	8003228 <_svfiprintf_r+0x1c0>
 8003226:	bf00      	nop
 8003228:	9004      	str	r0, [sp, #16]
 800322a:	9b04      	ldr	r3, [sp, #16]
 800322c:	3301      	adds	r3, #1
 800322e:	d1d3      	bne.n	80031d8 <_svfiprintf_r+0x170>
 8003230:	89bb      	ldrh	r3, [r7, #12]
 8003232:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003234:	065b      	lsls	r3, r3, #25
 8003236:	d400      	bmi.n	800323a <_svfiprintf_r+0x1d2>
 8003238:	e72d      	b.n	8003096 <_svfiprintf_r+0x2e>
 800323a:	2001      	movs	r0, #1
 800323c:	4240      	negs	r0, r0
 800323e:	e72a      	b.n	8003096 <_svfiprintf_r+0x2e>
 8003240:	ab07      	add	r3, sp, #28
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	003a      	movs	r2, r7
 8003246:	0021      	movs	r1, r4
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <_svfiprintf_r+0x1fc>)
 800324a:	9803      	ldr	r0, [sp, #12]
 800324c:	f7ff fc8a 	bl	8002b64 <_printf_i>
 8003250:	e7ea      	b.n	8003228 <_svfiprintf_r+0x1c0>
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	080033dc 	.word	0x080033dc
 8003258:	080033e2 	.word	0x080033e2
 800325c:	080033e6 	.word	0x080033e6
 8003260:	00000000 	.word	0x00000000
 8003264:	08002fa5 	.word	0x08002fa5

08003268 <_sbrk_r>:
 8003268:	2300      	movs	r3, #0
 800326a:	b570      	push	{r4, r5, r6, lr}
 800326c:	4d06      	ldr	r5, [pc, #24]	; (8003288 <_sbrk_r+0x20>)
 800326e:	0004      	movs	r4, r0
 8003270:	0008      	movs	r0, r1
 8003272:	602b      	str	r3, [r5, #0]
 8003274:	f000 f822 	bl	80032bc <_sbrk>
 8003278:	1c43      	adds	r3, r0, #1
 800327a:	d103      	bne.n	8003284 <_sbrk_r+0x1c>
 800327c:	682b      	ldr	r3, [r5, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d000      	beq.n	8003284 <_sbrk_r+0x1c>
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	bd70      	pop	{r4, r5, r6, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	20000484 	.word	0x20000484

0800328c <__malloc_lock>:
 800328c:	b510      	push	{r4, lr}
 800328e:	4802      	ldr	r0, [pc, #8]	; (8003298 <__malloc_lock+0xc>)
 8003290:	f7ff fd9a 	bl	8002dc8 <__retarget_lock_acquire_recursive>
 8003294:	bd10      	pop	{r4, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	2000047c 	.word	0x2000047c

0800329c <__malloc_unlock>:
 800329c:	b510      	push	{r4, lr}
 800329e:	4802      	ldr	r0, [pc, #8]	; (80032a8 <__malloc_unlock+0xc>)
 80032a0:	f7ff fd93 	bl	8002dca <__retarget_lock_release_recursive>
 80032a4:	bd10      	pop	{r4, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	2000047c 	.word	0x2000047c

080032ac <_malloc_usable_size_r>:
 80032ac:	1f0b      	subs	r3, r1, #4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	1f18      	subs	r0, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da01      	bge.n	80032ba <_malloc_usable_size_r+0xe>
 80032b6:	580b      	ldr	r3, [r1, r0]
 80032b8:	18c0      	adds	r0, r0, r3
 80032ba:	4770      	bx	lr

080032bc <_sbrk>:
 80032bc:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <_sbrk+0x18>)
 80032be:	0003      	movs	r3, r0
 80032c0:	6811      	ldr	r1, [r2, #0]
 80032c2:	2900      	cmp	r1, #0
 80032c4:	d101      	bne.n	80032ca <_sbrk+0xe>
 80032c6:	4904      	ldr	r1, [pc, #16]	; (80032d8 <_sbrk+0x1c>)
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	6810      	ldr	r0, [r2, #0]
 80032cc:	18c3      	adds	r3, r0, r3
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4770      	bx	lr
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	20000250 	.word	0x20000250
 80032d8:	20000488 	.word	0x20000488

080032dc <_init>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr

080032e8 <_fini>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr
