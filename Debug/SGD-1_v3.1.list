
SGD-1_v3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c0  20000000  080053e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003d8  200001c0  080055a4  000201c0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000598  080055a4  00020598  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ef7b  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004327  00000000  00000000  0003f163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00011ab7  00000000  00000000  0004348a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001148  00000000  00000000  00054f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fe0  00000000  00000000  00056090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000139b3  00000000  00000000  00057070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d7be  00000000  00000000  0006aa23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0006a24a  00000000  00000000  000881e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000f242b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003750  00000000  00000000  000f2480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  000f5bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  000f5c9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c0 	.word	0x200001c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e10 	.word	0x08004e10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001c4 	.word	0x200001c4
 8000104:	08004e10 	.word	0x08004e10

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000234:	4770      	bx	lr
	...

08000238 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000238:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800023a:	4a06      	ldr	r2, [pc, #24]	; (8000254 <HAL_Init+0x1c>)
 800023c:	6813      	ldr	r3, [r2, #0]
 800023e:	2110      	movs	r1, #16
 8000240:	430b      	orrs	r3, r1
 8000242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000244:	2000      	movs	r0, #0
 8000246:	f002 fd31 	bl	8002cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800024a:	f002 fc8f 	bl	8002b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40022000 	.word	0x40022000

08000258 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000258:	4a03      	ldr	r2, [pc, #12]	; (8000268 <HAL_IncTick+0x10>)
 800025a:	6811      	ldr	r1, [r2, #0]
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <HAL_IncTick+0x14>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	185b      	adds	r3, r3, r1
 8000262:	6013      	str	r3, [r2, #0]
}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000260 	.word	0x20000260
 800026c:	20000004 	.word	0x20000004

08000270 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000270:	4b01      	ldr	r3, [pc, #4]	; (8000278 <HAL_GetTick+0x8>)
 8000272:	6818      	ldr	r0, [r3, #0]
}
 8000274:	4770      	bx	lr
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	20000260 	.word	0x20000260

0800027c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800027c:	b570      	push	{r4, r5, r6, lr}
 800027e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000280:	f7ff fff6 	bl	8000270 <HAL_GetTick>
 8000284:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000286:	1c63      	adds	r3, r4, #1
 8000288:	d002      	beq.n	8000290 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <HAL_Delay+0x20>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000290:	f7ff ffee 	bl	8000270 <HAL_GetTick>
 8000294:	1b40      	subs	r0, r0, r5
 8000296:	42a0      	cmp	r0, r4
 8000298:	d3fa      	bcc.n	8000290 <HAL_Delay+0x14>
  {
  }
}
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	20000004 	.word	0x20000004

080002a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a0:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80002a2:	2800      	cmp	r0, #0
 80002a4:	db11      	blt.n	80002ca <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a6:	0883      	lsrs	r3, r0, #2
 80002a8:	4e13      	ldr	r6, [pc, #76]	; (80002f8 <HAL_NVIC_SetPriority+0x58>)
 80002aa:	33c0      	adds	r3, #192	; 0xc0
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	599d      	ldr	r5, [r3, r6]
 80002b0:	2403      	movs	r4, #3
 80002b2:	4020      	ands	r0, r4
 80002b4:	00c0      	lsls	r0, r0, #3
 80002b6:	22ff      	movs	r2, #255	; 0xff
 80002b8:	0014      	movs	r4, r2
 80002ba:	4084      	lsls	r4, r0
 80002bc:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002be:	0189      	lsls	r1, r1, #6
 80002c0:	400a      	ands	r2, r1
 80002c2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c4:	432a      	orrs	r2, r5
 80002c6:	519a      	str	r2, [r3, r6]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80002c8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ca:	230f      	movs	r3, #15
 80002cc:	4003      	ands	r3, r0
 80002ce:	3b08      	subs	r3, #8
 80002d0:	089b      	lsrs	r3, r3, #2
 80002d2:	3306      	adds	r3, #6
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	4a09      	ldr	r2, [pc, #36]	; (80002fc <HAL_NVIC_SetPriority+0x5c>)
 80002d8:	4694      	mov	ip, r2
 80002da:	4463      	add	r3, ip
 80002dc:	685c      	ldr	r4, [r3, #4]
 80002de:	2203      	movs	r2, #3
 80002e0:	4010      	ands	r0, r2
 80002e2:	00c0      	lsls	r0, r0, #3
 80002e4:	32fc      	adds	r2, #252	; 0xfc
 80002e6:	0015      	movs	r5, r2
 80002e8:	4085      	lsls	r5, r0
 80002ea:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ec:	0189      	lsls	r1, r1, #6
 80002ee:	400a      	ands	r2, r1
 80002f0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f2:	4322      	orrs	r2, r4
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	e7e7      	b.n	80002c8 <HAL_NVIC_SetPriority+0x28>
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000300:	2800      	cmp	r0, #0
 8000302:	db05      	blt.n	8000310 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000304:	231f      	movs	r3, #31
 8000306:	4018      	ands	r0, r3
 8000308:	3b1e      	subs	r3, #30
 800030a:	4083      	lsls	r3, r0
 800030c:	4a01      	ldr	r2, [pc, #4]	; (8000314 <HAL_NVIC_EnableIRQ+0x14>)
 800030e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000310:	4770      	bx	lr
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	e000e100 	.word	0xe000e100

08000318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	3801      	subs	r0, #1
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	045b      	lsls	r3, r3, #17
 800031e:	4298      	cmp	r0, r3
 8000320:	d20f      	bcs.n	8000342 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <HAL_SYSTICK_Config+0x30>)
 8000324:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	4809      	ldr	r0, [pc, #36]	; (800034c <HAL_SYSTICK_Config+0x34>)
 8000328:	6a03      	ldr	r3, [r0, #32]
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	21c0      	movs	r1, #192	; 0xc0
 8000330:	0609      	lsls	r1, r1, #24
 8000332:	430b      	orrs	r3, r1
 8000334:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	2300      	movs	r3, #0
 8000338:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033a:	3307      	adds	r3, #7
 800033c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000340:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000342:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000344:	e7fc      	b.n	8000340 <HAL_SYSTICK_Config+0x28>
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000350:	2804      	cmp	r0, #4
 8000352:	d005      	beq.n	8000360 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000354:	4a05      	ldr	r2, [pc, #20]	; (800036c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	2104      	movs	r1, #4
 800035a:	438b      	bics	r3, r1
 800035c:	6013      	str	r3, [r2, #0]
  }
}
 800035e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000360:	4a02      	ldr	r2, [pc, #8]	; (800036c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000362:	6813      	ldr	r3, [r2, #0]
 8000364:	2104      	movs	r1, #4
 8000366:	430b      	orrs	r3, r1
 8000368:	6013      	str	r3, [r2, #0]
 800036a:	e7f8      	b.n	800035e <HAL_SYSTICK_CLKSourceConfig+0xe>
 800036c:	e000e010 	.word	0xe000e010

08000370 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000370:	4770      	bx	lr

08000372 <HAL_SYSTICK_IRQHandler>:
{
 8000372:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000374:	f7ff fffc 	bl	8000370 <HAL_SYSTICK_Callback>
}
 8000378:	bd10      	pop	{r4, pc}

0800037a <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800037a:	b510      	push	{r4, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800037c:	2321      	movs	r3, #33	; 0x21
 800037e:	5cc3      	ldrb	r3, [r0, r3]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d006      	beq.n	8000392 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000384:	2304      	movs	r3, #4
 8000386:	6383      	str	r3, [r0, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000388:	331c      	adds	r3, #28
 800038a:	2200      	movs	r2, #0
 800038c:	54c2      	strb	r2, [r0, r3]

    return HAL_ERROR;
 800038e:	2001      	movs	r0, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8000390:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000392:	6802      	ldr	r2, [r0, #0]
 8000394:	6813      	ldr	r3, [r2, #0]
 8000396:	210e      	movs	r1, #14
 8000398:	438b      	bics	r3, r1
 800039a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800039c:	6801      	ldr	r1, [r0, #0]
 800039e:	680a      	ldr	r2, [r1, #0]
 80003a0:	2301      	movs	r3, #1
 80003a2:	439a      	bics	r2, r3
 80003a4:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80003a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80003a8:	0019      	movs	r1, r3
 80003aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80003ac:	40a1      	lsls	r1, r4
 80003ae:	6051      	str	r1, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80003b0:	2221      	movs	r2, #33	; 0x21
 80003b2:	5483      	strb	r3, [r0, r2]
  __HAL_UNLOCK(hdma);
 80003b4:	331f      	adds	r3, #31
 80003b6:	2200      	movs	r2, #0
 80003b8:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80003ba:	2000      	movs	r0, #0
 80003bc:	e7e8      	b.n	8000390 <HAL_DMA_Abort+0x16>

080003be <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80003be:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80003c0:	2321      	movs	r3, #33	; 0x21
 80003c2:	5cc3      	ldrb	r3, [r0, r3]
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	d003      	beq.n	80003d0 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003c8:	2304      	movs	r3, #4
 80003ca:	6383      	str	r3, [r0, #56]	; 0x38

    status = HAL_ERROR;
 80003cc:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80003ce:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80003d0:	6802      	ldr	r2, [r0, #0]
 80003d2:	6813      	ldr	r3, [r2, #0]
 80003d4:	210e      	movs	r1, #14
 80003d6:	438b      	bics	r3, r1
 80003d8:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80003da:	6801      	ldr	r1, [r0, #0]
 80003dc:	680a      	ldr	r2, [r1, #0]
 80003de:	2301      	movs	r3, #1
 80003e0:	439a      	bics	r2, r3
 80003e2:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80003e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80003e6:	0019      	movs	r1, r3
 80003e8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80003ea:	40a1      	lsls	r1, r4
 80003ec:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80003ee:	2221      	movs	r2, #33	; 0x21
 80003f0:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80003f2:	331f      	adds	r3, #31
 80003f4:	2200      	movs	r2, #0
 80003f6:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80003f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d002      	beq.n	8000404 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80003fe:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000400:	2000      	movs	r0, #0
 8000402:	e7e4      	b.n	80003ce <HAL_DMA_Abort_IT+0x10>
 8000404:	2000      	movs	r0, #0
 8000406:	e7e2      	b.n	80003ce <HAL_DMA_Abort_IT+0x10>

08000408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800040c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800040e:	e057      	b.n	80004c0 <HAL_GPIO_Init+0xb8>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000410:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000412:	005f      	lsls	r7, r3, #1
 8000414:	2603      	movs	r6, #3
 8000416:	40be      	lsls	r6, r7
 8000418:	43b4      	bics	r4, r6
 800041a:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800041c:	68cc      	ldr	r4, [r1, #12]
 800041e:	40bc      	lsls	r4, r7
 8000420:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000422:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000424:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000426:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000428:	684a      	ldr	r2, [r1, #4]
 800042a:	0916      	lsrs	r6, r2, #4
 800042c:	2201      	movs	r2, #1
 800042e:	4032      	ands	r2, r6
 8000430:	409a      	lsls	r2, r3
 8000432:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000434:	6042      	str	r2, [r0, #4]
 8000436:	e053      	b.n	80004e0 <HAL_GPIO_Init+0xd8>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000438:	08dc      	lsrs	r4, r3, #3
 800043a:	3408      	adds	r4, #8
 800043c:	00a4      	lsls	r4, r4, #2
 800043e:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000440:	3205      	adds	r2, #5
 8000442:	401a      	ands	r2, r3
 8000444:	0092      	lsls	r2, r2, #2
 8000446:	270f      	movs	r7, #15
 8000448:	4097      	lsls	r7, r2
 800044a:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800044c:	690f      	ldr	r7, [r1, #16]
 800044e:	4097      	lsls	r7, r2
 8000450:	003a      	movs	r2, r7
 8000452:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 8000454:	5022      	str	r2, [r4, r0]
 8000456:	e057      	b.n	8000508 <HAL_GPIO_Init+0x100>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000458:	2603      	movs	r6, #3
 800045a:	e000      	b.n	800045e <HAL_GPIO_Init+0x56>
 800045c:	2600      	movs	r6, #0
 800045e:	40a6      	lsls	r6, r4
 8000460:	0034      	movs	r4, r6
 8000462:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000464:	3202      	adds	r2, #2
 8000466:	0092      	lsls	r2, r2, #2
 8000468:	4e44      	ldr	r6, [pc, #272]	; (800057c <HAL_GPIO_Init+0x174>)
 800046a:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800046c:	4a44      	ldr	r2, [pc, #272]	; (8000580 <HAL_GPIO_Init+0x178>)
 800046e:	6894      	ldr	r4, [r2, #8]
        temp &= ~(iocurrent);
 8000470:	43ea      	mvns	r2, r5
 8000472:	0026      	movs	r6, r4
 8000474:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000476:	684f      	ldr	r7, [r1, #4]
 8000478:	02ff      	lsls	r7, r7, #11
 800047a:	d501      	bpl.n	8000480 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 800047c:	432c      	orrs	r4, r5
 800047e:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8000480:	4c3f      	ldr	r4, [pc, #252]	; (8000580 <HAL_GPIO_Init+0x178>)
 8000482:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000484:	68e4      	ldr	r4, [r4, #12]
        temp &= ~(iocurrent);
 8000486:	0026      	movs	r6, r4
 8000488:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800048a:	684f      	ldr	r7, [r1, #4]
 800048c:	02bf      	lsls	r7, r7, #10
 800048e:	d501      	bpl.n	8000494 <HAL_GPIO_Init+0x8c>
        {
          temp |= iocurrent;
 8000490:	432c      	orrs	r4, r5
 8000492:	0026      	movs	r6, r4
        }
        EXTI->FTSR = temp;
 8000494:	4c3a      	ldr	r4, [pc, #232]	; (8000580 <HAL_GPIO_Init+0x178>)
 8000496:	60e6      	str	r6, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000498:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 800049a:	0026      	movs	r6, r4
 800049c:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800049e:	684f      	ldr	r7, [r1, #4]
 80004a0:	03bf      	lsls	r7, r7, #14
 80004a2:	d501      	bpl.n	80004a8 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80004a4:	432c      	orrs	r4, r5
 80004a6:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 80004a8:	4c35      	ldr	r4, [pc, #212]	; (8000580 <HAL_GPIO_Init+0x178>)
 80004aa:	6066      	str	r6, [r4, #4]

        temp = EXTI->IMR;
 80004ac:	6824      	ldr	r4, [r4, #0]
        temp &= ~(iocurrent);
 80004ae:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80004b0:	684e      	ldr	r6, [r1, #4]
 80004b2:	03f6      	lsls	r6, r6, #15
 80004b4:	d501      	bpl.n	80004ba <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 80004b6:	002a      	movs	r2, r5
 80004b8:	4322      	orrs	r2, r4
        }
        EXTI->IMR = temp;
 80004ba:	4c31      	ldr	r4, [pc, #196]	; (8000580 <HAL_GPIO_Init+0x178>)
 80004bc:	6022      	str	r2, [r4, #0]
      }
    }

    position++;
 80004be:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004c0:	680c      	ldr	r4, [r1, #0]
 80004c2:	0022      	movs	r2, r4
 80004c4:	40da      	lsrs	r2, r3
 80004c6:	d057      	beq.n	8000578 <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004c8:	2201      	movs	r2, #1
 80004ca:	409a      	lsls	r2, r3
 80004cc:	0025      	movs	r5, r4
 80004ce:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 80004d0:	4214      	tst	r4, r2
 80004d2:	d0f4      	beq.n	80004be <HAL_GPIO_Init+0xb6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80004d4:	2403      	movs	r4, #3
 80004d6:	684e      	ldr	r6, [r1, #4]
 80004d8:	4034      	ands	r4, r6
 80004da:	3c01      	subs	r4, #1
 80004dc:	2c01      	cmp	r4, #1
 80004de:	d997      	bls.n	8000410 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80004e0:	2203      	movs	r2, #3
 80004e2:	684c      	ldr	r4, [r1, #4]
 80004e4:	4022      	ands	r2, r4
 80004e6:	2a03      	cmp	r2, #3
 80004e8:	d009      	beq.n	80004fe <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 80004ea:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80004ec:	005e      	lsls	r6, r3, #1
 80004ee:	2403      	movs	r4, #3
 80004f0:	40b4      	lsls	r4, r6
 80004f2:	43a2      	bics	r2, r4
 80004f4:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80004f6:	688a      	ldr	r2, [r1, #8]
 80004f8:	40b2      	lsls	r2, r6
 80004fa:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80004fc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80004fe:	2203      	movs	r2, #3
 8000500:	684c      	ldr	r4, [r1, #4]
 8000502:	4022      	ands	r2, r4
 8000504:	2a02      	cmp	r2, #2
 8000506:	d097      	beq.n	8000438 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8000508:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800050a:	005e      	lsls	r6, r3, #1
 800050c:	2203      	movs	r2, #3
 800050e:	0017      	movs	r7, r2
 8000510:	40b7      	lsls	r7, r6
 8000512:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000514:	684f      	ldr	r7, [r1, #4]
 8000516:	403a      	ands	r2, r7
 8000518:	40b2      	lsls	r2, r6
 800051a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800051c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800051e:	22c0      	movs	r2, #192	; 0xc0
 8000520:	0292      	lsls	r2, r2, #10
 8000522:	684c      	ldr	r4, [r1, #4]
 8000524:	4214      	tst	r4, r2
 8000526:	d0ca      	beq.n	80004be <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000528:	4c16      	ldr	r4, [pc, #88]	; (8000584 <HAL_GPIO_Init+0x17c>)
 800052a:	69a6      	ldr	r6, [r4, #24]
 800052c:	2201      	movs	r2, #1
 800052e:	4316      	orrs	r6, r2
 8000530:	61a6      	str	r6, [r4, #24]
 8000532:	69a4      	ldr	r4, [r4, #24]
 8000534:	4022      	ands	r2, r4
 8000536:	9201      	str	r2, [sp, #4]
 8000538:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800053a:	089a      	lsrs	r2, r3, #2
 800053c:	1c94      	adds	r4, r2, #2
 800053e:	00a4      	lsls	r4, r4, #2
 8000540:	4e0e      	ldr	r6, [pc, #56]	; (800057c <HAL_GPIO_Init+0x174>)
 8000542:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000544:	2403      	movs	r4, #3
 8000546:	401c      	ands	r4, r3
 8000548:	00a4      	lsls	r4, r4, #2
 800054a:	260f      	movs	r6, #15
 800054c:	40a6      	lsls	r6, r4
 800054e:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000550:	2690      	movs	r6, #144	; 0x90
 8000552:	05f6      	lsls	r6, r6, #23
 8000554:	42b0      	cmp	r0, r6
 8000556:	d081      	beq.n	800045c <HAL_GPIO_Init+0x54>
 8000558:	4e0b      	ldr	r6, [pc, #44]	; (8000588 <HAL_GPIO_Init+0x180>)
 800055a:	42b0      	cmp	r0, r6
 800055c:	d008      	beq.n	8000570 <HAL_GPIO_Init+0x168>
 800055e:	4e0b      	ldr	r6, [pc, #44]	; (800058c <HAL_GPIO_Init+0x184>)
 8000560:	42b0      	cmp	r0, r6
 8000562:	d007      	beq.n	8000574 <HAL_GPIO_Init+0x16c>
 8000564:	4e0a      	ldr	r6, [pc, #40]	; (8000590 <HAL_GPIO_Init+0x188>)
 8000566:	42b0      	cmp	r0, r6
 8000568:	d100      	bne.n	800056c <HAL_GPIO_Init+0x164>
 800056a:	e775      	b.n	8000458 <HAL_GPIO_Init+0x50>
 800056c:	2605      	movs	r6, #5
 800056e:	e776      	b.n	800045e <HAL_GPIO_Init+0x56>
 8000570:	2601      	movs	r6, #1
 8000572:	e774      	b.n	800045e <HAL_GPIO_Init+0x56>
 8000574:	2602      	movs	r6, #2
 8000576:	e772      	b.n	800045e <HAL_GPIO_Init+0x56>
  } 
}
 8000578:	b003      	add	sp, #12
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	40010000 	.word	0x40010000
 8000580:	40010400 	.word	0x40010400
 8000584:	40021000 	.word	0x40021000
 8000588:	48000400 	.word	0x48000400
 800058c:	48000800 	.word	0x48000800
 8000590:	48000c00 	.word	0x48000c00

08000594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800059a:	d100      	bne.n	800059e <HAL_RCC_OscConfig+0xa>
 800059c:	e22e      	b.n	80009fc <HAL_RCC_OscConfig+0x468>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800059e:	6803      	ldr	r3, [r0, #0]
 80005a0:	07db      	lsls	r3, r3, #31
 80005a2:	d526      	bpl.n	80005f2 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005a4:	4bae      	ldr	r3, [pc, #696]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80005a6:	685a      	ldr	r2, [r3, #4]
 80005a8:	230c      	movs	r3, #12
 80005aa:	4013      	ands	r3, r2
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d018      	beq.n	80005e2 <HAL_RCC_OscConfig+0x4e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005b0:	4bab      	ldr	r3, [pc, #684]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	230c      	movs	r3, #12
 80005b6:	4013      	ands	r3, r2
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d00e      	beq.n	80005da <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005bc:	6863      	ldr	r3, [r4, #4]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d03c      	beq.n	800063c <HAL_RCC_OscConfig+0xa8>
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d151      	bne.n	800066a <HAL_RCC_OscConfig+0xd6>
 80005c6:	4ba6      	ldr	r3, [pc, #664]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	49a6      	ldr	r1, [pc, #664]	; (8000864 <HAL_RCC_OscConfig+0x2d0>)
 80005cc:	400a      	ands	r2, r1
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	49a5      	ldr	r1, [pc, #660]	; (8000868 <HAL_RCC_OscConfig+0x2d4>)
 80005d4:	400a      	ands	r2, r1
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	e036      	b.n	8000648 <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005da:	4ba1      	ldr	r3, [pc, #644]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	03db      	lsls	r3, r3, #15
 80005e0:	d5ec      	bpl.n	80005bc <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005e2:	4b9f      	ldr	r3, [pc, #636]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	039b      	lsls	r3, r3, #14
 80005e8:	d503      	bpl.n	80005f2 <HAL_RCC_OscConfig+0x5e>
 80005ea:	6863      	ldr	r3, [r4, #4]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d100      	bne.n	80005f2 <HAL_RCC_OscConfig+0x5e>
 80005f0:	e207      	b.n	8000a02 <HAL_RCC_OscConfig+0x46e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	079b      	lsls	r3, r3, #30
 80005f6:	d572      	bpl.n	80006de <HAL_RCC_OscConfig+0x14a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005f8:	4b99      	ldr	r3, [pc, #612]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	220c      	movs	r2, #12
 80005fe:	421a      	tst	r2, r3
 8000600:	d05d      	beq.n	80006be <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000602:	4b97      	ldr	r3, [pc, #604]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	230c      	movs	r3, #12
 8000608:	4013      	ands	r3, r2
 800060a:	2b08      	cmp	r3, #8
 800060c:	d053      	beq.n	80006b6 <HAL_RCC_OscConfig+0x122>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800060e:	68e3      	ldr	r3, [r4, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d100      	bne.n	8000616 <HAL_RCC_OscConfig+0x82>
 8000614:	e085      	b.n	8000722 <HAL_RCC_OscConfig+0x18e>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000616:	4a92      	ldr	r2, [pc, #584]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000618:	6813      	ldr	r3, [r2, #0]
 800061a:	2101      	movs	r1, #1
 800061c:	430b      	orrs	r3, r1
 800061e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000620:	f7ff fe26 	bl	8000270 <HAL_GetTick>
 8000624:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000626:	4b8e      	ldr	r3, [pc, #568]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	079b      	lsls	r3, r3, #30
 800062c:	d470      	bmi.n	8000710 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800062e:	f7ff fe1f 	bl	8000270 <HAL_GetTick>
 8000632:	1b40      	subs	r0, r0, r5
 8000634:	2802      	cmp	r0, #2
 8000636:	d9f6      	bls.n	8000626 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8000638:	2003      	movs	r0, #3
 800063a:	e1e0      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800063c:	4a88      	ldr	r2, [pc, #544]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 800063e:	6811      	ldr	r1, [r2, #0]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	025b      	lsls	r3, r3, #9
 8000644:	430b      	orrs	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000648:	6863      	ldr	r3, [r4, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d025      	beq.n	800069a <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800064e:	f7ff fe0f 	bl	8000270 <HAL_GetTick>
 8000652:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000654:	4b82      	ldr	r3, [pc, #520]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	039b      	lsls	r3, r3, #14
 800065a:	d4ca      	bmi.n	80005f2 <HAL_RCC_OscConfig+0x5e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800065c:	f7ff fe08 	bl	8000270 <HAL_GetTick>
 8000660:	1b40      	subs	r0, r0, r5
 8000662:	2864      	cmp	r0, #100	; 0x64
 8000664:	d9f6      	bls.n	8000654 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8000666:	2003      	movs	r0, #3
 8000668:	e1c9      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800066a:	2b05      	cmp	r3, #5
 800066c:	d009      	beq.n	8000682 <HAL_RCC_OscConfig+0xee>
 800066e:	4b7c      	ldr	r3, [pc, #496]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	497c      	ldr	r1, [pc, #496]	; (8000864 <HAL_RCC_OscConfig+0x2d0>)
 8000674:	400a      	ands	r2, r1
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	497b      	ldr	r1, [pc, #492]	; (8000868 <HAL_RCC_OscConfig+0x2d4>)
 800067c:	400a      	ands	r2, r1
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	e7e2      	b.n	8000648 <HAL_RCC_OscConfig+0xb4>
 8000682:	4b77      	ldr	r3, [pc, #476]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000684:	6819      	ldr	r1, [r3, #0]
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	02d2      	lsls	r2, r2, #11
 800068a:	430a      	orrs	r2, r1
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	6819      	ldr	r1, [r3, #0]
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	0252      	lsls	r2, r2, #9
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	e7d6      	b.n	8000648 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 800069a:	f7ff fde9 	bl	8000270 <HAL_GetTick>
 800069e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006a0:	4b6f      	ldr	r3, [pc, #444]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	039b      	lsls	r3, r3, #14
 80006a6:	d5a4      	bpl.n	80005f2 <HAL_RCC_OscConfig+0x5e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006a8:	f7ff fde2 	bl	8000270 <HAL_GetTick>
 80006ac:	1b40      	subs	r0, r0, r5
 80006ae:	2864      	cmp	r0, #100	; 0x64
 80006b0:	d9f6      	bls.n	80006a0 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80006b2:	2003      	movs	r0, #3
 80006b4:	e1a3      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006b6:	4b6a      	ldr	r3, [pc, #424]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	03db      	lsls	r3, r3, #15
 80006bc:	d4a7      	bmi.n	800060e <HAL_RCC_OscConfig+0x7a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006be:	4b68      	ldr	r3, [pc, #416]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	079b      	lsls	r3, r3, #30
 80006c4:	d503      	bpl.n	80006ce <HAL_RCC_OscConfig+0x13a>
 80006c6:	68e3      	ldr	r3, [r4, #12]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d000      	beq.n	80006ce <HAL_RCC_OscConfig+0x13a>
 80006cc:	e19b      	b.n	8000a06 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006ce:	4964      	ldr	r1, [pc, #400]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80006d0:	680b      	ldr	r3, [r1, #0]
 80006d2:	22f8      	movs	r2, #248	; 0xf8
 80006d4:	4393      	bics	r3, r2
 80006d6:	6922      	ldr	r2, [r4, #16]
 80006d8:	00d2      	lsls	r2, r2, #3
 80006da:	4313      	orrs	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	071b      	lsls	r3, r3, #28
 80006e2:	d544      	bpl.n	800076e <HAL_RCC_OscConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006e4:	69e3      	ldr	r3, [r4, #28]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d02e      	beq.n	8000748 <HAL_RCC_OscConfig+0x1b4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006ea:	4a5d      	ldr	r2, [pc, #372]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80006ec:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80006ee:	2101      	movs	r1, #1
 80006f0:	430b      	orrs	r3, r1
 80006f2:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006f4:	f7ff fdbc 	bl	8000270 <HAL_GetTick>
 80006f8:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006fa:	4b59      	ldr	r3, [pc, #356]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	079b      	lsls	r3, r3, #30
 8000700:	d435      	bmi.n	800076e <HAL_RCC_OscConfig+0x1da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000702:	f7ff fdb5 	bl	8000270 <HAL_GetTick>
 8000706:	1b40      	subs	r0, r0, r5
 8000708:	2802      	cmp	r0, #2
 800070a:	d9f6      	bls.n	80006fa <HAL_RCC_OscConfig+0x166>
        {
          return HAL_TIMEOUT;
 800070c:	2003      	movs	r0, #3
 800070e:	e176      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000710:	4953      	ldr	r1, [pc, #332]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000712:	680b      	ldr	r3, [r1, #0]
 8000714:	22f8      	movs	r2, #248	; 0xf8
 8000716:	4393      	bics	r3, r2
 8000718:	6922      	ldr	r2, [r4, #16]
 800071a:	00d2      	lsls	r2, r2, #3
 800071c:	4313      	orrs	r3, r2
 800071e:	600b      	str	r3, [r1, #0]
 8000720:	e7dd      	b.n	80006de <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8000722:	4a4f      	ldr	r2, [pc, #316]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000724:	6813      	ldr	r3, [r2, #0]
 8000726:	2101      	movs	r1, #1
 8000728:	438b      	bics	r3, r1
 800072a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800072c:	f7ff fda0 	bl	8000270 <HAL_GetTick>
 8000730:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000732:	4b4b      	ldr	r3, [pc, #300]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	079b      	lsls	r3, r3, #30
 8000738:	d5d1      	bpl.n	80006de <HAL_RCC_OscConfig+0x14a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800073a:	f7ff fd99 	bl	8000270 <HAL_GetTick>
 800073e:	1b40      	subs	r0, r0, r5
 8000740:	2802      	cmp	r0, #2
 8000742:	d9f6      	bls.n	8000732 <HAL_RCC_OscConfig+0x19e>
            return HAL_TIMEOUT;
 8000744:	2003      	movs	r0, #3
 8000746:	e15a      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000748:	4a45      	ldr	r2, [pc, #276]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 800074a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800074c:	2101      	movs	r1, #1
 800074e:	438b      	bics	r3, r1
 8000750:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000752:	f7ff fd8d 	bl	8000270 <HAL_GetTick>
 8000756:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000758:	4b41      	ldr	r3, [pc, #260]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 800075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075c:	079b      	lsls	r3, r3, #30
 800075e:	d506      	bpl.n	800076e <HAL_RCC_OscConfig+0x1da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000760:	f7ff fd86 	bl	8000270 <HAL_GetTick>
 8000764:	1b40      	subs	r0, r0, r5
 8000766:	2802      	cmp	r0, #2
 8000768:	d9f6      	bls.n	8000758 <HAL_RCC_OscConfig+0x1c4>
        {
          return HAL_TIMEOUT;
 800076a:	2003      	movs	r0, #3
 800076c:	e147      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	075b      	lsls	r3, r3, #29
 8000772:	d400      	bmi.n	8000776 <HAL_RCC_OscConfig+0x1e2>
 8000774:	e080      	b.n	8000878 <HAL_RCC_OscConfig+0x2e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000776:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	d40b      	bmi.n	8000796 <HAL_RCC_OscConfig+0x202>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4a38      	ldr	r2, [pc, #224]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000780:	69d1      	ldr	r1, [r2, #28]
 8000782:	2080      	movs	r0, #128	; 0x80
 8000784:	0540      	lsls	r0, r0, #21
 8000786:	4301      	orrs	r1, r0
 8000788:	61d1      	str	r1, [r2, #28]
 800078a:	69d3      	ldr	r3, [r2, #28]
 800078c:	4003      	ands	r3, r0
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000792:	2501      	movs	r5, #1
 8000794:	e000      	b.n	8000798 <HAL_RCC_OscConfig+0x204>
    FlagStatus       pwrclkchanged = RESET;
 8000796:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000798:	4b34      	ldr	r3, [pc, #208]	; (800086c <HAL_RCC_OscConfig+0x2d8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	d50e      	bpl.n	80007be <HAL_RCC_OscConfig+0x22a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a0:	68a3      	ldr	r3, [r4, #8]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d01f      	beq.n	80007e6 <HAL_RCC_OscConfig+0x252>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d134      	bne.n	8000814 <HAL_RCC_OscConfig+0x280>
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80007ac:	6a1a      	ldr	r2, [r3, #32]
 80007ae:	2101      	movs	r1, #1
 80007b0:	438a      	bics	r2, r1
 80007b2:	621a      	str	r2, [r3, #32]
 80007b4:	6a1a      	ldr	r2, [r3, #32]
 80007b6:	3103      	adds	r1, #3
 80007b8:	438a      	bics	r2, r1
 80007ba:	621a      	str	r2, [r3, #32]
 80007bc:	e018      	b.n	80007f0 <HAL_RCC_OscConfig+0x25c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007be:	4a2b      	ldr	r2, [pc, #172]	; (800086c <HAL_RCC_OscConfig+0x2d8>)
 80007c0:	6811      	ldr	r1, [r2, #0]
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	430b      	orrs	r3, r1
 80007c8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80007ca:	f7ff fd51 	bl	8000270 <HAL_GetTick>
 80007ce:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <HAL_RCC_OscConfig+0x2d8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	d4e3      	bmi.n	80007a0 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007d8:	f7ff fd4a 	bl	8000270 <HAL_GetTick>
 80007dc:	1b80      	subs	r0, r0, r6
 80007de:	2864      	cmp	r0, #100	; 0x64
 80007e0:	d9f6      	bls.n	80007d0 <HAL_RCC_OscConfig+0x23c>
          return HAL_TIMEOUT;
 80007e2:	2003      	movs	r0, #3
 80007e4:	e10b      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e6:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80007e8:	6a13      	ldr	r3, [r2, #32]
 80007ea:	2101      	movs	r1, #1
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80007f0:	68a3      	ldr	r3, [r4, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d024      	beq.n	8000840 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007f6:	f7ff fd3b 	bl	8000270 <HAL_GetTick>
 80007fa:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 80007fe:	6a1b      	ldr	r3, [r3, #32]
 8000800:	079b      	lsls	r3, r3, #30
 8000802:	d437      	bmi.n	8000874 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000804:	f7ff fd34 	bl	8000270 <HAL_GetTick>
 8000808:	1b80      	subs	r0, r0, r6
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_RCC_OscConfig+0x2dc>)
 800080c:	4298      	cmp	r0, r3
 800080e:	d9f5      	bls.n	80007fc <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 8000810:	2003      	movs	r0, #3
 8000812:	e0f4      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000814:	2b05      	cmp	r3, #5
 8000816:	d009      	beq.n	800082c <HAL_RCC_OscConfig+0x298>
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 800081a:	6a1a      	ldr	r2, [r3, #32]
 800081c:	2101      	movs	r1, #1
 800081e:	438a      	bics	r2, r1
 8000820:	621a      	str	r2, [r3, #32]
 8000822:	6a1a      	ldr	r2, [r3, #32]
 8000824:	3103      	adds	r1, #3
 8000826:	438a      	bics	r2, r1
 8000828:	621a      	str	r2, [r3, #32]
 800082a:	e7e1      	b.n	80007f0 <HAL_RCC_OscConfig+0x25c>
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 800082e:	6a1a      	ldr	r2, [r3, #32]
 8000830:	2104      	movs	r1, #4
 8000832:	430a      	orrs	r2, r1
 8000834:	621a      	str	r2, [r3, #32]
 8000836:	6a1a      	ldr	r2, [r3, #32]
 8000838:	3903      	subs	r1, #3
 800083a:	430a      	orrs	r2, r1
 800083c:	621a      	str	r2, [r3, #32]
 800083e:	e7d7      	b.n	80007f0 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000840:	f7ff fd16 	bl	8000270 <HAL_GetTick>
 8000844:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_RCC_OscConfig+0x2cc>)
 8000848:	6a1b      	ldr	r3, [r3, #32]
 800084a:	079b      	lsls	r3, r3, #30
 800084c:	d512      	bpl.n	8000874 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800084e:	f7ff fd0f 	bl	8000270 <HAL_GetTick>
 8000852:	1b80      	subs	r0, r0, r6
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_RCC_OscConfig+0x2dc>)
 8000856:	4298      	cmp	r0, r3
 8000858:	d9f5      	bls.n	8000846 <HAL_RCC_OscConfig+0x2b2>
        {
          return HAL_TIMEOUT;
 800085a:	2003      	movs	r0, #3
 800085c:	e0cf      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40021000 	.word	0x40021000
 8000864:	fffeffff 	.word	0xfffeffff
 8000868:	fffbffff 	.word	0xfffbffff
 800086c:	40007000 	.word	0x40007000
 8000870:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000874:	2d01      	cmp	r5, #1
 8000876:	d033      	beq.n	80008e0 <HAL_RCC_OscConfig+0x34c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000878:	6823      	ldr	r3, [r4, #0]
 800087a:	06db      	lsls	r3, r3, #27
 800087c:	d510      	bpl.n	80008a0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800087e:	6963      	ldr	r3, [r4, #20]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d033      	beq.n	80008ec <HAL_RCC_OscConfig+0x358>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000884:	3305      	adds	r3, #5
 8000886:	d151      	bne.n	800092c <HAL_RCC_OscConfig+0x398>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000888:	4a65      	ldr	r2, [pc, #404]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 800088a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800088c:	2104      	movs	r1, #4
 800088e:	438b      	bics	r3, r1
 8000890:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000892:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000894:	31f4      	adds	r1, #244	; 0xf4
 8000896:	438b      	bics	r3, r1
 8000898:	69a1      	ldr	r1, [r4, #24]
 800089a:	00c9      	lsls	r1, r1, #3
 800089c:	430b      	orrs	r3, r1
 800089e:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008a0:	6a23      	ldr	r3, [r4, #32]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d100      	bne.n	80008a8 <HAL_RCC_OscConfig+0x314>
 80008a6:	e0b0      	b.n	8000a0a <HAL_RCC_OscConfig+0x476>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008a8:	4a5d      	ldr	r2, [pc, #372]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 80008aa:	6851      	ldr	r1, [r2, #4]
 80008ac:	220c      	movs	r2, #12
 80008ae:	400a      	ands	r2, r1
 80008b0:	2a08      	cmp	r2, #8
 80008b2:	d100      	bne.n	80008b6 <HAL_RCC_OscConfig+0x322>
 80008b4:	e08a      	b.n	80009cc <HAL_RCC_OscConfig+0x438>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d04f      	beq.n	800095a <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80008ba:	4a59      	ldr	r2, [pc, #356]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 80008bc:	6813      	ldr	r3, [r2, #0]
 80008be:	4959      	ldr	r1, [pc, #356]	; (8000a24 <HAL_RCC_OscConfig+0x490>)
 80008c0:	400b      	ands	r3, r1
 80008c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008c4:	f7ff fcd4 	bl	8000270 <HAL_GetTick>
 80008c8:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008ca:	4b55      	ldr	r3, [pc, #340]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	019b      	lsls	r3, r3, #6
 80008d0:	d57a      	bpl.n	80009c8 <HAL_RCC_OscConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008d2:	f7ff fccd 	bl	8000270 <HAL_GetTick>
 80008d6:	1b00      	subs	r0, r0, r4
 80008d8:	2802      	cmp	r0, #2
 80008da:	d9f6      	bls.n	80008ca <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 80008dc:	2003      	movs	r0, #3
 80008de:	e08e      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008e0:	4a4f      	ldr	r2, [pc, #316]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 80008e2:	69d3      	ldr	r3, [r2, #28]
 80008e4:	4950      	ldr	r1, [pc, #320]	; (8000a28 <HAL_RCC_OscConfig+0x494>)
 80008e6:	400b      	ands	r3, r1
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	e7c5      	b.n	8000878 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_HSI14ADC_DISABLE();
 80008ec:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 80008ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f0:	2104      	movs	r1, #4
 80008f2:	430a      	orrs	r2, r1
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80008f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f8:	3903      	subs	r1, #3
 80008fa:	430a      	orrs	r2, r1
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80008fe:	f7ff fcb7 	bl	8000270 <HAL_GetTick>
 8000902:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000904:	4b46      	ldr	r3, [pc, #280]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 8000906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000908:	079b      	lsls	r3, r3, #30
 800090a:	d406      	bmi.n	800091a <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800090c:	f7ff fcb0 	bl	8000270 <HAL_GetTick>
 8000910:	1b40      	subs	r0, r0, r5
 8000912:	2802      	cmp	r0, #2
 8000914:	d9f6      	bls.n	8000904 <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 8000916:	2003      	movs	r0, #3
 8000918:	e071      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800091a:	4941      	ldr	r1, [pc, #260]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 800091c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800091e:	22f8      	movs	r2, #248	; 0xf8
 8000920:	4393      	bics	r3, r2
 8000922:	69a2      	ldr	r2, [r4, #24]
 8000924:	00d2      	lsls	r2, r2, #3
 8000926:	4313      	orrs	r3, r2
 8000928:	634b      	str	r3, [r1, #52]	; 0x34
 800092a:	e7b9      	b.n	80008a0 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI14ADC_DISABLE();
 800092c:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 800092e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000930:	2104      	movs	r1, #4
 8000932:	430a      	orrs	r2, r1
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000938:	3903      	subs	r1, #3
 800093a:	438a      	bics	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800093e:	f7ff fc97 	bl	8000270 <HAL_GetTick>
 8000942:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000944:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 8000946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000948:	079b      	lsls	r3, r3, #30
 800094a:	d5a9      	bpl.n	80008a0 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800094c:	f7ff fc90 	bl	8000270 <HAL_GetTick>
 8000950:	1b40      	subs	r0, r0, r5
 8000952:	2802      	cmp	r0, #2
 8000954:	d9f6      	bls.n	8000944 <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 8000956:	2003      	movs	r0, #3
 8000958:	e051      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_PLL_DISABLE();
 800095a:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 800095c:	6813      	ldr	r3, [r2, #0]
 800095e:	4931      	ldr	r1, [pc, #196]	; (8000a24 <HAL_RCC_OscConfig+0x490>)
 8000960:	400b      	ands	r3, r1
 8000962:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000964:	f7ff fc84 	bl	8000270 <HAL_GetTick>
 8000968:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	019b      	lsls	r3, r3, #6
 8000970:	d506      	bpl.n	8000980 <HAL_RCC_OscConfig+0x3ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000972:	f7ff fc7d 	bl	8000270 <HAL_GetTick>
 8000976:	1b40      	subs	r0, r0, r5
 8000978:	2802      	cmp	r0, #2
 800097a:	d9f6      	bls.n	800096a <HAL_RCC_OscConfig+0x3d6>
            return HAL_TIMEOUT;
 800097c:	2003      	movs	r0, #3
 800097e:	e03e      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 8000982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000984:	210f      	movs	r1, #15
 8000986:	438a      	bics	r2, r1
 8000988:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800098a:	430a      	orrs	r2, r1
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	4926      	ldr	r1, [pc, #152]	; (8000a2c <HAL_RCC_OscConfig+0x498>)
 8000992:	400a      	ands	r2, r1
 8000994:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000996:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000998:	4301      	orrs	r1, r0
 800099a:	430a      	orrs	r2, r1
 800099c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	0452      	lsls	r2, r2, #17
 80009a4:	430a      	orrs	r2, r1
 80009a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009a8:	f7ff fc62 	bl	8000270 <HAL_GetTick>
 80009ac:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	019b      	lsls	r3, r3, #6
 80009b4:	d406      	bmi.n	80009c4 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b6:	f7ff fc5b 	bl	8000270 <HAL_GetTick>
 80009ba:	1b00      	subs	r0, r0, r4
 80009bc:	2802      	cmp	r0, #2
 80009be:	d9f6      	bls.n	80009ae <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 80009c0:	2003      	movs	r0, #3
 80009c2:	e01c      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }

  return HAL_OK;
 80009c4:	2000      	movs	r0, #0
 80009c6:	e01a      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
 80009c8:	2000      	movs	r0, #0
 80009ca:	e018      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d01e      	beq.n	8000a0e <HAL_RCC_OscConfig+0x47a>
        pll_config  = RCC->CFGR;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_RCC_OscConfig+0x48c>)
 80009d2:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 80009d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	025b      	lsls	r3, r3, #9
 80009da:	4013      	ands	r3, r2
 80009dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80009de:	4283      	cmp	r3, r0
 80009e0:	d117      	bne.n	8000a12 <HAL_RCC_OscConfig+0x47e>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80009e2:	230f      	movs	r3, #15
 80009e4:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80009e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009e8:	428b      	cmp	r3, r1
 80009ea:	d114      	bne.n	8000a16 <HAL_RCC_OscConfig+0x482>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80009ec:	23f0      	movs	r3, #240	; 0xf0
 80009ee:	039b      	lsls	r3, r3, #14
 80009f0:	401a      	ands	r2, r3
 80009f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d110      	bne.n	8000a1a <HAL_RCC_OscConfig+0x486>
  return HAL_OK;
 80009f8:	2000      	movs	r0, #0
 80009fa:	e000      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
    return HAL_ERROR;
 80009fc:	2001      	movs	r0, #1
}
 80009fe:	b002      	add	sp, #8
 8000a00:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000a02:	2001      	movs	r0, #1
 8000a04:	e7fb      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
        return HAL_ERROR;
 8000a06:	2001      	movs	r0, #1
 8000a08:	e7f9      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
  return HAL_OK;
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	e7f7      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
        return HAL_ERROR;
 8000a0e:	2001      	movs	r0, #1
 8000a10:	e7f5      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
          return HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
 8000a14:	e7f3      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
 8000a16:	2001      	movs	r0, #1
 8000a18:	e7f1      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	e7ef      	b.n	80009fe <HAL_RCC_OscConfig+0x46a>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40021000 	.word	0x40021000
 8000a24:	feffffff 	.word	0xfeffffff
 8000a28:	efffffff 	.word	0xefffffff
 8000a2c:	ffc2ffff 	.word	0xffc2ffff

08000a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a30:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_RCC_GetSysClockFreq+0x44>)
 8000a34:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a36:	230c      	movs	r3, #12
 8000a38:	4013      	ands	r3, r2
 8000a3a:	2b08      	cmp	r3, #8
 8000a3c:	d001      	beq.n	8000a42 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000a3e:	480e      	ldr	r0, [pc, #56]	; (8000a78 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a40:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000a42:	0c90      	lsrs	r0, r2, #18
 8000a44:	210f      	movs	r1, #15
 8000a46:	4008      	ands	r0, r1
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x4c>)
 8000a4a:	5c1c      	ldrb	r4, [r3, r0]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_RCC_GetSysClockFreq+0x44>)
 8000a4e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000a50:	4001      	ands	r1, r0
 8000a52:	185b      	adds	r3, r3, r1
 8000a54:	7c19      	ldrb	r1, [r3, #16]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000a56:	03d3      	lsls	r3, r2, #15
 8000a58:	d504      	bpl.n	8000a64 <HAL_RCC_GetSysClockFreq+0x34>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <HAL_RCC_GetSysClockFreq+0x48>)
 8000a5c:	f7ff fb5e 	bl	800011c <__udivsi3>
 8000a60:	4360      	muls	r0, r4
 8000a62:	e7ed      	b.n	8000a40 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000a64:	0163      	lsls	r3, r4, #5
 8000a66:	1b1b      	subs	r3, r3, r4
 8000a68:	0198      	lsls	r0, r3, #6
 8000a6a:	1ac0      	subs	r0, r0, r3
 8000a6c:	00c0      	lsls	r0, r0, #3
 8000a6e:	1900      	adds	r0, r0, r4
 8000a70:	0200      	lsls	r0, r0, #8
 8000a72:	e7e5      	b.n	8000a40 <HAL_RCC_GetSysClockFreq+0x10>
 8000a74:	40021000 	.word	0x40021000
 8000a78:	007a1200 	.word	0x007a1200
 8000a7c:	08004e40 	.word	0x08004e40

08000a80 <HAL_RCC_ClockConfig>:
{
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	0004      	movs	r4, r0
 8000a84:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a86:	2800      	cmp	r0, #0
 8000a88:	d100      	bne.n	8000a8c <HAL_RCC_ClockConfig+0xc>
 8000a8a:	e07e      	b.n	8000b8a <HAL_RCC_ClockConfig+0x10a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a8c:	4b43      	ldr	r3, [pc, #268]	; (8000b9c <HAL_RCC_ClockConfig+0x11c>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	2301      	movs	r3, #1
 8000a92:	4013      	ands	r3, r2
 8000a94:	428b      	cmp	r3, r1
 8000a96:	d20a      	bcs.n	8000aae <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a98:	4940      	ldr	r1, [pc, #256]	; (8000b9c <HAL_RCC_ClockConfig+0x11c>)
 8000a9a:	680b      	ldr	r3, [r1, #0]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4393      	bics	r3, r2
 8000aa0:	432b      	orrs	r3, r5
 8000aa2:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000aa4:	680b      	ldr	r3, [r1, #0]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	42aa      	cmp	r2, r5
 8000aaa:	d000      	beq.n	8000aae <HAL_RCC_ClockConfig+0x2e>
 8000aac:	e06f      	b.n	8000b8e <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	079a      	lsls	r2, r3, #30
 8000ab2:	d50e      	bpl.n	8000ad2 <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ab4:	075b      	lsls	r3, r3, #29
 8000ab6:	d505      	bpl.n	8000ac4 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000ab8:	4a39      	ldr	r2, [pc, #228]	; (8000ba0 <HAL_RCC_ClockConfig+0x120>)
 8000aba:	6851      	ldr	r1, [r2, #4]
 8000abc:	23e0      	movs	r3, #224	; 0xe0
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ac4:	4a36      	ldr	r2, [pc, #216]	; (8000ba0 <HAL_RCC_ClockConfig+0x120>)
 8000ac6:	6853      	ldr	r3, [r2, #4]
 8000ac8:	21f0      	movs	r1, #240	; 0xf0
 8000aca:	438b      	bics	r3, r1
 8000acc:	68a1      	ldr	r1, [r4, #8]
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	07db      	lsls	r3, r3, #31
 8000ad6:	d52d      	bpl.n	8000b34 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ad8:	6863      	ldr	r3, [r4, #4]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d01e      	beq.n	8000b1c <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d022      	beq.n	8000b28 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <HAL_RCC_ClockConfig+0x120>)
 8000ae4:	6812      	ldr	r2, [r2, #0]
 8000ae6:	0792      	lsls	r2, r2, #30
 8000ae8:	d553      	bpl.n	8000b92 <HAL_RCC_ClockConfig+0x112>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aea:	492d      	ldr	r1, [pc, #180]	; (8000ba0 <HAL_RCC_ClockConfig+0x120>)
 8000aec:	684a      	ldr	r2, [r1, #4]
 8000aee:	2003      	movs	r0, #3
 8000af0:	4382      	bics	r2, r0
 8000af2:	4313      	orrs	r3, r2
 8000af4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000af6:	f7ff fbbb 	bl	8000270 <HAL_GetTick>
 8000afa:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <HAL_RCC_ClockConfig+0x120>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	220c      	movs	r2, #12
 8000b02:	401a      	ands	r2, r3
 8000b04:	6863      	ldr	r3, [r4, #4]
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d013      	beq.n	8000b34 <HAL_RCC_ClockConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b0c:	f7ff fbb0 	bl	8000270 <HAL_GetTick>
 8000b10:	1b80      	subs	r0, r0, r6
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <HAL_RCC_ClockConfig+0x124>)
 8000b14:	4298      	cmp	r0, r3
 8000b16:	d9f1      	bls.n	8000afc <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8000b18:	2003      	movs	r0, #3
 8000b1a:	e035      	b.n	8000b88 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b1c:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <HAL_RCC_ClockConfig+0x120>)
 8000b1e:	6812      	ldr	r2, [r2, #0]
 8000b20:	0392      	lsls	r2, r2, #14
 8000b22:	d4e2      	bmi.n	8000aea <HAL_RCC_ClockConfig+0x6a>
        return HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
 8000b26:	e02f      	b.n	8000b88 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_RCC_ClockConfig+0x120>)
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	0192      	lsls	r2, r2, #6
 8000b2e:	d4dc      	bmi.n	8000aea <HAL_RCC_ClockConfig+0x6a>
        return HAL_ERROR;
 8000b30:	2001      	movs	r0, #1
 8000b32:	e029      	b.n	8000b88 <HAL_RCC_ClockConfig+0x108>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_RCC_ClockConfig+0x11c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	42ab      	cmp	r3, r5
 8000b3e:	d909      	bls.n	8000b54 <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b40:	4916      	ldr	r1, [pc, #88]	; (8000b9c <HAL_RCC_ClockConfig+0x11c>)
 8000b42:	680b      	ldr	r3, [r1, #0]
 8000b44:	2201      	movs	r2, #1
 8000b46:	4393      	bics	r3, r2
 8000b48:	432b      	orrs	r3, r5
 8000b4a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b4c:	680b      	ldr	r3, [r1, #0]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	42aa      	cmp	r2, r5
 8000b52:	d120      	bne.n	8000b96 <HAL_RCC_ClockConfig+0x116>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	075b      	lsls	r3, r3, #29
 8000b58:	d506      	bpl.n	8000b68 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_RCC_ClockConfig+0x120>)
 8000b5c:	6853      	ldr	r3, [r2, #4]
 8000b5e:	4912      	ldr	r1, [pc, #72]	; (8000ba8 <HAL_RCC_ClockConfig+0x128>)
 8000b60:	400b      	ands	r3, r1
 8000b62:	68e1      	ldr	r1, [r4, #12]
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b68:	f7ff ff62 	bl	8000a30 <HAL_RCC_GetSysClockFreq>
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_RCC_ClockConfig+0x120>)
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	0912      	lsrs	r2, r2, #4
 8000b72:	230f      	movs	r3, #15
 8000b74:	4013      	ands	r3, r2
 8000b76:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_RCC_ClockConfig+0x12c>)
 8000b78:	5cd3      	ldrb	r3, [r2, r3]
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_RCC_ClockConfig+0x130>)
 8000b7e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f002 f893 	bl	8002cac <HAL_InitTick>
  return HAL_OK;
 8000b86:	2000      	movs	r0, #0
}
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	e7fc      	b.n	8000b88 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
 8000b8e:	2001      	movs	r0, #1
 8000b90:	e7fa      	b.n	8000b88 <HAL_RCC_ClockConfig+0x108>
        return HAL_ERROR;
 8000b92:	2001      	movs	r0, #1
 8000b94:	e7f8      	b.n	8000b88 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
 8000b96:	2001      	movs	r0, #1
 8000b98:	e7f6      	b.n	8000b88 <HAL_RCC_ClockConfig+0x108>
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	40022000 	.word	0x40022000
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	00001388 	.word	0x00001388
 8000ba8:	fffff8ff 	.word	0xfffff8ff
 8000bac:	08004e28 	.word	0x08004e28
 8000bb0:	20000000 	.word	0x20000000

08000bb4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000bb4:	4b01      	ldr	r3, [pc, #4]	; (8000bbc <HAL_RCC_GetHCLKFreq+0x8>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
}
 8000bb8:	4770      	bx	lr
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000000 	.word	0x20000000

08000bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000bc0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000bc2:	f7ff fff7 	bl	8000bb4 <HAL_RCC_GetHCLKFreq>
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	0a12      	lsrs	r2, r2, #8
 8000bcc:	2307      	movs	r3, #7
 8000bce:	4013      	ands	r3, r2
 8000bd0:	4a02      	ldr	r2, [pc, #8]	; (8000bdc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000bd2:	5cd3      	ldrb	r3, [r2, r3]
 8000bd4:	40d8      	lsrs	r0, r3
}    
 8000bd6:	bd10      	pop	{r4, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	08004e38 	.word	0x08004e38

08000be0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000be0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8000be2:	2307      	movs	r3, #7
 8000be4:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_RCC_GetClockConfig+0x30>)
 8000be8:	685c      	ldr	r4, [r3, #4]
 8000bea:	2203      	movs	r2, #3
 8000bec:	4022      	ands	r2, r4
 8000bee:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000bf0:	685c      	ldr	r4, [r3, #4]
 8000bf2:	22f0      	movs	r2, #240	; 0xf0
 8000bf4:	4022      	ands	r2, r4
 8000bf6:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	22e0      	movs	r2, #224	; 0xe0
 8000bfc:	00d2      	lsls	r2, r2, #3
 8000bfe:	4013      	ands	r3, r2
 8000c00:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <HAL_RCC_GetClockConfig+0x34>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	2301      	movs	r3, #1
 8000c08:	4013      	ands	r3, r2
 8000c0a:	600b      	str	r3, [r1, #0]
}
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c1e:	6803      	ldr	r3, [r0, #0]
 8000c20:	03db      	lsls	r3, r3, #15
 8000c22:	d537      	bpl.n	8000c94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c24:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	d449      	bmi.n	8000cc0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c2c:	4a3b      	ldr	r2, [pc, #236]	; (8000d1c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c2e:	69d1      	ldr	r1, [r2, #28]
 8000c30:	2080      	movs	r0, #128	; 0x80
 8000c32:	0540      	lsls	r0, r0, #21
 8000c34:	4301      	orrs	r1, r0
 8000c36:	61d1      	str	r1, [r2, #28]
 8000c38:	69d3      	ldr	r3, [r2, #28]
 8000c3a:	4003      	ands	r3, r0
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c40:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c42:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	d53c      	bpl.n	8000cc4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c4c:	6a1a      	ldr	r2, [r3, #32]
 8000c4e:	23c0      	movs	r3, #192	; 0xc0
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	0011      	movs	r1, r2
 8000c54:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c56:	421a      	tst	r2, r3
 8000c58:	d013      	beq.n	8000c82 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8000c5a:	6862      	ldr	r2, [r4, #4]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d00f      	beq.n	8000c82 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c62:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c64:	6a18      	ldr	r0, [r3, #32]
 8000c66:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000c68:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c6a:	6a1e      	ldr	r6, [r3, #32]
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	0249      	lsls	r1, r1, #9
 8000c70:	4331      	orrs	r1, r6
 8000c72:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c74:	6a19      	ldr	r1, [r3, #32]
 8000c76:	4e2c      	ldr	r6, [pc, #176]	; (8000d28 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8000c78:	4031      	ands	r1, r6
 8000c7a:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000c7c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c7e:	07c3      	lsls	r3, r0, #31
 8000c80:	d434      	bmi.n	8000cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000c82:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c84:	6a13      	ldr	r3, [r2, #32]
 8000c86:	4927      	ldr	r1, [pc, #156]	; (8000d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000c88:	400b      	ands	r3, r1
 8000c8a:	6861      	ldr	r1, [r4, #4]
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c90:	2d01      	cmp	r5, #1
 8000c92:	d03a      	beq.n	8000d0a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	07db      	lsls	r3, r3, #31
 8000c98:	d506      	bpl.n	8000ca8 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c9a:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c9e:	2103      	movs	r1, #3
 8000ca0:	438b      	bics	r3, r1
 8000ca2:	68a1      	ldr	r1, [r4, #8]
 8000ca4:	430b      	orrs	r3, r1
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	069b      	lsls	r3, r3, #26
 8000cac:	d532      	bpl.n	8000d14 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000cae:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000cb0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	438b      	bics	r3, r1
 8000cb6:	68e1      	ldr	r1, [r4, #12]
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	e02a      	b.n	8000d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    FlagStatus       pwrclkchanged = RESET;
 8000cc0:	2500      	movs	r5, #0
 8000cc2:	e7be      	b.n	8000c42 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000cc6:	6811      	ldr	r1, [r2, #0]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000cd0:	f7ff face 	bl	8000270 <HAL_GetTick>
 8000cd4:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	05db      	lsls	r3, r3, #23
 8000cdc:	d4b5      	bmi.n	8000c4a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cde:	f7ff fac7 	bl	8000270 <HAL_GetTick>
 8000ce2:	1b80      	subs	r0, r0, r6
 8000ce4:	2864      	cmp	r0, #100	; 0x64
 8000ce6:	d9f6      	bls.n	8000cd6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8000ce8:	2003      	movs	r0, #3
 8000cea:	e014      	b.n	8000d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        tickstart = HAL_GetTick();
 8000cec:	f7ff fac0 	bl	8000270 <HAL_GetTick>
 8000cf0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	079b      	lsls	r3, r3, #30
 8000cf8:	d4c3      	bmi.n	8000c82 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fab9 	bl	8000270 <HAL_GetTick>
 8000cfe:	1b80      	subs	r0, r0, r6
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000d02:	4298      	cmp	r0, r3
 8000d04:	d9f5      	bls.n	8000cf2 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
 8000d06:	2003      	movs	r0, #3
 8000d08:	e005      	b.n	8000d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d0a:	69d3      	ldr	r3, [r2, #28]
 8000d0c:	4908      	ldr	r1, [pc, #32]	; (8000d30 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000d0e:	400b      	ands	r3, r1
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	e7bf      	b.n	8000c94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8000d14:	2000      	movs	r0, #0
}
 8000d16:	b002      	add	sp, #8
 8000d18:	bd70      	pop	{r4, r5, r6, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40007000 	.word	0x40007000
 8000d24:	fffffcff 	.word	0xfffffcff
 8000d28:	fffeffff 	.word	0xfffeffff
 8000d2c:	00001388 	.word	0x00001388
 8000d30:	efffffff 	.word	0xefffffff

08000d34 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8000d34:	4770      	bx	lr
	...

08000d38 <HAL_SPI_IRQHandler>:
{
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8000d3e:	6802      	ldr	r2, [r0, #0]
 8000d40:	6855      	ldr	r5, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8000d42:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8000d44:	0999      	lsrs	r1, r3, #6
 8000d46:	2001      	movs	r0, #1
 8000d48:	0006      	movs	r6, r0
 8000d4a:	400e      	ands	r6, r1
 8000d4c:	4208      	tst	r0, r1
 8000d4e:	d103      	bne.n	8000d58 <HAL_SPI_IRQHandler+0x20>
 8000d50:	07d9      	lsls	r1, r3, #31
 8000d52:	d501      	bpl.n	8000d58 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8000d54:	0669      	lsls	r1, r5, #25
 8000d56:	d46a      	bmi.n	8000e2e <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8000d58:	0799      	lsls	r1, r3, #30
 8000d5a:	d501      	bpl.n	8000d60 <HAL_SPI_IRQHandler+0x28>
 8000d5c:	0629      	lsls	r1, r5, #24
 8000d5e:	d46a      	bmi.n	8000e36 <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8000d60:	0959      	lsrs	r1, r3, #5
 8000d62:	2001      	movs	r0, #1
 8000d64:	0007      	movs	r7, r0
 8000d66:	400f      	ands	r7, r1
 8000d68:	4208      	tst	r0, r1
 8000d6a:	d103      	bne.n	8000d74 <HAL_SPI_IRQHandler+0x3c>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d101      	bne.n	8000d74 <HAL_SPI_IRQHandler+0x3c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8000d70:	05d9      	lsls	r1, r3, #23
 8000d72:	d563      	bpl.n	8000e3c <HAL_SPI_IRQHandler+0x104>
 8000d74:	06a9      	lsls	r1, r5, #26
 8000d76:	d561      	bpl.n	8000e3c <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d00e      	beq.n	8000d9a <HAL_SPI_IRQHandler+0x62>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8000d7c:	215d      	movs	r1, #93	; 0x5d
 8000d7e:	5c61      	ldrb	r1, [r4, r1]
 8000d80:	2903      	cmp	r1, #3
 8000d82:	d05d      	beq.n	8000e40 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000d84:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8000d86:	2004      	movs	r0, #4
 8000d88:	4301      	orrs	r1, r0
 8000d8a:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	9100      	str	r1, [sp, #0]
 8000d90:	68d1      	ldr	r1, [r2, #12]
 8000d92:	9100      	str	r1, [sp, #0]
 8000d94:	6891      	ldr	r1, [r2, #8]
 8000d96:	9100      	str	r1, [sp, #0]
 8000d98:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d00c      	beq.n	8000db8 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8000d9e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8000da0:	2001      	movs	r0, #1
 8000da2:	4301      	orrs	r1, r0
 8000da4:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8000da6:	2100      	movs	r1, #0
 8000da8:	9102      	str	r1, [sp, #8]
 8000daa:	6891      	ldr	r1, [r2, #8]
 8000dac:	9102      	str	r1, [sp, #8]
 8000dae:	6811      	ldr	r1, [r2, #0]
 8000db0:	303f      	adds	r0, #63	; 0x3f
 8000db2:	4381      	bics	r1, r0
 8000db4:	6011      	str	r1, [r2, #0]
 8000db6:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	d509      	bpl.n	8000dd0 <HAL_SPI_IRQHandler+0x98>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000dbc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9303      	str	r3, [sp, #12]
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	9303      	str	r3, [sp, #12]
 8000dce:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000dd0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d032      	beq.n	8000e3c <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8000dd6:	6822      	ldr	r2, [r4, #0]
 8000dd8:	6853      	ldr	r3, [r2, #4]
 8000dda:	21e0      	movs	r1, #224	; 0xe0
 8000ddc:	438b      	bics	r3, r1
 8000dde:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8000de0:	235d      	movs	r3, #93	; 0x5d
 8000de2:	2201      	movs	r2, #1
 8000de4:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8000de6:	07ab      	lsls	r3, r5, #30
 8000de8:	d032      	beq.n	8000e50 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000dea:	6822      	ldr	r2, [r4, #0]
 8000dec:	6853      	ldr	r3, [r2, #4]
 8000dee:	39dd      	subs	r1, #221	; 0xdd
 8000df0:	438b      	bics	r3, r1
 8000df2:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8000df4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00a      	beq.n	8000e10 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_SPI_IRQHandler+0x120>)
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8000dfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e00:	f7ff fadd 	bl	80003be <HAL_DMA_Abort_IT>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8000e08:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000e0a:	2240      	movs	r2, #64	; 0x40
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8000e10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d012      	beq.n	8000e3c <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <HAL_SPI_IRQHandler+0x120>)
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8000e1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000e1c:	f7ff facf 	bl	80003be <HAL_DMA_Abort_IT>
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d00b      	beq.n	8000e3c <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8000e24:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000e26:	2240      	movs	r2, #64	; 0x40
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	6623      	str	r3, [r4, #96]	; 0x60
 8000e2c:	e006      	b.n	8000e3c <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8000e2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000e30:	0020      	movs	r0, r4
 8000e32:	4798      	blx	r3
    return;
 8000e34:	e002      	b.n	8000e3c <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 8000e36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000e38:	0020      	movs	r0, r4
 8000e3a:	4798      	blx	r3
}
 8000e3c:	b005      	add	sp, #20
 8000e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e40:	2300      	movs	r3, #0
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	68d3      	ldr	r3, [r2, #12]
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	6893      	ldr	r3, [r2, #8]
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	9b01      	ldr	r3, [sp, #4]
        return;
 8000e4e:	e7f5      	b.n	8000e3c <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8000e50:	0020      	movs	r0, r4
 8000e52:	f7ff ff6f 	bl	8000d34 <HAL_SPI_ErrorCallback>
    return;
 8000e56:	e7f1      	b.n	8000e3c <HAL_SPI_IRQHandler+0x104>
 8000e58:	08000e5d 	.word	0x08000e5d

08000e5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000e5c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8000e5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	2246      	movs	r2, #70	; 0x46
 8000e64:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 8000e66:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8000e68:	f7ff ff64 	bl	8000d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8000e6c:	bd10      	pop	{r4, pc}
	...

08000e70 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000e70:	233d      	movs	r3, #61	; 0x3d
 8000e72:	5cc3      	ldrb	r3, [r0, r3]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d122      	bne.n	8000ebe <HAL_TIM_Base_Start_IT+0x4e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e78:	333c      	adds	r3, #60	; 0x3c
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000e7e:	6802      	ldr	r2, [r0, #0]
 8000e80:	68d3      	ldr	r3, [r2, #12]
 8000e82:	2101      	movs	r1, #1
 8000e84:	430b      	orrs	r3, r1
 8000e86:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000e88:	6803      	ldr	r3, [r0, #0]
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_TIM_Base_Start_IT+0x58>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d00b      	beq.n	8000ea8 <HAL_TIM_Base_Start_IT+0x38>
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_TIM_Base_Start_IT+0x5c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d008      	beq.n	8000ea8 <HAL_TIM_Base_Start_IT+0x38>
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_TIM_Base_Start_IT+0x60>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d005      	beq.n	8000ea8 <HAL_TIM_Base_Start_IT+0x38>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	e00b      	b.n	8000ec0 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ea8:	6899      	ldr	r1, [r3, #8]
 8000eaa:	2207      	movs	r2, #7
 8000eac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000eae:	2a06      	cmp	r2, #6
 8000eb0:	d007      	beq.n	8000ec2 <HAL_TIM_Base_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000eba:	2000      	movs	r0, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8000ebe:	2001      	movs	r0, #1
}
 8000ec0:	4770      	bx	lr
  return HAL_OK;
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	e7fc      	b.n	8000ec0 <HAL_TIM_Base_Start_IT+0x50>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	40012c00 	.word	0x40012c00
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	40014000 	.word	0x40014000

08000ed4 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8000ed4:	6802      	ldr	r2, [r0, #0]
 8000ed6:	68d3      	ldr	r3, [r2, #12]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	438b      	bics	r3, r1
 8000edc:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8000ede:	6803      	ldr	r3, [r0, #0]
 8000ee0:	6a19      	ldr	r1, [r3, #32]
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_TIM_Base_Stop_IT+0x30>)
 8000ee4:	4211      	tst	r1, r2
 8000ee6:	d107      	bne.n	8000ef8 <HAL_TIM_Base_Stop_IT+0x24>
 8000ee8:	6a19      	ldr	r1, [r3, #32]
 8000eea:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_TIM_Base_Stop_IT+0x34>)
 8000eec:	4211      	tst	r1, r2
 8000eee:	d103      	bne.n	8000ef8 <HAL_TIM_Base_Stop_IT+0x24>
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	438a      	bics	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8000ef8:	233d      	movs	r3, #61	; 0x3d
 8000efa:	2201      	movs	r2, #1
 8000efc:	54c2      	strb	r2, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 8000efe:	2000      	movs	r0, #0
 8000f00:	4770      	bx	lr
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	00001111 	.word	0x00001111
 8000f08:	00000444 	.word	0x00000444

08000f0c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000f0c:	4770      	bx	lr

08000f0e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000f0e:	4770      	bx	lr

08000f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000f10:	4770      	bx	lr

08000f12 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000f12:	4770      	bx	lr

08000f14 <HAL_TIM_IRQHandler>:
{
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8000f18:	6803      	ldr	r3, [r0, #0]
 8000f1a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8000f1c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8000f1e:	07aa      	lsls	r2, r5, #30
 8000f20:	d50e      	bpl.n	8000f40 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8000f22:	07b2      	lsls	r2, r6, #30
 8000f24:	d50c      	bpl.n	8000f40 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000f26:	2203      	movs	r2, #3
 8000f28:	4252      	negs	r2, r2
 8000f2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f30:	6803      	ldr	r3, [r0, #0]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	079b      	lsls	r3, r3, #30
 8000f36:	d051      	beq.n	8000fdc <HAL_TIM_IRQHandler+0xc8>
          HAL_TIM_IC_CaptureCallback(htim);
 8000f38:	f7ff ffe9 	bl	8000f0e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8000f40:	076b      	lsls	r3, r5, #29
 8000f42:	d512      	bpl.n	8000f6a <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8000f44:	0773      	lsls	r3, r6, #29
 8000f46:	d510      	bpl.n	8000f6a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	2205      	movs	r2, #5
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	23c0      	movs	r3, #192	; 0xc0
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	421a      	tst	r2, r3
 8000f5e:	d043      	beq.n	8000fe8 <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f60:	0020      	movs	r0, r4
 8000f62:	f7ff ffd4 	bl	8000f0e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f66:	2300      	movs	r3, #0
 8000f68:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8000f6a:	072b      	lsls	r3, r5, #28
 8000f6c:	d510      	bpl.n	8000f90 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8000f6e:	0733      	lsls	r3, r6, #28
 8000f70:	d50e      	bpl.n	8000f90 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	2209      	movs	r2, #9
 8000f76:	4252      	negs	r2, r2
 8000f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	079b      	lsls	r3, r3, #30
 8000f84:	d037      	beq.n	8000ff6 <HAL_TIM_IRQHandler+0xe2>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f86:	0020      	movs	r0, r4
 8000f88:	f7ff ffc1 	bl	8000f0e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8000f90:	06eb      	lsls	r3, r5, #27
 8000f92:	d512      	bpl.n	8000fba <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8000f94:	06f3      	lsls	r3, r6, #27
 8000f96:	d510      	bpl.n	8000fba <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	2211      	movs	r2, #17
 8000f9c:	4252      	negs	r2, r2
 8000f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	69da      	ldr	r2, [r3, #28]
 8000fa8:	23c0      	movs	r3, #192	; 0xc0
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	421a      	tst	r2, r3
 8000fae:	d029      	beq.n	8001004 <HAL_TIM_IRQHandler+0xf0>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fb0:	0020      	movs	r0, r4
 8000fb2:	f7ff ffac 	bl	8000f0e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8000fba:	07eb      	lsls	r3, r5, #31
 8000fbc:	d501      	bpl.n	8000fc2 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8000fbe:	07f3      	lsls	r3, r6, #31
 8000fc0:	d427      	bmi.n	8001012 <HAL_TIM_IRQHandler+0xfe>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8000fc2:	062b      	lsls	r3, r5, #24
 8000fc4:	d501      	bpl.n	8000fca <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8000fc6:	0633      	lsls	r3, r6, #24
 8000fc8:	d42b      	bmi.n	8001022 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8000fca:	066b      	lsls	r3, r5, #25
 8000fcc:	d501      	bpl.n	8000fd2 <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8000fce:	0673      	lsls	r3, r6, #25
 8000fd0:	d42f      	bmi.n	8001032 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8000fd2:	06ab      	lsls	r3, r5, #26
 8000fd4:	d501      	bpl.n	8000fda <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8000fd6:	06b3      	lsls	r3, r6, #26
 8000fd8:	d433      	bmi.n	8001042 <HAL_TIM_IRQHandler+0x12e>
}
 8000fda:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fdc:	f7ff ff96 	bl	8000f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f7ff ff95 	bl	8000f10 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fe6:	e7a9      	b.n	8000f3c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fe8:	0020      	movs	r0, r4
 8000fea:	f7ff ff8f 	bl	8000f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fee:	0020      	movs	r0, r4
 8000ff0:	f7ff ff8e 	bl	8000f10 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ff4:	e7b7      	b.n	8000f66 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	f7ff ff88 	bl	8000f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ffc:	0020      	movs	r0, r4
 8000ffe:	f7ff ff87 	bl	8000f10 <HAL_TIM_PWM_PulseFinishedCallback>
 8001002:	e7c3      	b.n	8000f8c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001004:	0020      	movs	r0, r4
 8001006:	f7ff ff81 	bl	8000f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800100a:	0020      	movs	r0, r4
 800100c:	f7ff ff80 	bl	8000f10 <HAL_TIM_PWM_PulseFinishedCallback>
 8001010:	e7d1      	b.n	8000fb6 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	4252      	negs	r2, r2
 8001018:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800101a:	0020      	movs	r0, r4
 800101c:	f002 fab4 	bl	8003588 <HAL_TIM_PeriodElapsedCallback>
 8001020:	e7cf      	b.n	8000fc2 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	2281      	movs	r2, #129	; 0x81
 8001026:	4252      	negs	r2, r2
 8001028:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800102a:	0020      	movs	r0, r4
 800102c:	f000 f88d 	bl	800114a <HAL_TIMEx_BreakCallback>
 8001030:	e7cb      	b.n	8000fca <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	2241      	movs	r2, #65	; 0x41
 8001036:	4252      	negs	r2, r2
 8001038:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800103a:	0020      	movs	r0, r4
 800103c:	f7ff ff69 	bl	8000f12 <HAL_TIM_TriggerCallback>
 8001040:	e7c7      	b.n	8000fd2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	2221      	movs	r2, #33	; 0x21
 8001046:	4252      	negs	r2, r2
 8001048:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800104a:	0020      	movs	r0, r4
 800104c:	f000 f87c 	bl	8001148 <HAL_TIMEx_CommutCallback>
}
 8001050:	e7c3      	b.n	8000fda <HAL_TIM_IRQHandler+0xc6>
	...

08001054 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001054:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001056:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <TIM_Base_SetConfig+0x80>)
 8001058:	4290      	cmp	r0, r2
 800105a:	d002      	beq.n	8001062 <TIM_Base_SetConfig+0xe>
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <TIM_Base_SetConfig+0x84>)
 800105e:	4290      	cmp	r0, r2
 8001060:	d103      	bne.n	800106a <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001062:	2270      	movs	r2, #112	; 0x70
 8001064:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001066:	684a      	ldr	r2, [r1, #4]
 8001068:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800106a:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <TIM_Base_SetConfig+0x80>)
 800106c:	4290      	cmp	r0, r2
 800106e:	d00e      	beq.n	800108e <TIM_Base_SetConfig+0x3a>
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <TIM_Base_SetConfig+0x84>)
 8001072:	4290      	cmp	r0, r2
 8001074:	d00b      	beq.n	800108e <TIM_Base_SetConfig+0x3a>
 8001076:	4a19      	ldr	r2, [pc, #100]	; (80010dc <TIM_Base_SetConfig+0x88>)
 8001078:	4290      	cmp	r0, r2
 800107a:	d008      	beq.n	800108e <TIM_Base_SetConfig+0x3a>
 800107c:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <TIM_Base_SetConfig+0x8c>)
 800107e:	4290      	cmp	r0, r2
 8001080:	d005      	beq.n	800108e <TIM_Base_SetConfig+0x3a>
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <TIM_Base_SetConfig+0x90>)
 8001084:	4290      	cmp	r0, r2
 8001086:	d002      	beq.n	800108e <TIM_Base_SetConfig+0x3a>
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <TIM_Base_SetConfig+0x94>)
 800108a:	4290      	cmp	r0, r2
 800108c:	d103      	bne.n	8001096 <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <TIM_Base_SetConfig+0x98>)
 8001090:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001092:	68ca      	ldr	r2, [r1, #12]
 8001094:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	4393      	bics	r3, r2
 800109a:	694a      	ldr	r2, [r1, #20]
 800109c:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800109e:	688a      	ldr	r2, [r1, #8]
 80010a0:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80010a2:	680a      	ldr	r2, [r1, #0]
 80010a4:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <TIM_Base_SetConfig+0x80>)
 80010a8:	4290      	cmp	r0, r2
 80010aa:	d008      	beq.n	80010be <TIM_Base_SetConfig+0x6a>
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <TIM_Base_SetConfig+0x8c>)
 80010ae:	4290      	cmp	r0, r2
 80010b0:	d005      	beq.n	80010be <TIM_Base_SetConfig+0x6a>
 80010b2:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <TIM_Base_SetConfig+0x90>)
 80010b4:	4290      	cmp	r0, r2
 80010b6:	d002      	beq.n	80010be <TIM_Base_SetConfig+0x6a>
 80010b8:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <TIM_Base_SetConfig+0x94>)
 80010ba:	4290      	cmp	r0, r2
 80010bc:	d101      	bne.n	80010c2 <TIM_Base_SetConfig+0x6e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80010be:	690a      	ldr	r2, [r1, #16]
 80010c0:	6302      	str	r2, [r0, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80010c2:	6802      	ldr	r2, [r0, #0]
 80010c4:	2104      	movs	r1, #4
 80010c6:	430a      	orrs	r2, r1
 80010c8:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80010ca:	2201      	movs	r2, #1
 80010cc:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 80010ce:	6003      	str	r3, [r0, #0]
}
 80010d0:	4770      	bx	lr
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	40012c00 	.word	0x40012c00
 80010d8:	40000400 	.word	0x40000400
 80010dc:	40002000 	.word	0x40002000
 80010e0:	40014000 	.word	0x40014000
 80010e4:	40014400 	.word	0x40014400
 80010e8:	40014800 	.word	0x40014800
 80010ec:	fffffcff 	.word	0xfffffcff

080010f0 <HAL_TIM_Base_Init>:
{
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80010f4:	d026      	beq.n	8001144 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80010f6:	233d      	movs	r3, #61	; 0x3d
 80010f8:	5cc3      	ldrb	r3, [r0, r3]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d01c      	beq.n	8001138 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80010fe:	253d      	movs	r5, #61	; 0x3d
 8001100:	2302      	movs	r3, #2
 8001102:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001104:	0021      	movs	r1, r4
 8001106:	c901      	ldmia	r1!, {r0}
 8001108:	f7ff ffa4 	bl	8001054 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800110c:	2301      	movs	r3, #1
 800110e:	2246      	movs	r2, #70	; 0x46
 8001110:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001112:	3a08      	subs	r2, #8
 8001114:	54a3      	strb	r3, [r4, r2]
 8001116:	3201      	adds	r2, #1
 8001118:	54a3      	strb	r3, [r4, r2]
 800111a:	3201      	adds	r2, #1
 800111c:	54a3      	strb	r3, [r4, r2]
 800111e:	3201      	adds	r2, #1
 8001120:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001122:	3201      	adds	r2, #1
 8001124:	54a3      	strb	r3, [r4, r2]
 8001126:	3201      	adds	r2, #1
 8001128:	54a3      	strb	r3, [r4, r2]
 800112a:	3201      	adds	r2, #1
 800112c:	54a3      	strb	r3, [r4, r2]
 800112e:	3201      	adds	r2, #1
 8001130:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001132:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001134:	2000      	movs	r0, #0
}
 8001136:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001138:	333c      	adds	r3, #60	; 0x3c
 800113a:	2200      	movs	r2, #0
 800113c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800113e:	f001 fd3f 	bl	8002bc0 <HAL_TIM_Base_MspInit>
 8001142:	e7dc      	b.n	80010fe <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8001144:	2001      	movs	r0, #1
 8001146:	e7f6      	b.n	8001136 <HAL_TIM_Base_Init+0x46>

08001148 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001148:	4770      	bx	lr

0800114a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800114a:	4770      	bx	lr

0800114c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800114c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800114e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001152:	2201      	movs	r2, #1
 8001154:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001158:	6801      	ldr	r1, [r0, #0]
 800115a:	680b      	ldr	r3, [r1, #0]
 800115c:	4d12      	ldr	r5, [pc, #72]	; (80011a8 <UART_EndRxTransfer+0x5c>)
 800115e:	402b      	ands	r3, r5
 8001160:	600b      	str	r3, [r1, #0]
 8001162:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001166:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800116a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800116e:	6801      	ldr	r1, [r0, #0]
 8001170:	688b      	ldr	r3, [r1, #8]
 8001172:	4393      	bics	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
 8001176:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800117a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800117c:	2b01      	cmp	r3, #1
 800117e:	d006      	beq.n	800118e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	2220      	movs	r2, #32
 8001184:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001186:	2300      	movs	r3, #0
 8001188:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800118a:	6683      	str	r3, [r0, #104]	; 0x68
}
 800118c:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800118e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001192:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001196:	6802      	ldr	r2, [r0, #0]
 8001198:	6813      	ldr	r3, [r2, #0]
 800119a:	2410      	movs	r4, #16
 800119c:	43a3      	bics	r3, r4
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	f381 8810 	msr	PRIMASK, r1
}
 80011a4:	e7ec      	b.n	8001180 <UART_EndRxTransfer+0x34>
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	fffffedf 	.word	0xfffffedf

080011ac <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80011ac:	b530      	push	{r4, r5, lr}
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80011ae:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80011b0:	2b21      	cmp	r3, #33	; 0x21
 80011b2:	d000      	beq.n	80011b6 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80011b4:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 80011b6:	3331      	adds	r3, #49	; 0x31
 80011b8:	5ac3      	ldrh	r3, [r0, r3]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d117      	bne.n	80011f0 <UART_TxISR_8BIT+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011c0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011c4:	2201      	movs	r2, #1
 80011c6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80011ca:	6801      	ldr	r1, [r0, #0]
 80011cc:	680b      	ldr	r3, [r1, #0]
 80011ce:	2580      	movs	r5, #128	; 0x80
 80011d0:	43ab      	bics	r3, r5
 80011d2:	600b      	str	r3, [r1, #0]
 80011d4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011d8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011dc:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80011e0:	6802      	ldr	r2, [r0, #0]
 80011e2:	6813      	ldr	r3, [r2, #0]
 80011e4:	2040      	movs	r0, #64	; 0x40
 80011e6:	4303      	orrs	r3, r0
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	f381 8810 	msr	PRIMASK, r1
}
 80011ee:	e7e1      	b.n	80011b4 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80011f0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	6802      	ldr	r2, [r0, #0]
 80011f6:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr++;
 80011f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80011fa:	3301      	adds	r3, #1
 80011fc:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80011fe:	2252      	movs	r2, #82	; 0x52
 8001200:	5a83      	ldrh	r3, [r0, r2]
 8001202:	3b01      	subs	r3, #1
 8001204:	b29b      	uxth	r3, r3
 8001206:	5283      	strh	r3, [r0, r2]
}
 8001208:	e7d4      	b.n	80011b4 <UART_TxISR_8BIT+0x8>

0800120a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800120a:	b530      	push	{r4, r5, lr}
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800120c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800120e:	2b21      	cmp	r3, #33	; 0x21
 8001210:	d000      	beq.n	8001214 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8001212:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 8001214:	3331      	adds	r3, #49	; 0x31
 8001216:	5ac3      	ldrh	r3, [r0, r3]
 8001218:	b29b      	uxth	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d117      	bne.n	800124e <UART_TxISR_16BIT+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800121e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001222:	2201      	movs	r2, #1
 8001224:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001228:	6801      	ldr	r1, [r0, #0]
 800122a:	680b      	ldr	r3, [r1, #0]
 800122c:	2580      	movs	r5, #128	; 0x80
 800122e:	43ab      	bics	r3, r5
 8001230:	600b      	str	r3, [r1, #0]
 8001232:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001236:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800123a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800123e:	6802      	ldr	r2, [r0, #0]
 8001240:	6813      	ldr	r3, [r2, #0]
 8001242:	2040      	movs	r0, #64	; 0x40
 8001244:	4303      	orrs	r3, r0
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	f381 8810 	msr	PRIMASK, r1
}
 800124c:	e7e1      	b.n	8001212 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800124e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	0ddb      	lsrs	r3, r3, #23
 8001256:	6802      	ldr	r2, [r0, #0]
 8001258:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800125a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800125c:	3302      	adds	r3, #2
 800125e:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001260:	2252      	movs	r2, #82	; 0x52
 8001262:	5a83      	ldrh	r3, [r0, r2]
 8001264:	3b01      	subs	r3, #1
 8001266:	b29b      	uxth	r3, r3
 8001268:	5283      	strh	r3, [r0, r2]
}
 800126a:	e7d2      	b.n	8001212 <UART_TxISR_16BIT+0x8>

0800126c <HAL_UART_Transmit_IT>:
{
 800126c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800126e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001270:	2b20      	cmp	r3, #32
 8001272:	d131      	bne.n	80012d8 <HAL_UART_Transmit_IT+0x6c>
    if ((pData == NULL) || (Size == 0U))
 8001274:	2900      	cmp	r1, #0
 8001276:	d031      	beq.n	80012dc <HAL_UART_Transmit_IT+0x70>
 8001278:	2a00      	cmp	r2, #0
 800127a:	d031      	beq.n	80012e0 <HAL_UART_Transmit_IT+0x74>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800127c:	6883      	ldr	r3, [r0, #8]
 800127e:	2480      	movs	r4, #128	; 0x80
 8001280:	0164      	lsls	r4, r4, #5
 8001282:	42a3      	cmp	r3, r4
 8001284:	d104      	bne.n	8001290 <HAL_UART_Transmit_IT+0x24>
 8001286:	6904      	ldr	r4, [r0, #16]
 8001288:	2c00      	cmp	r4, #0
 800128a:	d101      	bne.n	8001290 <HAL_UART_Transmit_IT+0x24>
      if ((((uint32_t)pData) & 1U) != 0U)
 800128c:	07cc      	lsls	r4, r1, #31
 800128e:	d429      	bmi.n	80012e4 <HAL_UART_Transmit_IT+0x78>
    huart->pTxBuffPtr  = pData;
 8001290:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001292:	2150      	movs	r1, #80	; 0x50
 8001294:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 8001296:	3102      	adds	r1, #2
 8001298:	5242      	strh	r2, [r0, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800129a:	2284      	movs	r2, #132	; 0x84
 800129c:	2100      	movs	r1, #0
 800129e:	5081      	str	r1, [r0, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012a0:	3a63      	subs	r2, #99	; 0x63
 80012a2:	67c2      	str	r2, [r0, #124]	; 0x7c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	0152      	lsls	r2, r2, #5
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d00f      	beq.n	80012cc <HAL_UART_Transmit_IT+0x60>
      huart->TxISR = UART_TxISR_8BIT;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_UART_Transmit_IT+0x7c>)
 80012ae:	66c3      	str	r3, [r0, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012b0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012b4:	2301      	movs	r3, #1
 80012b6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80012ba:	6802      	ldr	r2, [r0, #0]
 80012bc:	6813      	ldr	r3, [r2, #0]
 80012be:	2080      	movs	r0, #128	; 0x80
 80012c0:	4303      	orrs	r3, r0
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 80012c8:	2000      	movs	r0, #0
 80012ca:	e006      	b.n	80012da <HAL_UART_Transmit_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012cc:	6903      	ldr	r3, [r0, #16]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1ec      	bne.n	80012ac <HAL_UART_Transmit_IT+0x40>
      huart->TxISR = UART_TxISR_16BIT;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_UART_Transmit_IT+0x80>)
 80012d4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80012d6:	e7eb      	b.n	80012b0 <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 80012d8:	2002      	movs	r0, #2
}
 80012da:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80012dc:	2001      	movs	r0, #1
 80012de:	e7fc      	b.n	80012da <HAL_UART_Transmit_IT+0x6e>
 80012e0:	2001      	movs	r0, #1
 80012e2:	e7fa      	b.n	80012da <HAL_UART_Transmit_IT+0x6e>
        return  HAL_ERROR;
 80012e4:	2001      	movs	r0, #1
 80012e6:	e7f8      	b.n	80012da <HAL_UART_Transmit_IT+0x6e>
 80012e8:	080011ad 	.word	0x080011ad
 80012ec:	0800120b 	.word	0x0800120b

080012f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80012f0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012f2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f6:	2301      	movs	r3, #1
 80012f8:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80012fc:	6802      	ldr	r2, [r0, #0]
 80012fe:	6813      	ldr	r3, [r2, #0]
 8001300:	2440      	movs	r4, #64	; 0x40
 8001302:	43a3      	bics	r3, r4
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800130a:	2320      	movs	r3, #32
 800130c:	67c3      	str	r3, [r0, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800130e:	2300      	movs	r3, #0
 8001310:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001312:	f002 f8f3 	bl	80034fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001316:	bd10      	pop	{r4, pc}

08001318 <HAL_UART_ErrorCallback>:
}
 8001318:	4770      	bx	lr

0800131a <UART_DMAAbortOnError>:
{
 800131a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800131c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800131e:	235a      	movs	r3, #90	; 0x5a
 8001320:	2200      	movs	r2, #0
 8001322:	52c2      	strh	r2, [r0, r3]
  HAL_UART_ErrorCallback(huart);
 8001324:	f7ff fff8 	bl	8001318 <HAL_UART_ErrorCallback>
}
 8001328:	bd10      	pop	{r4, pc}

0800132a <HAL_UART_AbortTransmitCpltCallback>:
}
 800132a:	4770      	bx	lr

0800132c <HAL_UART_AbortTransmit_IT>:
{
 800132c:	b510      	push	{r4, lr}
 800132e:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001330:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001334:	2301      	movs	r3, #1
 8001336:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800133a:	6802      	ldr	r2, [r0, #0]
 800133c:	6813      	ldr	r3, [r2, #0]
 800133e:	20c0      	movs	r0, #192	; 0xc0
 8001340:	4383      	bics	r3, r0
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	f381 8810 	msr	PRIMASK, r1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	061b      	lsls	r3, r3, #24
 800134e:	d523      	bpl.n	8001398 <HAL_UART_AbortTransmit_IT+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001350:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001354:	2301      	movs	r3, #1
 8001356:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	6893      	ldr	r3, [r2, #8]
 800135e:	3840      	subs	r0, #64	; 0x40
 8001360:	4383      	bics	r3, r0
 8001362:	6093      	str	r3, [r2, #8]
 8001364:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmatx != NULL)
 8001368:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00a      	beq.n	8001384 <HAL_UART_AbortTransmit_IT+0x58>
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_UART_AbortTransmit_IT+0x84>)
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8001372:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001374:	f7ff f823 	bl	80003be <HAL_DMA_Abort_IT>
 8001378:	2800      	cmp	r0, #0
 800137a:	d016      	beq.n	80013aa <HAL_UART_AbortTransmit_IT+0x7e>
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800137c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800137e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001380:	4798      	blx	r3
 8001382:	e012      	b.n	80013aa <HAL_UART_AbortTransmit_IT+0x7e>
      huart->TxXferCount = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	2252      	movs	r2, #82	; 0x52
 8001388:	52a3      	strh	r3, [r4, r2]
      huart->TxISR = NULL;
 800138a:	66e3      	str	r3, [r4, #108]	; 0x6c
      huart->gState = HAL_UART_STATE_READY;
 800138c:	3320      	adds	r3, #32
 800138e:	67e3      	str	r3, [r4, #124]	; 0x7c
      HAL_UART_AbortTransmitCpltCallback(huart);
 8001390:	0020      	movs	r0, r4
 8001392:	f7ff ffca 	bl	800132a <HAL_UART_AbortTransmitCpltCallback>
 8001396:	e008      	b.n	80013aa <HAL_UART_AbortTransmit_IT+0x7e>
    huart->TxXferCount = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	2252      	movs	r2, #82	; 0x52
 800139c:	52a3      	strh	r3, [r4, r2]
    huart->TxISR = NULL;
 800139e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_READY;
 80013a0:	3320      	adds	r3, #32
 80013a2:	67e3      	str	r3, [r4, #124]	; 0x7c
    HAL_UART_AbortTransmitCpltCallback(huart);
 80013a4:	0020      	movs	r0, r4
 80013a6:	f7ff ffc0 	bl	800132a <HAL_UART_AbortTransmitCpltCallback>
}
 80013aa:	2000      	movs	r0, #0
 80013ac:	bd10      	pop	{r4, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	080013b5 	.word	0x080013b5

080013b4 <UART_DMATxOnlyAbortCallback>:
{
 80013b4:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80013b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->TxXferCount = 0U;
 80013b8:	2352      	movs	r3, #82	; 0x52
 80013ba:	2200      	movs	r2, #0
 80013bc:	52c2      	strh	r2, [r0, r3]
  huart->gState = HAL_UART_STATE_READY;
 80013be:	3b32      	subs	r3, #50	; 0x32
 80013c0:	67c3      	str	r3, [r0, #124]	; 0x7c
  HAL_UART_AbortTransmitCpltCallback(huart);
 80013c2:	f7ff ffb2 	bl	800132a <HAL_UART_AbortTransmitCpltCallback>
}
 80013c6:	bd10      	pop	{r4, pc}

080013c8 <HAL_UART_AbortReceiveCpltCallback>:
}
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_UART_AbortReceive_IT>:
{
 80013cc:	b570      	push	{r4, r5, r6, lr}
 80013ce:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013d0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013d4:	2201      	movs	r2, #1
 80013d6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013da:	6821      	ldr	r1, [r4, #0]
 80013dc:	680b      	ldr	r3, [r1, #0]
 80013de:	4d2f      	ldr	r5, [pc, #188]	; (800149c <HAL_UART_AbortReceive_IT+0xd0>)
 80013e0:	402b      	ands	r3, r5
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013ec:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013f0:	6821      	ldr	r1, [r4, #0]
 80013f2:	688b      	ldr	r3, [r1, #8]
 80013f4:	4393      	bics	r3, r2
 80013f6:	608b      	str	r3, [r1, #8]
 80013f8:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80013fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d01d      	beq.n	800143e <HAL_UART_AbortReceive_IT+0x72>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	0652      	lsls	r2, r2, #25
 8001408:	d539      	bpl.n	800147e <HAL_UART_AbortReceive_IT+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800140a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800140e:	2301      	movs	r3, #1
 8001410:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001414:	6822      	ldr	r2, [r4, #0]
 8001416:	6893      	ldr	r3, [r2, #8]
 8001418:	2040      	movs	r0, #64	; 0x40
 800141a:	4383      	bics	r3, r0
 800141c:	6093      	str	r3, [r2, #8]
 800141e:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmarx != NULL)
 8001422:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001424:	2b00      	cmp	r3, #0
 8001426:	d016      	beq.n	8001456 <HAL_UART_AbortReceive_IT+0x8a>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_UART_AbortReceive_IT+0xd4>)
 800142a:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800142c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800142e:	f7fe ffc6 	bl	80003be <HAL_DMA_Abort_IT>
 8001432:	2800      	cmp	r0, #0
 8001434:	d030      	beq.n	8001498 <HAL_UART_AbortReceive_IT+0xcc>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001436:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001438:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800143a:	4798      	blx	r3
 800143c:	e02c      	b.n	8001498 <HAL_UART_AbortReceive_IT+0xcc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800143e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001442:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	6813      	ldr	r3, [r2, #0]
 800144a:	2010      	movs	r0, #16
 800144c:	4383      	bics	r3, r0
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	f381 8810 	msr	PRIMASK, r1
}
 8001454:	e7d5      	b.n	8001402 <HAL_UART_AbortReceive_IT+0x36>
      huart->RxXferCount = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	225a      	movs	r2, #90	; 0x5a
 800145a:	52a3      	strh	r3, [r4, r2]
      huart->pRxBuffPtr = NULL;
 800145c:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800145e:	6822      	ldr	r2, [r4, #0]
 8001460:	210f      	movs	r1, #15
 8001462:	6211      	str	r1, [r2, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001464:	6821      	ldr	r1, [r4, #0]
 8001466:	698a      	ldr	r2, [r1, #24]
 8001468:	2008      	movs	r0, #8
 800146a:	4302      	orrs	r2, r0
 800146c:	618a      	str	r2, [r1, #24]
      huart->RxState = HAL_UART_STATE_READY;
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	2120      	movs	r1, #32
 8001472:	50a1      	str	r1, [r4, r2]
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001474:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_UART_AbortReceiveCpltCallback(huart);
 8001476:	0020      	movs	r0, r4
 8001478:	f7ff ffa6 	bl	80013c8 <HAL_UART_AbortReceiveCpltCallback>
 800147c:	e00c      	b.n	8001498 <HAL_UART_AbortReceive_IT+0xcc>
    huart->RxXferCount = 0U;
 800147e:	2200      	movs	r2, #0
 8001480:	215a      	movs	r1, #90	; 0x5a
 8001482:	5262      	strh	r2, [r4, r1]
    huart->pRxBuffPtr = NULL;
 8001484:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8001486:	394b      	subs	r1, #75	; 0x4b
 8001488:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	3111      	adds	r1, #17
 800148e:	50e1      	str	r1, [r4, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001490:	6622      	str	r2, [r4, #96]	; 0x60
    HAL_UART_AbortReceiveCpltCallback(huart);
 8001492:	0020      	movs	r0, r4
 8001494:	f7ff ff98 	bl	80013c8 <HAL_UART_AbortReceiveCpltCallback>
}
 8001498:	2000      	movs	r0, #0
 800149a:	bd70      	pop	{r4, r5, r6, pc}
 800149c:	fffffedf 	.word	0xfffffedf
 80014a0:	080014a5 	.word	0x080014a5

080014a4 <UART_DMARxOnlyAbortCallback>:
{
 80014a4:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80014a8:	2200      	movs	r2, #0
 80014aa:	235a      	movs	r3, #90	; 0x5a
 80014ac:	52c2      	strh	r2, [r0, r3]
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80014ae:	6803      	ldr	r3, [r0, #0]
 80014b0:	210f      	movs	r1, #15
 80014b2:	6219      	str	r1, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80014b4:	6801      	ldr	r1, [r0, #0]
 80014b6:	698b      	ldr	r3, [r1, #24]
 80014b8:	2408      	movs	r4, #8
 80014ba:	4323      	orrs	r3, r4
 80014bc:	618b      	str	r3, [r1, #24]
  huart->RxState = HAL_UART_STATE_READY;
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	2120      	movs	r1, #32
 80014c2:	50c1      	str	r1, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014c4:	6602      	str	r2, [r0, #96]	; 0x60
  HAL_UART_AbortReceiveCpltCallback(huart);
 80014c6:	f7ff ff7f 	bl	80013c8 <HAL_UART_AbortReceiveCpltCallback>
}
 80014ca:	bd10      	pop	{r4, pc}

080014cc <HAL_UARTEx_RxEventCallback>:
}
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_UART_IRQHandler>:
{
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80014d4:	6802      	ldr	r2, [r0, #0]
 80014d6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80014d8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80014da:	6896      	ldr	r6, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80014dc:	49ae      	ldr	r1, [pc, #696]	; (8001798 <HAL_UART_IRQHandler+0x2c8>)
 80014de:	001d      	movs	r5, r3
 80014e0:	400d      	ands	r5, r1
  if (errorflags == 0U)
 80014e2:	420b      	tst	r3, r1
 80014e4:	d103      	bne.n	80014ee <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80014e6:	0699      	lsls	r1, r3, #26
 80014e8:	d501      	bpl.n	80014ee <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80014ea:	0681      	lsls	r1, r0, #26
 80014ec:	d418      	bmi.n	8001520 <HAL_UART_IRQHandler+0x50>
  if ((errorflags != 0U)
 80014ee:	2d00      	cmp	r5, #0
 80014f0:	d007      	beq.n	8001502 <HAL_UART_IRQHandler+0x32>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80014f2:	2101      	movs	r1, #1
 80014f4:	000d      	movs	r5, r1
 80014f6:	4035      	ands	r5, r6
 80014f8:	4231      	tst	r1, r6
 80014fa:	d117      	bne.n	800152c <HAL_UART_IRQHandler+0x5c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80014fc:	49a7      	ldr	r1, [pc, #668]	; (800179c <HAL_UART_IRQHandler+0x2cc>)
 80014fe:	4208      	tst	r0, r1
 8001500:	d114      	bne.n	800152c <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001502:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001504:	2901      	cmp	r1, #1
 8001506:	d100      	bne.n	800150a <HAL_UART_IRQHandler+0x3a>
 8001508:	e093      	b.n	8001632 <HAL_UART_IRQHandler+0x162>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800150a:	061a      	lsls	r2, r3, #24
 800150c:	d502      	bpl.n	8001514 <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800150e:	0602      	lsls	r2, r0, #24
 8001510:	d500      	bpl.n	8001514 <HAL_UART_IRQHandler+0x44>
 8001512:	e135      	b.n	8001780 <HAL_UART_IRQHandler+0x2b0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001514:	065b      	lsls	r3, r3, #25
 8001516:	d502      	bpl.n	800151e <HAL_UART_IRQHandler+0x4e>
 8001518:	0643      	lsls	r3, r0, #25
 800151a:	d500      	bpl.n	800151e <HAL_UART_IRQHandler+0x4e>
 800151c:	e137      	b.n	800178e <HAL_UART_IRQHandler+0x2be>
}
 800151e:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8001520:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0fb      	beq.n	800151e <HAL_UART_IRQHandler+0x4e>
        huart->RxISR(huart);
 8001526:	0020      	movs	r0, r4
 8001528:	4798      	blx	r3
      return;
 800152a:	e7f8      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800152c:	07d9      	lsls	r1, r3, #31
 800152e:	d507      	bpl.n	8001540 <HAL_UART_IRQHandler+0x70>
 8001530:	05c1      	lsls	r1, r0, #23
 8001532:	d505      	bpl.n	8001540 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001534:	2601      	movs	r6, #1
 8001536:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001538:	2184      	movs	r1, #132	; 0x84
 800153a:	5862      	ldr	r2, [r4, r1]
 800153c:	4332      	orrs	r2, r6
 800153e:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001540:	079a      	lsls	r2, r3, #30
 8001542:	d509      	bpl.n	8001558 <HAL_UART_IRQHandler+0x88>
 8001544:	2d00      	cmp	r5, #0
 8001546:	d007      	beq.n	8001558 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001548:	6822      	ldr	r2, [r4, #0]
 800154a:	2102      	movs	r1, #2
 800154c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800154e:	3182      	adds	r1, #130	; 0x82
 8001550:	5862      	ldr	r2, [r4, r1]
 8001552:	2604      	movs	r6, #4
 8001554:	4332      	orrs	r2, r6
 8001556:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001558:	075a      	lsls	r2, r3, #29
 800155a:	d509      	bpl.n	8001570 <HAL_UART_IRQHandler+0xa0>
 800155c:	2d00      	cmp	r5, #0
 800155e:	d007      	beq.n	8001570 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001560:	6822      	ldr	r2, [r4, #0]
 8001562:	2104      	movs	r1, #4
 8001564:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001566:	3180      	adds	r1, #128	; 0x80
 8001568:	5862      	ldr	r2, [r4, r1]
 800156a:	2602      	movs	r6, #2
 800156c:	4332      	orrs	r2, r6
 800156e:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001570:	071a      	lsls	r2, r3, #28
 8001572:	d50a      	bpl.n	800158a <HAL_UART_IRQHandler+0xba>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001574:	0682      	lsls	r2, r0, #26
 8001576:	d401      	bmi.n	800157c <HAL_UART_IRQHandler+0xac>
 8001578:	2d00      	cmp	r5, #0
 800157a:	d006      	beq.n	800158a <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800157c:	6822      	ldr	r2, [r4, #0]
 800157e:	2508      	movs	r5, #8
 8001580:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001582:	2184      	movs	r1, #132	; 0x84
 8001584:	5862      	ldr	r2, [r4, r1]
 8001586:	432a      	orrs	r2, r5
 8001588:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800158a:	051a      	lsls	r2, r3, #20
 800158c:	d50a      	bpl.n	80015a4 <HAL_UART_IRQHandler+0xd4>
 800158e:	0142      	lsls	r2, r0, #5
 8001590:	d508      	bpl.n	80015a4 <HAL_UART_IRQHandler+0xd4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001592:	6822      	ldr	r2, [r4, #0]
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	0109      	lsls	r1, r1, #4
 8001598:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800159a:	2184      	movs	r1, #132	; 0x84
 800159c:	5862      	ldr	r2, [r4, r1]
 800159e:	2520      	movs	r5, #32
 80015a0:	432a      	orrs	r2, r5
 80015a2:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80015a4:	2284      	movs	r2, #132	; 0x84
 80015a6:	58a2      	ldr	r2, [r4, r2]
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d0b8      	beq.n	800151e <HAL_UART_IRQHandler+0x4e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80015ac:	069b      	lsls	r3, r3, #26
 80015ae:	d506      	bpl.n	80015be <HAL_UART_IRQHandler+0xee>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80015b0:	0683      	lsls	r3, r0, #26
 80015b2:	d504      	bpl.n	80015be <HAL_UART_IRQHandler+0xee>
        if (huart->RxISR != NULL)
 80015b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_UART_IRQHandler+0xee>
          huart->RxISR(huart);
 80015ba:	0020      	movs	r0, r4
 80015bc:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80015be:	2384      	movs	r3, #132	; 0x84
 80015c0:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	065b      	lsls	r3, r3, #25
 80015c8:	d402      	bmi.n	80015d0 <HAL_UART_IRQHandler+0x100>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80015ca:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80015cc:	4213      	tst	r3, r2
 80015ce:	d029      	beq.n	8001624 <HAL_UART_IRQHandler+0x154>
        UART_EndRxTransfer(huart);
 80015d0:	0020      	movs	r0, r4
 80015d2:	f7ff fdbb 	bl	800114c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	065b      	lsls	r3, r3, #25
 80015dc:	d51e      	bpl.n	800161c <HAL_UART_IRQHandler+0x14c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015de:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015e2:	2301      	movs	r3, #1
 80015e4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015e8:	6822      	ldr	r2, [r4, #0]
 80015ea:	6893      	ldr	r3, [r2, #8]
 80015ec:	2040      	movs	r0, #64	; 0x40
 80015ee:	4383      	bics	r3, r0
 80015f0:	6093      	str	r3, [r2, #8]
 80015f2:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80015f6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00b      	beq.n	8001614 <HAL_UART_IRQHandler+0x144>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80015fc:	4a68      	ldr	r2, [pc, #416]	; (80017a0 <HAL_UART_IRQHandler+0x2d0>)
 80015fe:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001600:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001602:	f7fe fedc 	bl	80003be <HAL_DMA_Abort_IT>
 8001606:	2800      	cmp	r0, #0
 8001608:	d100      	bne.n	800160c <HAL_UART_IRQHandler+0x13c>
 800160a:	e788      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800160c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800160e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001610:	4798      	blx	r3
 8001612:	e784      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
            HAL_UART_ErrorCallback(huart);
 8001614:	0020      	movs	r0, r4
 8001616:	f7ff fe7f 	bl	8001318 <HAL_UART_ErrorCallback>
 800161a:	e780      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
          HAL_UART_ErrorCallback(huart);
 800161c:	0020      	movs	r0, r4
 800161e:	f7ff fe7b 	bl	8001318 <HAL_UART_ErrorCallback>
 8001622:	e77c      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
        HAL_UART_ErrorCallback(huart);
 8001624:	0020      	movs	r0, r4
 8001626:	f7ff fe77 	bl	8001318 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800162a:	2384      	movs	r3, #132	; 0x84
 800162c:	2200      	movs	r2, #0
 800162e:	50e2      	str	r2, [r4, r3]
    return;
 8001630:	e775      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001632:	06d9      	lsls	r1, r3, #27
 8001634:	d400      	bmi.n	8001638 <HAL_UART_IRQHandler+0x168>
 8001636:	e768      	b.n	800150a <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001638:	06c1      	lsls	r1, r0, #27
 800163a:	d400      	bmi.n	800163e <HAL_UART_IRQHandler+0x16e>
 800163c:	e765      	b.n	800150a <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800163e:	2310      	movs	r3, #16
 8001640:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	065b      	lsls	r3, r3, #25
 8001648:	d55f      	bpl.n	800170a <HAL_UART_IRQHandler+0x23a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800164a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800164c:	6813      	ldr	r3, [r2, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8001652:	2b00      	cmp	r3, #0
 8001654:	d04a      	beq.n	80016ec <HAL_UART_IRQHandler+0x21c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001656:	2158      	movs	r1, #88	; 0x58
 8001658:	5a61      	ldrh	r1, [r4, r1]
 800165a:	4299      	cmp	r1, r3
 800165c:	d946      	bls.n	80016ec <HAL_UART_IRQHandler+0x21c>
        huart->RxXferCount = nb_remaining_rx_data;
 800165e:	215a      	movs	r1, #90	; 0x5a
 8001660:	5263      	strh	r3, [r4, r1]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001662:	6993      	ldr	r3, [r2, #24]
 8001664:	2b20      	cmp	r3, #32
 8001666:	d10b      	bne.n	8001680 <HAL_UART_IRQHandler+0x1b0>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001668:	2302      	movs	r3, #2
 800166a:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800166c:	3356      	adds	r3, #86	; 0x56
 800166e:	5ae1      	ldrh	r1, [r4, r3]
 8001670:	3302      	adds	r3, #2
 8001672:	5ae3      	ldrh	r3, [r4, r3]
 8001674:	1ac9      	subs	r1, r1, r3
 8001676:	b289      	uxth	r1, r1
 8001678:	0020      	movs	r0, r4
 800167a:	f7ff ff27 	bl	80014cc <HAL_UARTEx_RxEventCallback>
 800167e:	e74e      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001680:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001684:	2301      	movs	r3, #1
 8001686:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800168a:	6821      	ldr	r1, [r4, #0]
 800168c:	680a      	ldr	r2, [r1, #0]
 800168e:	4d45      	ldr	r5, [pc, #276]	; (80017a4 <HAL_UART_IRQHandler+0x2d4>)
 8001690:	402a      	ands	r2, r5
 8001692:	600a      	str	r2, [r1, #0]
 8001694:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001698:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800169c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016a0:	6821      	ldr	r1, [r4, #0]
 80016a2:	688a      	ldr	r2, [r1, #8]
 80016a4:	439a      	bics	r2, r3
 80016a6:	608a      	str	r2, [r1, #8]
 80016a8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016ac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016b0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80016b4:	6821      	ldr	r1, [r4, #0]
 80016b6:	688a      	ldr	r2, [r1, #8]
 80016b8:	3542      	adds	r5, #66	; 0x42
 80016ba:	35ff      	adds	r5, #255	; 0xff
 80016bc:	43aa      	bics	r2, r5
 80016be:	608a      	str	r2, [r1, #8]
 80016c0:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	2120      	movs	r1, #32
 80016c8:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016ca:	2200      	movs	r2, #0
 80016cc:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016ce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016d2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80016d6:	6822      	ldr	r2, [r4, #0]
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	2010      	movs	r0, #16
 80016dc:	4383      	bics	r3, r0
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 80016e4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80016e6:	f7fe fe48 	bl	800037a <HAL_DMA_Abort>
 80016ea:	e7bd      	b.n	8001668 <HAL_UART_IRQHandler+0x198>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80016ec:	2158      	movs	r1, #88	; 0x58
 80016ee:	5a61      	ldrh	r1, [r4, r1]
 80016f0:	4299      	cmp	r1, r3
 80016f2:	d000      	beq.n	80016f6 <HAL_UART_IRQHandler+0x226>
 80016f4:	e713      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80016f6:	6993      	ldr	r3, [r2, #24]
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d000      	beq.n	80016fe <HAL_UART_IRQHandler+0x22e>
 80016fc:	e70f      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80016fe:	3b1e      	subs	r3, #30
 8001700:	6663      	str	r3, [r4, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001702:	0020      	movs	r0, r4
 8001704:	f7ff fee2 	bl	80014cc <HAL_UARTEx_RxEventCallback>
      return;
 8001708:	e709      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800170a:	2358      	movs	r3, #88	; 0x58
 800170c:	5ae1      	ldrh	r1, [r4, r3]
 800170e:	3302      	adds	r3, #2
 8001710:	5ae2      	ldrh	r2, [r4, r3]
 8001712:	1a89      	subs	r1, r1, r2
 8001714:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8001716:	5ae3      	ldrh	r3, [r4, r3]
 8001718:	b29b      	uxth	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d100      	bne.n	8001720 <HAL_UART_IRQHandler+0x250>
 800171e:	e6fe      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
          && (nb_rx_data > 0U))
 8001720:	2900      	cmp	r1, #0
 8001722:	d100      	bne.n	8001726 <HAL_UART_IRQHandler+0x256>
 8001724:	e6fb      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001726:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800172a:	2301      	movs	r3, #1
 800172c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001730:	6820      	ldr	r0, [r4, #0]
 8001732:	6802      	ldr	r2, [r0, #0]
 8001734:	4e1c      	ldr	r6, [pc, #112]	; (80017a8 <HAL_UART_IRQHandler+0x2d8>)
 8001736:	4032      	ands	r2, r6
 8001738:	6002      	str	r2, [r0, #0]
 800173a:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800173e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001742:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001746:	6820      	ldr	r0, [r4, #0]
 8001748:	6882      	ldr	r2, [r0, #8]
 800174a:	439a      	bics	r2, r3
 800174c:	6082      	str	r2, [r0, #8]
 800174e:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	2020      	movs	r0, #32
 8001756:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001758:	2200      	movs	r2, #0
 800175a:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 800175c:	66a2      	str	r2, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800175e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001762:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001766:	6822      	ldr	r2, [r4, #0]
 8001768:	6813      	ldr	r3, [r2, #0]
 800176a:	2510      	movs	r5, #16
 800176c:	43ab      	bics	r3, r5
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001774:	2302      	movs	r3, #2
 8001776:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001778:	0020      	movs	r0, r4
 800177a:	f7ff fea7 	bl	80014cc <HAL_UARTEx_RxEventCallback>
      return;
 800177e:	e6ce      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
    if (huart->TxISR != NULL)
 8001780:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d100      	bne.n	8001788 <HAL_UART_IRQHandler+0x2b8>
 8001786:	e6ca      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
      huart->TxISR(huart);
 8001788:	0020      	movs	r0, r4
 800178a:	4798      	blx	r3
    return;
 800178c:	e6c7      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
    UART_EndTransmit_IT(huart);
 800178e:	0020      	movs	r0, r4
 8001790:	f7ff fdae 	bl	80012f0 <UART_EndTransmit_IT>
    return;
 8001794:	e6c3      	b.n	800151e <HAL_UART_IRQHandler+0x4e>
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	0000080f 	.word	0x0000080f
 800179c:	04000120 	.word	0x04000120
 80017a0:	0800131b 	.word	0x0800131b
 80017a4:	fffffeff 	.word	0xfffffeff
 80017a8:	fffffedf 	.word	0xfffffedf

080017ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
  uint16_t uhMask = huart->Mask;
 80017ae:	235c      	movs	r3, #92	; 0x5c
 80017b0:	5ac3      	ldrh	r3, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	5882      	ldr	r2, [r0, r2]
 80017b6:	2a22      	cmp	r2, #34	; 0x22
 80017b8:	d005      	beq.n	80017c6 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80017ba:	6802      	ldr	r2, [r0, #0]
 80017bc:	6993      	ldr	r3, [r2, #24]
 80017be:	2108      	movs	r1, #8
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6193      	str	r3, [r2, #24]
  }
}
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80017c6:	6802      	ldr	r2, [r0, #0]
 80017c8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4013      	ands	r3, r2
 80017ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80017d0:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80017d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80017d4:	3301      	adds	r3, #1
 80017d6:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80017d8:	225a      	movs	r2, #90	; 0x5a
 80017da:	5a83      	ldrh	r3, [r0, r2]
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29b      	uxth	r3, r3
 80017e0:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 80017e2:	5a83      	ldrh	r3, [r0, r2]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ec      	bne.n	80017c4 <UART_RxISR_8BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017ea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ee:	3a59      	subs	r2, #89	; 0x59
 80017f0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017f4:	6801      	ldr	r1, [r0, #0]
 80017f6:	680b      	ldr	r3, [r1, #0]
 80017f8:	4d21      	ldr	r5, [pc, #132]	; (8001880 <UART_RxISR_8BIT+0xd4>)
 80017fa:	402b      	ands	r3, r5
 80017fc:	600b      	str	r3, [r1, #0]
 80017fe:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001802:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001806:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800180a:	6801      	ldr	r1, [r0, #0]
 800180c:	688b      	ldr	r3, [r1, #8]
 800180e:	4393      	bics	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
 8001812:	f384 8810 	msr	PRIMASK, r4
      huart->RxState = HAL_UART_STATE_READY;
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	321f      	adds	r2, #31
 800181a:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 800181c:	2300      	movs	r3, #0
 800181e:	6683      	str	r3, [r0, #104]	; 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001820:	6643      	str	r3, [r0, #100]	; 0x64
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001822:	6803      	ldr	r3, [r0, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	d50b      	bpl.n	8001842 <UART_RxISR_8BIT+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800182a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800182e:	2301      	movs	r3, #1
 8001830:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001834:	6802      	ldr	r2, [r0, #0]
 8001836:	6813      	ldr	r3, [r2, #0]
 8001838:	4c12      	ldr	r4, [pc, #72]	; (8001884 <UART_RxISR_8BIT+0xd8>)
 800183a:	4023      	ands	r3, r4
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001842:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001844:	2b01      	cmp	r3, #1
 8001846:	d117      	bne.n	8001878 <UART_RxISR_8BIT+0xcc>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001848:	2300      	movs	r3, #0
 800184a:	6603      	str	r3, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800184c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001850:	3301      	adds	r3, #1
 8001852:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001856:	6801      	ldr	r1, [r0, #0]
 8001858:	680b      	ldr	r3, [r1, #0]
 800185a:	2210      	movs	r2, #16
 800185c:	4393      	bics	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8001864:	6803      	ldr	r3, [r0, #0]
 8001866:	69d9      	ldr	r1, [r3, #28]
 8001868:	420a      	tst	r2, r1
 800186a:	d000      	beq.n	800186e <UART_RxISR_8BIT+0xc2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800186c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800186e:	2358      	movs	r3, #88	; 0x58
 8001870:	5ac1      	ldrh	r1, [r0, r3]
 8001872:	f7ff fe2b 	bl	80014cc <HAL_UARTEx_RxEventCallback>
 8001876:	e7a5      	b.n	80017c4 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8001878:	f001 fe54 	bl	8003524 <HAL_UART_RxCpltCallback>
 800187c:	e7a2      	b.n	80017c4 <UART_RxISR_8BIT+0x18>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	fffffedf 	.word	0xfffffedf
 8001884:	fbffffff 	.word	0xfbffffff

08001888 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8001888:	b570      	push	{r4, r5, r6, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800188a:	235c      	movs	r3, #92	; 0x5c
 800188c:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800188e:	3324      	adds	r3, #36	; 0x24
 8001890:	58c3      	ldr	r3, [r0, r3]
 8001892:	2b22      	cmp	r3, #34	; 0x22
 8001894:	d005      	beq.n	80018a2 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001896:	6802      	ldr	r2, [r0, #0]
 8001898:	6993      	ldr	r3, [r2, #24]
 800189a:	2108      	movs	r1, #8
 800189c:	430b      	orrs	r3, r1
 800189e:	6193      	str	r3, [r2, #24]
  }
}
 80018a0:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80018a2:	6803      	ldr	r3, [r0, #0]
 80018a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80018a6:	4013      	ands	r3, r2
 80018a8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80018aa:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 80018ac:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80018ae:	3302      	adds	r3, #2
 80018b0:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80018b2:	225a      	movs	r2, #90	; 0x5a
 80018b4:	5a83      	ldrh	r3, [r0, r2]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 80018bc:	5a83      	ldrh	r3, [r0, r2]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1ed      	bne.n	80018a0 <UART_RxISR_16BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018c8:	3a59      	subs	r2, #89	; 0x59
 80018ca:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018ce:	6801      	ldr	r1, [r0, #0]
 80018d0:	680b      	ldr	r3, [r1, #0]
 80018d2:	4d21      	ldr	r5, [pc, #132]	; (8001958 <UART_RxISR_16BIT+0xd0>)
 80018d4:	402b      	ands	r3, r5
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018dc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018e0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018e4:	6801      	ldr	r1, [r0, #0]
 80018e6:	688b      	ldr	r3, [r1, #8]
 80018e8:	4393      	bics	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
 80018ec:	f384 8810 	msr	PRIMASK, r4
      huart->RxState = HAL_UART_STATE_READY;
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	321f      	adds	r2, #31
 80018f4:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	6683      	str	r3, [r0, #104]	; 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018fa:	6643      	str	r3, [r0, #100]	; 0x64
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80018fc:	6803      	ldr	r3, [r0, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	d50b      	bpl.n	800191c <UART_RxISR_16BIT+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001904:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001908:	2301      	movs	r3, #1
 800190a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800190e:	6802      	ldr	r2, [r0, #0]
 8001910:	6813      	ldr	r3, [r2, #0]
 8001912:	4c12      	ldr	r4, [pc, #72]	; (800195c <UART_RxISR_16BIT+0xd4>)
 8001914:	4023      	ands	r3, r4
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800191c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800191e:	2b01      	cmp	r3, #1
 8001920:	d117      	bne.n	8001952 <UART_RxISR_16BIT+0xca>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001922:	2300      	movs	r3, #0
 8001924:	6603      	str	r3, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001926:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800192a:	3301      	adds	r3, #1
 800192c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001930:	6801      	ldr	r1, [r0, #0]
 8001932:	680b      	ldr	r3, [r1, #0]
 8001934:	2210      	movs	r2, #16
 8001936:	4393      	bics	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
 800193a:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800193e:	6803      	ldr	r3, [r0, #0]
 8001940:	69d9      	ldr	r1, [r3, #28]
 8001942:	420a      	tst	r2, r1
 8001944:	d000      	beq.n	8001948 <UART_RxISR_16BIT+0xc0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001946:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001948:	2358      	movs	r3, #88	; 0x58
 800194a:	5ac1      	ldrh	r1, [r0, r3]
 800194c:	f7ff fdbe 	bl	80014cc <HAL_UARTEx_RxEventCallback>
 8001950:	e7a6      	b.n	80018a0 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8001952:	f001 fde7 	bl	8003524 <HAL_UART_RxCpltCallback>
 8001956:	e7a3      	b.n	80018a0 <UART_RxISR_16BIT+0x18>
 8001958:	fffffedf 	.word	0xfffffedf
 800195c:	fbffffff 	.word	0xfbffffff

08001960 <UART_SetConfig>:
{
 8001960:	b510      	push	{r4, lr}
 8001962:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001964:	6883      	ldr	r3, [r0, #8]
 8001966:	6902      	ldr	r2, [r0, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	6942      	ldr	r2, [r0, #20]
 800196c:	4313      	orrs	r3, r2
 800196e:	69c2      	ldr	r2, [r0, #28]
 8001970:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001972:	6801      	ldr	r1, [r0, #0]
 8001974:	680a      	ldr	r2, [r1, #0]
 8001976:	484f      	ldr	r0, [pc, #316]	; (8001ab4 <UART_SetConfig+0x154>)
 8001978:	4002      	ands	r2, r0
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800197e:	6822      	ldr	r2, [r4, #0]
 8001980:	6853      	ldr	r3, [r2, #4]
 8001982:	494d      	ldr	r1, [pc, #308]	; (8001ab8 <UART_SetConfig+0x158>)
 8001984:	400b      	ands	r3, r1
 8001986:	68e1      	ldr	r1, [r4, #12]
 8001988:	430b      	orrs	r3, r1
 800198a:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800198c:	6a22      	ldr	r2, [r4, #32]
 800198e:	69a3      	ldr	r3, [r4, #24]
 8001990:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001992:	6821      	ldr	r1, [r4, #0]
 8001994:	688b      	ldr	r3, [r1, #8]
 8001996:	4849      	ldr	r0, [pc, #292]	; (8001abc <UART_SetConfig+0x15c>)
 8001998:	4003      	ands	r3, r0
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <UART_SetConfig+0x160>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d022      	beq.n	80019ec <UART_SetConfig+0x8c>
 80019a6:	4a47      	ldr	r2, [pc, #284]	; (8001ac4 <UART_SetConfig+0x164>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d030      	beq.n	8001a0e <UART_SetConfig+0xae>
 80019ac:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ae:	69e0      	ldr	r0, [r4, #28]
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	0212      	lsls	r2, r2, #8
 80019b4:	4290      	cmp	r0, r2
 80019b6:	d034      	beq.n	8001a22 <UART_SetConfig+0xc2>
    switch (clocksource)
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d100      	bne.n	80019be <UART_SetConfig+0x5e>
 80019bc:	e072      	b.n	8001aa4 <UART_SetConfig+0x144>
 80019be:	d860      	bhi.n	8001a82 <UART_SetConfig+0x122>
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d068      	beq.n	8001a96 <UART_SetConfig+0x136>
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d15a      	bne.n	8001a7e <UART_SetConfig+0x11e>
 80019c8:	483f      	ldr	r0, [pc, #252]	; (8001ac8 <UART_SetConfig+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80019ca:	6863      	ldr	r3, [r4, #4]
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	1818      	adds	r0, r3, r0
 80019d0:	6861      	ldr	r1, [r4, #4]
 80019d2:	f7fe fba3 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019d6:	0002      	movs	r2, r0
 80019d8:	3a10      	subs	r2, #16
 80019da:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <UART_SetConfig+0x16c>)
 80019dc:	429a      	cmp	r2, r3
 80019de:	d866      	bhi.n	8001aae <UART_SetConfig+0x14e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	0400      	lsls	r0, r0, #16
 80019e4:	0c00      	lsrs	r0, r0, #16
 80019e6:	60d8      	str	r0, [r3, #12]
 80019e8:	2000      	movs	r0, #0
 80019ea:	e050      	b.n	8001a8e <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <UART_SetConfig+0x170>)
 80019ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f0:	2303      	movs	r3, #3
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d00c      	beq.n	8001a12 <UART_SetConfig+0xb2>
 80019f8:	d805      	bhi.n	8001a06 <UART_SetConfig+0xa6>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <UART_SetConfig+0xb6>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d10b      	bne.n	8001a1a <UART_SetConfig+0xba>
 8001a02:	3303      	adds	r3, #3
 8001a04:	e7d3      	b.n	80019ae <UART_SetConfig+0x4e>
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d109      	bne.n	8001a1e <UART_SetConfig+0xbe>
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	e7cf      	b.n	80019ae <UART_SetConfig+0x4e>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e7cd      	b.n	80019ae <UART_SetConfig+0x4e>
 8001a12:	2308      	movs	r3, #8
 8001a14:	e7cb      	b.n	80019ae <UART_SetConfig+0x4e>
 8001a16:	2300      	movs	r3, #0
 8001a18:	e7c9      	b.n	80019ae <UART_SetConfig+0x4e>
 8001a1a:	2310      	movs	r3, #16
 8001a1c:	e7c7      	b.n	80019ae <UART_SetConfig+0x4e>
 8001a1e:	2310      	movs	r3, #16
 8001a20:	e7c5      	b.n	80019ae <UART_SetConfig+0x4e>
    switch (clocksource)
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d028      	beq.n	8001a78 <UART_SetConfig+0x118>
 8001a26:	d81d      	bhi.n	8001a64 <UART_SetConfig+0x104>
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01f      	beq.n	8001a6c <UART_SetConfig+0x10c>
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d117      	bne.n	8001a60 <UART_SetConfig+0x100>
        pclk = (uint32_t) HSI_VALUE;
 8001a30:	4825      	ldr	r0, [pc, #148]	; (8001ac8 <UART_SetConfig+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a32:	0040      	lsls	r0, r0, #1
 8001a34:	6863      	ldr	r3, [r4, #4]
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	18c0      	adds	r0, r0, r3
 8001a3a:	6861      	ldr	r1, [r4, #4]
 8001a3c:	f7fe fb6e 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a40:	0002      	movs	r2, r0
 8001a42:	3a10      	subs	r2, #16
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <UART_SetConfig+0x16c>)
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d82f      	bhi.n	8001aaa <UART_SetConfig+0x14a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001a4a:	b282      	uxth	r2, r0
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a50:	0840      	lsrs	r0, r0, #1
 8001a52:	3b08      	subs	r3, #8
 8001a54:	4018      	ands	r0, r3
 8001a56:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	60d8      	str	r0, [r3, #12]
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	e016      	b.n	8001a8e <UART_SetConfig+0x12e>
    switch (clocksource)
 8001a60:	2001      	movs	r0, #1
 8001a62:	e014      	b.n	8001a8e <UART_SetConfig+0x12e>
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d0e4      	beq.n	8001a32 <UART_SetConfig+0xd2>
 8001a68:	2001      	movs	r0, #1
 8001a6a:	e010      	b.n	8001a8e <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a6c:	f7ff f8a8 	bl	8000bc0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d1de      	bne.n	8001a32 <UART_SetConfig+0xd2>
 8001a74:	2000      	movs	r0, #0
 8001a76:	e00a      	b.n	8001a8e <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a78:	f7fe ffda 	bl	8000a30 <HAL_RCC_GetSysClockFreq>
        break;
 8001a7c:	e7f8      	b.n	8001a70 <UART_SetConfig+0x110>
    switch (clocksource)
 8001a7e:	2001      	movs	r0, #1
 8001a80:	e005      	b.n	8001a8e <UART_SetConfig+0x12e>
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d102      	bne.n	8001a8c <UART_SetConfig+0x12c>
        pclk = (uint32_t) LSE_VALUE;
 8001a86:	2080      	movs	r0, #128	; 0x80
 8001a88:	0200      	lsls	r0, r0, #8
 8001a8a:	e79e      	b.n	80019ca <UART_SetConfig+0x6a>
    switch (clocksource)
 8001a8c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8001a92:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8001a94:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a96:	f7ff f893 	bl	8000bc0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d000      	beq.n	8001aa0 <UART_SetConfig+0x140>
 8001a9e:	e794      	b.n	80019ca <UART_SetConfig+0x6a>
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	e7f4      	b.n	8001a8e <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetSysClockFreq();
 8001aa4:	f7fe ffc4 	bl	8000a30 <HAL_RCC_GetSysClockFreq>
        break;
 8001aa8:	e7f7      	b.n	8001a9a <UART_SetConfig+0x13a>
        ret = HAL_ERROR;
 8001aaa:	2001      	movs	r0, #1
 8001aac:	e7ef      	b.n	8001a8e <UART_SetConfig+0x12e>
        ret = HAL_ERROR;
 8001aae:	2001      	movs	r0, #1
 8001ab0:	e7ed      	b.n	8001a8e <UART_SetConfig+0x12e>
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	ffff69f3 	.word	0xffff69f3
 8001ab8:	ffffcfff 	.word	0xffffcfff
 8001abc:	fffff4ff 	.word	0xfffff4ff
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	007a1200 	.word	0x007a1200
 8001acc:	0000ffef 	.word	0x0000ffef
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ad4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ad6:	071b      	lsls	r3, r3, #28
 8001ad8:	d506      	bpl.n	8001ae8 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ada:	6802      	ldr	r2, [r0, #0]
 8001adc:	6853      	ldr	r3, [r2, #4]
 8001ade:	492c      	ldr	r1, [pc, #176]	; (8001b90 <UART_AdvFeatureConfig+0xbc>)
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ae8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001aea:	07db      	lsls	r3, r3, #31
 8001aec:	d506      	bpl.n	8001afc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001aee:	6802      	ldr	r2, [r0, #0]
 8001af0:	6853      	ldr	r3, [r2, #4]
 8001af2:	4928      	ldr	r1, [pc, #160]	; (8001b94 <UART_AdvFeatureConfig+0xc0>)
 8001af4:	400b      	ands	r3, r1
 8001af6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001af8:	430b      	orrs	r3, r1
 8001afa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001afc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001afe:	079b      	lsls	r3, r3, #30
 8001b00:	d506      	bpl.n	8001b10 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b02:	6802      	ldr	r2, [r0, #0]
 8001b04:	6853      	ldr	r3, [r2, #4]
 8001b06:	4924      	ldr	r1, [pc, #144]	; (8001b98 <UART_AdvFeatureConfig+0xc4>)
 8001b08:	400b      	ands	r3, r1
 8001b0a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b12:	075b      	lsls	r3, r3, #29
 8001b14:	d506      	bpl.n	8001b24 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b16:	6802      	ldr	r2, [r0, #0]
 8001b18:	6853      	ldr	r3, [r2, #4]
 8001b1a:	4920      	ldr	r1, [pc, #128]	; (8001b9c <UART_AdvFeatureConfig+0xc8>)
 8001b1c:	400b      	ands	r3, r1
 8001b1e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001b20:	430b      	orrs	r3, r1
 8001b22:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b26:	06db      	lsls	r3, r3, #27
 8001b28:	d506      	bpl.n	8001b38 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b2a:	6802      	ldr	r2, [r0, #0]
 8001b2c:	6893      	ldr	r3, [r2, #8]
 8001b2e:	491c      	ldr	r1, [pc, #112]	; (8001ba0 <UART_AdvFeatureConfig+0xcc>)
 8001b30:	400b      	ands	r3, r1
 8001b32:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b3a:	069b      	lsls	r3, r3, #26
 8001b3c:	d506      	bpl.n	8001b4c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	6893      	ldr	r3, [r2, #8]
 8001b42:	4918      	ldr	r1, [pc, #96]	; (8001ba4 <UART_AdvFeatureConfig+0xd0>)
 8001b44:	400b      	ands	r3, r1
 8001b46:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b4e:	065b      	lsls	r3, r3, #25
 8001b50:	d50b      	bpl.n	8001b6a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b52:	6802      	ldr	r2, [r0, #0]
 8001b54:	6853      	ldr	r3, [r2, #4]
 8001b56:	4914      	ldr	r1, [pc, #80]	; (8001ba8 <UART_AdvFeatureConfig+0xd4>)
 8001b58:	400b      	ands	r3, r1
 8001b5a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	035b      	lsls	r3, r3, #13
 8001b64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d00a      	beq.n	8001b80 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	d506      	bpl.n	8001b7e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b70:	6802      	ldr	r2, [r0, #0]
 8001b72:	6853      	ldr	r3, [r2, #4]
 8001b74:	490d      	ldr	r1, [pc, #52]	; (8001bac <UART_AdvFeatureConfig+0xd8>)
 8001b76:	400b      	ands	r3, r1
 8001b78:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	6053      	str	r3, [r2, #4]
}
 8001b7e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b80:	6802      	ldr	r2, [r0, #0]
 8001b82:	6853      	ldr	r3, [r2, #4]
 8001b84:	490a      	ldr	r1, [pc, #40]	; (8001bb0 <UART_AdvFeatureConfig+0xdc>)
 8001b86:	400b      	ands	r3, r1
 8001b88:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	6053      	str	r3, [r2, #4]
 8001b8e:	e7ec      	b.n	8001b6a <UART_AdvFeatureConfig+0x96>
 8001b90:	ffff7fff 	.word	0xffff7fff
 8001b94:	fffdffff 	.word	0xfffdffff
 8001b98:	fffeffff 	.word	0xfffeffff
 8001b9c:	fffbffff 	.word	0xfffbffff
 8001ba0:	ffffefff 	.word	0xffffefff
 8001ba4:	ffffdfff 	.word	0xffffdfff
 8001ba8:	ffefffff 	.word	0xffefffff
 8001bac:	fff7ffff 	.word	0xfff7ffff
 8001bb0:	ff9fffff 	.word	0xff9fffff

08001bb4 <UART_WaitOnFlagUntilTimeout>:
{
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	46ce      	mov	lr, r9
 8001bb8:	4647      	mov	r7, r8
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	0006      	movs	r6, r0
 8001bbe:	000d      	movs	r5, r1
 8001bc0:	0017      	movs	r7, r2
 8001bc2:	4699      	mov	r9, r3
 8001bc4:	9b08      	ldr	r3, [sp, #32]
 8001bc6:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bc8:	6833      	ldr	r3, [r6, #0]
 8001bca:	69dc      	ldr	r4, [r3, #28]
 8001bcc:	402c      	ands	r4, r5
 8001bce:	1b64      	subs	r4, r4, r5
 8001bd0:	4263      	negs	r3, r4
 8001bd2:	415c      	adcs	r4, r3
 8001bd4:	42bc      	cmp	r4, r7
 8001bd6:	d133      	bne.n	8001c40 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8001bd8:	4643      	mov	r3, r8
 8001bda:	3301      	adds	r3, #1
 8001bdc:	d0f4      	beq.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bde:	f7fe fb47 	bl	8000270 <HAL_GetTick>
 8001be2:	464b      	mov	r3, r9
 8001be4:	1ac0      	subs	r0, r0, r3
 8001be6:	4540      	cmp	r0, r8
 8001be8:	d82f      	bhi.n	8001c4a <UART_WaitOnFlagUntilTimeout+0x96>
 8001bea:	4643      	mov	r3, r8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d02e      	beq.n	8001c4e <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bf0:	6833      	ldr	r3, [r6, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	0752      	lsls	r2, r2, #29
 8001bf6:	d5e7      	bpl.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0x14>
 8001bf8:	2d80      	cmp	r5, #128	; 0x80
 8001bfa:	d0e5      	beq.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0x14>
 8001bfc:	2d40      	cmp	r5, #64	; 0x40
 8001bfe:	d0e3      	beq.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c00:	69da      	ldr	r2, [r3, #28]
 8001c02:	0712      	lsls	r2, r2, #28
 8001c04:	d410      	bmi.n	8001c28 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c06:	69da      	ldr	r2, [r3, #28]
 8001c08:	0512      	lsls	r2, r2, #20
 8001c0a:	d5dd      	bpl.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8001c12:	0030      	movs	r0, r6
 8001c14:	f7ff fa9a 	bl	800114c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c18:	2384      	movs	r3, #132	; 0x84
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8001c1e:	3b0c      	subs	r3, #12
 8001c20:	2200      	movs	r2, #0
 8001c22:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8001c24:	2003      	movs	r0, #3
 8001c26:	e00c      	b.n	8001c42 <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c28:	2408      	movs	r4, #8
 8001c2a:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8001c2c:	0030      	movs	r0, r6
 8001c2e:	f7ff fa8d 	bl	800114c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c32:	2384      	movs	r3, #132	; 0x84
 8001c34:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8001c36:	3b0c      	subs	r3, #12
 8001c38:	2200      	movs	r2, #0
 8001c3a:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	e000      	b.n	8001c42 <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8001c40:	2000      	movs	r0, #0
}
 8001c42:	bcc0      	pop	{r6, r7}
 8001c44:	46b9      	mov	r9, r7
 8001c46:	46b0      	mov	r8, r6
 8001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	e7f9      	b.n	8001c42 <UART_WaitOnFlagUntilTimeout+0x8e>
 8001c4e:	2003      	movs	r0, #3
 8001c50:	e7f7      	b.n	8001c42 <UART_WaitOnFlagUntilTimeout+0x8e>
	...

08001c54 <UART_CheckIdleState>:
{
 8001c54:	b530      	push	{r4, r5, lr}
 8001c56:	b083      	sub	sp, #12
 8001c58:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5a:	2384      	movs	r3, #132	; 0x84
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001c60:	f7fe fb06 	bl	8000270 <HAL_GetTick>
 8001c64:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	071b      	lsls	r3, r3, #28
 8001c6c:	d40f      	bmi.n	8001c8e <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	075b      	lsls	r3, r3, #29
 8001c74:	d429      	bmi.n	8001cca <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 8001c76:	2320      	movs	r3, #32
 8001c78:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001c7a:	2280      	movs	r2, #128	; 0x80
 8001c7c:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c82:	6663      	str	r3, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8001c84:	3a08      	subs	r2, #8
 8001c86:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001c88:	2000      	movs	r0, #0
}
 8001c8a:	b003      	add	sp, #12
 8001c8c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <UART_CheckIdleState+0xc8>)
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	0003      	movs	r3, r0
 8001c96:	2200      	movs	r2, #0
 8001c98:	0389      	lsls	r1, r1, #14
 8001c9a:	0020      	movs	r0, r4
 8001c9c:	f7ff ff8a 	bl	8001bb4 <UART_WaitOnFlagUntilTimeout>
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d0e4      	beq.n	8001c6e <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ca4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001cae:	6822      	ldr	r2, [r4, #0]
 8001cb0:	6813      	ldr	r3, [r2, #0]
 8001cb2:	2080      	movs	r0, #128	; 0x80
 8001cb4:	4383      	bics	r3, r0
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8001cc0:	3358      	adds	r3, #88	; 0x58
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001cc6:	387d      	subs	r0, #125	; 0x7d
 8001cc8:	e7df      	b.n	8001c8a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <UART_CheckIdleState+0xc8>)
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	002b      	movs	r3, r5
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	03c9      	lsls	r1, r1, #15
 8001cd6:	0020      	movs	r0, r4
 8001cd8:	f7ff ff6c 	bl	8001bb4 <UART_WaitOnFlagUntilTimeout>
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	d0ca      	beq.n	8001c76 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ce0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cea:	6821      	ldr	r1, [r4, #0]
 8001cec:	680b      	ldr	r3, [r1, #0]
 8001cee:	4d0c      	ldr	r5, [pc, #48]	; (8001d20 <UART_CheckIdleState+0xcc>)
 8001cf0:	402b      	ands	r3, r5
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cf8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cfc:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d00:	6821      	ldr	r1, [r4, #0]
 8001d02:	688b      	ldr	r3, [r1, #8]
 8001d04:	4393      	bics	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]
 8001d08:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	321f      	adds	r2, #31
 8001d10:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8001d12:	3b08      	subs	r3, #8
 8001d14:	2200      	movs	r2, #0
 8001d16:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001d18:	2003      	movs	r0, #3
 8001d1a:	e7b6      	b.n	8001c8a <UART_CheckIdleState+0x36>
 8001d1c:	01ffffff 	.word	0x01ffffff
 8001d20:	fffffedf 	.word	0xfffffedf

08001d24 <HAL_UART_Init>:
{
 8001d24:	b510      	push	{r4, lr}
 8001d26:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001d28:	d02e      	beq.n	8001d88 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d2a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d021      	beq.n	8001d74 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d30:	2324      	movs	r3, #36	; 0x24
 8001d32:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8001d34:	6822      	ldr	r2, [r4, #0]
 8001d36:	6813      	ldr	r3, [r2, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	438b      	bics	r3, r1
 8001d3c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d11d      	bne.n	8001d80 <HAL_UART_Init+0x5c>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d44:	0020      	movs	r0, r4
 8001d46:	f7ff fe0b 	bl	8001960 <UART_SetConfig>
 8001d4a:	2801      	cmp	r0, #1
 8001d4c:	d011      	beq.n	8001d72 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001d4e:	6822      	ldr	r2, [r4, #0]
 8001d50:	6853      	ldr	r3, [r2, #4]
 8001d52:	490e      	ldr	r1, [pc, #56]	; (8001d8c <HAL_UART_Init+0x68>)
 8001d54:	400b      	ands	r3, r1
 8001d56:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001d58:	6822      	ldr	r2, [r4, #0]
 8001d5a:	6893      	ldr	r3, [r2, #8]
 8001d5c:	2108      	movs	r1, #8
 8001d5e:	438b      	bics	r3, r1
 8001d60:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001d62:	6822      	ldr	r2, [r4, #0]
 8001d64:	6813      	ldr	r3, [r2, #0]
 8001d66:	3907      	subs	r1, #7
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001d6c:	0020      	movs	r0, r4
 8001d6e:	f7ff ff71 	bl	8001c54 <UART_CheckIdleState>
}
 8001d72:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001d74:	3378      	adds	r3, #120	; 0x78
 8001d76:	2200      	movs	r2, #0
 8001d78:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001d7a:	f000 ff41 	bl	8002c00 <HAL_UART_MspInit>
 8001d7e:	e7d7      	b.n	8001d30 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8001d80:	0020      	movs	r0, r4
 8001d82:	f7ff fea7 	bl	8001ad4 <UART_AdvFeatureConfig>
 8001d86:	e7dd      	b.n	8001d44 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 8001d88:	2001      	movs	r0, #1
 8001d8a:	e7f2      	b.n	8001d72 <HAL_UART_Init+0x4e>
 8001d8c:	fffff7ff 	.word	0xfffff7ff

08001d90 <UART_Start_Receive_IT>:
{
 8001d90:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8001d92:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8001d94:	2358      	movs	r3, #88	; 0x58
 8001d96:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 8001d98:	3302      	adds	r3, #2
 8001d9a:	52c2      	strh	r2, [r0, r3]
  huart->RxISR       = NULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8001da0:	6883      	ldr	r3, [r0, #8]
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	0152      	lsls	r2, r2, #5
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d008      	beq.n	8001dbc <UART_Start_Receive_IT+0x2c>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d115      	bne.n	8001dda <UART_Start_Receive_IT+0x4a>
 8001dae:	6903      	ldr	r3, [r0, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10e      	bne.n	8001dd2 <UART_Start_Receive_IT+0x42>
 8001db4:	335c      	adds	r3, #92	; 0x5c
 8001db6:	22ff      	movs	r2, #255	; 0xff
 8001db8:	52c2      	strh	r2, [r0, r3]
 8001dba:	e011      	b.n	8001de0 <UART_Start_Receive_IT+0x50>
 8001dbc:	6903      	ldr	r3, [r0, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <UART_Start_Receive_IT+0x3a>
 8001dc2:	335c      	adds	r3, #92	; 0x5c
 8001dc4:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <UART_Start_Receive_IT+0xcc>)
 8001dc6:	52c2      	strh	r2, [r0, r3]
 8001dc8:	e00a      	b.n	8001de0 <UART_Start_Receive_IT+0x50>
 8001dca:	235c      	movs	r3, #92	; 0x5c
 8001dcc:	22ff      	movs	r2, #255	; 0xff
 8001dce:	52c2      	strh	r2, [r0, r3]
 8001dd0:	e006      	b.n	8001de0 <UART_Start_Receive_IT+0x50>
 8001dd2:	235c      	movs	r3, #92	; 0x5c
 8001dd4:	227f      	movs	r2, #127	; 0x7f
 8001dd6:	52c2      	strh	r2, [r0, r3]
 8001dd8:	e002      	b.n	8001de0 <UART_Start_Receive_IT+0x50>
 8001dda:	235c      	movs	r3, #92	; 0x5c
 8001ddc:	2200      	movs	r2, #0
 8001dde:	52c2      	strh	r2, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de0:	2384      	movs	r3, #132	; 0x84
 8001de2:	2200      	movs	r2, #0
 8001de4:	50c2      	str	r2, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001de6:	3b04      	subs	r3, #4
 8001de8:	3222      	adds	r2, #34	; 0x22
 8001dea:	50c2      	str	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dec:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001df0:	2101      	movs	r1, #1
 8001df2:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001df6:	6802      	ldr	r2, [r0, #0]
 8001df8:	6893      	ldr	r3, [r2, #8]
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	6093      	str	r3, [r2, #8]
 8001dfe:	f384 8810 	msr	PRIMASK, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	015b      	lsls	r3, r3, #5
 8001e06:	6882      	ldr	r2, [r0, #8]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d013      	beq.n	8001e34 <UART_Start_Receive_IT+0xa4>
    huart->RxISR = UART_RxISR_8BIT;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <UART_Start_Receive_IT+0xd0>)
 8001e0e:	6683      	str	r3, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8001e10:	6903      	ldr	r3, [r0, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d014      	beq.n	8001e40 <UART_Start_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e16:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001e20:	6802      	ldr	r2, [r0, #0]
 8001e22:	6810      	ldr	r0, [r2, #0]
 8001e24:	3320      	adds	r3, #32
 8001e26:	33ff      	adds	r3, #255	; 0xff
 8001e28:	4303      	orrs	r3, r0
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	f381 8810 	msr	PRIMASK, r1
}
 8001e30:	2000      	movs	r0, #0
 8001e32:	bd10      	pop	{r4, pc}
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e34:	6903      	ldr	r3, [r0, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1e8      	bne.n	8001e0c <UART_Start_Receive_IT+0x7c>
    huart->RxISR = UART_RxISR_16BIT;
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <UART_Start_Receive_IT+0xd4>)
 8001e3c:	6683      	str	r3, [r0, #104]	; 0x68
 8001e3e:	e7e7      	b.n	8001e10 <UART_Start_Receive_IT+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e44:	2301      	movs	r3, #1
 8001e46:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8001e4a:	6802      	ldr	r2, [r0, #0]
 8001e4c:	6813      	ldr	r3, [r2, #0]
 8001e4e:	2020      	movs	r0, #32
 8001e50:	4303      	orrs	r3, r0
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	f381 8810 	msr	PRIMASK, r1
}
 8001e58:	e7ea      	b.n	8001e30 <UART_Start_Receive_IT+0xa0>
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	000001ff 	.word	0x000001ff
 8001e60:	080017ad 	.word	0x080017ad
 8001e64:	08001889 	.word	0x08001889

08001e68 <HAL_UART_Receive_IT>:
{
 8001e68:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	58c3      	ldr	r3, [r0, r3]
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d123      	bne.n	8001eba <HAL_UART_Receive_IT+0x52>
    if ((pData == NULL) || (Size == 0U))
 8001e72:	2900      	cmp	r1, #0
 8001e74:	d023      	beq.n	8001ebe <HAL_UART_Receive_IT+0x56>
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	d023      	beq.n	8001ec2 <HAL_UART_Receive_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	015b      	lsls	r3, r3, #5
 8001e7e:	6884      	ldr	r4, [r0, #8]
 8001e80:	429c      	cmp	r4, r3
 8001e82:	d104      	bne.n	8001e8e <HAL_UART_Receive_IT+0x26>
 8001e84:	6903      	ldr	r3, [r0, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_UART_Receive_IT+0x26>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e8a:	07cb      	lsls	r3, r1, #31
 8001e8c:	d41b      	bmi.n	8001ec6 <HAL_UART_Receive_IT+0x5e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001e92:	6803      	ldr	r3, [r0, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	d50c      	bpl.n	8001eb4 <HAL_UART_Receive_IT+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e9a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001ea4:	6804      	ldr	r4, [r0, #0]
 8001ea6:	6826      	ldr	r6, [r4, #0]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	04db      	lsls	r3, r3, #19
 8001eac:	4333      	orrs	r3, r6
 8001eae:	6023      	str	r3, [r4, #0]
 8001eb0:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8001eb4:	f7ff ff6c 	bl	8001d90 <UART_Start_Receive_IT>
 8001eb8:	e000      	b.n	8001ebc <HAL_UART_Receive_IT+0x54>
    return HAL_BUSY;
 8001eba:	2002      	movs	r0, #2
}
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	e7fc      	b.n	8001ebc <HAL_UART_Receive_IT+0x54>
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	e7fa      	b.n	8001ebc <HAL_UART_Receive_IT+0x54>
        return  HAL_ERROR;
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	e7f8      	b.n	8001ebc <HAL_UART_Receive_IT+0x54>
	...

08001ecc <ADC_Init>:
#include <ADC.h>
void ADC_Init()
{
	RCC->APB2ENR |= RCC_APB2ENR_ADCEN;//Тактирование АЦП
 8001ecc:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <ADC_Init+0x4c>)
 8001ece:	6991      	ldr	r1, [r2, #24]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6193      	str	r3, [r2, #24]

	GPIOA->MODER |= GPIO_MODER_MODER4;//Режим PA4 аналоговый вход
 8001ed8:	2290      	movs	r2, #144	; 0x90
 8001eda:	05d2      	lsls	r2, r2, #23
 8001edc:	6811      	ldr	r1, [r2, #0]
 8001ede:	23c0      	movs	r3, #192	; 0xc0
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	6013      	str	r3, [r2, #0]

    ADC1->CR |= ADC_CR_ADCAL; 				//Запуск калибровки АЦП
 8001ee6:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <ADC_Init+0x50>)
 8001ee8:	6891      	ldr	r1, [r2, #8]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	6093      	str	r3, [r2, #8]
    while ((ADC1->CR & ADC_CR_ADCAL)); 		//Ожидаем окончания калибровки
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <ADC_Init+0x50>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	dbfb      	blt.n	8001ef2 <ADC_Init+0x26>
    ADC1->SMPR |= 0b000<<ADC_SMPR_SMP_Pos; //Задаем длительность выборки
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <ADC_Init+0x50>)
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	615a      	str	r2, [r3, #20]
    ADC1->CR |= ADC_CR_ADEN;				//Включаем АЦП
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	2101      	movs	r1, #1
 8001f04:	430a      	orrs	r2, r1
 8001f06:	609a      	str	r2, [r3, #8]
//    while (!(ADC1->ISR & ADC_ISR_ADRDY)); 	//ждем пока АЦП включиться
    ADC1->CHSELR = ADC_CHSELR_CHSEL4; 		//Задаем номер канала (выбран ADC4)
 8001f08:	2210      	movs	r2, #16
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1->CFGR1 &= ~ADC_CFGR1_RES; 			//устанавливаем разрешение 12 бит
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	3117      	adds	r1, #23
 8001f10:	438a      	bics	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]
}
 8001f14:	4770      	bx	lr
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40012400 	.word	0x40012400

08001f20 <ADC_Read>:
	}*/

}
uint16_t ADC_Read()
{
	if(ADC1->CR & ADC_CR_ADEN)
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <ADC_Read+0x24>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	07db      	lsls	r3, r3, #31
 8001f26:	d504      	bpl.n	8001f32 <ADC_Read+0x12>
	{
		ADC1->CR |= ADC_CR_ADSTART; //Запуск преобразований
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <ADC_Read+0x24>)
 8001f2a:	6893      	ldr	r3, [r2, #8]
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	6093      	str	r3, [r2, #8]
	}
    while ((ADC1->ISR & ADC_ISR_EOC)==0)
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <ADC_Read+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	075b      	lsls	r3, r3, #29
 8001f38:	d5fb      	bpl.n	8001f32 <ADC_Read+0x12>
    {

    }
    return ADC1->DR;              // возврат преоброазованного значения;
 8001f3a:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <ADC_Read+0x24>)
 8001f3c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001f3e:	b280      	uxth	r0, r0
}
 8001f40:	4770      	bx	lr
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	40012400 	.word	0x40012400

08001f48 <InitTIM14>:
}

void InitTIM14()
{
	// Включение тактирования TIM14
	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 8001f48:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <InitTIM14+0x30>)
 8001f4a:	69d1      	ldr	r1, [r2, #28]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	430b      	orrs	r3, r1
 8001f52:	61d3      	str	r3, [r2, #28]
	TIM14->CR1 = 0; //СЧЕТЧИК ИСПОЛЬЗУЕТСЯ КАК ПОВЫШАЮЩИЙ and ВЫРАВНИВАНИЕ ПО КРАЯМ
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <InitTIM14+0x34>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

	// Коэффициент предделителя таймера - 48 (частота тактирования - 1 MГц)
	TIM14->PSC = 48 - 1;
 8001f5a:	322f      	adds	r2, #47	; 0x2f
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
	// Значение регистра автоматической перезагрузки (длительность импульса - 1 мс)
	TIM14->ARR = 1000;
 8001f5e:	22fa      	movs	r2, #250	; 0xfa
 8001f60:	0092      	lsls	r2, r2, #2
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f64:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <InitTIM14+0x38>)
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	0309      	lsls	r1, r1, #12
 8001f6a:	6011      	str	r1, [r2, #0]
	// Обработчик прерываний от TIM14
	NVIC_EnableIRQ(TIM14_IRQn);
	// Утановить приоритет прерываний 1
//	NVIC_SetPriority(TIM17_IRQn, 14);
	// Разрешение прерывания от TIM17
	TIM14->DIER |= TIM_DIER_UIE;
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	2101      	movs	r1, #1
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]


}
 8001f74:	4770      	bx	lr
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40002000 	.word	0x40002000
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <InitTIM15>:

void InitTIM15()
{
	// Включение тактирования TIM14
	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <InitTIM15+0x30>)
 8001f86:	6991      	ldr	r1, [r2, #24]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	025b      	lsls	r3, r3, #9
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	6193      	str	r3, [r2, #24]
	TIM15->CR1 = 0; //СЧЕТЧИК ИСПОЛЬЗУЕТСЯ КАК ПОВЫШАЮЩИЙ and ВЫРАВНИВАНИЕ ПО КРАЯМ
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <InitTIM15+0x34>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

	// Коэффициент предделителя таймера - 48 (частота тактирования - 1 kГц)
	TIM15->PSC = 480 - 1;
 8001f96:	22e0      	movs	r2, #224	; 0xe0
 8001f98:	32ff      	adds	r2, #255	; 0xff
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
	// Значение регистра автоматической перезагрузки (длительность импульса - 500 мс)
	TIM15->ARR = 50000;
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <InitTIM15+0x38>)
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fa0:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <InitTIM15+0x3c>)
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	0349      	lsls	r1, r1, #13
 8001fa6:	6011      	str	r1, [r2, #0]
	// Обработчик прерываний от TIM15
	NVIC_EnableIRQ(TIM15_IRQn);

	// Разрешение прерывания от TIM15
	TIM15->DIER |= TIM_DIER_UIE;
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	2101      	movs	r1, #1
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]
}
 8001fb0:	4770      	bx	lr
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40014000 	.word	0x40014000
 8001fbc:	0000c350 	.word	0x0000c350
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <indicator_sgd4>:
//		*strn - указатель на строку, состоящую из 3 значащих символов, которая выводится на индик.
//		points - три первых бита отвечают за десятичные точки.
//	Возвращаемое значение: нет.
//-------------------------------------------------------------------------------------------------
void indicator_sgd4(SPI_TypeDef* spi_x, uint8_t leds, char *strn, uint8_t points)
{
 8001fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	468c      	mov	ip, r1
	// Включение TIM17
	TIM17->CR1 &= ~TIM_CR1_CEN;
 8001fca:	4d6a      	ldr	r5, [pc, #424]	; (8002174 <indicator_sgd4+0x1b0>)
 8001fcc:	682c      	ldr	r4, [r5, #0]
 8001fce:	2601      	movs	r6, #1
 8001fd0:	43b4      	bics	r4, r6
 8001fd2:	602c      	str	r4, [r5, #0]
    // PB9 = 1
    GPIOB->ODR &= ~GPIO_ODR_9;
 8001fd4:	4d68      	ldr	r5, [pc, #416]	; (8002178 <indicator_sgd4+0x1b4>)
 8001fd6:	696c      	ldr	r4, [r5, #20]
 8001fd8:	4e68      	ldr	r6, [pc, #416]	; (800217c <indicator_sgd4+0x1b8>)
 8001fda:	4034      	ands	r4, r6
 8001fdc:	616c      	str	r4, [r5, #20]
	// Массив сегментов индикатора
	uint8_t digit[5];

	// Массив принятых символов
	uint8_t sym[] = {0, 0, 0, 0, 0};
 8001fde:	4c68      	ldr	r4, [pc, #416]	; (8002180 <indicator_sgd4+0x1bc>)
 8001fe0:	6821      	ldr	r1, [r4, #0]
 8001fe2:	9100      	str	r1, [sp, #0]
 8001fe4:	7924      	ldrb	r4, [r4, #4]
 8001fe6:	4669      	mov	r1, sp
 8001fe8:	710c      	strb	r4, [r1, #4]

	// Номер элемента строки
	uint8_t ns = 0;

	// Количество элементов массива
	uint8_t nd = 0;
 8001fea:	2100      	movs	r1, #0
	uint8_t ns = 0;
 8001fec:	2400      	movs	r4, #0

	// Дешифратор символов
	while(ns < 4)
 8001fee:	e006      	b.n	8001ffe <indicator_sgd4+0x3a>
	{
		switch(*(strn + ns))
		{
			case'0': sym[ns] = 0b00111111; break;
 8001ff0:	253f      	movs	r5, #63	; 0x3f
 8001ff2:	466f      	mov	r7, sp
 8001ff4:	553d      	strb	r5, [r7, r4]

		}//end switch

		// Если последний сивол не равен символу окончания строоки -
		// инкремент номера элемента строки
		if(*(strn + ns) != '\0') ns++;
 8001ff6:	2e00      	cmp	r6, #0
 8001ff8:	d05c      	beq.n	80020b4 <indicator_sgd4+0xf0>
 8001ffa:	3401      	adds	r4, #1
 8001ffc:	b2e4      	uxtb	r4, r4
	while(ns < 4)
 8001ffe:	2c03      	cmp	r4, #3
 8002000:	d858      	bhi.n	80020b4 <indicator_sgd4+0xf0>
		switch(*(strn + ns))
 8002002:	5d16      	ldrb	r6, [r2, r4]
 8002004:	2e52      	cmp	r6, #82	; 0x52
 8002006:	d84f      	bhi.n	80020a8 <indicator_sgd4+0xe4>
 8002008:	00b5      	lsls	r5, r6, #2
 800200a:	4f5e      	ldr	r7, [pc, #376]	; (8002184 <indicator_sgd4+0x1c0>)
 800200c:	597d      	ldr	r5, [r7, r5]
 800200e:	46af      	mov	pc, r5
			case'1': sym[ns] = 0b00000110; break;
 8002010:	2506      	movs	r5, #6
 8002012:	466f      	mov	r7, sp
 8002014:	553d      	strb	r5, [r7, r4]
 8002016:	e7ee      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'2': sym[ns] = 0b01011011; break;
 8002018:	255b      	movs	r5, #91	; 0x5b
 800201a:	466f      	mov	r7, sp
 800201c:	553d      	strb	r5, [r7, r4]
 800201e:	e7ea      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'3': sym[ns] = 0b01001111; break;
 8002020:	254f      	movs	r5, #79	; 0x4f
 8002022:	466f      	mov	r7, sp
 8002024:	553d      	strb	r5, [r7, r4]
 8002026:	e7e6      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'4': sym[ns] = 0b01100110; break;
 8002028:	2566      	movs	r5, #102	; 0x66
 800202a:	466f      	mov	r7, sp
 800202c:	553d      	strb	r5, [r7, r4]
 800202e:	e7e2      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'5': sym[ns] = 0b01101101; break;
 8002030:	256d      	movs	r5, #109	; 0x6d
 8002032:	466f      	mov	r7, sp
 8002034:	553d      	strb	r5, [r7, r4]
 8002036:	e7de      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'6': sym[ns] = 0b01111101; break;
 8002038:	257d      	movs	r5, #125	; 0x7d
 800203a:	466f      	mov	r7, sp
 800203c:	553d      	strb	r5, [r7, r4]
 800203e:	e7da      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'7': sym[ns] = 0b00000111; break;
 8002040:	2507      	movs	r5, #7
 8002042:	466f      	mov	r7, sp
 8002044:	553d      	strb	r5, [r7, r4]
 8002046:	e7d6      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'8': sym[ns] = 0b01111111; break;
 8002048:	257f      	movs	r5, #127	; 0x7f
 800204a:	466f      	mov	r7, sp
 800204c:	553d      	strb	r5, [r7, r4]
 800204e:	e7d2      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'9': sym[ns] = 0b01101111; break;
 8002050:	256f      	movs	r5, #111	; 0x6f
 8002052:	466f      	mov	r7, sp
 8002054:	553d      	strb	r5, [r7, r4]
 8002056:	e7ce      	b.n	8001ff6 <indicator_sgd4+0x32>
			case' ': sym[ns] = 0b00000000; break;  // Пробел.
 8002058:	2500      	movs	r5, #0
 800205a:	466f      	mov	r7, sp
 800205c:	553d      	strb	r5, [r7, r4]
 800205e:	e7ca      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'E': sym[ns] = 0b01111001; break;
 8002060:	2579      	movs	r5, #121	; 0x79
 8002062:	466f      	mov	r7, sp
 8002064:	553d      	strb	r5, [r7, r4]
 8002066:	e7c6      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'-': sym[ns] = 0b01000000; break;
 8002068:	2540      	movs	r5, #64	; 0x40
 800206a:	466f      	mov	r7, sp
 800206c:	553d      	strb	r5, [r7, r4]
 800206e:	e7c2      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'P': sym[ns] = 0b00110111; break;
 8002070:	2537      	movs	r5, #55	; 0x37
 8002072:	466f      	mov	r7, sp
 8002074:	553d      	strb	r5, [r7, r4]
 8002076:	e7be      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'R': sym[ns] = 0b01110011; break;
 8002078:	2573      	movs	r5, #115	; 0x73
 800207a:	466f      	mov	r7, sp
 800207c:	553d      	strb	r5, [r7, r4]
 800207e:	e7ba      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'G': sym[ns] = 0b00110001; break;
 8002080:	2531      	movs	r5, #49	; 0x31
 8002082:	466f      	mov	r7, sp
 8002084:	553d      	strb	r5, [r7, r4]
 8002086:	e7b6      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'N': sym[ns] = 0b01110110; break;
 8002088:	2576      	movs	r5, #118	; 0x76
 800208a:	466f      	mov	r7, sp
 800208c:	553d      	strb	r5, [r7, r4]
 800208e:	e7b2      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'B': sym[ns] = 0b01111111; break;
 8002090:	257f      	movs	r5, #127	; 0x7f
 8002092:	466f      	mov	r7, sp
 8002094:	553d      	strb	r5, [r7, r4]
 8002096:	e7ae      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'C': sym[ns] = 0b00111001; break;
 8002098:	2539      	movs	r5, #57	; 0x39
 800209a:	466f      	mov	r7, sp
 800209c:	553d      	strb	r5, [r7, r4]
 800209e:	e7aa      	b.n	8001ff6 <indicator_sgd4+0x32>
			case'H': sym[ns] = 0b01100110; break;
 80020a0:	2566      	movs	r5, #102	; 0x66
 80020a2:	466f      	mov	r7, sp
 80020a4:	553d      	strb	r5, [r7, r4]
 80020a6:	e7a6      	b.n	8001ff6 <indicator_sgd4+0x32>
			default: sym[ns] = 0b01000011;
 80020a8:	2543      	movs	r5, #67	; 0x43
 80020aa:	466f      	mov	r7, sp
 80020ac:	553d      	strb	r5, [r7, r4]
 80020ae:	e7a2      	b.n	8001ff6 <indicator_sgd4+0x32>
		switch(*(strn + ns))
 80020b0:	0021      	movs	r1, r4
 80020b2:	e7a0      	b.n	8001ff6 <indicator_sgd4+0x32>
		// Иначе - выход из цикла
		else break;

	}//end while

	switch(nd)
 80020b4:	2901      	cmp	r1, #1
 80020b6:	d02d      	beq.n	8002114 <indicator_sgd4+0x150>
 80020b8:	2902      	cmp	r1, #2
 80020ba:	d022      	beq.n	8002102 <indicator_sgd4+0x13e>
 80020bc:	2900      	cmp	r1, #0
 80020be:	d031      	beq.n	8002124 <indicator_sgd4+0x160>
	}//end switch


	// Заполнение массива сегментов индикатора
	// Индексы соответствуют индексам позиционных обозначений на схеме
	digit[1] = leds;
 80020c0:	aa02      	add	r2, sp, #8
 80020c2:	4661      	mov	r1, ip
 80020c4:	7051      	strb	r1, [r2, #1]
	digit[4] = sym[0];
 80020c6:	4669      	mov	r1, sp
 80020c8:	780d      	ldrb	r5, [r1, #0]
 80020ca:	7115      	strb	r5, [r2, #4]
	digit[3] = sym[1];
 80020cc:	784c      	ldrb	r4, [r1, #1]
 80020ce:	70d4      	strb	r4, [r2, #3]
	digit[2] = sym[2];
 80020d0:	7889      	ldrb	r1, [r1, #2]
 80020d2:	7091      	strb	r1, [r2, #2]

	// Добавление десятичных точек в соответствующие сегменты индикатора
	if(points & 0b100) digit[4] |= 0b10000000;
 80020d4:	075a      	lsls	r2, r3, #29
 80020d6:	d504      	bpl.n	80020e2 <indicator_sgd4+0x11e>
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	4252      	negs	r2, r2
 80020dc:	4315      	orrs	r5, r2
 80020de:	aa02      	add	r2, sp, #8
 80020e0:	7115      	strb	r5, [r2, #4]
	if(points & 0b010) digit[3] |= 0b10000000;
 80020e2:	079a      	lsls	r2, r3, #30
 80020e4:	d504      	bpl.n	80020f0 <indicator_sgd4+0x12c>
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	4252      	negs	r2, r2
 80020ea:	4314      	orrs	r4, r2
 80020ec:	aa02      	add	r2, sp, #8
 80020ee:	70d4      	strb	r4, [r2, #3]
	if(points & 0b001) digit[2] |= 0b10000000;
 80020f0:	07db      	lsls	r3, r3, #31
 80020f2:	d504      	bpl.n	80020fe <indicator_sgd4+0x13a>
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	425b      	negs	r3, r3
 80020f8:	4319      	orrs	r1, r3
 80020fa:	ab02      	add	r3, sp, #8
 80020fc:	7099      	strb	r1, [r3, #2]
	uint8_t ns = 0;
 80020fe:	2201      	movs	r2, #1
 8002100:	e01e      	b.n	8002140 <indicator_sgd4+0x17c>
			sym[2] = sym[1];
 8002102:	466a      	mov	r2, sp
 8002104:	7852      	ldrb	r2, [r2, #1]
 8002106:	4669      	mov	r1, sp
 8002108:	708a      	strb	r2, [r1, #2]
			sym[1] = sym[0];
 800210a:	780a      	ldrb	r2, [r1, #0]
 800210c:	704a      	strb	r2, [r1, #1]
			sym[0] = 0;
 800210e:	2200      	movs	r2, #0
 8002110:	700a      	strb	r2, [r1, #0]
		} break; //end case 2
 8002112:	e7d5      	b.n	80020c0 <indicator_sgd4+0xfc>
			sym[2] = sym[0];
 8002114:	466a      	mov	r2, sp
 8002116:	7812      	ldrb	r2, [r2, #0]
 8002118:	4669      	mov	r1, sp
 800211a:	708a      	strb	r2, [r1, #2]
			sym[1] = 0;
 800211c:	2200      	movs	r2, #0
 800211e:	704a      	strb	r2, [r1, #1]
			sym[0] = 0;
 8002120:	700a      	strb	r2, [r1, #0]
		} break; //end case 1
 8002122:	e7cd      	b.n	80020c0 <indicator_sgd4+0xfc>
			sym[2] = 0;
 8002124:	2200      	movs	r2, #0
 8002126:	4669      	mov	r1, sp
 8002128:	708a      	strb	r2, [r1, #2]
			sym[1] = 0;
 800212a:	704a      	strb	r2, [r1, #1]
			sym[0] = 0;
 800212c:	700a      	strb	r2, [r1, #0]
		} break; //end case 1
 800212e:	e7c7      	b.n	80020c0 <indicator_sgd4+0xfc>

	// Передача данных в регистры
	for(uint8_t nn = 1; nn < 5; nn++)
	{
		// Передача в регистр данных элемента массива
		*(uint8_t *)&spi_x->DR = digit[nn];
 8002130:	ab02      	add	r3, sp, #8
 8002132:	5c9b      	ldrb	r3, [r3, r2]
 8002134:	7303      	strb	r3, [r0, #12]

		// Ожидание освобождения буфера
		while((spi_x->SR & SPI_SR_TXE) == 0);
 8002136:	6883      	ldr	r3, [r0, #8]
 8002138:	079b      	lsls	r3, r3, #30
 800213a:	d5fc      	bpl.n	8002136 <indicator_sgd4+0x172>
	for(uint8_t nn = 1; nn < 5; nn++)
 800213c:	3201      	adds	r2, #1
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	2a04      	cmp	r2, #4
 8002142:	d9f5      	bls.n	8002130 <indicator_sgd4+0x16c>
	}//end for

	// Ожидание окончания передачи
	while((spi_x->SR & SPI_SR_BSY) > 0);
 8002144:	6883      	ldr	r3, [r0, #8]
 8002146:	061b      	lsls	r3, r3, #24
 8002148:	d4fc      	bmi.n	8002144 <indicator_sgd4+0x180>
   	//////////////////
	// Выключение TIM17
	//TIM17->CR1 &= ~TIM_CR1_CEN;

	// Значение регистра автоматической перезагрузки
	TIM17->ARR = 10; // 10мс
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <indicator_sgd4+0x1b0>)
 800214c:	220a      	movs	r2, #10
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c

	// Обнуление счетчика
	TIM17->CNT = 0;
 8002150:	2200      	movs	r2, #0
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

	// Включение TIM17
	TIM17->CR1 |= TIM_CR1_CEN;
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	2001      	movs	r0, #1
 8002158:	4301      	orrs	r1, r0
 800215a:	6019      	str	r1, [r3, #0]

	// Разрешение прерывания от TIM17
    TIM17->DIER |= TIM_DIER_UIE;
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	4302      	orrs	r2, r0
 8002160:	60da      	str	r2, [r3, #12]
   	//////////////////

    // PB9 = 1
    GPIOB->ODR |= GPIO_ODR_9;
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <indicator_sgd4+0x1b4>)
 8002164:	6951      	ldr	r1, [r2, #20]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	430b      	orrs	r3, r1
 800216c:	6153      	str	r3, [r2, #20]

}//end indicator_sgd4()
 800216e:	b005      	add	sp, #20
 8002170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	40014800 	.word	0x40014800
 8002178:	48000400 	.word	0x48000400
 800217c:	fffffdff 	.word	0xfffffdff
 8002180:	08004fac 	.word	0x08004fac
 8002184:	08004e60 	.word	0x08004e60

08002188 <MX_SPI1_Init>:
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 8002188:	b510      	push	{r4, lr}
	 // Включение тактирования PORTA
	    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800218a:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <MX_SPI1_Init+0xbc>)
 800218c:	6951      	ldr	r1, [r2, #20]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	029b      	lsls	r3, r3, #10
 8002192:	430b      	orrs	r3, r1
 8002194:	6153      	str	r3, [r2, #20]
	    // Включение тактирования PORTB
	    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8002196:	6953      	ldr	r3, [r2, #20]
 8002198:	2080      	movs	r0, #128	; 0x80
 800219a:	02c0      	lsls	r0, r0, #11
 800219c:	4303      	orrs	r3, r0
 800219e:	6153      	str	r3, [r2, #20]
	    // PA5 (SCK), PA7 (MOSI) - альтернативная функция
	    GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 80021a0:	2390      	movs	r3, #144	; 0x90
 80021a2:	05db      	lsls	r3, r3, #23
 80021a4:	681c      	ldr	r4, [r3, #0]
 80021a6:	2188      	movs	r1, #136	; 0x88
 80021a8:	0209      	lsls	r1, r1, #8
 80021aa:	4321      	orrs	r1, r4
 80021ac:	6019      	str	r1, [r3, #0]
	    GPIOB->MODER |= GPIO_MODER_MODER9_0;
 80021ae:	4926      	ldr	r1, [pc, #152]	; (8002248 <MX_SPI1_Init+0xc0>)
 80021b0:	680c      	ldr	r4, [r1, #0]
 80021b2:	4320      	orrs	r0, r4
 80021b4:	6008      	str	r0, [r1, #0]

	    // PA5, PA7 - двухтактные выходы
	    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_5 | GPIO_OTYPER_OT_7);
 80021b6:	6858      	ldr	r0, [r3, #4]
 80021b8:	24a0      	movs	r4, #160	; 0xa0
 80021ba:	43a0      	bics	r0, r4
 80021bc:	6058      	str	r0, [r3, #4]
	    // PB9 - двухтактный выход
	    GPIOB->OTYPER &= ~GPIO_OTYPER_OT_9;
 80021be:	6848      	ldr	r0, [r1, #4]
 80021c0:	4c22      	ldr	r4, [pc, #136]	; (800224c <MX_SPI1_Init+0xc4>)
 80021c2:	4020      	ands	r0, r4
 80021c4:	6048      	str	r0, [r1, #4]
	    // PA5, PA7 - высокая скорость
	    GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR7;
 80021c6:	689c      	ldr	r4, [r3, #8]
 80021c8:	20cc      	movs	r0, #204	; 0xcc
 80021ca:	0200      	lsls	r0, r0, #8
 80021cc:	4320      	orrs	r0, r4
 80021ce:	6098      	str	r0, [r3, #8]
	    // PB9 - высокая скорость
	    GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9;
 80021d0:	688c      	ldr	r4, [r1, #8]
 80021d2:	20c0      	movs	r0, #192	; 0xc0
 80021d4:	0300      	lsls	r0, r0, #12
 80021d6:	4320      	orrs	r0, r4
 80021d8:	6088      	str	r0, [r1, #8]
	    // PA5, PA7 - альтернативная функция AF0
	    GPIOA->AFR[0] &= ~(0xF0000 | 0xF0000000);
 80021da:	6a19      	ldr	r1, [r3, #32]
 80021dc:	481c      	ldr	r0, [pc, #112]	; (8002250 <MX_SPI1_Init+0xc8>)
 80021de:	4001      	ands	r1, r0
 80021e0:	6219      	str	r1, [r3, #32]
	    // Включение тактирования SPI1
	    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80021e2:	6991      	ldr	r1, [r2, #24]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	015b      	lsls	r3, r3, #5
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6193      	str	r3, [r2, #24]
	    // Скорость передачи: fPCLK/64  f
	    SPI1->CR1 |= SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0;
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <MX_SPI1_Init+0xcc>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2138      	movs	r1, #56	; 0x38
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
	    // Однопроводный режим, мастер использует только вывод MOSI
	    SPI1->CR1 |= SPI_CR1_BIDIMODE;
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	0212      	lsls	r2, r2, #8
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
	    // Данные только передаются в однопроводном режиме
	    SPI1->CR1 |= SPI_CR1_BIDIOE;
 8002200:	6819      	ldr	r1, [r3, #0]
 8002202:	2280      	movs	r2, #128	; 0x80
 8002204:	01d2      	lsls	r2, r2, #7
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
	    // Работа в режиме ведущего
	    SPI1->CR1 |= SPI_CR1_MSTR;
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2104      	movs	r1, #4
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
	    //
	    SPI1->CR1 |= SPI_CR1_SSM;
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	0092      	lsls	r2, r2, #2
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
	    SPI1->CR1 |= SPI_CR1_SSI;
 800221c:	6819      	ldr	r1, [r3, #0]
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	0052      	lsls	r2, r2, #1
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
	    // 8-битный формат
	    SPI1->CR2 &= ~SPI_CR2_DS;
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	490b      	ldr	r1, [pc, #44]	; (8002258 <MX_SPI1_Init+0xd0>)
 800222a:	400a      	ands	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
	    SPI1->CR2 |= SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0;
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	22e0      	movs	r2, #224	; 0xe0
 8002232:	00d2      	lsls	r2, r2, #3
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
	    // Включение SPI2
	    SPI1->CR1 |= SPI_CR1_SPE;
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2140      	movs	r1, #64	; 0x40
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	bd10      	pop	{r4, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	40021000 	.word	0x40021000
 8002248:	48000400 	.word	0x48000400
 800224c:	fffffdff 	.word	0xfffffdff
 8002250:	0ff0ffff 	.word	0x0ff0ffff
 8002254:	40013000 	.word	0x40013000
 8002258:	fffff0ff 	.word	0xfffff0ff

0800225c <MX_GPIO_Init>:
  }

}

static void MX_GPIO_Init(void)
{
 800225c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225e:	b085      	sub	sp, #20

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002260:	4a44      	ldr	r2, [pc, #272]	; (8002374 <MX_GPIO_Init+0x118>)
 8002262:	6951      	ldr	r1, [r2, #20]
 8002264:	2080      	movs	r0, #128	; 0x80
 8002266:	03c0      	lsls	r0, r0, #15
 8002268:	4301      	orrs	r1, r0
 800226a:	6151      	str	r1, [r2, #20]
 800226c:	6953      	ldr	r3, [r2, #20]
 800226e:	4003      	ands	r3, r0
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	6951      	ldr	r1, [r2, #20]
 8002276:	2080      	movs	r0, #128	; 0x80
 8002278:	0280      	lsls	r0, r0, #10
 800227a:	4301      	orrs	r1, r0
 800227c:	6151      	str	r1, [r2, #20]
 800227e:	6953      	ldr	r3, [r2, #20]
 8002280:	4003      	ands	r3, r0
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002286:	6953      	ldr	r3, [r2, #20]
 8002288:	2080      	movs	r0, #128	; 0x80
 800228a:	02c0      	lsls	r0, r0, #11
 800228c:	4303      	orrs	r3, r0
 800228e:	6153      	str	r3, [r2, #20]
 8002290:	6953      	ldr	r3, [r2, #20]
 8002292:	4003      	ands	r3, r0
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002298:	6951      	ldr	r1, [r2, #20]
 800229a:	2480      	movs	r4, #128	; 0x80
 800229c:	0324      	lsls	r4, r4, #12
 800229e:	4321      	orrs	r1, r4
 80022a0:	6151      	str	r1, [r2, #20]
 80022a2:	6953      	ldr	r3, [r2, #20]
 80022a4:	4023      	ands	r3, r4
 80022a6:	9303      	str	r3, [sp, #12]
 80022a8:	9b03      	ldr	r3, [sp, #12]
  //DE-RE:
  /*GPIOA->MODER |= 0b01<<GPIO_MODER_MODER0;//OUTPUT MODE
  GPIOA->OTYPER |= 0b01<<GPIO_OTYPER_OT_0;//OPEN-DRAIN
  GPIOA->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR0_Pos;//HIGH SPEED*/

  GPIOA->MODER |= GPIO_MODER_MODER0_0;
 80022aa:	2190      	movs	r1, #144	; 0x90
 80022ac:	05c9      	lsls	r1, r1, #23
 80022ae:	680b      	ldr	r3, [r1, #0]
 80022b0:	2401      	movs	r4, #1
 80022b2:	4323      	orrs	r3, r4
 80022b4:	600b      	str	r3, [r1, #0]
  GPIOA->OTYPER &= ~ GPIO_OTYPER_OT_0;
 80022b6:	684b      	ldr	r3, [r1, #4]
 80022b8:	43a3      	bics	r3, r4
 80022ba:	604b      	str	r3, [r1, #4]
  GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0;
 80022bc:	688b      	ldr	r3, [r1, #8]
 80022be:	2503      	movs	r5, #3
 80022c0:	432b      	orrs	r3, r5
 80022c2:	608b      	str	r3, [r1, #8]

  //LED G:
  GPIOB->MODER |= 0b01<<GPIO_MODER_MODER10_Pos; //OUTPUT MODE
 80022c4:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <MX_GPIO_Init+0x11c>)
 80022c6:	681e      	ldr	r6, [r3, #0]
 80022c8:	2580      	movs	r5, #128	; 0x80
 80022ca:	036d      	lsls	r5, r5, #13
 80022cc:	4335      	orrs	r5, r6
 80022ce:	601d      	str	r5, [r3, #0]
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT_10;//PUSH-PULL
 80022d0:	685d      	ldr	r5, [r3, #4]
 80022d2:	4e2a      	ldr	r6, [pc, #168]	; (800237c <MX_GPIO_Init+0x120>)
 80022d4:	4035      	ands	r5, r6
 80022d6:	605d      	str	r5, [r3, #4]
  GPIOB->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR10_Pos;//HIGH SPEED
 80022d8:	689e      	ldr	r6, [r3, #8]
 80022da:	25c0      	movs	r5, #192	; 0xc0
 80022dc:	03ad      	lsls	r5, r5, #14
 80022de:	4335      	orrs	r5, r6
 80022e0:	609d      	str	r5, [r3, #8]
  GPIOB->PUPDR |= 0b10<<GPIO_PUPDR_PUPDR10_Pos; //PULL DOWN
 80022e2:	68de      	ldr	r6, [r3, #12]
 80022e4:	2580      	movs	r5, #128	; 0x80
 80022e6:	03ad      	lsls	r5, r5, #14
 80022e8:	4335      	orrs	r5, r6
 80022ea:	60dd      	str	r5, [r3, #12]

  //TER:
  GPIOA->MODER |= 0b01<<GPIO_MODER_MODER12_Pos;//OUTPUT MODE
 80022ec:	680d      	ldr	r5, [r1, #0]
 80022ee:	2680      	movs	r6, #128	; 0x80
 80022f0:	0476      	lsls	r6, r6, #17
 80022f2:	4335      	orrs	r5, r6
 80022f4:	600d      	str	r5, [r1, #0]
  GPIOA->OTYPER &= ~ GPIO_OTYPER_OT_12;//OPEN-DRAIN
 80022f6:	684d      	ldr	r5, [r1, #4]
 80022f8:	4f21      	ldr	r7, [pc, #132]	; (8002380 <MX_GPIO_Init+0x124>)
 80022fa:	46bc      	mov	ip, r7
 80022fc:	403d      	ands	r5, r7
 80022fe:	604d      	str	r5, [r1, #4]
  GPIOA->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR12_Pos;//HIGH SPEED
 8002300:	688f      	ldr	r7, [r1, #8]
 8002302:	25c0      	movs	r5, #192	; 0xc0
 8002304:	04ad      	lsls	r5, r5, #18
 8002306:	432f      	orrs	r7, r5
 8002308:	608f      	str	r7, [r1, #8]

  //REL:
  GPIOB->MODER |= 0b01<<GPIO_MODER_MODER12_Pos;//OUTPUT MODE
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	430e      	orrs	r6, r1
 800230e:	601e      	str	r6, [r3, #0]
  GPIOB->OTYPER &= ~ GPIO_OTYPER_OT_12;//OPEN-DRAIN
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	4666      	mov	r6, ip
 8002314:	4031      	ands	r1, r6
 8002316:	6059      	str	r1, [r3, #4]
  GPIOB->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR12_Pos;//HIGH SPEED
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	430d      	orrs	r5, r1
 800231c:	609d      	str	r5, [r3, #8]

  /*EXTI PB2 и PB8*/
  GPIOB->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER8);
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	4d18      	ldr	r5, [pc, #96]	; (8002384 <MX_GPIO_Init+0x128>)
 8002322:	4029      	ands	r1, r5
 8002324:	6019      	str	r1, [r3, #0]
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002326:	6991      	ldr	r1, [r2, #24]
 8002328:	4321      	orrs	r1, r4
 800232a:	6191      	str	r1, [r2, #24]
  SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PB;
 800232c:	4a16      	ldr	r2, [pc, #88]	; (8002388 <MX_GPIO_Init+0x12c>)
 800232e:	6895      	ldr	r5, [r2, #8]
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	0049      	lsls	r1, r1, #1
 8002334:	4329      	orrs	r1, r5
 8002336:	6091      	str	r1, [r2, #8]
  SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI8_PB;
 8002338:	6911      	ldr	r1, [r2, #16]
 800233a:	430c      	orrs	r4, r1
 800233c:	6114      	str	r4, [r2, #16]
  EXTI->IMR = 0b100000100;// Настройка битов маски
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <MX_GPIO_Init+0x130>)
 8002340:	2182      	movs	r1, #130	; 0x82
 8002342:	0049      	lsls	r1, r1, #1
 8002344:	6011      	str	r1, [r2, #0]
  EXTI->RTSR = 0b100000100;// Срабатывание по переднему фронту
 8002346:	6091      	str	r1, [r2, #8]
  EXTI->FTSR = 0b100000100;// Срабатывание по заднему фронту
 8002348:	60d1      	str	r1, [r2, #12]
 800234a:	4a11      	ldr	r2, [pc, #68]	; (8002390 <MX_GPIO_Init+0x134>)
 800234c:	39c4      	subs	r1, #196	; 0xc4
 800234e:	6011      	str	r1, [r2, #0]
 8002350:	3140      	adds	r1, #64	; 0x40
 8002352:	6011      	str	r1, [r2, #0]
  // Разрешение прерываний
  NVIC_EnableIRQ(EXTI2_3_IRQn);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

  //RCLK
  GPIOB->MODER |= 0b01<<GPIO_MODER_MODER9_Pos;//OUTPUT MODE
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4310      	orrs	r0, r2
 8002358:	6018      	str	r0, [r3, #0]
  GPIOB->OTYPER |= GPIO_OTYPER_OT_9;//OPEN-DRAIN
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	2280      	movs	r2, #128	; 0x80
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	430a      	orrs	r2, r1
 8002362:	605a      	str	r2, [r3, #4]
  GPIOB->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR9_Pos;//HIGH SPEED
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	22c0      	movs	r2, #192	; 0xc0
 8002368:	0312      	lsls	r2, r2, #12
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
}
 800236e:	b005      	add	sp, #20
 8002370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	40021000 	.word	0x40021000
 8002378:	48000400 	.word	0x48000400
 800237c:	fffffbff 	.word	0xfffffbff
 8002380:	ffffefff 	.word	0xffffefff
 8002384:	fffcffcf 	.word	0xfffcffcf
 8002388:	40010000 	.word	0x40010000
 800238c:	40010400 	.word	0x40010400
 8002390:	e000e100 	.word	0xe000e100

08002394 <IWDG_Init>:
	IWDG->KR = 0xCCCC;//Запуск таймера IWDG
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <IWDG_Init+0x24>)
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <IWDG_Init+0x28>)
 8002398:	601a      	str	r2, [r3, #0]
	IWDG->KR = 0x5555;//Разрешение доступа к таймеру
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <IWDG_Init+0x2c>)
 800239c:	601a      	str	r2, [r3, #0]
	IWDG->PR = 0b111;//Предделитель /256
 800239e:	2207      	movs	r2, #7
 80023a0:	605a      	str	r2, [r3, #4]
	IWDG->RLR = 156*10;//Значение регистра перезагрузки (время сброса таймера ~1c)
 80023a2:	22c3      	movs	r2, #195	; 0xc3
 80023a4:	00d2      	lsls	r2, r2, #3
 80023a6:	609a      	str	r2, [r3, #8]
	while(IWDG->SR);//Ожидание обновления регистров
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <IWDG_Init+0x24>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1fb      	bne.n	80023a8 <IWDG_Init+0x14>
	IWDG->KR = 0xAAAA;//Обновление значения счетчика
 80023b0:	4b01      	ldr	r3, [pc, #4]	; (80023b8 <IWDG_Init+0x24>)
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <IWDG_Init+0x30>)
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	4770      	bx	lr
 80023b8:	40003000 	.word	0x40003000
 80023bc:	0000cccc 	.word	0x0000cccc
 80023c0:	00005555 	.word	0x00005555
 80023c4:	0000aaaa 	.word	0x0000aaaa

080023c8 <IWDG_Reset>:
	IWDG->KR = 0xAAAA;
 80023c8:	4b01      	ldr	r3, [pc, #4]	; (80023d0 <IWDG_Reset+0x8>)
 80023ca:	4a02      	ldr	r2, [pc, #8]	; (80023d4 <IWDG_Reset+0xc>)
 80023cc:	601a      	str	r2, [r3, #0]
}
 80023ce:	4770      	bx	lr
 80023d0:	40003000 	.word	0x40003000
 80023d4:	0000aaaa 	.word	0x0000aaaa

080023d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //Обработчик прерываний EXTI
{
	EXTI_PRreg = EXTI->PR;
 80023d8:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <HAL_GPIO_EXTI_Callback+0xac>)
 80023da:	6953      	ldr	r3, [r2, #20]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	492a      	ldr	r1, [pc, #168]	; (8002488 <HAL_GPIO_EXTI_Callback+0xb0>)
 80023e0:	800b      	strh	r3, [r1, #0]
	EXTI->PR |= 1;
 80023e2:	6951      	ldr	r1, [r2, #20]
 80023e4:	2001      	movs	r0, #1
 80023e6:	4301      	orrs	r1, r0
 80023e8:	6151      	str	r1, [r2, #20]
	if((EXTI_PRreg & EXTI_PR_PR2)>0)
 80023ea:	075a      	lsls	r2, r3, #29
 80023ec:	d50c      	bpl.n	8002408 <HAL_GPIO_EXTI_Callback+0x30>
	{
		EXTI_PRreg &= ~EXTI_PR_PR2;
 80023ee:	2204      	movs	r2, #4
 80023f0:	4393      	bics	r3, r2
 80023f2:	4a25      	ldr	r2, [pc, #148]	; (8002488 <HAL_GPIO_EXTI_Callback+0xb0>)
 80023f4:	8013      	strh	r3, [r2, #0]
		if(!ClickFlag_PB2)
 80023f6:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d123      	bne.n	8002446 <HAL_GPIO_EXTI_Callback+0x6e>
		{
			TimerCounterTIM14=0;
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002400:	2200      	movs	r2, #0
 8002402:	805a      	strh	r2, [r3, #2]
			ClickFlag_PB2=1;
 8002404:	3201      	adds	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
			}
			ClickFlag_PB2=0;
		}
	}

	if((EXTI_PRreg & EXTI_PR_PR8)>0)
 8002408:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <HAL_GPIO_EXTI_Callback+0xb0>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	05da      	lsls	r2, r3, #23
 800240e:	d50c      	bpl.n	800242a <HAL_GPIO_EXTI_Callback+0x52>
	{
		EXTI_PRreg &= ~EXTI_PR_PR8;
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002412:	4013      	ands	r3, r2
 8002414:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002416:	8013      	strh	r3, [r2, #0]
		if(!ClickFlag_PB8)
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 800241a:	795b      	ldrb	r3, [r3, #5]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11e      	bne.n	800245e <HAL_GPIO_EXTI_Callback+0x86>
		{
			TimerCounterTIM14=0;
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002422:	2200      	movs	r2, #0
 8002424:	805a      	strh	r2, [r3, #2]
			ClickFlag_PB8=1;
 8002426:	3201      	adds	r2, #1
 8002428:	715a      	strb	r2, [r3, #5]
			}
			ClickFlag_PB8=0;
		}
	}

	if(ClickFlag_PB2 || ClickFlag_PB8)
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <HAL_GPIO_EXTI_Callback+0x62>
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002434:	795b      	ldrb	r3, [r3, #5]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d01d      	beq.n	8002476 <HAL_GPIO_EXTI_Callback+0x9e>
	{
		TIM14->CR1 |= TIM_CR1_CEN;//Включение таймер
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_GPIO_EXTI_Callback+0xbc>)
 800243c:	6813      	ldr	r3, [r2, #0]
 800243e:	2101      	movs	r1, #1
 8002440:	430b      	orrs	r3, r1
 8002442:	6013      	str	r3, [r2, #0]
	}
	else
	{
		TIM14->CR1 &= ~TIM_CR1_CEN;//Включение таймер
	}
}
 8002444:	4770      	bx	lr
			if(TimerCounterTIM14<3000)
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002448:	885a      	ldrh	r2, [r3, #2]
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_GPIO_EXTI_Callback+0xc0>)
 800244c:	429a      	cmp	r2, r3
 800244e:	d802      	bhi.n	8002456 <HAL_GPIO_EXTI_Callback+0x7e>
				ShortPressKey_PB2=1;
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002452:	2201      	movs	r2, #1
 8002454:	711a      	strb	r2, [r3, #4]
			ClickFlag_PB2=0;
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e7d4      	b.n	8002408 <HAL_GPIO_EXTI_Callback+0x30>
			if(TimerCounterTIM14<3000)
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002460:	885a      	ldrh	r2, [r3, #2]
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002464:	429a      	cmp	r2, r3
 8002466:	d802      	bhi.n	800246e <HAL_GPIO_EXTI_Callback+0x96>
				ShortPressKey_PB8=1;
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 800246a:	2201      	movs	r2, #1
 800246c:	719a      	strb	r2, [r3, #6]
			ClickFlag_PB8=0;
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002470:	2200      	movs	r2, #0
 8002472:	715a      	strb	r2, [r3, #5]
 8002474:	e7d9      	b.n	800242a <HAL_GPIO_EXTI_Callback+0x52>
		TIM14->CR1 &= ~TIM_CR1_CEN;//Включение таймер
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002478:	6813      	ldr	r3, [r2, #0]
 800247a:	2101      	movs	r1, #1
 800247c:	438b      	bics	r3, r1
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	e7e0      	b.n	8002444 <HAL_GPIO_EXTI_Callback+0x6c>
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	40010400 	.word	0x40010400
 8002488:	20000264 	.word	0x20000264
 800248c:	200001dc 	.word	0x200001dc
 8002490:	fffffeff 	.word	0xfffffeff
 8002494:	40002000 	.word	0x40002000
 8002498:	00000bb7 	.word	0x00000bb7

0800249c <CheckingKeyTimings>:
void CheckingKeyTimings()
{
	if(TimerCounterTIM14==3000 && ClickFlag_PB8==1 && ClickFlag_PB2==0)
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <CheckingKeyTimings+0x94>)
 800249e:	885b      	ldrh	r3, [r3, #2]
 80024a0:	4a24      	ldr	r2, [pc, #144]	; (8002534 <CheckingKeyTimings+0x98>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d016      	beq.n	80024d4 <CheckingKeyTimings+0x38>
	{
		//ДЛИННОЕ НАЖАТИЕ
		LongPressKey_PB8=1;
		TimerCounterTIM14=0;
	}
	else if(TimerCounterTIM14==3000 && ClickFlag_PB2==1 && ClickFlag_PB8==0)
 80024a6:	4a23      	ldr	r2, [pc, #140]	; (8002534 <CheckingKeyTimings+0x98>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d021      	beq.n	80024f0 <CheckingKeyTimings+0x54>
	{
		//ДЛИННОЕ НАЖАТИЕ
		LongPressKey_PB2=1;
		TimerCounterTIM14=0;
	}
	else if(TimerCounterTIM14>=3000 && TimerCounterTIM14<=9000 && ClickFlag_PB8==0 && ClickFlag_PB2==0)
 80024ac:	4a22      	ldr	r2, [pc, #136]	; (8002538 <CheckingKeyTimings+0x9c>)
 80024ae:	189a      	adds	r2, r3, r2
 80024b0:	b292      	uxth	r2, r2
 80024b2:	4922      	ldr	r1, [pc, #136]	; (800253c <CheckingKeyTimings+0xa0>)
 80024b4:	428a      	cmp	r2, r1
 80024b6:	d829      	bhi.n	800250c <CheckingKeyTimings+0x70>
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <CheckingKeyTimings+0x94>)
 80024ba:	7952      	ldrb	r2, [r2, #5]
 80024bc:	2a00      	cmp	r2, #0
 80024be:	d125      	bne.n	800250c <CheckingKeyTimings+0x70>
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <CheckingKeyTimings+0x94>)
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d121      	bne.n	800250c <CheckingKeyTimings+0x70>
	{
		LongDoublePressKey_PB2_PB8=1;
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <CheckingKeyTimings+0x94>)
 80024ca:	3201      	adds	r2, #1
 80024cc:	725a      	strb	r2, [r3, #9]
		TimerCounterTIM14=0;
 80024ce:	2200      	movs	r2, #0
 80024d0:	805a      	strh	r2, [r3, #2]
	else if(TimerCounterTIM14>=9000 && ClickFlag_PB8==0 && ClickFlag_PB2==0)
	{
		LongLongDoublePressKey_PB2_PB8=1;
		TimerCounterTIM14=0;
	}
}
 80024d2:	4770      	bx	lr
	if(TimerCounterTIM14==3000 && ClickFlag_PB8==1 && ClickFlag_PB2==0)
 80024d4:	4a16      	ldr	r2, [pc, #88]	; (8002530 <CheckingKeyTimings+0x94>)
 80024d6:	7952      	ldrb	r2, [r2, #5]
 80024d8:	2a01      	cmp	r2, #1
 80024da:	d1e4      	bne.n	80024a6 <CheckingKeyTimings+0xa>
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <CheckingKeyTimings+0x94>)
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d1e0      	bne.n	80024a6 <CheckingKeyTimings+0xa>
		LongPressKey_PB8=1;
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <CheckingKeyTimings+0x94>)
 80024e6:	3201      	adds	r2, #1
 80024e8:	71da      	strb	r2, [r3, #7]
		TimerCounterTIM14=0;
 80024ea:	2200      	movs	r2, #0
 80024ec:	805a      	strh	r2, [r3, #2]
 80024ee:	e7f0      	b.n	80024d2 <CheckingKeyTimings+0x36>
	else if(TimerCounterTIM14==3000 && ClickFlag_PB2==1 && ClickFlag_PB8==0)
 80024f0:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <CheckingKeyTimings+0x94>)
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	2a01      	cmp	r2, #1
 80024f6:	d1d9      	bne.n	80024ac <CheckingKeyTimings+0x10>
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <CheckingKeyTimings+0x94>)
 80024fa:	7952      	ldrb	r2, [r2, #5]
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	d1d5      	bne.n	80024ac <CheckingKeyTimings+0x10>
		LongPressKey_PB2=1;
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <CheckingKeyTimings+0x94>)
 8002502:	3201      	adds	r2, #1
 8002504:	721a      	strb	r2, [r3, #8]
		TimerCounterTIM14=0;
 8002506:	2200      	movs	r2, #0
 8002508:	805a      	strh	r2, [r3, #2]
 800250a:	e7e2      	b.n	80024d2 <CheckingKeyTimings+0x36>
	else if(TimerCounterTIM14>=9000 && ClickFlag_PB8==0 && ClickFlag_PB2==0)
 800250c:	4a0c      	ldr	r2, [pc, #48]	; (8002540 <CheckingKeyTimings+0xa4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d9df      	bls.n	80024d2 <CheckingKeyTimings+0x36>
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <CheckingKeyTimings+0x94>)
 8002514:	795b      	ldrb	r3, [r3, #5]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1db      	bne.n	80024d2 <CheckingKeyTimings+0x36>
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <CheckingKeyTimings+0x94>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1d7      	bne.n	80024d2 <CheckingKeyTimings+0x36>
		LongLongDoublePressKey_PB2_PB8=1;
 8002522:	4b03      	ldr	r3, [pc, #12]	; (8002530 <CheckingKeyTimings+0x94>)
 8002524:	2201      	movs	r2, #1
 8002526:	729a      	strb	r2, [r3, #10]
		TimerCounterTIM14=0;
 8002528:	2200      	movs	r2, #0
 800252a:	805a      	strh	r2, [r3, #2]
}
 800252c:	e7d1      	b.n	80024d2 <CheckingKeyTimings+0x36>
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	200001dc 	.word	0x200001dc
 8002534:	00000bb8 	.word	0x00000bb8
 8002538:	fffff448 	.word	0xfffff448
 800253c:	00001770 	.word	0x00001770
 8002540:	00002327 	.word	0x00002327

08002544 <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
 8002544:	b510      	push	{r4, lr}
  eMBErrorCode eStatus = MB_ENOERR;
  int iRegIndex;

  if ((usAddress >= REG_ADRESS_INPUT_START) &&
 8002546:	2900      	cmp	r1, #0
 8002548:	d012      	beq.n	8002570 <eMBRegInputCB+0x2c>
      (usAddress + usNRegs <= REG_ADRESS_INPUT_START + REG_INPUT_NUMBER_REGS))
 800254a:	1853      	adds	r3, r2, r1
  if ((usAddress >= REG_ADRESS_INPUT_START) &&
 800254c:	2b65      	cmp	r3, #101	; 0x65
 800254e:	dc11      	bgt.n	8002574 <eMBRegInputCB+0x30>
  {
    iRegIndex = (int)(usAddress - usRegAdressInputStart);
 8002550:	3901      	subs	r1, #1

    while(usNRegs > 0)
 8002552:	2a00      	cmp	r2, #0
 8002554:	d00a      	beq.n	800256c <eMBRegInputCB+0x28>
    {
        *pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] >> 8);
 8002556:	004c      	lsls	r4, r1, #1
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <eMBRegInputCB+0x34>)
 800255a:	5ae3      	ldrh	r3, [r4, r3]
 800255c:	0a1c      	lsrs	r4, r3, #8
 800255e:	7004      	strb	r4, [r0, #0]
        *pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 8002560:	7043      	strb	r3, [r0, #1]

        iRegIndex++;
 8002562:	3101      	adds	r1, #1
        usNRegs--;
 8002564:	3a01      	subs	r2, #1
 8002566:	b292      	uxth	r2, r2
        *pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 8002568:	3002      	adds	r0, #2
 800256a:	e7f2      	b.n	8002552 <eMBRegInputCB+0xe>
  eMBErrorCode eStatus = MB_ENOERR;
 800256c:	2000      	movs	r0, #0
 800256e:	e000      	b.n	8002572 <eMBRegInputCB+0x2e>
    }
  }
  else
  {
    eStatus = MB_ENOREG;
 8002570:	2001      	movs	r0, #1
  }

  return eStatus;
}
 8002572:	bd10      	pop	{r4, pc}
    eStatus = MB_ENOREG;
 8002574:	2001      	movs	r0, #1
 8002576:	e7fc      	b.n	8002572 <eMBRegInputCB+0x2e>
 8002578:	20000010 	.word	0x20000010

0800257c <eMBRegHoldingCB>:


/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                             eMBRegisterMode eMode)
{
 800257c:	b530      	push	{r4, r5, lr}
	eMBErrorCode eStatus = MB_ENOERR;
	int iRegIndex=0;
	if ((usAddress >= REG_ADRESS_INPUT_START) &&
 800257e:	2900      	cmp	r1, #0
 8002580:	d025      	beq.n	80025ce <eMBRegHoldingCB+0x52>
	      (usAddress + usNRegs <= REG_ADRESS_INPUT_START + REG_INPUT_NUMBER_REGS))
 8002582:	1854      	adds	r4, r2, r1
	if ((usAddress >= REG_ADRESS_INPUT_START) &&
 8002584:	2c65      	cmp	r4, #101	; 0x65
 8002586:	dc24      	bgt.n	80025d2 <eMBRegHoldingCB+0x56>
	  {
		if(eMode==MB_REG_READ)
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <eMBRegHoldingCB+0x18>

				iRegIndex++;
				usNRegs--;
			}
		}
		else if(eMode==MB_REG_WRITE)
 800258c:	2b01      	cmp	r3, #1
 800258e:	d011      	beq.n	80025b4 <eMBRegHoldingCB+0x38>
	eMBErrorCode eStatus = MB_ENOERR;
 8002590:	2000      	movs	r0, #0
 8002592:	e01d      	b.n	80025d0 <eMBRegHoldingCB+0x54>
	int iRegIndex=0;
 8002594:	2100      	movs	r1, #0
			while(usNRegs > 0)
 8002596:	2a00      	cmp	r2, #0
 8002598:	d00a      	beq.n	80025b0 <eMBRegHoldingCB+0x34>
				*pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] >> 8);
 800259a:	004d      	lsls	r5, r1, #1
 800259c:	4c0e      	ldr	r4, [pc, #56]	; (80025d8 <eMBRegHoldingCB+0x5c>)
 800259e:	5b2c      	ldrh	r4, [r5, r4]
 80025a0:	0a25      	lsrs	r5, r4, #8
 80025a2:	7005      	strb	r5, [r0, #0]
				*pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 80025a4:	7044      	strb	r4, [r0, #1]
				iRegIndex++;
 80025a6:	3101      	adds	r1, #1
				usNRegs--;
 80025a8:	3a01      	subs	r2, #1
 80025aa:	b292      	uxth	r2, r2
				*pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 80025ac:	3002      	adds	r0, #2
 80025ae:	e7f2      	b.n	8002596 <eMBRegHoldingCB+0x1a>
	eMBErrorCode eStatus = MB_ENOERR;
 80025b0:	0018      	movs	r0, r3
 80025b2:	e00d      	b.n	80025d0 <eMBRegHoldingCB+0x54>
		{
			FlagAnalogMessageFromMaster=1;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <eMBRegHoldingCB+0x60>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	72da      	strb	r2, [r3, #11]
			/*Если выставлен флаг на запись в регистр, то pucRegBuffer хранит в себе данные о числах
			 	 записываемых в регистр
			 	 если число больше 255, то по адресу pucRegBuffer[0] записывается количественное значение*/
			usRegAnalog[usAddress-1] = pucRegBuffer[1] + 256*pucRegBuffer[0];
 80025ba:	7843      	ldrb	r3, [r0, #1]
 80025bc:	7802      	ldrb	r2, [r0, #0]
 80025be:	3901      	subs	r1, #1
 80025c0:	0212      	lsls	r2, r2, #8
 80025c2:	189b      	adds	r3, r3, r2
 80025c4:	0049      	lsls	r1, r1, #1
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <eMBRegHoldingCB+0x5c>)
 80025c8:	5253      	strh	r3, [r2, r1]
	eMBErrorCode eStatus = MB_ENOERR;
 80025ca:	2000      	movs	r0, #0
 80025cc:	e000      	b.n	80025d0 <eMBRegHoldingCB+0x54>
		}

	  }
	else
	{
		eStatus = MB_ENOREG;
 80025ce:	2001      	movs	r0, #1
	}

  return eStatus;
}
 80025d0:	bd30      	pop	{r4, r5, pc}
		eStatus = MB_ENOREG;
 80025d2:	2001      	movs	r0, #1
 80025d4:	e7fc      	b.n	80025d0 <eMBRegHoldingCB+0x54>
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	20000010 	.word	0x20000010
 80025dc:	200001dc 	.word	0x200001dc

080025e0 <eMBRegCoilsCB>:
		eStatus = MB_ENOREG;
	}*/
	eStatus = MB_ENOREG;

  return eStatus;
}
 80025e0:	2001      	movs	r0, #1
 80025e2:	4770      	bx	lr

080025e4 <eMBRegDiscreteCB>:
	{
		eStatus = MB_ENOREG;
	}*/
	eStatus = MB_ENOREG;
  return eStatus;
}
 80025e4:	2001      	movs	r0, #1
 80025e6:	4770      	bx	lr

080025e8 <IndicationSensitivity>:


void IndicationSensitivity(uint8_t Sensitivity, uint8_t led)
{
 80025e8:	b510      	push	{r4, lr}
 80025ea:	000b      	movs	r3, r1
	switch (Sensitivity)
 80025ec:	2801      	cmp	r0, #1
 80025ee:	d00a      	beq.n	8002606 <IndicationSensitivity+0x1e>
 80025f0:	2802      	cmp	r0, #2
 80025f2:	d00e      	beq.n	8002612 <IndicationSensitivity+0x2a>
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d000      	beq.n	80025fa <IndicationSensitivity+0x12>
	case	2:
	{
		indicator_sgd4(SPI1, 0x00, " BH", led);
	}break;
	}
}
 80025f8:	bd10      	pop	{r4, pc}
		indicator_sgd4(SPI1, 0x00, " NH", led);
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <IndicationSensitivity+0x38>)
 80025fc:	2100      	movs	r1, #0
 80025fe:	4809      	ldr	r0, [pc, #36]	; (8002624 <IndicationSensitivity+0x3c>)
 8002600:	f7ff fce0 	bl	8001fc4 <indicator_sgd4>
	}break;
 8002604:	e7f8      	b.n	80025f8 <IndicationSensitivity+0x10>
		indicator_sgd4(SPI1, 0x00, " CH", led);
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <IndicationSensitivity+0x40>)
 8002608:	2100      	movs	r1, #0
 800260a:	4806      	ldr	r0, [pc, #24]	; (8002624 <IndicationSensitivity+0x3c>)
 800260c:	f7ff fcda 	bl	8001fc4 <indicator_sgd4>
	}break;
 8002610:	e7f2      	b.n	80025f8 <IndicationSensitivity+0x10>
		indicator_sgd4(SPI1, 0x00, " BH", led);
 8002612:	4a06      	ldr	r2, [pc, #24]	; (800262c <IndicationSensitivity+0x44>)
 8002614:	2100      	movs	r1, #0
 8002616:	4803      	ldr	r0, [pc, #12]	; (8002624 <IndicationSensitivity+0x3c>)
 8002618:	f7ff fcd4 	bl	8001fc4 <indicator_sgd4>
}
 800261c:	e7ec      	b.n	80025f8 <IndicationSensitivity+0x10>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	08005204 	.word	0x08005204
 8002624:	40013000 	.word	0x40013000
 8002628:	08005208 	.word	0x08005208
 800262c:	0800520c 	.word	0x0800520c

08002630 <KeyPress>:
{
 8002630:	b530      	push	{r4, r5, lr}
 8002632:	b083      	sub	sp, #12
	if(TimerCounterTIM14>0)
 8002634:	4bcc      	ldr	r3, [pc, #816]	; (8002968 <KeyPress+0x338>)
 8002636:	885b      	ldrh	r3, [r3, #2]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d125      	bne.n	8002688 <KeyPress+0x58>
		if(TimerCounterTIM15%2==0)
 800263c:	4bca      	ldr	r3, [pc, #808]	; (8002968 <KeyPress+0x338>)
 800263e:	7b1b      	ldrb	r3, [r3, #12]
 8002640:	07db      	lsls	r3, r3, #31
 8002642:	d524      	bpl.n	800268e <KeyPress+0x5e>
		sprintf(StringIndication, "%d", GlobalAdres);
 8002644:	4bc8      	ldr	r3, [pc, #800]	; (8002968 <KeyPress+0x338>)
 8002646:	7c5a      	ldrb	r2, [r3, #17]
 8002648:	4cc8      	ldr	r4, [pc, #800]	; (800296c <KeyPress+0x33c>)
 800264a:	49c9      	ldr	r1, [pc, #804]	; (8002970 <KeyPress+0x340>)
 800264c:	0020      	movs	r0, r4
 800264e:	f001 fcd9 	bl	8004004 <siprintf>
		indicator_sgd4(SPI1, 0x00, StringIndication, 0b010);
 8002652:	2302      	movs	r3, #2
 8002654:	0022      	movs	r2, r4
 8002656:	2100      	movs	r1, #0
 8002658:	48c6      	ldr	r0, [pc, #792]	; (8002974 <KeyPress+0x344>)
 800265a:	f7ff fcb3 	bl	8001fc4 <indicator_sgd4>
	if((LongPressKey_PB8))//Сработало длинное нажатие ЭТО ДЛЯ НАСТРОЙКИ АДРЕСА
 800265e:	4bc2      	ldr	r3, [pc, #776]	; (8002968 <KeyPress+0x338>)
 8002660:	79db      	ldrb	r3, [r3, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d124      	bne.n	80026b0 <KeyPress+0x80>
	if((LongPressKey_PB2))//Сработало длинное нажатие ЭТО ДЛЯ НАСТРОЙКИ ЧУВСТВИТЕЛЬНОСТИ
 8002666:	4bc0      	ldr	r3, [pc, #768]	; (8002968 <KeyPress+0x338>)
 8002668:	7a1b      	ldrb	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d000      	beq.n	8002670 <KeyPress+0x40>
 800266e:	e087      	b.n	8002780 <KeyPress+0x150>
	if(LongDoublePressKey_PB2_PB8) //сработали обе кнопки в длинную ЭТО ДЛЯ НАСТРОЙКИ ЗАЛИПАНИЯ
 8002670:	4bbd      	ldr	r3, [pc, #756]	; (8002968 <KeyPress+0x338>)
 8002672:	7a5b      	ldrb	r3, [r3, #9]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d000      	beq.n	800267a <KeyPress+0x4a>
 8002678:	e0d9      	b.n	800282e <KeyPress+0x1fe>
	if(LongLongDoublePressKey_PB2_PB8)
 800267a:	4bbb      	ldr	r3, [pc, #748]	; (8002968 <KeyPress+0x338>)
 800267c:	7a9b      	ldrb	r3, [r3, #10]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d000      	beq.n	8002684 <KeyPress+0x54>
 8002682:	e120      	b.n	80028c6 <KeyPress+0x296>
}
 8002684:	b003      	add	sp, #12
 8002686:	bd30      	pop	{r4, r5, pc}
		CheckingKeyTimings();
 8002688:	f7ff ff08 	bl	800249c <CheckingKeyTimings>
 800268c:	e7e7      	b.n	800265e <KeyPress+0x2e>
			ADC_qqq = 3300 * ADC_Read() / 4096;
 800268e:	f7ff fc47 	bl	8001f20 <ADC_Read>
 8002692:	4bb9      	ldr	r3, [pc, #740]	; (8002978 <KeyPress+0x348>)
 8002694:	4358      	muls	r0, r3
 8002696:	17c3      	asrs	r3, r0, #31
 8002698:	051b      	lsls	r3, r3, #20
 800269a:	0d1b      	lsrs	r3, r3, #20
 800269c:	181b      	adds	r3, r3, r0
 800269e:	131b      	asrs	r3, r3, #12
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	4ab1      	ldr	r2, [pc, #708]	; (8002968 <KeyPress+0x338>)
 80026a4:	81d3      	strh	r3, [r2, #14]
			usRegAnalog[0] = ADC_qqq;
 80026a6:	49b5      	ldr	r1, [pc, #724]	; (800297c <KeyPress+0x34c>)
 80026a8:	800b      	strh	r3, [r1, #0]
			FlagMogan=0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	7413      	strb	r3, [r2, #16]
 80026ae:	e7c9      	b.n	8002644 <KeyPress+0x14>
	  TimerCounterTIM15=0;
 80026b0:	4bad      	ldr	r3, [pc, #692]	; (8002968 <KeyPress+0x338>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	731a      	strb	r2, [r3, #12]
	  indicator_sgd4(SPI1, 0x00, "PRG", 0b010);//Процесс индикации режима настройки
 80026b6:	2302      	movs	r3, #2
 80026b8:	4ab1      	ldr	r2, [pc, #708]	; (8002980 <KeyPress+0x350>)
 80026ba:	2100      	movs	r1, #0
 80026bc:	48ad      	ldr	r0, [pc, #692]	; (8002974 <KeyPress+0x344>)
 80026be:	f7ff fc81 	bl	8001fc4 <indicator_sgd4>
	  HAL_Delay(1000);
 80026c2:	20fa      	movs	r0, #250	; 0xfa
 80026c4:	0080      	lsls	r0, r0, #2
 80026c6:	f7fd fdd9 	bl	800027c <HAL_Delay>
	  TIM15->CR1 |= TIM_CR1_CEN;
 80026ca:	4aae      	ldr	r2, [pc, #696]	; (8002984 <KeyPress+0x354>)
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	430b      	orrs	r3, r1
 80026d2:	6013      	str	r3, [r2, #0]
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 80026d4:	e011      	b.n	80026fa <KeyPress+0xca>
			indicator_sgd4(SPI1, 0x00, StringIndication, 0b000);
 80026d6:	2300      	movs	r3, #0
 80026d8:	4aa4      	ldr	r2, [pc, #656]	; (800296c <KeyPress+0x33c>)
 80026da:	2100      	movs	r1, #0
 80026dc:	48a5      	ldr	r0, [pc, #660]	; (8002974 <KeyPress+0x344>)
 80026de:	f7ff fc71 	bl	8001fc4 <indicator_sgd4>
 80026e2:	e01d      	b.n	8002720 <KeyPress+0xf0>
				GlobalAdres = 99;
 80026e4:	4ba0      	ldr	r3, [pc, #640]	; (8002968 <KeyPress+0x338>)
 80026e6:	2263      	movs	r2, #99	; 0x63
 80026e8:	745a      	strb	r2, [r3, #17]
			ShortPressKey_PB8=0;
 80026ea:	4b9f      	ldr	r3, [pc, #636]	; (8002968 <KeyPress+0x338>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	719a      	strb	r2, [r3, #6]
			TimerCounterTIM15=0;
 80026f0:	731a      	strb	r2, [r3, #12]
		if(ShortPressKey_PB2)//короткое нжатие
 80026f2:	4b9d      	ldr	r3, [pc, #628]	; (8002968 <KeyPress+0x338>)
 80026f4:	791b      	ldrb	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11e      	bne.n	8002738 <KeyPress+0x108>
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 80026fa:	4b9b      	ldr	r3, [pc, #620]	; (8002968 <KeyPress+0x338>)
 80026fc:	7b1b      	ldrb	r3, [r3, #12]
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d82a      	bhi.n	8002758 <KeyPress+0x128>
		sprintf(StringIndication, "%d", GlobalAdres);
 8002702:	4c99      	ldr	r4, [pc, #612]	; (8002968 <KeyPress+0x338>)
 8002704:	7c62      	ldrb	r2, [r4, #17]
 8002706:	499a      	ldr	r1, [pc, #616]	; (8002970 <KeyPress+0x340>)
 8002708:	4898      	ldr	r0, [pc, #608]	; (800296c <KeyPress+0x33c>)
 800270a:	f001 fc7b 	bl	8004004 <siprintf>
		if(FlagMogan == 0)
 800270e:	7c23      	ldrb	r3, [r4, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e0      	bne.n	80026d6 <KeyPress+0xa6>
			indicator_sgd4(SPI1, 0x00, StringIndication, 0b010);
 8002714:	3302      	adds	r3, #2
 8002716:	4a95      	ldr	r2, [pc, #596]	; (800296c <KeyPress+0x33c>)
 8002718:	2100      	movs	r1, #0
 800271a:	4896      	ldr	r0, [pc, #600]	; (8002974 <KeyPress+0x344>)
 800271c:	f7ff fc52 	bl	8001fc4 <indicator_sgd4>
		if(ShortPressKey_PB8)//короткое нжатие
 8002720:	4b91      	ldr	r3, [pc, #580]	; (8002968 <KeyPress+0x338>)
 8002722:	799b      	ldrb	r3, [r3, #6]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0e4      	beq.n	80026f2 <KeyPress+0xc2>
			if(GlobalAdres<99)
 8002728:	4b8f      	ldr	r3, [pc, #572]	; (8002968 <KeyPress+0x338>)
 800272a:	7c5b      	ldrb	r3, [r3, #17]
 800272c:	2b62      	cmp	r3, #98	; 0x62
 800272e:	d8d9      	bhi.n	80026e4 <KeyPress+0xb4>
				GlobalAdres++;
 8002730:	3301      	adds	r3, #1
 8002732:	4a8d      	ldr	r2, [pc, #564]	; (8002968 <KeyPress+0x338>)
 8002734:	7453      	strb	r3, [r2, #17]
 8002736:	e7d8      	b.n	80026ea <KeyPress+0xba>
			if(GlobalAdres>1)
 8002738:	4b8b      	ldr	r3, [pc, #556]	; (8002968 <KeyPress+0x338>)
 800273a:	7c5b      	ldrb	r3, [r3, #17]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d907      	bls.n	8002750 <KeyPress+0x120>
				GlobalAdres--;
 8002740:	3b01      	subs	r3, #1
 8002742:	4a89      	ldr	r2, [pc, #548]	; (8002968 <KeyPress+0x338>)
 8002744:	7453      	strb	r3, [r2, #17]
			ShortPressKey_PB2=0;
 8002746:	4b88      	ldr	r3, [pc, #544]	; (8002968 <KeyPress+0x338>)
 8002748:	2200      	movs	r2, #0
 800274a:	711a      	strb	r2, [r3, #4]
			TimerCounterTIM15=0;
 800274c:	731a      	strb	r2, [r3, #12]
 800274e:	e7d4      	b.n	80026fa <KeyPress+0xca>
				GlobalAdres = 1;
 8002750:	4b85      	ldr	r3, [pc, #532]	; (8002968 <KeyPress+0x338>)
 8002752:	2201      	movs	r2, #1
 8002754:	745a      	strb	r2, [r3, #17]
 8002756:	e7f6      	b.n	8002746 <KeyPress+0x116>
	  eMBInit(MB_RTU, (UCHAR)GlobalAdres, 0, BaudRateModBusRTU, MB_PAR_NONE); //начальные настройки modBus
 8002758:	2396      	movs	r3, #150	; 0x96
 800275a:	4c83      	ldr	r4, [pc, #524]	; (8002968 <KeyPress+0x338>)
 800275c:	7c61      	ldrb	r1, [r4, #17]
 800275e:	2500      	movs	r5, #0
 8002760:	9500      	str	r5, [sp, #0]
 8002762:	019b      	lsls	r3, r3, #6
 8002764:	2200      	movs	r2, #0
 8002766:	2000      	movs	r0, #0
 8002768:	f000 fd5c 	bl	8003224 <eMBInit>
	  eMBEnable();
 800276c:	f000 fda8 	bl	80032c0 <eMBEnable>
	  TIM15->CR1 &= ~TIM_CR1_CEN;//выключаем таймер мигания
 8002770:	4a84      	ldr	r2, [pc, #528]	; (8002984 <KeyPress+0x354>)
 8002772:	6813      	ldr	r3, [r2, #0]
 8002774:	2101      	movs	r1, #1
 8002776:	438b      	bics	r3, r1
 8002778:	6013      	str	r3, [r2, #0]
	  LongPressKey_PB8=0;
 800277a:	71e5      	strb	r5, [r4, #7]
	  TimerCounterTIM14=0;
 800277c:	8065      	strh	r5, [r4, #2]
 800277e:	e772      	b.n	8002666 <KeyPress+0x36>
	  TimerCounterTIM15=0;
 8002780:	4b79      	ldr	r3, [pc, #484]	; (8002968 <KeyPress+0x338>)
 8002782:	2200      	movs	r2, #0
 8002784:	731a      	strb	r2, [r3, #12]
	  indicator_sgd4(SPI1, 0x00, "PRG", 0b010);//Процесс индикации режима настройки
 8002786:	2302      	movs	r3, #2
 8002788:	4a7d      	ldr	r2, [pc, #500]	; (8002980 <KeyPress+0x350>)
 800278a:	2100      	movs	r1, #0
 800278c:	4879      	ldr	r0, [pc, #484]	; (8002974 <KeyPress+0x344>)
 800278e:	f7ff fc19 	bl	8001fc4 <indicator_sgd4>
	  HAL_Delay(1000);
 8002792:	20fa      	movs	r0, #250	; 0xfa
 8002794:	0080      	lsls	r0, r0, #2
 8002796:	f7fd fd71 	bl	800027c <HAL_Delay>
	  TIM15->CR1 |= TIM_CR1_CEN;
 800279a:	4a7a      	ldr	r2, [pc, #488]	; (8002984 <KeyPress+0x354>)
 800279c:	6813      	ldr	r3, [r2, #0]
 800279e:	2101      	movs	r1, #1
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6013      	str	r3, [r2, #0]
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 80027a4:	e010      	b.n	80027c8 <KeyPress+0x198>
			  IndicationSensitivity(Sensitivity, 0b000);
 80027a6:	4b70      	ldr	r3, [pc, #448]	; (8002968 <KeyPress+0x338>)
 80027a8:	7c98      	ldrb	r0, [r3, #18]
 80027aa:	2100      	movs	r1, #0
 80027ac:	f7ff ff1c 	bl	80025e8 <IndicationSensitivity>
 80027b0:	e017      	b.n	80027e2 <KeyPress+0x1b2>
				Sensitivity = 3;
 80027b2:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <KeyPress+0x338>)
 80027b4:	2203      	movs	r2, #3
 80027b6:	749a      	strb	r2, [r3, #18]
			TimerCounterTIM15=0;
 80027b8:	4b6b      	ldr	r3, [pc, #428]	; (8002968 <KeyPress+0x338>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	731a      	strb	r2, [r3, #12]
			ShortPressKey_PB8=0;
 80027be:	719a      	strb	r2, [r3, #6]
		  if(ShortPressKey_PB2)//короткое нжатие
 80027c0:	4b69      	ldr	r3, [pc, #420]	; (8002968 <KeyPress+0x338>)
 80027c2:	791b      	ldrb	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d118      	bne.n	80027fa <KeyPress+0x1ca>
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 80027c8:	4b67      	ldr	r3, [pc, #412]	; (8002968 <KeyPress+0x338>)
 80027ca:	7b1b      	ldrb	r3, [r3, #12]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d824      	bhi.n	800281a <KeyPress+0x1ea>
		  if(FlagMogan == 0)
 80027d0:	4b65      	ldr	r3, [pc, #404]	; (8002968 <KeyPress+0x338>)
 80027d2:	7c1b      	ldrb	r3, [r3, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e6      	bne.n	80027a6 <KeyPress+0x176>
			  IndicationSensitivity(Sensitivity, 0b010);
 80027d8:	4b63      	ldr	r3, [pc, #396]	; (8002968 <KeyPress+0x338>)
 80027da:	7c98      	ldrb	r0, [r3, #18]
 80027dc:	2102      	movs	r1, #2
 80027de:	f7ff ff03 	bl	80025e8 <IndicationSensitivity>
		  if(ShortPressKey_PB8)//короткое нжатие
 80027e2:	4b61      	ldr	r3, [pc, #388]	; (8002968 <KeyPress+0x338>)
 80027e4:	799b      	ldrb	r3, [r3, #6]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ea      	beq.n	80027c0 <KeyPress+0x190>
			if(Sensitivity<3)
 80027ea:	4b5f      	ldr	r3, [pc, #380]	; (8002968 <KeyPress+0x338>)
 80027ec:	7c9b      	ldrb	r3, [r3, #18]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d8df      	bhi.n	80027b2 <KeyPress+0x182>
				Sensitivity++;
 80027f2:	3301      	adds	r3, #1
 80027f4:	4a5c      	ldr	r2, [pc, #368]	; (8002968 <KeyPress+0x338>)
 80027f6:	7493      	strb	r3, [r2, #18]
 80027f8:	e7de      	b.n	80027b8 <KeyPress+0x188>
			if(Sensitivity>0)
 80027fa:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <KeyPress+0x338>)
 80027fc:	7c9b      	ldrb	r3, [r3, #18]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <KeyPress+0x1e2>
				Sensitivity--;
 8002802:	3b01      	subs	r3, #1
 8002804:	4a58      	ldr	r2, [pc, #352]	; (8002968 <KeyPress+0x338>)
 8002806:	7493      	strb	r3, [r2, #18]
			TimerCounterTIM15=0;
 8002808:	4b57      	ldr	r3, [pc, #348]	; (8002968 <KeyPress+0x338>)
 800280a:	2200      	movs	r2, #0
 800280c:	731a      	strb	r2, [r3, #12]
			ShortPressKey_PB2=0;
 800280e:	711a      	strb	r2, [r3, #4]
 8002810:	e7da      	b.n	80027c8 <KeyPress+0x198>
				Sensitivity = 0;
 8002812:	4b55      	ldr	r3, [pc, #340]	; (8002968 <KeyPress+0x338>)
 8002814:	2200      	movs	r2, #0
 8002816:	749a      	strb	r2, [r3, #18]
 8002818:	e7f6      	b.n	8002808 <KeyPress+0x1d8>
	  TIM15->CR1 &= ~TIM_CR1_CEN;//выключаем таймер мигания
 800281a:	4a5a      	ldr	r2, [pc, #360]	; (8002984 <KeyPress+0x354>)
 800281c:	6813      	ldr	r3, [r2, #0]
 800281e:	2101      	movs	r1, #1
 8002820:	438b      	bics	r3, r1
 8002822:	6013      	str	r3, [r2, #0]
	  LongPressKey_PB2=0;
 8002824:	4b50      	ldr	r3, [pc, #320]	; (8002968 <KeyPress+0x338>)
 8002826:	2200      	movs	r2, #0
 8002828:	721a      	strb	r2, [r3, #8]
	  TimerCounterTIM14=0;
 800282a:	805a      	strh	r2, [r3, #2]
 800282c:	e720      	b.n	8002670 <KeyPress+0x40>
	  TimerCounterTIM15=0;
 800282e:	4b4e      	ldr	r3, [pc, #312]	; (8002968 <KeyPress+0x338>)
 8002830:	2200      	movs	r2, #0
 8002832:	731a      	strb	r2, [r3, #12]
	  indicator_sgd4(SPI1, 0x00, "PRG", 0b010);//Процесс индикации режима настройки
 8002834:	2302      	movs	r3, #2
 8002836:	4a52      	ldr	r2, [pc, #328]	; (8002980 <KeyPress+0x350>)
 8002838:	2100      	movs	r1, #0
 800283a:	484e      	ldr	r0, [pc, #312]	; (8002974 <KeyPress+0x344>)
 800283c:	f7ff fbc2 	bl	8001fc4 <indicator_sgd4>
	  HAL_Delay(1000);
 8002840:	20fa      	movs	r0, #250	; 0xfa
 8002842:	0080      	lsls	r0, r0, #2
 8002844:	f7fd fd1a 	bl	800027c <HAL_Delay>
	  TIM15->CR1 |= TIM_CR1_CEN;
 8002848:	4a4e      	ldr	r2, [pc, #312]	; (8002984 <KeyPress+0x354>)
 800284a:	6813      	ldr	r3, [r2, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	430b      	orrs	r3, r1
 8002850:	6013      	str	r3, [r2, #0]
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8002852:	e00a      	b.n	800286a <KeyPress+0x23a>
			  indicator_sgd4(SPI1, 0x00, StringIndication, 0b000);//Индикация текущей настройки релеЁ
 8002854:	2300      	movs	r3, #0
 8002856:	4a45      	ldr	r2, [pc, #276]	; (800296c <KeyPress+0x33c>)
 8002858:	2100      	movs	r1, #0
 800285a:	4846      	ldr	r0, [pc, #280]	; (8002974 <KeyPress+0x344>)
 800285c:	f7ff fbb2 	bl	8001fc4 <indicator_sgd4>
 8002860:	e016      	b.n	8002890 <KeyPress+0x260>
		  if(ShortPressKey_PB2)//короткое нжатие
 8002862:	4b41      	ldr	r3, [pc, #260]	; (8002968 <KeyPress+0x338>)
 8002864:	791b      	ldrb	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d11d      	bne.n	80028a6 <KeyPress+0x276>
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <KeyPress+0x338>)
 800286c:	7b1b      	ldrb	r3, [r3, #12]
 800286e:	2b06      	cmp	r3, #6
 8002870:	d81f      	bhi.n	80028b2 <KeyPress+0x282>
		  sprintf(StringIndication, "%d",  ModeRele);
 8002872:	4c3d      	ldr	r4, [pc, #244]	; (8002968 <KeyPress+0x338>)
 8002874:	7ce2      	ldrb	r2, [r4, #19]
 8002876:	493e      	ldr	r1, [pc, #248]	; (8002970 <KeyPress+0x340>)
 8002878:	483c      	ldr	r0, [pc, #240]	; (800296c <KeyPress+0x33c>)
 800287a:	f001 fbc3 	bl	8004004 <siprintf>
		  if(FlagMogan == 0)
 800287e:	7c23      	ldrb	r3, [r4, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e7      	bne.n	8002854 <KeyPress+0x224>
			  indicator_sgd4(SPI1, 0x00, StringIndication, 0b010);//Индикация текущей настройки релеЁ
 8002884:	3302      	adds	r3, #2
 8002886:	4a39      	ldr	r2, [pc, #228]	; (800296c <KeyPress+0x33c>)
 8002888:	2100      	movs	r1, #0
 800288a:	483a      	ldr	r0, [pc, #232]	; (8002974 <KeyPress+0x344>)
 800288c:	f7ff fb9a 	bl	8001fc4 <indicator_sgd4>
		  if(ShortPressKey_PB8)//короткое нжатие
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <KeyPress+0x338>)
 8002892:	799b      	ldrb	r3, [r3, #6]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0e4      	beq.n	8002862 <KeyPress+0x232>
			  ModeRele = 111;
 8002898:	4b33      	ldr	r3, [pc, #204]	; (8002968 <KeyPress+0x338>)
 800289a:	226f      	movs	r2, #111	; 0x6f
 800289c:	74da      	strb	r2, [r3, #19]
			  ShortPressKey_PB8=0;
 800289e:	2200      	movs	r2, #0
 80028a0:	719a      	strb	r2, [r3, #6]
			  TimerCounterTIM15=0;
 80028a2:	731a      	strb	r2, [r3, #12]
 80028a4:	e7dd      	b.n	8002862 <KeyPress+0x232>
			  ModeRele = 000;
 80028a6:	4b30      	ldr	r3, [pc, #192]	; (8002968 <KeyPress+0x338>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	74da      	strb	r2, [r3, #19]
			  ShortPressKey_PB2=0;
 80028ac:	711a      	strb	r2, [r3, #4]
			  TimerCounterTIM15=0;
 80028ae:	731a      	strb	r2, [r3, #12]
 80028b0:	e7db      	b.n	800286a <KeyPress+0x23a>
	  TIM15->CR1 &= ~TIM_CR1_CEN;//выключаем таймер мигания
 80028b2:	4a34      	ldr	r2, [pc, #208]	; (8002984 <KeyPress+0x354>)
 80028b4:	6813      	ldr	r3, [r2, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	438b      	bics	r3, r1
 80028ba:	6013      	str	r3, [r2, #0]
	  LongDoublePressKey_PB2_PB8=0;
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <KeyPress+0x338>)
 80028be:	2200      	movs	r2, #0
 80028c0:	725a      	strb	r2, [r3, #9]
	  TimerCounterTIM14=0;
 80028c2:	805a      	strh	r2, [r3, #2]
 80028c4:	e6d9      	b.n	800267a <KeyPress+0x4a>
	  TimerCounterTIM15=0;
 80028c6:	4b28      	ldr	r3, [pc, #160]	; (8002968 <KeyPress+0x338>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	731a      	strb	r2, [r3, #12]
	  indicator_sgd4(SPI1, 0x00, "RE3", 0b010);//Процесс индикации режима настройки
 80028cc:	2302      	movs	r3, #2
 80028ce:	4a2e      	ldr	r2, [pc, #184]	; (8002988 <KeyPress+0x358>)
 80028d0:	2100      	movs	r1, #0
 80028d2:	4828      	ldr	r0, [pc, #160]	; (8002974 <KeyPress+0x344>)
 80028d4:	f7ff fb76 	bl	8001fc4 <indicator_sgd4>
	  HAL_Delay(1000);
 80028d8:	20fa      	movs	r0, #250	; 0xfa
 80028da:	0080      	lsls	r0, r0, #2
 80028dc:	f7fd fcce 	bl	800027c <HAL_Delay>
	  TIM15->CR1 |= TIM_CR1_CEN;
 80028e0:	4a28      	ldr	r2, [pc, #160]	; (8002984 <KeyPress+0x354>)
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	430b      	orrs	r3, r1
 80028e8:	6013      	str	r3, [r2, #0]
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 80028ea:	e00a      	b.n	8002902 <KeyPress+0x2d2>
			  indicator_sgd4(SPI1, 0x00, StringIndication, 0b000);//Индикация текущей настройки релеЁ
 80028ec:	2300      	movs	r3, #0
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <KeyPress+0x33c>)
 80028f0:	2100      	movs	r1, #0
 80028f2:	4820      	ldr	r0, [pc, #128]	; (8002974 <KeyPress+0x344>)
 80028f4:	f7ff fb66 	bl	8001fc4 <indicator_sgd4>
 80028f8:	e016      	b.n	8002928 <KeyPress+0x2f8>
		  if(ShortPressKey_PB2)//короткое нжатие
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <KeyPress+0x338>)
 80028fc:	791b      	ldrb	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d124      	bne.n	800294c <KeyPress+0x31c>
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <KeyPress+0x338>)
 8002904:	7b1b      	ldrb	r3, [r3, #12]
 8002906:	2b06      	cmp	r3, #6
 8002908:	d840      	bhi.n	800298c <KeyPress+0x35c>
		  sprintf(StringIndication, "%d",  Resistor120);
 800290a:	4c17      	ldr	r4, [pc, #92]	; (8002968 <KeyPress+0x338>)
 800290c:	7d22      	ldrb	r2, [r4, #20]
 800290e:	4918      	ldr	r1, [pc, #96]	; (8002970 <KeyPress+0x340>)
 8002910:	4816      	ldr	r0, [pc, #88]	; (800296c <KeyPress+0x33c>)
 8002912:	f001 fb77 	bl	8004004 <siprintf>
		  if(FlagMogan == 0)
 8002916:	7c23      	ldrb	r3, [r4, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e7      	bne.n	80028ec <KeyPress+0x2bc>
			  indicator_sgd4(SPI1, 0x00, StringIndication, 0b010);//Индикация текущей настройки релеЁ
 800291c:	3302      	adds	r3, #2
 800291e:	4a13      	ldr	r2, [pc, #76]	; (800296c <KeyPress+0x33c>)
 8002920:	2100      	movs	r1, #0
 8002922:	4814      	ldr	r0, [pc, #80]	; (8002974 <KeyPress+0x344>)
 8002924:	f7ff fb4e 	bl	8001fc4 <indicator_sgd4>
		  if(ShortPressKey_PB8)//короткое нжатие
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <KeyPress+0x338>)
 800292a:	799b      	ldrb	r3, [r3, #6]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0e4      	beq.n	80028fa <KeyPress+0x2ca>
			  Resistor120 = 120;
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <KeyPress+0x338>)
 8002932:	2278      	movs	r2, #120	; 0x78
 8002934:	751a      	strb	r2, [r3, #20]
			  GPIOA->BSRR |= GPIO_BSRR_BS_12;
 8002936:	2190      	movs	r1, #144	; 0x90
 8002938:	05c9      	lsls	r1, r1, #23
 800293a:	6988      	ldr	r0, [r1, #24]
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	0152      	lsls	r2, r2, #5
 8002940:	4302      	orrs	r2, r0
 8002942:	618a      	str	r2, [r1, #24]
			  ShortPressKey_PB8=0;
 8002944:	2200      	movs	r2, #0
 8002946:	719a      	strb	r2, [r3, #6]
			  TimerCounterTIM15=0;
 8002948:	731a      	strb	r2, [r3, #12]
 800294a:	e7d6      	b.n	80028fa <KeyPress+0x2ca>
			  Resistor120 = 0;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <KeyPress+0x338>)
 800294e:	2200      	movs	r2, #0
 8002950:	751a      	strb	r2, [r3, #20]
			  GPIOA->BSRR |= GPIO_BSRR_BR_12;
 8002952:	2090      	movs	r0, #144	; 0x90
 8002954:	05c0      	lsls	r0, r0, #23
 8002956:	6984      	ldr	r4, [r0, #24]
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	0549      	lsls	r1, r1, #21
 800295c:	4321      	orrs	r1, r4
 800295e:	6181      	str	r1, [r0, #24]
			  ShortPressKey_PB2=0;
 8002960:	711a      	strb	r2, [r3, #4]
			  TimerCounterTIM15=0;
 8002962:	731a      	strb	r2, [r3, #12]
 8002964:	e7cd      	b.n	8002902 <KeyPress+0x2d2>
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	200001dc 	.word	0x200001dc
 800296c:	2000000c 	.word	0x2000000c
 8002970:	08005210 	.word	0x08005210
 8002974:	40013000 	.word	0x40013000
 8002978:	00000ce4 	.word	0x00000ce4
 800297c:	20000010 	.word	0x20000010
 8002980:	08005214 	.word	0x08005214
 8002984:	40014000 	.word	0x40014000
 8002988:	08005218 	.word	0x08005218
	  TIM15->CR1 &= ~TIM_CR1_CEN;//выключаем таймер мигания
 800298c:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <KeyPress+0x370>)
 800298e:	6813      	ldr	r3, [r2, #0]
 8002990:	2101      	movs	r1, #1
 8002992:	438b      	bics	r3, r1
 8002994:	6013      	str	r3, [r2, #0]
	  LongLongDoublePressKey_PB2_PB8=0;
 8002996:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <KeyPress+0x374>)
 8002998:	2200      	movs	r2, #0
 800299a:	729a      	strb	r2, [r3, #10]
	  TimerCounterTIM14=0;
 800299c:	805a      	strh	r2, [r3, #2]
}
 800299e:	e671      	b.n	8002684 <KeyPress+0x54>
 80029a0:	40014000 	.word	0x40014000
 80029a4:	200001dc 	.word	0x200001dc

080029a8 <_Error_Handler>:

void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80029a8:	e7fe      	b.n	80029a8 <_Error_Handler>
	...

080029ac <MX_USART1_UART_Init>:
{
 80029ac:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80029ae:	480d      	ldr	r0, [pc, #52]	; (80029e4 <MX_USART1_UART_Init+0x38>)
 80029b0:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <MX_USART1_UART_Init+0x3c>)
 80029b2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80029b4:	2396      	movs	r3, #150	; 0x96
 80029b6:	019b      	lsls	r3, r3, #6
 80029b8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ba:	2300      	movs	r3, #0
 80029bc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029be:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029c0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029c2:	220c      	movs	r2, #12
 80029c4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ca:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029cc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ce:	f7ff f9a9 	bl	8001d24 <HAL_UART_Init>
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d100      	bne.n	80029d8 <MX_USART1_UART_Init+0x2c>
}
 80029d6:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 80029d8:	21f3      	movs	r1, #243	; 0xf3
 80029da:	0049      	lsls	r1, r1, #1
 80029dc:	4803      	ldr	r0, [pc, #12]	; (80029ec <MX_USART1_UART_Init+0x40>)
 80029de:	f7ff ffe3 	bl	80029a8 <_Error_Handler>
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	20000268 	.word	0x20000268
 80029e8:	40013800 	.word	0x40013800
 80029ec:	0800521c 	.word	0x0800521c

080029f0 <MX_USART2_UART_Init>:
{
 80029f0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80029f2:	480d      	ldr	r0, [pc, #52]	; (8002a28 <MX_USART2_UART_Init+0x38>)
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <MX_USART2_UART_Init+0x3c>)
 80029f6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = BaudRateModBusRTU;
 80029f8:	2396      	movs	r3, #150	; 0x96
 80029fa:	019b      	lsls	r3, r3, #6
 80029fc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	2300      	movs	r3, #0
 8002a00:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a02:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a04:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a06:	220c      	movs	r2, #12
 8002a08:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a0c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a0e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a10:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a12:	f7ff f987 	bl	8001d24 <HAL_UART_Init>
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d100      	bne.n	8002a1c <MX_USART2_UART_Init+0x2c>
}
 8002a1a:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002a1c:	21fc      	movs	r1, #252	; 0xfc
 8002a1e:	31ff      	adds	r1, #255	; 0xff
 8002a20:	4803      	ldr	r0, [pc, #12]	; (8002a30 <MX_USART2_UART_Init+0x40>)
 8002a22:	f7ff ffc1 	bl	80029a8 <_Error_Handler>
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	20000354 	.word	0x20000354
 8002a2c:	40004400 	.word	0x40004400
 8002a30:	0800521c 	.word	0x0800521c

08002a34 <MX_TIM16_Init>:
{
 8002a34:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8002a36:	480b      	ldr	r0, [pc, #44]	; (8002a64 <MX_TIM16_Init+0x30>)
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <MX_TIM16_Init+0x34>)
 8002a3a:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 47;
 8002a3c:	232f      	movs	r3, #47	; 0x2f
 8002a3e:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a40:	2300      	movs	r3, #0
 8002a42:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 50;
 8002a44:	2232      	movs	r2, #50	; 0x32
 8002a46:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a48:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8002a4a:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a4e:	f7fe fb4f 	bl	80010f0 <HAL_TIM_Base_Init>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d100      	bne.n	8002a58 <MX_TIM16_Init+0x24>
}
 8002a56:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002a58:	21d2      	movs	r1, #210	; 0xd2
 8002a5a:	31ff      	adds	r1, #255	; 0xff
 8002a5c:	4803      	ldr	r0, [pc, #12]	; (8002a6c <MX_TIM16_Init+0x38>)
 8002a5e:	f7ff ffa3 	bl	80029a8 <_Error_Handler>
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	200003dc 	.word	0x200003dc
 8002a68:	40014400 	.word	0x40014400
 8002a6c:	0800521c 	.word	0x0800521c

08002a70 <SystemClock_Config>:
{
 8002a70:	b500      	push	{lr}
 8002a72:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a74:	2302      	movs	r3, #2
 8002a76:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002a7c:	320f      	adds	r2, #15
 8002a7e:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a80:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a82:	2300      	movs	r3, #0
 8002a84:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002a86:	22a0      	movs	r2, #160	; 0xa0
 8002a88:	0392      	lsls	r2, r2, #14
 8002a8a:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002a8c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a8e:	a808      	add	r0, sp, #32
 8002a90:	f7fd fd80 	bl	8000594 <HAL_RCC_OscConfig>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d128      	bne.n	8002aea <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a98:	2307      	movs	r3, #7
 8002a9a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a9c:	3b05      	subs	r3, #5
 8002a9e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aa4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	a804      	add	r0, sp, #16
 8002aaa:	f7fd ffe9 	bl	8000a80 <HAL_RCC_ClockConfig>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d120      	bne.n	8002af4 <SystemClock_Config+0x84>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aba:	4668      	mov	r0, sp
 8002abc:	f7fe f8ac 	bl	8000c18 <HAL_RCCEx_PeriphCLKConfig>
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	d11c      	bne.n	8002afe <SystemClock_Config+0x8e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ac4:	f7fe f876 	bl	8000bb4 <HAL_RCC_GetHCLKFreq>
 8002ac8:	21fa      	movs	r1, #250	; 0xfa
 8002aca:	0089      	lsls	r1, r1, #2
 8002acc:	f7fd fb26 	bl	800011c <__udivsi3>
 8002ad0:	f7fd fc22 	bl	8000318 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ad4:	2004      	movs	r0, #4
 8002ad6:	f7fd fc3b 	bl	8000350 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ada:	2001      	movs	r0, #1
 8002adc:	2200      	movs	r2, #0
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4240      	negs	r0, r0
 8002ae2:	f7fd fbdd 	bl	80002a0 <HAL_NVIC_SetPriority>
}
 8002ae6:	b015      	add	sp, #84	; 0x54
 8002ae8:	bd00      	pop	{pc}
    _Error_Handler(__FILE__, __LINE__);
 8002aea:	21bc      	movs	r1, #188	; 0xbc
 8002aec:	0049      	lsls	r1, r1, #1
 8002aee:	4806      	ldr	r0, [pc, #24]	; (8002b08 <SystemClock_Config+0x98>)
 8002af0:	f7ff ff5a 	bl	80029a8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002af4:	2186      	movs	r1, #134	; 0x86
 8002af6:	31ff      	adds	r1, #255	; 0xff
 8002af8:	4803      	ldr	r0, [pc, #12]	; (8002b08 <SystemClock_Config+0x98>)
 8002afa:	f7ff ff55 	bl	80029a8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002afe:	21c6      	movs	r1, #198	; 0xc6
 8002b00:	0049      	lsls	r1, r1, #1
 8002b02:	4801      	ldr	r0, [pc, #4]	; (8002b08 <SystemClock_Config+0x98>)
 8002b04:	f7ff ff50 	bl	80029a8 <_Error_Handler>
 8002b08:	0800521c 	.word	0x0800521c

08002b0c <main>:
{
 8002b0c:	b510      	push	{r4, lr}
  HAL_Init();
 8002b0e:	f7fd fb93 	bl	8000238 <HAL_Init>
  SystemClock_Config();
 8002b12:	f7ff ffad 	bl	8002a70 <SystemClock_Config>
  MX_GPIO_Init();
 8002b16:	f7ff fba1 	bl	800225c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002b1a:	f7ff fb35 	bl	8002188 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002b1e:	f7ff ff45 	bl	80029ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b22:	f7ff ff65 	bl	80029f0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8002b26:	f7ff ff85 	bl	8002a34 <MX_TIM16_Init>
  InitTIM14();
 8002b2a:	f7ff fa0d 	bl	8001f48 <InitTIM14>
  InitTIM15();
 8002b2e:	f7ff fa29 	bl	8001f84 <InitTIM15>
  ADC_Init();
 8002b32:	f7ff f9cb 	bl	8001ecc <ADC_Init>
  IWDG_Init();
 8002b36:	f7ff fc2d 	bl	8002394 <IWDG_Init>
  MT_PORT_SetTimerModule(&htim16);
 8002b3a:	4809      	ldr	r0, [pc, #36]	; (8002b60 <main+0x54>)
 8002b3c:	f000 fc5c 	bl	80033f8 <MT_PORT_SetTimerModule>
  MT_PORT_SetUartModule(&huart2);
 8002b40:	4808      	ldr	r0, [pc, #32]	; (8002b64 <main+0x58>)
 8002b42:	f000 fc5f 	bl	8003404 <MT_PORT_SetUartModule>
  TIM15->CR1 |= TIM_CR1_CEN;
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <main+0x5c>)
 8002b48:	6813      	ldr	r3, [r2, #0]
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6013      	str	r3, [r2, #0]
	  KeyPress(); //Обработка нажатий клавиш
 8002b50:	f7ff fd6e 	bl	8002630 <KeyPress>
	  eMBPoll();
 8002b54:	f000 fbc8 	bl	80032e8 <eMBPoll>
	  IWDG_Reset(); //Обновление сторожевого таймера
 8002b58:	f7ff fc36 	bl	80023c8 <IWDG_Reset>
  while (1)
 8002b5c:	e7f8      	b.n	8002b50 <main+0x44>
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	200003dc 	.word	0x200003dc
 8002b64:	20000354 	.word	0x20000354
 8002b68:	40014000 	.word	0x40014000

08002b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b6c:	b500      	push	{lr}
 8002b6e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b70:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_MspInit+0x50>)
 8002b72:	6991      	ldr	r1, [r2, #24]
 8002b74:	2301      	movs	r3, #1
 8002b76:	4319      	orrs	r1, r3
 8002b78:	6191      	str	r1, [r2, #24]
 8002b7a:	6992      	ldr	r2, [r2, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002b82:	2005      	movs	r0, #5
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	f7fd fb89 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002b8e:	2002      	movs	r0, #2
 8002b90:	2200      	movs	r2, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	4240      	negs	r0, r0
 8002b96:	f7fd fb83 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4240      	negs	r0, r0
 8002ba2:	f7fd fb7d 	bl	80002a0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2004      	movs	r0, #4
 8002bac:	f7fd fb78 	bl	80002a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002bb0:	2004      	movs	r0, #4
 8002bb2:	f7fd fba5 	bl	8000300 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb6:	b003      	add	sp, #12
 8002bb8:	bd00      	pop	{pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_TIM_Base_MspInit>:
//  }
//
//}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bc0:	b500      	push	{lr}
 8002bc2:	b083      	sub	sp, #12

  if(htim_base->Instance==TIM16)
 8002bc4:	6802      	ldr	r2, [r0, #0]
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <HAL_TIM_Base_MspInit+0x38>)
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002bcc:	b003      	add	sp, #12
 8002bce:	bd00      	pop	{pc}
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_TIM_Base_MspInit+0x3c>)
 8002bd2:	6991      	ldr	r1, [r2, #24]
 8002bd4:	2080      	movs	r0, #128	; 0x80
 8002bd6:	0280      	lsls	r0, r0, #10
 8002bd8:	4301      	orrs	r1, r0
 8002bda:	6191      	str	r1, [r2, #24]
 8002bdc:	6993      	ldr	r3, [r2, #24]
 8002bde:	4003      	ands	r3, r0
 8002be0:	9301      	str	r3, [sp, #4]
 8002be2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	2015      	movs	r0, #21
 8002bea:	f7fd fb59 	bl	80002a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002bee:	2015      	movs	r0, #21
 8002bf0:	f7fd fb86 	bl	8000300 <HAL_NVIC_EnableIRQ>
}
 8002bf4:	e7ea      	b.n	8002bcc <HAL_TIM_Base_MspInit+0xc>
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	40014400 	.word	0x40014400
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c00:	b500      	push	{lr}
 8002c02:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002c04:	6803      	ldr	r3, [r0, #0]
 8002c06:	4a25      	ldr	r2, [pc, #148]	; (8002c9c <HAL_UART_MspInit+0x9c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_UART_MspInit+0x16>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002c0c:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <HAL_UART_MspInit+0xa0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d022      	beq.n	8002c58 <HAL_UART_MspInit+0x58>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c12:	b009      	add	sp, #36	; 0x24
 8002c14:	bd00      	pop	{pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c16:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <HAL_UART_MspInit+0xa4>)
 8002c18:	6991      	ldr	r1, [r2, #24]
 8002c1a:	2080      	movs	r0, #128	; 0x80
 8002c1c:	01c0      	lsls	r0, r0, #7
 8002c1e:	4301      	orrs	r1, r0
 8002c20:	6191      	str	r1, [r2, #24]
 8002c22:	6993      	ldr	r3, [r2, #24]
 8002c24:	4003      	ands	r3, r0
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c2a:	23c0      	movs	r3, #192	; 0xc0
 8002c2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	3bbe      	subs	r3, #190	; 0xbe
 8002c30:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c32:	3b01      	subs	r3, #1
 8002c34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c36:	3302      	adds	r3, #2
 8002c38:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3e:	a903      	add	r1, sp, #12
 8002c40:	4819      	ldr	r0, [pc, #100]	; (8002ca8 <HAL_UART_MspInit+0xa8>)
 8002c42:	f7fd fbe1 	bl	8000408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	201b      	movs	r0, #27
 8002c4c:	f7fd fb28 	bl	80002a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c50:	201b      	movs	r0, #27
 8002c52:	f7fd fb55 	bl	8000300 <HAL_NVIC_EnableIRQ>
 8002c56:	e7dc      	b.n	8002c12 <HAL_UART_MspInit+0x12>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c58:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <HAL_UART_MspInit+0xa4>)
 8002c5a:	69d1      	ldr	r1, [r2, #28]
 8002c5c:	2080      	movs	r0, #128	; 0x80
 8002c5e:	0280      	lsls	r0, r0, #10
 8002c60:	4301      	orrs	r1, r0
 8002c62:	61d1      	str	r1, [r2, #28]
 8002c64:	69d3      	ldr	r3, [r2, #28]
 8002c66:	4003      	ands	r3, r0
 8002c68:	9302      	str	r3, [sp, #8]
 8002c6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	3b0a      	subs	r3, #10
 8002c72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c74:	3b01      	subs	r3, #1
 8002c76:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c78:	2203      	movs	r2, #3
 8002c7a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002c7c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	2090      	movs	r0, #144	; 0x90
 8002c80:	a903      	add	r1, sp, #12
 8002c82:	05c0      	lsls	r0, r0, #23
 8002c84:	f7fd fbc0 	bl	8000408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	201c      	movs	r0, #28
 8002c8e:	f7fd fb07 	bl	80002a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c92:	201c      	movs	r0, #28
 8002c94:	f7fd fb34 	bl	8000300 <HAL_NVIC_EnableIRQ>
}
 8002c98:	e7bb      	b.n	8002c12 <HAL_UART_MspInit+0x12>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	40004400 	.word	0x40004400
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	48000400 	.word	0x48000400

08002cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cac:	b500      	push	{lr}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2011      	movs	r0, #17
 8002cb6:	f7fd faf3 	bl	80002a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 8002cba:	2011      	movs	r0, #17
 8002cbc:	f7fd fb20 	bl	8000300 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002cc0:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_InitTick+0x64>)
 8002cc2:	69d1      	ldr	r1, [r2, #28]
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	4319      	orrs	r1, r3
 8002cc8:	61d1      	str	r1, [r2, #28]
 8002cca:	69d2      	ldr	r2, [r2, #28]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cd2:	a901      	add	r1, sp, #4
 8002cd4:	a802      	add	r0, sp, #8
 8002cd6:	f7fd ff83 	bl	8000be0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cda:	f7fd ff71 	bl	8000bc0 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002cde:	490d      	ldr	r1, [pc, #52]	; (8002d14 <HAL_InitTick+0x68>)
 8002ce0:	f7fd fa1c 	bl	800011c <__udivsi3>
 8002ce4:	1e43      	subs	r3, r0, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ce6:	480c      	ldr	r0, [pc, #48]	; (8002d18 <HAL_InitTick+0x6c>)
 8002ce8:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_InitTick+0x70>)
 8002cea:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002cec:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <HAL_InitTick+0x74>)
 8002cee:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002cf0:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf6:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002cf8:	f7fe f9fa 	bl	80010f0 <HAL_TIM_Base_Init>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_InitTick+0x5a>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002d00:	2001      	movs	r0, #1
}
 8002d02:	b007      	add	sp, #28
 8002d04:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d06:	4804      	ldr	r0, [pc, #16]	; (8002d18 <HAL_InitTick+0x6c>)
 8002d08:	f7fe f8b2 	bl	8000e70 <HAL_TIM_Base_Start_IT>
 8002d0c:	e7f9      	b.n	8002d02 <HAL_InitTick+0x56>
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	40021000 	.word	0x40021000
 8002d14:	000f4240 	.word	0x000f4240
 8002d18:	20000424 	.word	0x20000424
 8002d1c:	40001000 	.word	0x40001000
 8002d20:	000003e7 	.word	0x000003e7

08002d24 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d24:	4770      	bx	lr

08002d26 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d26:	e7fe      	b.n	8002d26 <HardFault_Handler>

08002d28 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d28:	4770      	bx	lr

08002d2a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2a:	4770      	bx	lr

08002d2c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 8002d2e:	f7fd fb20 	bl	8000372 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d32:	bd10      	pop	{r4, pc}

08002d34 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002d34:	4770      	bx	lr
	...

08002d38 <TIM6_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt.
*/
void TIM6_IRQHandler(void)
{
 8002d38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d3a:	4802      	ldr	r0, [pc, #8]	; (8002d44 <TIM6_IRQHandler+0xc>)
 8002d3c:	f7fe f8ea 	bl	8000f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002d40:	bd10      	pop	{r4, pc}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	20000424 	.word	0x20000424

08002d48 <TIM14_IRQHandler>:

void TIM14_IRQHandler(void)
{
	if (READ_BIT(TIM14->SR, TIM_SR_UIF))
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <TIM14_IRQHandler+0x1c>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	07db      	lsls	r3, r3, #31
 8002d4e:	d504      	bpl.n	8002d5a <TIM14_IRQHandler+0x12>
	{
		CLEAR_BIT(TIM14->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <TIM14_IRQHandler+0x1c>)
 8002d52:	6913      	ldr	r3, [r2, #16]
 8002d54:	2101      	movs	r1, #1
 8002d56:	438b      	bics	r3, r1
 8002d58:	6113      	str	r3, [r2, #16]
	}
//	CallbackTIM14();
	TimerCounterTIM14++;
 8002d5a:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <TIM14_IRQHandler+0x20>)
 8002d5c:	8813      	ldrh	r3, [r2, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	8013      	strh	r3, [r2, #0]

}
 8002d62:	4770      	bx	lr
 8002d64:	40002000 	.word	0x40002000
 8002d68:	200001de 	.word	0x200001de

08002d6c <TIM16_IRQHandler>:

void TIM16_IRQHandler(void)
{
 8002d6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002d6e:	4802      	ldr	r0, [pc, #8]	; (8002d78 <TIM16_IRQHandler+0xc>)
 8002d70:	f7fe f8d0 	bl	8000f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	200003dc 	.word	0x200003dc

08002d7c <TIM17_IRQHandler>:

void TIM17_IRQHandler(void)
{
	if (READ_BIT(TIM17->SR, TIM_SR_UIF))
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <TIM17_IRQHandler+0x20>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	07db      	lsls	r3, r3, #31
 8002d82:	d504      	bpl.n	8002d8e <TIM17_IRQHandler+0x12>
	{
		CLEAR_BIT(TIM17->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 8002d84:	4a05      	ldr	r2, [pc, #20]	; (8002d9c <TIM17_IRQHandler+0x20>)
 8002d86:	6913      	ldr	r3, [r2, #16]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	438b      	bics	r3, r1
 8002d8c:	6113      	str	r3, [r2, #16]
	}
    // PB9 = 0
    GPIOB->ODR &= ~GPIO_ODR_9;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <TIM17_IRQHandler+0x24>)
 8002d90:	6953      	ldr	r3, [r2, #20]
 8002d92:	4904      	ldr	r1, [pc, #16]	; (8002da4 <TIM17_IRQHandler+0x28>)
 8002d94:	400b      	ands	r3, r1
 8002d96:	6153      	str	r3, [r2, #20]
}
 8002d98:	4770      	bx	lr
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	40014800 	.word	0x40014800
 8002da0:	48000400 	.word	0x48000400
 8002da4:	fffffdff 	.word	0xfffffdff

08002da8 <TIM15_IRQHandler>:

void TIM15_IRQHandler(void)
{
	if (READ_BIT(TIM15->SR, TIM_SR_UIF))
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <TIM15_IRQHandler+0x34>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	07db      	lsls	r3, r3, #31
 8002dae:	d504      	bpl.n	8002dba <TIM15_IRQHandler+0x12>
	{
		CLEAR_BIT(TIM15->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 8002db0:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <TIM15_IRQHandler+0x34>)
 8002db2:	6913      	ldr	r3, [r2, #16]
 8002db4:	2101      	movs	r1, #1
 8002db6:	438b      	bics	r3, r1
 8002db8:	6113      	str	r3, [r2, #16]
	}
	TimerCounterTIM15++;
 8002dba:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <TIM15_IRQHandler+0x38>)
 8002dbc:	7813      	ldrb	r3, [r2, #0]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	7013      	strb	r3, [r2, #0]
	if(FlagMogan == 0)
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <TIM15_IRQHandler+0x3c>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d103      	bne.n	8002dd2 <TIM15_IRQHandler+0x2a>
	{
		FlagMogan=1;
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <TIM15_IRQHandler+0x3c>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
	else
	{
		FlagMogan=0;
	}

}
 8002dd0:	4770      	bx	lr
		FlagMogan=0;
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <TIM15_IRQHandler+0x3c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
}
 8002dd8:	e7fa      	b.n	8002dd0 <TIM15_IRQHandler+0x28>
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	40014000 	.word	0x40014000
 8002de0:	200001e8 	.word	0x200001e8
 8002de4:	200001ec 	.word	0x200001ec

08002de8 <SPI1_IRQHandler>:
/**
* @brief This function handles SPI1 global interrupt.
*/
void SPI1_IRQHandler(void)
{
 8002de8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002dea:	4802      	ldr	r0, [pc, #8]	; (8002df4 <SPI1_IRQHandler+0xc>)
 8002dec:	f7fd ffa4 	bl	8000d38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002df0:	bd10      	pop	{r4, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	200002f0 	.word	0x200002f0

08002df8 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8002df8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dfa:	4802      	ldr	r0, [pc, #8]	; (8002e04 <USART1_IRQHandler+0xc>)
 8002dfc:	f7fe fb68 	bl	80014d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	20000268 	.word	0x20000268

08002e08 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8002e08:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e0a:	4802      	ldr	r0, [pc, #8]	; (8002e14 <USART2_IRQHandler+0xc>)
 8002e0c:	f7fe fb60 	bl	80014d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	20000354 	.word	0x20000354

08002e18 <EXTI2_3_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI2_3_IRQHandler (void) //Прерывания от PB2
{
 8002e18:	b510      	push	{r4, lr}
	if((EXTI->PR & EXTI_PR_PR2) > 0)
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <EXTI2_3_IRQHandler+0x14>)
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	075b      	lsls	r3, r3, #29
 8002e20:	d400      	bmi.n	8002e24 <EXTI2_3_IRQHandler+0xc>
	{
		HAL_GPIO_EXTI_Callback(GPIO_PIN_2);
	}
}
 8002e22:	bd10      	pop	{r4, pc}
		HAL_GPIO_EXTI_Callback(GPIO_PIN_2);
 8002e24:	2004      	movs	r0, #4
 8002e26:	f7ff fad7 	bl	80023d8 <HAL_GPIO_EXTI_Callback>
}
 8002e2a:	e7fa      	b.n	8002e22 <EXTI2_3_IRQHandler+0xa>
 8002e2c:	40010400 	.word	0x40010400

08002e30 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler (void) //Прерывания от PB8
{
 8002e30:	b510      	push	{r4, lr}
	if((EXTI->PR & EXTI_PR_PR8) > 0)
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <EXTI4_15_IRQHandler+0x18>)
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	05db      	lsls	r3, r3, #23
 8002e38:	d400      	bmi.n	8002e3c <EXTI4_15_IRQHandler+0xc>
	{
		HAL_GPIO_EXTI_Callback(GPIO_PIN_8);
	}

}
 8002e3a:	bd10      	pop	{r4, pc}
		HAL_GPIO_EXTI_Callback(GPIO_PIN_8);
 8002e3c:	2080      	movs	r0, #128	; 0x80
 8002e3e:	0040      	lsls	r0, r0, #1
 8002e40:	f7ff faca 	bl	80023d8 <HAL_GPIO_EXTI_Callback>
}
 8002e44:	e7f9      	b.n	8002e3a <EXTI4_15_IRQHandler+0xa>
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	40010400 	.word	0x40010400

08002e4c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	0003      	movs	r3, r0
 8002e50:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002e52:	880a      	ldrh	r2, [r1, #0]
 8002e54:	2a05      	cmp	r2, #5
 8002e56:	d001      	beq.n	8002e5c <eMBFuncReadCoils+0x10>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e58:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002e5c:	7842      	ldrb	r2, [r0, #1]
 8002e5e:	0212      	lsls	r2, r2, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002e60:	7881      	ldrb	r1, [r0, #2]
 8002e62:	4311      	orrs	r1, r2
        usRegAddress++;
 8002e64:	3101      	adds	r1, #1
 8002e66:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002e68:	78c2      	ldrb	r2, [r0, #3]
 8002e6a:	0212      	lsls	r2, r2, #8
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002e6c:	7900      	ldrb	r0, [r0, #4]
 8002e6e:	4302      	orrs	r2, r0
        if( ( usCoilCount >= 1 ) &&
 8002e70:	1e50      	subs	r0, r2, #1
 8002e72:	b280      	uxth	r0, r0
 8002e74:	4d12      	ldr	r5, [pc, #72]	; (8002ec0 <eMBFuncReadCoils+0x74>)
 8002e76:	42a8      	cmp	r0, r5
 8002e78:	d820      	bhi.n	8002ebc <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8002e7e:	3001      	adds	r0, #1
 8002e80:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 8002e82:	8820      	ldrh	r0, [r4, #0]
 8002e84:	3001      	adds	r0, #1
 8002e86:	8020      	strh	r0, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 8002e88:	0750      	lsls	r0, r2, #29
 8002e8a:	d011      	beq.n	8002eb0 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002e8c:	08d5      	lsrs	r5, r2, #3
 8002e8e:	b2ed      	uxtb	r5, r5
 8002e90:	3501      	adds	r5, #1
 8002e92:	b2ed      	uxtb	r5, r5
            *pucFrameCur++ = ucNBytes;
 8002e94:	1c98      	adds	r0, r3, #2
 8002e96:	705d      	strb	r5, [r3, #1]
            *usLen += 1;
 8002e98:	8823      	ldrh	r3, [r4, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f7ff fb9e 	bl	80025e0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	d106      	bne.n	8002eb6 <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 8002ea8:	8823      	ldrh	r3, [r4, #0]
 8002eaa:	195d      	adds	r5, r3, r5
 8002eac:	8025      	strh	r5, [r4, #0]
 8002eae:	e7d4      	b.n	8002e5a <eMBFuncReadCoils+0xe>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8002eb0:	08d5      	lsrs	r5, r2, #3
 8002eb2:	b2ed      	uxtb	r5, r5
 8002eb4:	e7ee      	b.n	8002e94 <eMBFuncReadCoils+0x48>
                eStatus = prveMBError2Exception( eRegStatus );
 8002eb6:	f000 f9a9 	bl	800320c <prveMBError2Exception>
 8002eba:	e7ce      	b.n	8002e5a <eMBFuncReadCoils+0xe>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	e7cc      	b.n	8002e5a <eMBFuncReadCoils+0xe>
 8002ec0:	000007ce 	.word	0x000007ce

08002ec4 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8002ec4:	b500      	push	{lr}
 8002ec6:	b083      	sub	sp, #12
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002ec8:	880b      	ldrh	r3, [r1, #0]
 8002eca:	2b05      	cmp	r3, #5
 8002ecc:	d002      	beq.n	8002ed4 <eMBFuncWriteCoil+0x10>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ece:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8002ed0:	b003      	add	sp, #12
 8002ed2:	bd00      	pop	{pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002ed4:	7843      	ldrb	r3, [r0, #1]
 8002ed6:	021b      	lsls	r3, r3, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002ed8:	7881      	ldrb	r1, [r0, #2]
 8002eda:	4319      	orrs	r1, r3
        usRegAddress++;
 8002edc:	3101      	adds	r1, #1
 8002ede:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002ee0:	7903      	ldrb	r3, [r0, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d119      	bne.n	8002f1a <eMBFuncWriteCoil+0x56>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002ee6:	78c2      	ldrb	r2, [r0, #3]
 8002ee8:	1e53      	subs	r3, r2, #1
 8002eea:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002eec:	2bfd      	cmp	r3, #253	; 0xfd
 8002eee:	d916      	bls.n	8002f1e <eMBFuncWriteCoil+0x5a>
            ucBuf[1] = 0;
 8002ef0:	ab01      	add	r3, sp, #4
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	7058      	strb	r0, [r3, #1]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002ef6:	2aff      	cmp	r2, #255	; 0xff
 8002ef8:	d00c      	beq.n	8002f14 <eMBFuncWriteCoil+0x50>
                ucBuf[0] = 0;
 8002efa:	ab01      	add	r3, sp, #4
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8002f00:	2301      	movs	r3, #1
 8002f02:	2201      	movs	r2, #1
 8002f04:	a801      	add	r0, sp, #4
 8002f06:	f7ff fb6b 	bl	80025e0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	d0e0      	beq.n	8002ed0 <eMBFuncWriteCoil+0xc>
                eStatus = prveMBError2Exception( eRegStatus );
 8002f0e:	f000 f97d 	bl	800320c <prveMBError2Exception>
 8002f12:	e7dd      	b.n	8002ed0 <eMBFuncWriteCoil+0xc>
                ucBuf[0] = 1;
 8002f14:	3afe      	subs	r2, #254	; 0xfe
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e7f2      	b.n	8002f00 <eMBFuncWriteCoil+0x3c>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	e7d8      	b.n	8002ed0 <eMBFuncWriteCoil+0xc>
 8002f1e:	2003      	movs	r0, #3
 8002f20:	e7d6      	b.n	8002ed0 <eMBFuncWriteCoil+0xc>

08002f22 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f24:	000c      	movs	r4, r1
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002f26:	880b      	ldrh	r3, [r1, #0]
 8002f28:	2b05      	cmp	r3, #5
 8002f2a:	d929      	bls.n	8002f80 <eMBFuncWriteMultipleCoils+0x5e>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002f2c:	7841      	ldrb	r1, [r0, #1]
 8002f2e:	0209      	lsls	r1, r1, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002f30:	7883      	ldrb	r3, [r0, #2]
 8002f32:	430b      	orrs	r3, r1
        usRegAddress++;
 8002f34:	3301      	adds	r3, #1
 8002f36:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002f38:	78c2      	ldrb	r2, [r0, #3]
 8002f3a:	0212      	lsls	r2, r2, #8
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002f3c:	7903      	ldrb	r3, [r0, #4]
 8002f3e:	431a      	orrs	r2, r3

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8002f40:	7946      	ldrb	r6, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002f42:	075b      	lsls	r3, r3, #29
 8002f44:	d00d      	beq.n	8002f62 <eMBFuncWriteMultipleCoils+0x40>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002f46:	08d3      	lsrs	r3, r2, #3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8002f4e:	1e55      	subs	r5, r2, #1
 8002f50:	b2ad      	uxth	r5, r5
 8002f52:	27f6      	movs	r7, #246	; 0xf6
 8002f54:	00ff      	lsls	r7, r7, #3
 8002f56:	42bd      	cmp	r5, r7
 8002f58:	d214      	bcs.n	8002f84 <eMBFuncWriteMultipleCoils+0x62>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002f5a:	42b3      	cmp	r3, r6
 8002f5c:	d004      	beq.n	8002f68 <eMBFuncWriteMultipleCoils+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f5e:	2003      	movs	r0, #3
 8002f60:	e00f      	b.n	8002f82 <eMBFuncWriteMultipleCoils+0x60>
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002f62:	08d3      	lsrs	r3, r2, #3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e7f2      	b.n	8002f4e <eMBFuncWriteMultipleCoils+0x2c>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002f68:	3006      	adds	r0, #6
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f7ff fb38 	bl	80025e0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d102      	bne.n	8002f7a <eMBFuncWriteMultipleCoils+0x58>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002f74:	2305      	movs	r3, #5
 8002f76:	8023      	strh	r3, [r4, #0]
 8002f78:	e003      	b.n	8002f82 <eMBFuncWriteMultipleCoils+0x60>
                eStatus = prveMBError2Exception( eRegStatus );
 8002f7a:	f000 f947 	bl	800320c <prveMBError2Exception>
 8002f7e:	e000      	b.n	8002f82 <eMBFuncWriteMultipleCoils+0x60>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f80:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8002f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f84:	2003      	movs	r0, #3
 8002f86:	e7fc      	b.n	8002f82 <eMBFuncWriteMultipleCoils+0x60>

08002f88 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002f8e:	880a      	ldrh	r2, [r1, #0]
 8002f90:	2a05      	cmp	r2, #5
 8002f92:	d001      	beq.n	8002f98 <eMBFuncReadDiscreteInputs+0x10>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f94:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002f98:	7842      	ldrb	r2, [r0, #1]
 8002f9a:	0212      	lsls	r2, r2, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002f9c:	7881      	ldrb	r1, [r0, #2]
 8002f9e:	4311      	orrs	r1, r2
        usRegAddress++;
 8002fa0:	3101      	adds	r1, #1
 8002fa2:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002fa4:	78c2      	ldrb	r2, [r0, #3]
 8002fa6:	0212      	lsls	r2, r2, #8
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002fa8:	7900      	ldrb	r0, [r0, #4]
 8002faa:	4302      	orrs	r2, r0
        if( ( usDiscreteCnt >= 1 ) &&
 8002fac:	1e50      	subs	r0, r2, #1
 8002fae:	b280      	uxth	r0, r0
 8002fb0:	4d12      	ldr	r5, [pc, #72]	; (8002ffc <eMBFuncReadDiscreteInputs+0x74>)
 8002fb2:	42a8      	cmp	r0, r5
 8002fb4:	d81f      	bhi.n	8002ff6 <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002fba:	3002      	adds	r0, #2
 8002fbc:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 8002fbe:	8820      	ldrh	r0, [r4, #0]
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	8020      	strh	r0, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002fc4:	0750      	lsls	r0, r2, #29
 8002fc6:	d010      	beq.n	8002fea <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002fc8:	08d5      	lsrs	r5, r2, #3
 8002fca:	b2ed      	uxtb	r5, r5
 8002fcc:	3501      	adds	r5, #1
 8002fce:	b2ed      	uxtb	r5, r5
            *pucFrameCur++ = ucNBytes;
 8002fd0:	1c98      	adds	r0, r3, #2
 8002fd2:	705d      	strb	r5, [r3, #1]
            *usLen += 1;
 8002fd4:	8823      	ldrh	r3, [r4, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8002fda:	f7ff fb03 	bl	80025e4 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d106      	bne.n	8002ff0 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 8002fe2:	8823      	ldrh	r3, [r4, #0]
 8002fe4:	195d      	adds	r5, r3, r5
 8002fe6:	8025      	strh	r5, [r4, #0]
 8002fe8:	e7d5      	b.n	8002f96 <eMBFuncReadDiscreteInputs+0xe>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8002fea:	08d5      	lsrs	r5, r2, #3
 8002fec:	b2ed      	uxtb	r5, r5
 8002fee:	e7ef      	b.n	8002fd0 <eMBFuncReadDiscreteInputs+0x48>
                eStatus = prveMBError2Exception( eRegStatus );
 8002ff0:	f000 f90c 	bl	800320c <prveMBError2Exception>
 8002ff4:	e7cf      	b.n	8002f96 <eMBFuncReadDiscreteInputs+0xe>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	e7cd      	b.n	8002f96 <eMBFuncReadDiscreteInputs+0xe>
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	000007ce 	.word	0x000007ce

08003000 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003000:	b510      	push	{r4, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003002:	880b      	ldrh	r3, [r1, #0]
 8003004:	2b05      	cmp	r3, #5
 8003006:	d001      	beq.n	800300c <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003008:	2003      	movs	r0, #3
    }
    return eStatus;
}
 800300a:	bd10      	pop	{r4, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800300c:	7843      	ldrb	r3, [r0, #1]
 800300e:	021b      	lsls	r3, r3, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003010:	7881      	ldrb	r1, [r0, #2]
 8003012:	4319      	orrs	r1, r3
        usRegAddress++;
 8003014:	3101      	adds	r1, #1
 8003016:	b289      	uxth	r1, r1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8003018:	3003      	adds	r0, #3
 800301a:	2301      	movs	r3, #1
 800301c:	2201      	movs	r2, #1
 800301e:	f7ff faad 	bl	800257c <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8003022:	2800      	cmp	r0, #0
 8003024:	d0f1      	beq.n	800300a <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8003026:	f000 f8f1 	bl	800320c <prveMBError2Exception>
 800302a:	e7ee      	b.n	800300a <eMBFuncWriteHoldingRegister+0xa>

0800302c <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	000c      	movs	r4, r1
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003030:	880b      	ldrh	r3, [r1, #0]
 8003032:	2b05      	cmp	r3, #5
 8003034:	d920      	bls.n	8003078 <eMBFuncWriteMultipleHoldingRegister+0x4c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8003036:	7841      	ldrb	r1, [r0, #1]
 8003038:	0209      	lsls	r1, r1, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800303a:	7883      	ldrb	r3, [r0, #2]
 800303c:	430b      	orrs	r3, r1
        usRegAddress++;
 800303e:	3301      	adds	r3, #1
 8003040:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8003042:	78c3      	ldrb	r3, [r0, #3]
 8003044:	021b      	lsls	r3, r3, #8
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8003046:	7902      	ldrb	r2, [r0, #4]
 8003048:	431a      	orrs	r2, r3

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800304a:	7945      	ldrb	r5, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 800304c:	1e53      	subs	r3, r2, #1
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b77      	cmp	r3, #119	; 0x77
 8003052:	d813      	bhi.n	800307c <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8003054:	0053      	lsls	r3, r2, #1
 8003056:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8003058:	42ab      	cmp	r3, r5
 800305a:	d001      	beq.n	8003060 <eMBFuncWriteMultipleHoldingRegister+0x34>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800305c:	2003      	movs	r0, #3
 800305e:	e00c      	b.n	800307a <eMBFuncWriteMultipleHoldingRegister+0x4e>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8003060:	3006      	adds	r0, #6
 8003062:	2301      	movs	r3, #1
 8003064:	f7ff fa8a 	bl	800257c <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8003068:	2800      	cmp	r0, #0
 800306a:	d102      	bne.n	8003072 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800306c:	2305      	movs	r3, #5
 800306e:	8023      	strh	r3, [r4, #0]
 8003070:	e003      	b.n	800307a <eMBFuncWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
 8003072:	f000 f8cb 	bl	800320c <prveMBError2Exception>
 8003076:	e000      	b.n	800307a <eMBFuncWriteMultipleHoldingRegister+0x4e>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003078:	2003      	movs	r0, #3
    }
    return eStatus;
}
 800307a:	bd70      	pop	{r4, r5, r6, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800307c:	2003      	movs	r0, #3
 800307e:	e7fc      	b.n	800307a <eMBFuncWriteMultipleHoldingRegister+0x4e>

08003080 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003084:	880b      	ldrh	r3, [r1, #0]
 8003086:	2b05      	cmp	r3, #5
 8003088:	d001      	beq.n	800308e <eMBFuncReadHoldingRegister+0xe>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800308a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 800308c:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800308e:	7841      	ldrb	r1, [r0, #1]
 8003090:	0209      	lsls	r1, r1, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003092:	7883      	ldrb	r3, [r0, #2]
 8003094:	430b      	orrs	r3, r1
        usRegAddress++;
 8003096:	3301      	adds	r3, #1
 8003098:	b299      	uxth	r1, r3
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800309a:	7902      	ldrb	r2, [r0, #4]
 800309c:	0015      	movs	r5, r2
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800309e:	1e53      	subs	r3, r2, #1
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b7c      	cmp	r3, #124	; 0x7c
 80030a4:	d901      	bls.n	80030aa <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80030a6:	2003      	movs	r0, #3
 80030a8:	e7f0      	b.n	800308c <eMBFuncReadHoldingRegister+0xc>
            *usLen = MB_PDU_FUNC_OFF;
 80030aa:	2300      	movs	r3, #0
 80030ac:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80030ae:	3303      	adds	r3, #3
 80030b0:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80030b2:	8823      	ldrh	r3, [r4, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80030b8:	1c86      	adds	r6, r0, #2
 80030ba:	0052      	lsls	r2, r2, #1
 80030bc:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 80030be:	8823      	ldrh	r3, [r4, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	8023      	strh	r3, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80030c4:	2300      	movs	r3, #0
 80030c6:	002a      	movs	r2, r5
 80030c8:	0030      	movs	r0, r6
 80030ca:	f7ff fa57 	bl	800257c <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d104      	bne.n	80030dc <eMBFuncReadHoldingRegister+0x5c>
                *usLen += usRegCount * 2;
 80030d2:	006d      	lsls	r5, r5, #1
 80030d4:	8823      	ldrh	r3, [r4, #0]
 80030d6:	195d      	adds	r5, r3, r5
 80030d8:	8025      	strh	r5, [r4, #0]
 80030da:	e7d7      	b.n	800308c <eMBFuncReadHoldingRegister+0xc>
                eStatus = prveMBError2Exception( eRegStatus );
 80030dc:	f000 f896 	bl	800320c <prveMBError2Exception>
 80030e0:	e7d4      	b.n	800308c <eMBFuncReadHoldingRegister+0xc>

080030e2 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80030e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e4:	0004      	movs	r4, r0
 80030e6:	000d      	movs	r5, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80030e8:	880b      	ldrh	r3, [r1, #0]
 80030ea:	2b09      	cmp	r3, #9
 80030ec:	d946      	bls.n	800317c <eMBFuncReadWriteMultipleHoldingRegister+0x9a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 80030ee:	7843      	ldrb	r3, [r0, #1]
 80030f0:	021b      	lsls	r3, r3, #8
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 80030f2:	7881      	ldrb	r1, [r0, #2]
 80030f4:	4319      	orrs	r1, r3
        usRegReadAddress++;
 80030f6:	3101      	adds	r1, #1
 80030f8:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 80030fa:	78c7      	ldrb	r7, [r0, #3]
 80030fc:	023f      	lsls	r7, r7, #8
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 80030fe:	7903      	ldrb	r3, [r0, #4]
 8003100:	431f      	orrs	r7, r3

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8003102:	7943      	ldrb	r3, [r0, #5]
 8003104:	021b      	lsls	r3, r3, #8
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8003106:	7981      	ldrb	r1, [r0, #6]
 8003108:	4319      	orrs	r1, r3
        usRegWriteAddress++;
 800310a:	3101      	adds	r1, #1
 800310c:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800310e:	79c3      	ldrb	r3, [r0, #7]
 8003110:	021b      	lsls	r3, r3, #8
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8003112:	7a02      	ldrb	r2, [r0, #8]
 8003114:	431a      	orrs	r2, r3

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8003116:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8003118:	1e7b      	subs	r3, r7, #1
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b7c      	cmp	r3, #124	; 0x7c
 800311e:	d82f      	bhi.n	8003180 <eMBFuncReadWriteMultipleHoldingRegister+0x9e>
 8003120:	2a00      	cmp	r2, #0
 8003122:	d02f      	beq.n	8003184 <eMBFuncReadWriteMultipleHoldingRegister+0xa2>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8003124:	2a79      	cmp	r2, #121	; 0x79
 8003126:	d82f      	bhi.n	8003188 <eMBFuncReadWriteMultipleHoldingRegister+0xa6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8003128:	0053      	lsls	r3, r2, #1
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800312a:	4283      	cmp	r3, r0
 800312c:	d001      	beq.n	8003132 <eMBFuncReadWriteMultipleHoldingRegister+0x50>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800312e:	2003      	movs	r0, #3
 8003130:	e025      	b.n	800317e <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8003132:	2301      	movs	r3, #1
 8003134:	0020      	movs	r0, r4
 8003136:	300a      	adds	r0, #10
 8003138:	f7ff fa20 	bl	800257c <eMBRegHoldingCB>
            if( eRegStatus == MB_ENOERR )
 800313c:	2800      	cmp	r0, #0
 800313e:	d004      	beq.n	800314a <eMBFuncReadWriteMultipleHoldingRegister+0x68>
            if( eRegStatus != MB_ENOERR )
 8003140:	2800      	cmp	r0, #0
 8003142:	d01c      	beq.n	800317e <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
                eStatus = prveMBError2Exception( eRegStatus );
 8003144:	f000 f862 	bl	800320c <prveMBError2Exception>
 8003148:	e019      	b.n	800317e <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
                *usLen = MB_PDU_FUNC_OFF;
 800314a:	2300      	movs	r3, #0
 800314c:	802b      	strh	r3, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800314e:	3317      	adds	r3, #23
 8003150:	7023      	strb	r3, [r4, #0]
                *usLen += 1;
 8003152:	882b      	ldrh	r3, [r5, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	802b      	strh	r3, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8003158:	1ca0      	adds	r0, r4, #2
 800315a:	007b      	lsls	r3, r7, #1
 800315c:	7063      	strb	r3, [r4, #1]
                *usLen += 1;
 800315e:	882b      	ldrh	r3, [r5, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	802b      	strh	r3, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8003164:	2300      	movs	r3, #0
 8003166:	003a      	movs	r2, r7
 8003168:	0031      	movs	r1, r6
 800316a:	f7ff fa07 	bl	800257c <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 800316e:	2800      	cmp	r0, #0
 8003170:	d1e6      	bne.n	8003140 <eMBFuncReadWriteMultipleHoldingRegister+0x5e>
                    *usLen += 2 * usRegReadCount;
 8003172:	007f      	lsls	r7, r7, #1
 8003174:	882b      	ldrh	r3, [r5, #0]
 8003176:	19df      	adds	r7, r3, r7
 8003178:	802f      	strh	r7, [r5, #0]
 800317a:	e7e1      	b.n	8003140 <eMBFuncReadWriteMultipleHoldingRegister+0x5e>
    eMBException    eStatus = MB_EX_NONE;
 800317c:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 800317e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003180:	2003      	movs	r0, #3
 8003182:	e7fc      	b.n	800317e <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 8003184:	2003      	movs	r0, #3
 8003186:	e7fa      	b.n	800317e <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 8003188:	2003      	movs	r0, #3
 800318a:	e7f8      	b.n	800317e <eMBFuncReadWriteMultipleHoldingRegister+0x9c>

0800318c <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003190:	880b      	ldrh	r3, [r1, #0]
 8003192:	2b05      	cmp	r3, #5
 8003194:	d001      	beq.n	800319a <eMBFuncReadInputRegister+0xe>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003196:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8003198:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800319a:	7843      	ldrb	r3, [r0, #1]
 800319c:	021b      	lsls	r3, r3, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800319e:	7881      	ldrb	r1, [r0, #2]
 80031a0:	4319      	orrs	r1, r3
        usRegAddress++;
 80031a2:	3101      	adds	r1, #1
 80031a4:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80031a6:	78c5      	ldrb	r5, [r0, #3]
 80031a8:	022d      	lsls	r5, r5, #8
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80031aa:	7903      	ldrb	r3, [r0, #4]
 80031ac:	431d      	orrs	r5, r3
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80031ae:	1e6b      	subs	r3, r5, #1
 80031b0:	b29b      	uxth	r3, r3
        if( ( usRegCount >= 1 )
 80031b2:	2b7b      	cmp	r3, #123	; 0x7b
 80031b4:	d901      	bls.n	80031ba <eMBFuncReadInputRegister+0x2e>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80031b6:	2003      	movs	r0, #3
 80031b8:	e7ee      	b.n	8003198 <eMBFuncReadInputRegister+0xc>
            *usLen = MB_PDU_FUNC_OFF;
 80031ba:	2300      	movs	r3, #0
 80031bc:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80031be:	3304      	adds	r3, #4
 80031c0:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80031c2:	8823      	ldrh	r3, [r4, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80031c8:	1c86      	adds	r6, r0, #2
 80031ca:	006b      	lsls	r3, r5, #1
 80031cc:	7043      	strb	r3, [r0, #1]
            *usLen += 1;
 80031ce:	8823      	ldrh	r3, [r4, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80031d4:	002a      	movs	r2, r5
 80031d6:	0030      	movs	r0, r6
 80031d8:	f7ff f9b4 	bl	8002544 <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 80031dc:	2800      	cmp	r0, #0
 80031de:	d104      	bne.n	80031ea <eMBFuncReadInputRegister+0x5e>
                *usLen += usRegCount * 2;
 80031e0:	006d      	lsls	r5, r5, #1
 80031e2:	8823      	ldrh	r3, [r4, #0]
 80031e4:	195d      	adds	r5, r3, r5
 80031e6:	8025      	strh	r5, [r4, #0]
 80031e8:	e7d6      	b.n	8003198 <eMBFuncReadInputRegister+0xc>
                eStatus = prveMBError2Exception( eRegStatus );
 80031ea:	f000 f80f 	bl	800320c <prveMBError2Exception>
 80031ee:	e7d3      	b.n	8003198 <eMBFuncReadInputRegister+0xc>

080031f0 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	000d      	movs	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80031f4:	3001      	adds	r0, #1
 80031f6:	4904      	ldr	r1, [pc, #16]	; (8003208 <eMBFuncReportSlaveID+0x18>)
 80031f8:	8c0c      	ldrh	r4, [r1, #32]
 80031fa:	0022      	movs	r2, r4
 80031fc:	f000 fc0e 	bl	8003a1c <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8003200:	3401      	adds	r4, #1
 8003202:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8003204:	2000      	movs	r0, #0
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	200001f4 	.word	0x200001f4

0800320c <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 800320c:	2801      	cmp	r0, #1
 800320e:	d005      	beq.n	800321c <prveMBError2Exception+0x10>
 8003210:	2807      	cmp	r0, #7
 8003212:	d005      	beq.n	8003220 <prveMBError2Exception+0x14>
 8003214:	2800      	cmp	r0, #0
 8003216:	d000      	beq.n	800321a <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8003218:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 800321a:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800321c:	2002      	movs	r0, #2
 800321e:	e7fc      	b.n	800321a <prveMBError2Exception+0xe>
            eStatus = MB_EX_SLAVE_BUSY;
 8003220:	2006      	movs	r0, #6
 8003222:	e7fa      	b.n	800321a <prveMBError2Exception+0xe>

08003224 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	0005      	movs	r5, r0
 8003228:	0008      	movs	r0, r1
 800322a:	0011      	movs	r1, r2
 800322c:	001a      	movs	r2, r3
 800322e:	ac04      	add	r4, sp, #16
 8003230:	7823      	ldrb	r3, [r4, #0]
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8003232:	1e44      	subs	r4, r0, #1
 8003234:	b2e4      	uxtb	r4, r4
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8003236:	2cf6      	cmp	r4, #246	; 0xf6
 8003238:	d824      	bhi.n	8003284 <eMBInit+0x60>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800323a:	4c15      	ldr	r4, [pc, #84]	; (8003290 <eMBInit+0x6c>)
 800323c:	7020      	strb	r0, [r4, #0]

        switch ( eMode )
 800323e:	2d00      	cmp	r5, #0
 8003240:	d001      	beq.n	8003246 <eMBInit+0x22>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8003242:	2402      	movs	r4, #2
 8003244:	e01f      	b.n	8003286 <eMBInit+0x62>
            pvMBFrameStartCur = eMBRTUStart;
 8003246:	4d13      	ldr	r5, [pc, #76]	; (8003294 <eMBInit+0x70>)
 8003248:	6065      	str	r5, [r4, #4]
            pvMBFrameStopCur = eMBRTUStop;
 800324a:	4d13      	ldr	r5, [pc, #76]	; (8003298 <eMBInit+0x74>)
 800324c:	60a5      	str	r5, [r4, #8]
            peMBFrameSendCur = eMBRTUSend;
 800324e:	4d13      	ldr	r5, [pc, #76]	; (800329c <eMBInit+0x78>)
 8003250:	60e5      	str	r5, [r4, #12]
            peMBFrameReceiveCur = eMBRTUReceive;
 8003252:	4d13      	ldr	r5, [pc, #76]	; (80032a0 <eMBInit+0x7c>)
 8003254:	6125      	str	r5, [r4, #16]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8003256:	2500      	movs	r5, #0
 8003258:	6165      	str	r5, [r4, #20]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 800325a:	4c12      	ldr	r4, [pc, #72]	; (80032a4 <eMBInit+0x80>)
 800325c:	4d12      	ldr	r5, [pc, #72]	; (80032a8 <eMBInit+0x84>)
 800325e:	6025      	str	r5, [r4, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8003260:	4c12      	ldr	r4, [pc, #72]	; (80032ac <eMBInit+0x88>)
 8003262:	4d13      	ldr	r5, [pc, #76]	; (80032b0 <eMBInit+0x8c>)
 8003264:	6025      	str	r5, [r4, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8003266:	4c13      	ldr	r4, [pc, #76]	; (80032b4 <eMBInit+0x90>)
 8003268:	4d13      	ldr	r5, [pc, #76]	; (80032b8 <eMBInit+0x94>)
 800326a:	6025      	str	r5, [r4, #0]
            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 800326c:	f000 f9c8 	bl	8003600 <eMBRTUInit>
 8003270:	1e04      	subs	r4, r0, #0
        }

        if( eStatus == MB_ENOERR )
 8003272:	d108      	bne.n	8003286 <eMBInit+0x62>
        {
            if( !xMBPortEventInit(  ) )
 8003274:	f000 f8cc 	bl	8003410 <xMBPortEventInit>
 8003278:	2800      	cmp	r0, #0
 800327a:	d006      	beq.n	800328a <eMBInit+0x66>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <eMBInit+0x98>)
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e000      	b.n	8003286 <eMBInit+0x62>
        eStatus = MB_EINVAL;
 8003284:	2402      	movs	r4, #2
            }
        }
    }
    return eStatus;
}
 8003286:	0020      	movs	r0, r4
 8003288:	bd70      	pop	{r4, r5, r6, pc}
                eStatus = MB_EPORTERR;
 800328a:	2403      	movs	r4, #3
 800328c:	e7fb      	b.n	8003286 <eMBInit+0x62>
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	20000218 	.word	0x20000218
 8003294:	08003651 	.word	0x08003651
 8003298:	08003675 	.word	0x08003675
 800329c:	08003701 	.word	0x08003701
 80032a0:	0800368d 	.word	0x0800368d
 80032a4:	20000474 	.word	0x20000474
 80032a8:	08003771 	.word	0x08003771
 80032ac:	2000046c 	.word	0x2000046c
 80032b0:	08003821 	.word	0x08003821
 80032b4:	20000470 	.word	0x20000470
 80032b8:	080038a9 	.word	0x080038a9
 80032bc:	200000d8 	.word	0x200000d8

080032c0 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80032c0:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <eMBEnable+0x20>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d001      	beq.n	80032ce <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80032ca:	2006      	movs	r0, #6
    }
    return eStatus;
}
 80032cc:	bd10      	pop	{r4, pc}
        pvMBFrameStartCur(  );
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <eMBEnable+0x24>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80032d4:	4b02      	ldr	r3, [pc, #8]	; (80032e0 <eMBEnable+0x20>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80032da:	2000      	movs	r0, #0
 80032dc:	e7f6      	b.n	80032cc <eMBEnable+0xc>
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	200000d8 	.word	0x200000d8
 80032e4:	20000218 	.word	0x20000218

080032e8 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80032e8:	b530      	push	{r4, r5, lr}
 80032ea:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <eMBPoll+0xe0>)
 80032ee:	781c      	ldrb	r4, [r3, #0]
 80032f0:	2c00      	cmp	r4, #0
 80032f2:	d162      	bne.n	80033ba <eMBPoll+0xd2>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80032f4:	466b      	mov	r3, sp
 80032f6:	1dd8      	adds	r0, r3, #7
 80032f8:	f000 f89a 	bl	8003430 <xMBPortEventGet>
 80032fc:	2801      	cmp	r0, #1
 80032fe:	d002      	beq.n	8003306 <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 8003300:	0020      	movs	r0, r4
 8003302:	b003      	add	sp, #12
 8003304:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 8003306:	466b      	mov	r3, sp
 8003308:	3307      	adds	r3, #7
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d00b      	beq.n	8003328 <eMBPoll+0x40>
 8003310:	2b02      	cmp	r3, #2
 8003312:	d1f5      	bne.n	8003300 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003314:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <eMBPoll+0xe4>)
 8003316:	69d8      	ldr	r0, [r3, #28]
 8003318:	7805      	ldrb	r5, [r0, #0]
 800331a:	2221      	movs	r2, #33	; 0x21
 800331c:	549d      	strb	r5, [r3, r2]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800331e:	3201      	adds	r2, #1
 8003320:	2101      	movs	r1, #1
 8003322:	5499      	strb	r1, [r3, r2]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8003324:	2300      	movs	r3, #0
 8003326:	e018      	b.n	800335a <eMBPoll+0x72>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <eMBPoll+0xe4>)
 800332a:	001a      	movs	r2, r3
 800332c:	3218      	adds	r2, #24
 800332e:	0019      	movs	r1, r3
 8003330:	311c      	adds	r1, #28
 8003332:	0018      	movs	r0, r3
 8003334:	3020      	adds	r0, #32
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	4798      	blx	r3
 800333a:	1e05      	subs	r5, r0, #0
            if( eStatus == MB_ENOERR )
 800333c:	d1e0      	bne.n	8003300 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800333e:	4b23      	ldr	r3, [pc, #140]	; (80033cc <eMBPoll+0xe4>)
 8003340:	2220      	movs	r2, #32
 8003342:	5c9a      	ldrb	r2, [r3, r2]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d001      	beq.n	800334e <eMBPoll+0x66>
 800334a:	2a00      	cmp	r2, #0
 800334c:	d137      	bne.n	80033be <eMBPoll+0xd6>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 800334e:	2002      	movs	r0, #2
 8003350:	f000 f866 	bl	8003420 <xMBPortEventPost>
    return MB_ENOERR;
 8003354:	002c      	movs	r4, r5
 8003356:	e7d3      	b.n	8003300 <eMBPoll+0x18>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8003358:	3301      	adds	r3, #1
 800335a:	2b0f      	cmp	r3, #15
 800335c:	dc0f      	bgt.n	800337e <eMBPoll+0x96>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800335e:	00da      	lsls	r2, r3, #3
 8003360:	491b      	ldr	r1, [pc, #108]	; (80033d0 <eMBPoll+0xe8>)
 8003362:	5c52      	ldrb	r2, [r2, r1]
 8003364:	2a00      	cmp	r2, #0
 8003366:	d00a      	beq.n	800337e <eMBPoll+0x96>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8003368:	4295      	cmp	r5, r2
 800336a:	d1f5      	bne.n	8003358 <eMBPoll+0x70>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	18cb      	adds	r3, r1, r3
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4d16      	ldr	r5, [pc, #88]	; (80033cc <eMBPoll+0xe4>)
 8003374:	0029      	movs	r1, r5
 8003376:	3118      	adds	r1, #24
 8003378:	4798      	blx	r3
 800337a:	2322      	movs	r3, #34	; 0x22
 800337c:	54e8      	strb	r0, [r5, r3]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800337e:	4a13      	ldr	r2, [pc, #76]	; (80033cc <eMBPoll+0xe4>)
 8003380:	2320      	movs	r3, #32
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01c      	beq.n	80033c2 <eMBPoll+0xda>
                if( eException != MB_EX_NONE )
 8003388:	2322      	movs	r3, #34	; 0x22
 800338a:	5cd2      	ldrb	r2, [r2, r3]
 800338c:	2a00      	cmp	r2, #0
 800338e:	d00d      	beq.n	80033ac <eMBPoll+0xc4>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <eMBPoll+0xe4>)
 8003392:	2121      	movs	r1, #33	; 0x21
 8003394:	5c58      	ldrb	r0, [r3, r1]
 8003396:	3920      	subs	r1, #32
 8003398:	8319      	strh	r1, [r3, #24]
 800339a:	3981      	subs	r1, #129	; 0x81
 800339c:	4301      	orrs	r1, r0
 800339e:	69d8      	ldr	r0, [r3, #28]
 80033a0:	7001      	strb	r1, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 80033a2:	69d8      	ldr	r0, [r3, #28]
 80033a4:	8b19      	ldrh	r1, [r3, #24]
 80033a6:	1c4d      	adds	r5, r1, #1
 80033a8:	831d      	strh	r5, [r3, #24]
 80033aa:	5442      	strb	r2, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <eMBPoll+0xe4>)
 80033ae:	8b1a      	ldrh	r2, [r3, #24]
 80033b0:	69d9      	ldr	r1, [r3, #28]
 80033b2:	7818      	ldrb	r0, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4798      	blx	r3
 80033b8:	e7a2      	b.n	8003300 <eMBPoll+0x18>
        return MB_EILLSTATE;
 80033ba:	2406      	movs	r4, #6
 80033bc:	e7a0      	b.n	8003300 <eMBPoll+0x18>
    return MB_ENOERR;
 80033be:	0004      	movs	r4, r0
 80033c0:	e79e      	b.n	8003300 <eMBPoll+0x18>
 80033c2:	001c      	movs	r4, r3
 80033c4:	e79c      	b.n	8003300 <eMBPoll+0x18>
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	200000d8 	.word	0x200000d8
 80033cc:	20000218 	.word	0x20000218
 80033d0:	200000dc 	.word	0x200000dc

080033d4 <EnterCriticalSection>:
  __ASM volatile ("cpsid i" : : : "memory");
 80033d4:	b672      	cpsid	i

/*----------------------------------------------------------------------------*/
void EnterCriticalSection()
{
  __disable_irq();
  lockCounter++;
 80033d6:	4a02      	ldr	r2, [pc, #8]	; (80033e0 <EnterCriticalSection+0xc>)
 80033d8:	6813      	ldr	r3, [r2, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	6013      	str	r3, [r2, #0]
}
 80033de:	4770      	bx	lr
 80033e0:	2000023c 	.word	0x2000023c

080033e4 <ExitCriticalSection>:


/*----------------------------------------------------------------------------*/
void ExitCriticalSection()
{
  lockCounter--;
 80033e4:	4a03      	ldr	r2, [pc, #12]	; (80033f4 <ExitCriticalSection+0x10>)
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	6013      	str	r3, [r2, #0]

  if (lockCounter == 0)
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d100      	bne.n	80033f2 <ExitCriticalSection+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 80033f0:	b662      	cpsie	i
  {
    __enable_irq();
  }
}
 80033f2:	4770      	bx	lr
 80033f4:	2000023c 	.word	0x2000023c

080033f8 <MT_PORT_SetTimerModule>:


/*----------------------------------------------------------------------------*/\
void MT_PORT_SetTimerModule(TIM_HandleTypeDef* timer)
{
  modbusTimer = timer;
 80033f8:	4b01      	ldr	r3, [pc, #4]	; (8003400 <MT_PORT_SetTimerModule+0x8>)
 80033fa:	6018      	str	r0, [r3, #0]
}
 80033fc:	4770      	bx	lr
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	20000484 	.word	0x20000484

08003404 <MT_PORT_SetUartModule>:


/*----------------------------------------------------------------------------*/\
void MT_PORT_SetUartModule(UART_HandleTypeDef* uart)
{
  modbusUart = uart;
 8003404:	4b01      	ldr	r3, [pc, #4]	; (800340c <MT_PORT_SetUartModule+0x8>)
 8003406:	6018      	str	r0, [r3, #0]
}
 8003408:	4770      	bx	lr
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	20000480 	.word	0x20000480

08003410 <xMBPortEventInit>:
/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBPortEventInit(void)
{
  xEventInQueue = FALSE;
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <xMBPortEventInit+0xc>)
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
  return TRUE;
}
 8003416:	2001      	movs	r0, #1
 8003418:	4770      	bx	lr
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	20000240 	.word	0x20000240

08003420 <xMBPortEventPost>:


/*----------------------------------------------------------------------------*/
BOOL xMBPortEventPost(eMBEventType eEvent)
{
  xEventInQueue = TRUE;
 8003420:	4b02      	ldr	r3, [pc, #8]	; (800342c <xMBPortEventPost+0xc>)
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
  eQueuedEvent = eEvent;
 8003426:	7058      	strb	r0, [r3, #1]
  return TRUE;
}
 8003428:	2001      	movs	r0, #1
 800342a:	4770      	bx	lr
 800342c:	20000240 	.word	0x20000240

08003430 <xMBPortEventGet>:



/*----------------------------------------------------------------------------*/
BOOL xMBPortEventGet(eMBEventType * eEvent)
{
 8003430:	0003      	movs	r3, r0
  BOOL xEventHappened = FALSE;

  if( xEventInQueue )
 8003432:	4a05      	ldr	r2, [pc, #20]	; (8003448 <xMBPortEventGet+0x18>)
 8003434:	7810      	ldrb	r0, [r2, #0]
 8003436:	2800      	cmp	r0, #0
 8003438:	d004      	beq.n	8003444 <xMBPortEventGet+0x14>
  {
    *eEvent = eQueuedEvent;
 800343a:	7851      	ldrb	r1, [r2, #1]
 800343c:	7019      	strb	r1, [r3, #0]
    xEventInQueue = FALSE;
 800343e:	2300      	movs	r3, #0
 8003440:	7013      	strb	r3, [r2, #0]
    xEventHappened = TRUE;
 8003442:	2001      	movs	r0, #1
  }

  return xEventHappened;
}
 8003444:	4770      	bx	lr
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	20000240 	.word	0x20000240

0800344c <prvvUARTTxReadyISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTTxReadyISR(void)
{
 800344c:	b510      	push	{r4, lr}
  pxMBFrameCBTransmitterEmpty();
 800344e:	4b02      	ldr	r3, [pc, #8]	; (8003458 <prvvUARTTxReadyISR+0xc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4798      	blx	r3
}
 8003454:	bd10      	pop	{r4, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	2000046c 	.word	0x2000046c

0800345c <prvvUARTRxISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTRxISR(void)
{
 800345c:	b510      	push	{r4, lr}
  pxMBFrameCBByteReceived();
 800345e:	4b02      	ldr	r3, [pc, #8]	; (8003468 <prvvUARTRxISR+0xc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4798      	blx	r3
}
 8003464:	bd10      	pop	{r4, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	20000474 	.word	0x20000474

0800346c <vMBPortSerialEnable>:
{
 800346c:	b510      	push	{r4, lr}
 800346e:	000c      	movs	r4, r1
  if (xRxEnable == FALSE)
 8003470:	2800      	cmp	r0, #0
 8003472:	d10b      	bne.n	800348c <vMBPortSerialEnable+0x20>
    HAL_UART_AbortReceive_IT(modbusUart);
 8003474:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <vMBPortSerialEnable+0x40>)
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	f7fd ffa8 	bl	80013cc <HAL_UART_AbortReceive_IT>
  if (xTxEnable == FALSE)
 800347c:	2c00      	cmp	r4, #0
 800347e:	d00c      	beq.n	800349a <vMBPortSerialEnable+0x2e>
    if (modbusUart->gState == HAL_UART_STATE_READY)
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <vMBPortSerialEnable+0x40>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003486:	2b20      	cmp	r3, #32
 8003488:	d00c      	beq.n	80034a4 <vMBPortSerialEnable+0x38>
}
 800348a:	bd10      	pop	{r4, pc}
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <vMBPortSerialEnable+0x40>)
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	4907      	ldr	r1, [pc, #28]	; (80034b0 <vMBPortSerialEnable+0x44>)
 8003494:	f7fe fce8 	bl	8001e68 <HAL_UART_Receive_IT>
 8003498:	e7f0      	b.n	800347c <vMBPortSerialEnable+0x10>
    HAL_UART_AbortTransmit_IT(modbusUart);
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <vMBPortSerialEnable+0x40>)
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	f7fd ff45 	bl	800132c <HAL_UART_AbortTransmit_IT>
 80034a2:	e7f2      	b.n	800348a <vMBPortSerialEnable+0x1e>
      prvvUARTTxReadyISR();
 80034a4:	f7ff ffd2 	bl	800344c <prvvUARTTxReadyISR>
}
 80034a8:	e7ef      	b.n	800348a <vMBPortSerialEnable+0x1e>
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	20000480 	.word	0x20000480
 80034b0:	20000242 	.word	0x20000242

080034b4 <xMBPortSerialInit>:
}
 80034b4:	2001      	movs	r0, #1
 80034b6:	4770      	bx	lr

080034b8 <xMBPortSerialPutByte>:
{
 80034b8:	b510      	push	{r4, lr}
  txByte = ucByte;
 80034ba:	4906      	ldr	r1, [pc, #24]	; (80034d4 <xMBPortSerialPutByte+0x1c>)
 80034bc:	7048      	strb	r0, [r1, #1]
  GPIOA->BSRR = GPIO_BSRR_BS_0;
 80034be:	2390      	movs	r3, #144	; 0x90
 80034c0:	05db      	lsls	r3, r3, #23
 80034c2:	2201      	movs	r2, #1
 80034c4:	619a      	str	r2, [r3, #24]
  HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 80034c6:	3101      	adds	r1, #1
 80034c8:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <xMBPortSerialPutByte+0x20>)
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	f7fd fece 	bl	800126c <HAL_UART_Transmit_IT>
}
 80034d0:	2001      	movs	r0, #1
 80034d2:	bd10      	pop	{r4, pc}
 80034d4:	20000242 	.word	0x20000242
 80034d8:	20000480 	.word	0x20000480

080034dc <xMBPortSerialGetByte>:
{
 80034dc:	b510      	push	{r4, lr}
  *pucByte = rxByte;
 80034de:	4905      	ldr	r1, [pc, #20]	; (80034f4 <xMBPortSerialGetByte+0x18>)
 80034e0:	780b      	ldrb	r3, [r1, #0]
 80034e2:	7003      	strb	r3, [r0, #0]
  HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <xMBPortSerialGetByte+0x1c>)
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f7fe fcbd 	bl	8001e68 <HAL_UART_Receive_IT>
}
 80034ee:	2001      	movs	r0, #1
 80034f0:	bd10      	pop	{r4, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	20000242 	.word	0x20000242
 80034f8:	20000480 	.word	0x20000480

080034fc <HAL_UART_TxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034fc:	b510      	push	{r4, lr}
  if (huart->Instance == modbusUart->Instance)
 80034fe:	6802      	ldr	r2, [r0, #0]
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_UART_TxCpltCallback+0x24>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d000      	beq.n	800350c <HAL_UART_TxCpltCallback+0x10>
  {
	GPIOA->BSRR |= GPIO_BSRR_BR_0;
    prvvUARTTxReadyISR();

  }
}
 800350a:	bd10      	pop	{r4, pc}
	GPIOA->BSRR |= GPIO_BSRR_BR_0;
 800350c:	2290      	movs	r2, #144	; 0x90
 800350e:	05d2      	lsls	r2, r2, #23
 8003510:	6991      	ldr	r1, [r2, #24]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	025b      	lsls	r3, r3, #9
 8003516:	430b      	orrs	r3, r1
 8003518:	6193      	str	r3, [r2, #24]
    prvvUARTTxReadyISR();
 800351a:	f7ff ff97 	bl	800344c <prvvUARTTxReadyISR>
}
 800351e:	e7f4      	b.n	800350a <HAL_UART_TxCpltCallback+0xe>
 8003520:	20000480 	.word	0x20000480

08003524 <HAL_UART_RxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003524:	b510      	push	{r4, lr}
  if (huart->Instance == modbusUart->Instance)
 8003526:	6802      	ldr	r2, [r0, #0]
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <HAL_UART_RxCpltCallback+0x18>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d000      	beq.n	8003534 <HAL_UART_RxCpltCallback+0x10>
  {
    prvvUARTRxISR();

  }
}
 8003532:	bd10      	pop	{r4, pc}
    prvvUARTRxISR();
 8003534:	f7ff ff92 	bl	800345c <prvvUARTRxISR>
}
 8003538:	e7fb      	b.n	8003532 <HAL_UART_RxCpltCallback+0xe>
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20000480 	.word	0x20000480

08003540 <prvvTIMERExpiredISR>:



/* --------------------------------------------------------------------------*/
static void prvvTIMERExpiredISR(void)
{
 8003540:	b510      	push	{r4, lr}
    (void)pxMBPortCBTimerExpired();
 8003542:	4b02      	ldr	r3, [pc, #8]	; (800354c <prvvTIMERExpiredISR+0xc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4798      	blx	r3
}
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	20000470 	.word	0x20000470

08003550 <xMBPortTimersInit>:
  timerPeriod = usTim1Timerout50us;
 8003550:	4b01      	ldr	r3, [pc, #4]	; (8003558 <xMBPortTimersInit+0x8>)
 8003552:	8018      	strh	r0, [r3, #0]
}
 8003554:	2001      	movs	r0, #1
 8003556:	4770      	bx	lr
 8003558:	20000244 	.word	0x20000244

0800355c <vMBPortTimersEnable>:
{
 800355c:	b510      	push	{r4, lr}
  timerCounter = 0;
 800355e:	4b04      	ldr	r3, [pc, #16]	; (8003570 <vMBPortTimersEnable+0x14>)
 8003560:	2200      	movs	r2, #0
 8003562:	805a      	strh	r2, [r3, #2]
  HAL_TIM_Base_Start_IT(modbusTimer);
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <vMBPortTimersEnable+0x18>)
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	f7fd fc82 	bl	8000e70 <HAL_TIM_Base_Start_IT>
}
 800356c:	bd10      	pop	{r4, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	20000244 	.word	0x20000244
 8003574:	20000484 	.word	0x20000484

08003578 <vMBPortTimersDisable>:
{
 8003578:	b510      	push	{r4, lr}
  HAL_TIM_Base_Stop_IT(modbusTimer);
 800357a:	4b02      	ldr	r3, [pc, #8]	; (8003584 <vMBPortTimersDisable+0xc>)
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	f7fd fca9 	bl	8000ed4 <HAL_TIM_Base_Stop_IT>
}
 8003582:	bd10      	pop	{r4, pc}
 8003584:	20000484 	.word	0x20000484

08003588 <HAL_TIM_PeriodElapsedCallback>:



/* --------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b510      	push	{r4, lr}
 800358a:	0004      	movs	r4, r0
  if (htim->Instance == modbusTimer->Instance)
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6802      	ldr	r2, [r0, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d004      	beq.n	80035a2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    if (timerCounter == timerPeriod)
    {
      prvvTIMERExpiredISR();
    }
  }
  if (htim->Instance == TIM6) {
 8003598:	6822      	ldr	r2, [r4, #0]
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800359c:	429a      	cmp	r2, r3
 800359e:	d00b      	beq.n	80035b8 <HAL_TIM_PeriodElapsedCallback+0x30>
    HAL_IncTick();
  }
}
 80035a0:	bd10      	pop	{r4, pc}
    timerCounter++;
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80035a4:	8853      	ldrh	r3, [r2, #2]
 80035a6:	3301      	adds	r3, #1
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	8053      	strh	r3, [r2, #2]
    if (timerCounter == timerPeriod)
 80035ac:	8812      	ldrh	r2, [r2, #0]
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d1f2      	bne.n	8003598 <HAL_TIM_PeriodElapsedCallback+0x10>
      prvvTIMERExpiredISR();
 80035b2:	f7ff ffc5 	bl	8003540 <prvvTIMERExpiredISR>
 80035b6:	e7ef      	b.n	8003598 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 80035b8:	f7fc fe4e 	bl	8000258 <HAL_IncTick>
}
 80035bc:	e7f0      	b.n	80035a0 <HAL_TIM_PeriodElapsedCallback+0x18>
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	20000484 	.word	0x20000484
 80035c4:	40001000 	.word	0x40001000
 80035c8:	20000244 	.word	0x20000244

080035cc <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 80035cc:	b530      	push	{r4, r5, lr}
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 80035ce:	24ff      	movs	r4, #255	; 0xff
    UCHAR           ucCRCHi = 0xFF;
 80035d0:	25ff      	movs	r5, #255	; 0xff
    int             iIndex;

    while( usLen-- )
 80035d2:	1e4a      	subs	r2, r1, #1
 80035d4:	b292      	uxth	r2, r2
 80035d6:	2900      	cmp	r1, #0
 80035d8:	d009      	beq.n	80035ee <usMBCRC16+0x22>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80035da:	7803      	ldrb	r3, [r0, #0]
 80035dc:	4063      	eors	r3, r4
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80035de:	4906      	ldr	r1, [pc, #24]	; (80035f8 <usMBCRC16+0x2c>)
 80035e0:	5ccc      	ldrb	r4, [r1, r3]
 80035e2:	406c      	eors	r4, r5
        ucCRCHi = aucCRCLo[iIndex];
 80035e4:	4905      	ldr	r1, [pc, #20]	; (80035fc <usMBCRC16+0x30>)
 80035e6:	5ccd      	ldrb	r5, [r1, r3]
    while( usLen-- )
 80035e8:	0011      	movs	r1, r2
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80035ea:	3001      	adds	r0, #1
 80035ec:	e7f1      	b.n	80035d2 <usMBCRC16+0x6>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 80035ee:	0228      	lsls	r0, r5, #8
 80035f0:	4320      	orrs	r0, r4
 80035f2:	b280      	uxth	r0, r0
}
 80035f4:	bd30      	pop	{r4, r5, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	080050b4 	.word	0x080050b4
 80035fc:	08004fb4 	.word	0x08004fb4

08003600 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	000d      	movs	r5, r1
 8003604:	0014      	movs	r4, r2
 8003606:	001e      	movs	r6, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8003608:	f7ff fee4 	bl	80033d4 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800360c:	0033      	movs	r3, r6
 800360e:	2208      	movs	r2, #8
 8003610:	0021      	movs	r1, r4
 8003612:	0028      	movs	r0, r5
 8003614:	f7ff ff4e 	bl	80034b4 <xMBPortSerialInit>
 8003618:	2801      	cmp	r0, #1
 800361a:	d004      	beq.n	8003626 <eMBRTUInit+0x26>
    {
        eStatus = MB_EPORTERR;
 800361c:	2403      	movs	r4, #3
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 800361e:	f7ff fee1 	bl	80033e4 <ExitCriticalSection>

    return eStatus;
}
 8003622:	0020      	movs	r0, r4
 8003624:	bd70      	pop	{r4, r5, r6, pc}
        if( ulBaudRate > 19200 )
 8003626:	2396      	movs	r3, #150	; 0x96
 8003628:	01db      	lsls	r3, r3, #7
 800362a:	429c      	cmp	r4, r3
 800362c:	d80a      	bhi.n	8003644 <eMBRTUInit+0x44>
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800362e:	0061      	lsls	r1, r4, #1
 8003630:	4806      	ldr	r0, [pc, #24]	; (800364c <eMBRTUInit+0x4c>)
 8003632:	f7fc fd73 	bl	800011c <__udivsi3>
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8003636:	b280      	uxth	r0, r0
 8003638:	f7ff ff8a 	bl	8003550 <xMBPortTimersInit>
 800363c:	2801      	cmp	r0, #1
 800363e:	d003      	beq.n	8003648 <eMBRTUInit+0x48>
            eStatus = MB_EPORTERR;
 8003640:	2403      	movs	r4, #3
 8003642:	e7ec      	b.n	800361e <eMBRTUInit+0x1e>
            usTimerT35_50us = 35;       /* 1800us. */
 8003644:	2023      	movs	r0, #35	; 0x23
 8003646:	e7f6      	b.n	8003636 <eMBRTUInit+0x36>
    eMBErrorCode    eStatus = MB_ENOERR;
 8003648:	2400      	movs	r4, #0
 800364a:	e7e8      	b.n	800361e <eMBRTUInit+0x1e>
 800364c:	00177fa0 	.word	0x00177fa0

08003650 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8003650:	b510      	push	{r4, lr}
    ENTER_CRITICAL_SECTION(  );
 8003652:	f7ff febf 	bl	80033d4 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <eMBRTUStart+0x20>)
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 800365c:	2100      	movs	r1, #0
 800365e:	2001      	movs	r0, #1
 8003660:	f7ff ff04 	bl	800346c <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8003664:	f7ff ff7a 	bl	800355c <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8003668:	f7ff febc 	bl	80033e4 <ExitCriticalSection>
}
 800366c:	bd10      	pop	{r4, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	20000248 	.word	0x20000248

08003674 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8003674:	b510      	push	{r4, lr}
    ENTER_CRITICAL_SECTION(  );
 8003676:	f7ff fead 	bl	80033d4 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 800367a:	2100      	movs	r1, #0
 800367c:	2000      	movs	r0, #0
 800367e:	f7ff fef5 	bl	800346c <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8003682:	f7ff ff79 	bl	8003578 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8003686:	f7ff fead 	bl	80033e4 <ExitCriticalSection>
}
 800368a:	bd10      	pop	{r4, pc}

0800368c <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	0005      	movs	r5, r0
 8003690:	000e      	movs	r6, r1
 8003692:	0014      	movs	r4, r2
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 8003694:	f7ff fe9e 	bl	80033d4 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <eMBRTUReceive+0x60>)
 800369a:	885b      	ldrh	r3, [r3, #2]
 800369c:	b29b      	uxth	r3, r3
 800369e:	2bff      	cmp	r3, #255	; 0xff
 80036a0:	d809      	bhi.n	80036b6 <eMBRTUReceive+0x2a>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <eMBRTUReceive+0x60>)
 80036a4:	885b      	ldrh	r3, [r3, #2]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d80a      	bhi.n	80036c2 <eMBRTUReceive+0x36>
        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
    }
    else
    {
        eStatus = MB_EIO;
 80036ac:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 80036ae:	f7ff fe99 	bl	80033e4 <ExitCriticalSection>
    return eStatus;
}
 80036b2:	0020      	movs	r0, r4
 80036b4:	bd70      	pop	{r4, r5, r6, pc}
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <eMBRTUReceive+0x64>)
 80036b8:	4a0e      	ldr	r2, [pc, #56]	; (80036f4 <eMBRTUReceive+0x68>)
 80036ba:	219b      	movs	r1, #155	; 0x9b
 80036bc:	480e      	ldr	r0, [pc, #56]	; (80036f8 <eMBRTUReceive+0x6c>)
 80036be:	f000 f95b 	bl	8003978 <__assert_func>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <eMBRTUReceive+0x60>)
 80036c4:	8859      	ldrh	r1, [r3, #2]
 80036c6:	b289      	uxth	r1, r1
 80036c8:	480c      	ldr	r0, [pc, #48]	; (80036fc <eMBRTUReceive+0x70>)
 80036ca:	f7ff ff7f 	bl	80035cc <usMBCRC16>
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d10a      	bne.n	80036e8 <eMBRTUReceive+0x5c>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <eMBRTUReceive+0x70>)
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	702a      	strb	r2, [r5, #0]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80036d8:	4a04      	ldr	r2, [pc, #16]	; (80036ec <eMBRTUReceive+0x60>)
 80036da:	8852      	ldrh	r2, [r2, #2]
 80036dc:	3a03      	subs	r2, #3
 80036de:	8022      	strh	r2, [r4, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80036e0:	3301      	adds	r3, #1
 80036e2:	6033      	str	r3, [r6, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80036e4:	2400      	movs	r4, #0
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80036e6:	e7e2      	b.n	80036ae <eMBRTUReceive+0x22>
        eStatus = MB_EIO;
 80036e8:	2405      	movs	r4, #5
 80036ea:	e7e0      	b.n	80036ae <eMBRTUReceive+0x22>
 80036ec:	20000248 	.word	0x20000248
 80036f0:	0800522c 	.word	0x0800522c
 80036f4:	080051b4 	.word	0x080051b4
 80036f8:	08005254 	.word	0x08005254
 80036fc:	20000488 	.word	0x20000488

08003700 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	0006      	movs	r6, r0
 8003704:	000c      	movs	r4, r1
 8003706:	0015      	movs	r5, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8003708:	f7ff fe64 	bl	80033d4 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 800370c:	4b16      	ldr	r3, [pc, #88]	; (8003768 <eMBRTUSend+0x68>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d004      	beq.n	800371e <eMBRTUSend+0x1e>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
 8003714:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION(  );
 8003716:	f7ff fe65 	bl	80033e4 <ExitCriticalSection>
    return eStatus;
}
 800371a:	0020      	movs	r0, r4
 800371c:	bd70      	pop	{r4, r5, r6, pc}
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800371e:	1e60      	subs	r0, r4, #1
 8003720:	4c11      	ldr	r4, [pc, #68]	; (8003768 <eMBRTUSend+0x68>)
 8003722:	6060      	str	r0, [r4, #4]
        usSndBufferCount = 1;
 8003724:	8123      	strh	r3, [r4, #8]
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8003726:	7006      	strb	r6, [r0, #0]
        usSndBufferCount += usLength;
 8003728:	8922      	ldrh	r2, [r4, #8]
 800372a:	1955      	adds	r5, r2, r5
 800372c:	b2ad      	uxth	r5, r5
 800372e:	8125      	strh	r5, [r4, #8]
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8003730:	8921      	ldrh	r1, [r4, #8]
 8003732:	b289      	uxth	r1, r1
 8003734:	f7ff ff4a 	bl	80035cc <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8003738:	8923      	ldrh	r3, [r4, #8]
 800373a:	b299      	uxth	r1, r3
 800373c:	3301      	adds	r3, #1
 800373e:	b29b      	uxth	r3, r3
 8003740:	8123      	strh	r3, [r4, #8]
 8003742:	b2c3      	uxtb	r3, r0
 8003744:	4a09      	ldr	r2, [pc, #36]	; (800376c <eMBRTUSend+0x6c>)
 8003746:	5453      	strb	r3, [r2, r1]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8003748:	8923      	ldrh	r3, [r4, #8]
 800374a:	b299      	uxth	r1, r3
 800374c:	3301      	adds	r3, #1
 800374e:	b29b      	uxth	r3, r3
 8003750:	8123      	strh	r3, [r4, #8]
 8003752:	0a00      	lsrs	r0, r0, #8
 8003754:	b2c0      	uxtb	r0, r0
 8003756:	5450      	strb	r0, [r2, r1]
        eSndState = STATE_TX_XMIT;
 8003758:	2301      	movs	r3, #1
 800375a:	72a3      	strb	r3, [r4, #10]
        vMBPortSerialEnable( FALSE, TRUE );
 800375c:	2101      	movs	r1, #1
 800375e:	2000      	movs	r0, #0
 8003760:	f7ff fe84 	bl	800346c <vMBPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 8003764:	2400      	movs	r4, #0
 8003766:	e7d6      	b.n	8003716 <eMBRTUSend+0x16>
 8003768:	20000248 	.word	0x20000248
 800376c:	20000488 	.word	0x20000488

08003770 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8003770:	b500      	push	{lr}
 8003772:	b083      	sub	sp, #12
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8003774:	4b25      	ldr	r3, [pc, #148]	; (800380c <xMBRTUReceiveFSM+0x9c>)
 8003776:	7a9b      	ldrb	r3, [r3, #10]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11f      	bne.n	80037bc <xMBRTUReceiveFSM+0x4c>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800377c:	466b      	mov	r3, sp
 800377e:	1dd8      	adds	r0, r3, #7
 8003780:	f7ff feac 	bl	80034dc <xMBPortSerialGetByte>

    switch ( eRcvState )
 8003784:	4b21      	ldr	r3, [pc, #132]	; (800380c <xMBRTUReceiveFSM+0x9c>)
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	b2d3      	uxtb	r3, r2
 800378a:	2a02      	cmp	r2, #2
 800378c:	d027      	beq.n	80037de <xMBRTUReceiveFSM+0x6e>
 800378e:	2b02      	cmp	r3, #2
 8003790:	d81b      	bhi.n	80037ca <xMBRTUReceiveFSM+0x5a>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01e      	beq.n	80037d4 <xMBRTUReceiveFSM+0x64>
 8003796:	2b01      	cmp	r3, #1
 8003798:	d11e      	bne.n	80037d8 <xMBRTUReceiveFSM+0x68>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800379a:	4a1c      	ldr	r2, [pc, #112]	; (800380c <xMBRTUReceiveFSM+0x9c>)
 800379c:	2300      	movs	r3, #0
 800379e:	8053      	strh	r3, [r2, #2]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80037a0:	8853      	ldrh	r3, [r2, #2]
 80037a2:	b299      	uxth	r1, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	8053      	strh	r3, [r2, #2]
 80037aa:	466b      	mov	r3, sp
 80037ac:	79d8      	ldrb	r0, [r3, #7]
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <xMBRTUReceiveFSM+0xa0>)
 80037b0:	5458      	strb	r0, [r3, r1]
        eRcvState = STATE_RX_RCV;
 80037b2:	2302      	movs	r3, #2
 80037b4:	7013      	strb	r3, [r2, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 80037b6:	f7ff fed1 	bl	800355c <vMBPortTimersEnable>
        break;
 80037ba:	e00d      	b.n	80037d8 <xMBRTUReceiveFSM+0x68>
    assert( eSndState == STATE_TX_IDLE );
 80037bc:	4a15      	ldr	r2, [pc, #84]	; (8003814 <xMBRTUReceiveFSM+0xa4>)
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <xMBRTUReceiveFSM+0xa8>)
 80037c0:	3210      	adds	r2, #16
 80037c2:	21e4      	movs	r1, #228	; 0xe4
 80037c4:	4815      	ldr	r0, [pc, #84]	; (800381c <xMBRTUReceiveFSM+0xac>)
 80037c6:	f000 f8d7 	bl	8003978 <__assert_func>
    switch ( eRcvState )
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d104      	bne.n	80037d8 <xMBRTUReceiveFSM+0x68>
        vMBPortTimersEnable(  );
 80037ce:	f7ff fec5 	bl	800355c <vMBPortTimersEnable>
        break;
 80037d2:	e001      	b.n	80037d8 <xMBRTUReceiveFSM+0x68>
        vMBPortTimersEnable(  );
 80037d4:	f7ff fec2 	bl	800355c <vMBPortTimersEnable>
        }
        vMBPortTimersEnable(  );
        break;
    }
    return xTaskNeedSwitch;
}
 80037d8:	2000      	movs	r0, #0
 80037da:	b003      	add	sp, #12
 80037dc:	bd00      	pop	{pc}
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <xMBRTUReceiveFSM+0x9c>)
 80037e0:	885b      	ldrh	r3, [r3, #2]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2bff      	cmp	r3, #255	; 0xff
 80037e6:	d80c      	bhi.n	8003802 <xMBRTUReceiveFSM+0x92>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 80037e8:	4a08      	ldr	r2, [pc, #32]	; (800380c <xMBRTUReceiveFSM+0x9c>)
 80037ea:	8853      	ldrh	r3, [r2, #2]
 80037ec:	b299      	uxth	r1, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	8053      	strh	r3, [r2, #2]
 80037f4:	466b      	mov	r3, sp
 80037f6:	79da      	ldrb	r2, [r3, #7]
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <xMBRTUReceiveFSM+0xa0>)
 80037fa:	545a      	strb	r2, [r3, r1]
        vMBPortTimersEnable(  );
 80037fc:	f7ff feae 	bl	800355c <vMBPortTimersEnable>
        break;
 8003800:	e7ea      	b.n	80037d8 <xMBRTUReceiveFSM+0x68>
            eRcvState = STATE_RX_ERROR;
 8003802:	4b02      	ldr	r3, [pc, #8]	; (800380c <xMBRTUReceiveFSM+0x9c>)
 8003804:	2203      	movs	r2, #3
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e7f8      	b.n	80037fc <xMBRTUReceiveFSM+0x8c>
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	20000248 	.word	0x20000248
 8003810:	20000488 	.word	0x20000488
 8003814:	080051b4 	.word	0x080051b4
 8003818:	0800526c 	.word	0x0800526c
 800381c:	08005254 	.word	0x08005254

08003820 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003820:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 8003822:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <xMBRTUTransmitFSM+0x78>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d109      	bne.n	800383e <xMBRTUTransmitFSM+0x1e>

    switch ( eSndState )
 800382a:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <xMBRTUTransmitFSM+0x78>)
 800382c:	7a9b      	ldrb	r3, [r3, #10]
 800382e:	b2dc      	uxtb	r4, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00c      	beq.n	800384e <xMBRTUTransmitFSM+0x2e>
 8003834:	2c01      	cmp	r4, #1
 8003836:	d00f      	beq.n	8003858 <xMBRTUTransmitFSM+0x38>
 8003838:	2400      	movs	r4, #0
        }
        break;
    }

    return xNeedPoll;
}
 800383a:	0020      	movs	r0, r4
 800383c:	bd10      	pop	{r4, pc}
    assert( eRcvState == STATE_RX_IDLE );
 800383e:	4a17      	ldr	r2, [pc, #92]	; (800389c <xMBRTUTransmitFSM+0x7c>)
 8003840:	2120      	movs	r1, #32
 8003842:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <xMBRTUTransmitFSM+0x80>)
 8003844:	3224      	adds	r2, #36	; 0x24
 8003846:	31ff      	adds	r1, #255	; 0xff
 8003848:	4816      	ldr	r0, [pc, #88]	; (80038a4 <xMBRTUTransmitFSM+0x84>)
 800384a:	f000 f895 	bl	8003978 <__assert_func>
        vMBPortSerialEnable( TRUE, FALSE );
 800384e:	2100      	movs	r1, #0
 8003850:	2001      	movs	r0, #1
 8003852:	f7ff fe0b 	bl	800346c <vMBPortSerialEnable>
        break;
 8003856:	e7f0      	b.n	800383a <xMBRTUTransmitFSM+0x1a>
        if( usSndBufferCount != 0 )
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <xMBRTUTransmitFSM+0x78>)
 800385a:	891b      	ldrh	r3, [r3, #8]
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00e      	beq.n	8003880 <xMBRTUTransmitFSM+0x60>
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8003862:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <xMBRTUTransmitFSM+0x78>)
 8003864:	6863      	ldr	r3, [r4, #4]
 8003866:	7818      	ldrb	r0, [r3, #0]
 8003868:	b2c0      	uxtb	r0, r0
 800386a:	f7ff fe25 	bl	80034b8 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 800386e:	6863      	ldr	r3, [r4, #4]
 8003870:	3301      	adds	r3, #1
 8003872:	6063      	str	r3, [r4, #4]
            usSndBufferCount--;
 8003874:	8923      	ldrh	r3, [r4, #8]
 8003876:	3b01      	subs	r3, #1
 8003878:	b29b      	uxth	r3, r3
 800387a:	8123      	strh	r3, [r4, #8]
    BOOL            xNeedPoll = FALSE;
 800387c:	2400      	movs	r4, #0
 800387e:	e7dc      	b.n	800383a <xMBRTUTransmitFSM+0x1a>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003880:	2003      	movs	r0, #3
 8003882:	f7ff fdcd 	bl	8003420 <xMBPortEventPost>
 8003886:	0004      	movs	r4, r0
            vMBPortSerialEnable( TRUE, FALSE );
 8003888:	2100      	movs	r1, #0
 800388a:	2001      	movs	r0, #1
 800388c:	f7ff fdee 	bl	800346c <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8003890:	4b01      	ldr	r3, [pc, #4]	; (8003898 <xMBRTUTransmitFSM+0x78>)
 8003892:	2200      	movs	r2, #0
 8003894:	729a      	strb	r2, [r3, #10]
 8003896:	e7d0      	b.n	800383a <xMBRTUTransmitFSM+0x1a>
 8003898:	20000248 	.word	0x20000248
 800389c:	080051b4 	.word	0x080051b4
 80038a0:	08005288 	.word	0x08005288
 80038a4:	08005254 	.word	0x08005254

080038a8 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 80038a8:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 80038aa:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <xMBRTUTimerT35Expired+0x6c>)
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	b2d3      	uxtb	r3, r2
 80038b0:	2a02      	cmp	r2, #2
 80038b2:	d017      	beq.n	80038e4 <xMBRTUTimerT35Expired+0x3c>
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d022      	beq.n	80038fe <xMBRTUTimerT35Expired+0x56>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <xMBRTUTimerT35Expired+0x32>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <xMBRTUTimerT35Expired+0x6c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	b2dc      	uxtb	r4, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01c      	beq.n	8003900 <xMBRTUTimerT35Expired+0x58>
 80038c6:	4b13      	ldr	r3, [pc, #76]	; (8003914 <xMBRTUTimerT35Expired+0x6c>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d01f      	beq.n	800390e <xMBRTUTimerT35Expired+0x66>
 80038ce:	4b11      	ldr	r3, [pc, #68]	; (8003914 <xMBRTUTimerT35Expired+0x6c>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d10b      	bne.n	80038ee <xMBRTUTimerT35Expired+0x46>
    BOOL            xNeedPoll = FALSE;
 80038d6:	2400      	movs	r4, #0
 80038d8:	e012      	b.n	8003900 <xMBRTUTimerT35Expired+0x58>
        xNeedPoll = xMBPortEventPost( EV_READY );
 80038da:	2000      	movs	r0, #0
 80038dc:	f7ff fda0 	bl	8003420 <xMBPortEventPost>
 80038e0:	0004      	movs	r4, r0
        break;
 80038e2:	e00d      	b.n	8003900 <xMBRTUTimerT35Expired+0x58>
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 80038e4:	2001      	movs	r0, #1
 80038e6:	f7ff fd9b 	bl	8003420 <xMBPortEventPost>
 80038ea:	0004      	movs	r4, r0
        break;
 80038ec:	e008      	b.n	8003900 <xMBRTUTimerT35Expired+0x58>
        assert( ( eRcvState == STATE_RX_INIT ) ||
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <xMBRTUTimerT35Expired+0x70>)
 80038f0:	21ac      	movs	r1, #172	; 0xac
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <xMBRTUTimerT35Expired+0x74>)
 80038f4:	3238      	adds	r2, #56	; 0x38
 80038f6:	0049      	lsls	r1, r1, #1
 80038f8:	4809      	ldr	r0, [pc, #36]	; (8003920 <xMBRTUTimerT35Expired+0x78>)
 80038fa:	f000 f83d 	bl	8003978 <__assert_func>
    switch ( eRcvState )
 80038fe:	2400      	movs	r4, #0
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8003900:	f7ff fe3a 	bl	8003578 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <xMBRTUTimerT35Expired+0x6c>)
 8003906:	2201      	movs	r2, #1
 8003908:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
}
 800390a:	0020      	movs	r0, r4
 800390c:	bd10      	pop	{r4, pc}
    BOOL            xNeedPoll = FALSE;
 800390e:	2400      	movs	r4, #0
 8003910:	e7f6      	b.n	8003900 <xMBRTUTimerT35Expired+0x58>
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	20000248 	.word	0x20000248
 8003918:	080051b4 	.word	0x080051b4
 800391c:	080052a4 	.word	0x080052a4
 8003920:	08005254 	.word	0x08005254

08003924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003924:	480d      	ldr	r0, [pc, #52]	; (800395c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003926:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/  bl  SystemInit
 8003928:	f7fc fc84 	bl	8000234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800392c:	480c      	ldr	r0, [pc, #48]	; (8003960 <LoopForever+0x6>)
  ldr r1, =_edata
 800392e:	490d      	ldr	r1, [pc, #52]	; (8003964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003930:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <LoopForever+0xe>)
  movs r3, #0
 8003932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003934:	e002      	b.n	800393c <LoopCopyDataInit>

08003936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800393a:	3304      	adds	r3, #4

0800393c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800393c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800393e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003940:	d3f9      	bcc.n	8003936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003944:	4c0a      	ldr	r4, [pc, #40]	; (8003970 <LoopForever+0x16>)
  movs r3, #0
 8003946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003948:	e001      	b.n	800394e <LoopFillZerobss>

0800394a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800394a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800394c:	3204      	adds	r2, #4

0800394e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800394e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003950:	d3fb      	bcc.n	800394a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003952:	f000 f83f 	bl	80039d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003956:	f7ff f8d9 	bl	8002b0c <main>

0800395a <LoopForever>:

LoopForever:
    b LoopForever
 800395a:	e7fe      	b.n	800395a <LoopForever>
  ldr   r0, =_estack
 800395c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003964:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8003968:	080053e4 	.word	0x080053e4
  ldr r2, =_sbss
 800396c:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8003970:	20000598 	.word	0x20000598

08003974 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003974:	e7fe      	b.n	8003974 <ADC1_IRQHandler>
	...

08003978 <__assert_func>:
 8003978:	b530      	push	{r4, r5, lr}
 800397a:	0014      	movs	r4, r2
 800397c:	001a      	movs	r2, r3
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <__assert_func+0x2c>)
 8003980:	0005      	movs	r5, r0
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b085      	sub	sp, #20
 8003986:	68d8      	ldr	r0, [r3, #12]
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <__assert_func+0x30>)
 800398a:	2c00      	cmp	r4, #0
 800398c:	d101      	bne.n	8003992 <__assert_func+0x1a>
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <__assert_func+0x34>)
 8003990:	001c      	movs	r4, r3
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	9100      	str	r1, [sp, #0]
 8003996:	002b      	movs	r3, r5
 8003998:	4905      	ldr	r1, [pc, #20]	; (80039b0 <__assert_func+0x38>)
 800399a:	9402      	str	r4, [sp, #8]
 800399c:	f000 f80a 	bl	80039b4 <fiprintf>
 80039a0:	f000 fc1e 	bl	80041e0 <abort>
 80039a4:	2000015c 	.word	0x2000015c
 80039a8:	08005307 	.word	0x08005307
 80039ac:	08005342 	.word	0x08005342
 80039b0:	08005314 	.word	0x08005314

080039b4 <fiprintf>:
 80039b4:	b40e      	push	{r1, r2, r3}
 80039b6:	b503      	push	{r0, r1, lr}
 80039b8:	0001      	movs	r1, r0
 80039ba:	ab03      	add	r3, sp, #12
 80039bc:	4804      	ldr	r0, [pc, #16]	; (80039d0 <fiprintf+0x1c>)
 80039be:	cb04      	ldmia	r3!, {r2}
 80039c0:	6800      	ldr	r0, [r0, #0]
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	f000 f862 	bl	8003a8c <_vfiprintf_r>
 80039c8:	b002      	add	sp, #8
 80039ca:	bc08      	pop	{r3}
 80039cc:	b003      	add	sp, #12
 80039ce:	4718      	bx	r3
 80039d0:	2000015c 	.word	0x2000015c

080039d4 <__libc_init_array>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	2600      	movs	r6, #0
 80039d8:	4d0c      	ldr	r5, [pc, #48]	; (8003a0c <__libc_init_array+0x38>)
 80039da:	4c0d      	ldr	r4, [pc, #52]	; (8003a10 <__libc_init_array+0x3c>)
 80039dc:	1b64      	subs	r4, r4, r5
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	42a6      	cmp	r6, r4
 80039e2:	d109      	bne.n	80039f8 <__libc_init_array+0x24>
 80039e4:	2600      	movs	r6, #0
 80039e6:	f001 fa13 	bl	8004e10 <_init>
 80039ea:	4d0a      	ldr	r5, [pc, #40]	; (8003a14 <__libc_init_array+0x40>)
 80039ec:	4c0a      	ldr	r4, [pc, #40]	; (8003a18 <__libc_init_array+0x44>)
 80039ee:	1b64      	subs	r4, r4, r5
 80039f0:	10a4      	asrs	r4, r4, #2
 80039f2:	42a6      	cmp	r6, r4
 80039f4:	d105      	bne.n	8003a02 <__libc_init_array+0x2e>
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	00b3      	lsls	r3, r6, #2
 80039fa:	58eb      	ldr	r3, [r5, r3]
 80039fc:	4798      	blx	r3
 80039fe:	3601      	adds	r6, #1
 8003a00:	e7ee      	b.n	80039e0 <__libc_init_array+0xc>
 8003a02:	00b3      	lsls	r3, r6, #2
 8003a04:	58eb      	ldr	r3, [r5, r3]
 8003a06:	4798      	blx	r3
 8003a08:	3601      	adds	r6, #1
 8003a0a:	e7f2      	b.n	80039f2 <__libc_init_array+0x1e>
 8003a0c:	080053dc 	.word	0x080053dc
 8003a10:	080053dc 	.word	0x080053dc
 8003a14:	080053dc 	.word	0x080053dc
 8003a18:	080053e0 	.word	0x080053e0

08003a1c <memcpy>:
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d100      	bne.n	8003a26 <memcpy+0xa>
 8003a24:	bd10      	pop	{r4, pc}
 8003a26:	5ccc      	ldrb	r4, [r1, r3]
 8003a28:	54c4      	strb	r4, [r0, r3]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	e7f8      	b.n	8003a20 <memcpy+0x4>

08003a2e <memset>:
 8003a2e:	0003      	movs	r3, r0
 8003a30:	1882      	adds	r2, r0, r2
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d100      	bne.n	8003a38 <memset+0xa>
 8003a36:	4770      	bx	lr
 8003a38:	7019      	strb	r1, [r3, #0]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	e7f9      	b.n	8003a32 <memset+0x4>

08003a3e <__sfputc_r>:
 8003a3e:	6893      	ldr	r3, [r2, #8]
 8003a40:	b510      	push	{r4, lr}
 8003a42:	3b01      	subs	r3, #1
 8003a44:	6093      	str	r3, [r2, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	da04      	bge.n	8003a54 <__sfputc_r+0x16>
 8003a4a:	6994      	ldr	r4, [r2, #24]
 8003a4c:	42a3      	cmp	r3, r4
 8003a4e:	db07      	blt.n	8003a60 <__sfputc_r+0x22>
 8003a50:	290a      	cmp	r1, #10
 8003a52:	d005      	beq.n	8003a60 <__sfputc_r+0x22>
 8003a54:	6813      	ldr	r3, [r2, #0]
 8003a56:	1c58      	adds	r0, r3, #1
 8003a58:	6010      	str	r0, [r2, #0]
 8003a5a:	7019      	strb	r1, [r3, #0]
 8003a5c:	0008      	movs	r0, r1
 8003a5e:	bd10      	pop	{r4, pc}
 8003a60:	f000 faf0 	bl	8004044 <__swbuf_r>
 8003a64:	0001      	movs	r1, r0
 8003a66:	e7f9      	b.n	8003a5c <__sfputc_r+0x1e>

08003a68 <__sfputs_r>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	0006      	movs	r6, r0
 8003a6c:	000f      	movs	r7, r1
 8003a6e:	0014      	movs	r4, r2
 8003a70:	18d5      	adds	r5, r2, r3
 8003a72:	42ac      	cmp	r4, r5
 8003a74:	d101      	bne.n	8003a7a <__sfputs_r+0x12>
 8003a76:	2000      	movs	r0, #0
 8003a78:	e007      	b.n	8003a8a <__sfputs_r+0x22>
 8003a7a:	7821      	ldrb	r1, [r4, #0]
 8003a7c:	003a      	movs	r2, r7
 8003a7e:	0030      	movs	r0, r6
 8003a80:	f7ff ffdd 	bl	8003a3e <__sfputc_r>
 8003a84:	3401      	adds	r4, #1
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	d1f3      	bne.n	8003a72 <__sfputs_r+0xa>
 8003a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a8c <_vfiprintf_r>:
 8003a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8e:	b0a1      	sub	sp, #132	; 0x84
 8003a90:	0006      	movs	r6, r0
 8003a92:	000c      	movs	r4, r1
 8003a94:	001f      	movs	r7, r3
 8003a96:	9203      	str	r2, [sp, #12]
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d004      	beq.n	8003aa6 <_vfiprintf_r+0x1a>
 8003a9c:	6983      	ldr	r3, [r0, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <_vfiprintf_r+0x1a>
 8003aa2:	f000 fcd3 	bl	800444c <__sinit>
 8003aa6:	4b8e      	ldr	r3, [pc, #568]	; (8003ce0 <_vfiprintf_r+0x254>)
 8003aa8:	429c      	cmp	r4, r3
 8003aaa:	d11c      	bne.n	8003ae6 <_vfiprintf_r+0x5a>
 8003aac:	6874      	ldr	r4, [r6, #4]
 8003aae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ab0:	07db      	lsls	r3, r3, #31
 8003ab2:	d405      	bmi.n	8003ac0 <_vfiprintf_r+0x34>
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	059b      	lsls	r3, r3, #22
 8003ab8:	d402      	bmi.n	8003ac0 <_vfiprintf_r+0x34>
 8003aba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003abc:	f000 fd67 	bl	800458e <__retarget_lock_acquire_recursive>
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	071b      	lsls	r3, r3, #28
 8003ac4:	d502      	bpl.n	8003acc <_vfiprintf_r+0x40>
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d11d      	bne.n	8003b08 <_vfiprintf_r+0x7c>
 8003acc:	0021      	movs	r1, r4
 8003ace:	0030      	movs	r0, r6
 8003ad0:	f000 fb0e 	bl	80040f0 <__swsetup_r>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d017      	beq.n	8003b08 <_vfiprintf_r+0x7c>
 8003ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ada:	07db      	lsls	r3, r3, #31
 8003adc:	d50d      	bpl.n	8003afa <_vfiprintf_r+0x6e>
 8003ade:	2001      	movs	r0, #1
 8003ae0:	4240      	negs	r0, r0
 8003ae2:	b021      	add	sp, #132	; 0x84
 8003ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae6:	4b7f      	ldr	r3, [pc, #508]	; (8003ce4 <_vfiprintf_r+0x258>)
 8003ae8:	429c      	cmp	r4, r3
 8003aea:	d101      	bne.n	8003af0 <_vfiprintf_r+0x64>
 8003aec:	68b4      	ldr	r4, [r6, #8]
 8003aee:	e7de      	b.n	8003aae <_vfiprintf_r+0x22>
 8003af0:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <_vfiprintf_r+0x25c>)
 8003af2:	429c      	cmp	r4, r3
 8003af4:	d1db      	bne.n	8003aae <_vfiprintf_r+0x22>
 8003af6:	68f4      	ldr	r4, [r6, #12]
 8003af8:	e7d9      	b.n	8003aae <_vfiprintf_r+0x22>
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	059b      	lsls	r3, r3, #22
 8003afe:	d4ee      	bmi.n	8003ade <_vfiprintf_r+0x52>
 8003b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b02:	f000 fd45 	bl	8004590 <__retarget_lock_release_recursive>
 8003b06:	e7ea      	b.n	8003ade <_vfiprintf_r+0x52>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	ad08      	add	r5, sp, #32
 8003b0c:	616b      	str	r3, [r5, #20]
 8003b0e:	3320      	adds	r3, #32
 8003b10:	766b      	strb	r3, [r5, #25]
 8003b12:	3310      	adds	r3, #16
 8003b14:	76ab      	strb	r3, [r5, #26]
 8003b16:	9707      	str	r7, [sp, #28]
 8003b18:	9f03      	ldr	r7, [sp, #12]
 8003b1a:	783b      	ldrb	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <_vfiprintf_r+0x98>
 8003b20:	2b25      	cmp	r3, #37	; 0x25
 8003b22:	d14e      	bne.n	8003bc2 <_vfiprintf_r+0x136>
 8003b24:	9b03      	ldr	r3, [sp, #12]
 8003b26:	1afb      	subs	r3, r7, r3
 8003b28:	9305      	str	r3, [sp, #20]
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	429f      	cmp	r7, r3
 8003b2e:	d00d      	beq.n	8003b4c <_vfiprintf_r+0xc0>
 8003b30:	9b05      	ldr	r3, [sp, #20]
 8003b32:	0021      	movs	r1, r4
 8003b34:	0030      	movs	r0, r6
 8003b36:	9a03      	ldr	r2, [sp, #12]
 8003b38:	f7ff ff96 	bl	8003a68 <__sfputs_r>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d100      	bne.n	8003b42 <_vfiprintf_r+0xb6>
 8003b40:	e0b5      	b.n	8003cae <_vfiprintf_r+0x222>
 8003b42:	696a      	ldr	r2, [r5, #20]
 8003b44:	9b05      	ldr	r3, [sp, #20]
 8003b46:	4694      	mov	ip, r2
 8003b48:	4463      	add	r3, ip
 8003b4a:	616b      	str	r3, [r5, #20]
 8003b4c:	783b      	ldrb	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d100      	bne.n	8003b54 <_vfiprintf_r+0xc8>
 8003b52:	e0ac      	b.n	8003cae <_vfiprintf_r+0x222>
 8003b54:	2201      	movs	r2, #1
 8003b56:	1c7b      	adds	r3, r7, #1
 8003b58:	9303      	str	r3, [sp, #12]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	4252      	negs	r2, r2
 8003b5e:	606a      	str	r2, [r5, #4]
 8003b60:	a904      	add	r1, sp, #16
 8003b62:	3254      	adds	r2, #84	; 0x54
 8003b64:	1852      	adds	r2, r2, r1
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	60eb      	str	r3, [r5, #12]
 8003b6a:	60ab      	str	r3, [r5, #8]
 8003b6c:	7013      	strb	r3, [r2, #0]
 8003b6e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003b70:	9b03      	ldr	r3, [sp, #12]
 8003b72:	2205      	movs	r2, #5
 8003b74:	7819      	ldrb	r1, [r3, #0]
 8003b76:	485d      	ldr	r0, [pc, #372]	; (8003cec <_vfiprintf_r+0x260>)
 8003b78:	f000 fd78 	bl	800466c <memchr>
 8003b7c:	9b03      	ldr	r3, [sp, #12]
 8003b7e:	1c5f      	adds	r7, r3, #1
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d120      	bne.n	8003bc6 <_vfiprintf_r+0x13a>
 8003b84:	682a      	ldr	r2, [r5, #0]
 8003b86:	06d3      	lsls	r3, r2, #27
 8003b88:	d504      	bpl.n	8003b94 <_vfiprintf_r+0x108>
 8003b8a:	2353      	movs	r3, #83	; 0x53
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	185b      	adds	r3, r3, r1
 8003b90:	2120      	movs	r1, #32
 8003b92:	7019      	strb	r1, [r3, #0]
 8003b94:	0713      	lsls	r3, r2, #28
 8003b96:	d504      	bpl.n	8003ba2 <_vfiprintf_r+0x116>
 8003b98:	2353      	movs	r3, #83	; 0x53
 8003b9a:	a904      	add	r1, sp, #16
 8003b9c:	185b      	adds	r3, r3, r1
 8003b9e:	212b      	movs	r1, #43	; 0x2b
 8003ba0:	7019      	strb	r1, [r3, #0]
 8003ba2:	9b03      	ldr	r3, [sp, #12]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ba8:	d016      	beq.n	8003bd8 <_vfiprintf_r+0x14c>
 8003baa:	2100      	movs	r1, #0
 8003bac:	68eb      	ldr	r3, [r5, #12]
 8003bae:	9f03      	ldr	r7, [sp, #12]
 8003bb0:	783a      	ldrb	r2, [r7, #0]
 8003bb2:	1c78      	adds	r0, r7, #1
 8003bb4:	3a30      	subs	r2, #48	; 0x30
 8003bb6:	4684      	mov	ip, r0
 8003bb8:	2a09      	cmp	r2, #9
 8003bba:	d94f      	bls.n	8003c5c <_vfiprintf_r+0x1d0>
 8003bbc:	2900      	cmp	r1, #0
 8003bbe:	d111      	bne.n	8003be4 <_vfiprintf_r+0x158>
 8003bc0:	e017      	b.n	8003bf2 <_vfiprintf_r+0x166>
 8003bc2:	3701      	adds	r7, #1
 8003bc4:	e7a9      	b.n	8003b1a <_vfiprintf_r+0x8e>
 8003bc6:	4b49      	ldr	r3, [pc, #292]	; (8003cec <_vfiprintf_r+0x260>)
 8003bc8:	682a      	ldr	r2, [r5, #0]
 8003bca:	1ac0      	subs	r0, r0, r3
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4083      	lsls	r3, r0
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	602b      	str	r3, [r5, #0]
 8003bd4:	9703      	str	r7, [sp, #12]
 8003bd6:	e7cb      	b.n	8003b70 <_vfiprintf_r+0xe4>
 8003bd8:	9b07      	ldr	r3, [sp, #28]
 8003bda:	1d19      	adds	r1, r3, #4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	9107      	str	r1, [sp, #28]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	db01      	blt.n	8003be8 <_vfiprintf_r+0x15c>
 8003be4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003be6:	e004      	b.n	8003bf2 <_vfiprintf_r+0x166>
 8003be8:	425b      	negs	r3, r3
 8003bea:	60eb      	str	r3, [r5, #12]
 8003bec:	2302      	movs	r3, #2
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	602b      	str	r3, [r5, #0]
 8003bf2:	783b      	ldrb	r3, [r7, #0]
 8003bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8003bf6:	d10a      	bne.n	8003c0e <_vfiprintf_r+0x182>
 8003bf8:	787b      	ldrb	r3, [r7, #1]
 8003bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfc:	d137      	bne.n	8003c6e <_vfiprintf_r+0x1e2>
 8003bfe:	9b07      	ldr	r3, [sp, #28]
 8003c00:	3702      	adds	r7, #2
 8003c02:	1d1a      	adds	r2, r3, #4
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	9207      	str	r2, [sp, #28]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db2d      	blt.n	8003c68 <_vfiprintf_r+0x1dc>
 8003c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c0e:	2203      	movs	r2, #3
 8003c10:	7839      	ldrb	r1, [r7, #0]
 8003c12:	4837      	ldr	r0, [pc, #220]	; (8003cf0 <_vfiprintf_r+0x264>)
 8003c14:	f000 fd2a 	bl	800466c <memchr>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d007      	beq.n	8003c2c <_vfiprintf_r+0x1a0>
 8003c1c:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <_vfiprintf_r+0x264>)
 8003c1e:	682a      	ldr	r2, [r5, #0]
 8003c20:	1ac0      	subs	r0, r0, r3
 8003c22:	2340      	movs	r3, #64	; 0x40
 8003c24:	4083      	lsls	r3, r0
 8003c26:	4313      	orrs	r3, r2
 8003c28:	3701      	adds	r7, #1
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	7839      	ldrb	r1, [r7, #0]
 8003c2e:	1c7b      	adds	r3, r7, #1
 8003c30:	2206      	movs	r2, #6
 8003c32:	4830      	ldr	r0, [pc, #192]	; (8003cf4 <_vfiprintf_r+0x268>)
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	7629      	strb	r1, [r5, #24]
 8003c38:	f000 fd18 	bl	800466c <memchr>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d045      	beq.n	8003ccc <_vfiprintf_r+0x240>
 8003c40:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <_vfiprintf_r+0x26c>)
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d127      	bne.n	8003c96 <_vfiprintf_r+0x20a>
 8003c46:	2207      	movs	r2, #7
 8003c48:	9b07      	ldr	r3, [sp, #28]
 8003c4a:	3307      	adds	r3, #7
 8003c4c:	4393      	bics	r3, r2
 8003c4e:	3308      	adds	r3, #8
 8003c50:	9307      	str	r3, [sp, #28]
 8003c52:	696b      	ldr	r3, [r5, #20]
 8003c54:	9a04      	ldr	r2, [sp, #16]
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	616b      	str	r3, [r5, #20]
 8003c5a:	e75d      	b.n	8003b18 <_vfiprintf_r+0x8c>
 8003c5c:	210a      	movs	r1, #10
 8003c5e:	434b      	muls	r3, r1
 8003c60:	4667      	mov	r7, ip
 8003c62:	189b      	adds	r3, r3, r2
 8003c64:	3909      	subs	r1, #9
 8003c66:	e7a3      	b.n	8003bb0 <_vfiprintf_r+0x124>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	425b      	negs	r3, r3
 8003c6c:	e7ce      	b.n	8003c0c <_vfiprintf_r+0x180>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	001a      	movs	r2, r3
 8003c72:	3701      	adds	r7, #1
 8003c74:	606b      	str	r3, [r5, #4]
 8003c76:	7839      	ldrb	r1, [r7, #0]
 8003c78:	1c78      	adds	r0, r7, #1
 8003c7a:	3930      	subs	r1, #48	; 0x30
 8003c7c:	4684      	mov	ip, r0
 8003c7e:	2909      	cmp	r1, #9
 8003c80:	d903      	bls.n	8003c8a <_vfiprintf_r+0x1fe>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0c3      	beq.n	8003c0e <_vfiprintf_r+0x182>
 8003c86:	9209      	str	r2, [sp, #36]	; 0x24
 8003c88:	e7c1      	b.n	8003c0e <_vfiprintf_r+0x182>
 8003c8a:	230a      	movs	r3, #10
 8003c8c:	435a      	muls	r2, r3
 8003c8e:	4667      	mov	r7, ip
 8003c90:	1852      	adds	r2, r2, r1
 8003c92:	3b09      	subs	r3, #9
 8003c94:	e7ef      	b.n	8003c76 <_vfiprintf_r+0x1ea>
 8003c96:	ab07      	add	r3, sp, #28
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	0022      	movs	r2, r4
 8003c9c:	0029      	movs	r1, r5
 8003c9e:	0030      	movs	r0, r6
 8003ca0:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <_vfiprintf_r+0x270>)
 8003ca2:	e000      	b.n	8003ca6 <_vfiprintf_r+0x21a>
 8003ca4:	bf00      	nop
 8003ca6:	9004      	str	r0, [sp, #16]
 8003ca8:	9b04      	ldr	r3, [sp, #16]
 8003caa:	3301      	adds	r3, #1
 8003cac:	d1d1      	bne.n	8003c52 <_vfiprintf_r+0x1c6>
 8003cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cb0:	07db      	lsls	r3, r3, #31
 8003cb2:	d405      	bmi.n	8003cc0 <_vfiprintf_r+0x234>
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	059b      	lsls	r3, r3, #22
 8003cb8:	d402      	bmi.n	8003cc0 <_vfiprintf_r+0x234>
 8003cba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cbc:	f000 fc68 	bl	8004590 <__retarget_lock_release_recursive>
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	065b      	lsls	r3, r3, #25
 8003cc4:	d500      	bpl.n	8003cc8 <_vfiprintf_r+0x23c>
 8003cc6:	e70a      	b.n	8003ade <_vfiprintf_r+0x52>
 8003cc8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003cca:	e70a      	b.n	8003ae2 <_vfiprintf_r+0x56>
 8003ccc:	ab07      	add	r3, sp, #28
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	0022      	movs	r2, r4
 8003cd2:	0029      	movs	r1, r5
 8003cd4:	0030      	movs	r0, r6
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <_vfiprintf_r+0x270>)
 8003cd8:	f000 f882 	bl	8003de0 <_printf_i>
 8003cdc:	e7e3      	b.n	8003ca6 <_vfiprintf_r+0x21a>
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	0800539c 	.word	0x0800539c
 8003ce4:	080053bc 	.word	0x080053bc
 8003ce8:	0800537c 	.word	0x0800537c
 8003cec:	08005348 	.word	0x08005348
 8003cf0:	0800534e 	.word	0x0800534e
 8003cf4:	08005352 	.word	0x08005352
 8003cf8:	00000000 	.word	0x00000000
 8003cfc:	08003a69 	.word	0x08003a69

08003d00 <_printf_common>:
 8003d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d02:	0015      	movs	r5, r2
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	688a      	ldr	r2, [r1, #8]
 8003d08:	690b      	ldr	r3, [r1, #16]
 8003d0a:	000c      	movs	r4, r1
 8003d0c:	9000      	str	r0, [sp, #0]
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	da00      	bge.n	8003d14 <_printf_common+0x14>
 8003d12:	0013      	movs	r3, r2
 8003d14:	0022      	movs	r2, r4
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	3243      	adds	r2, #67	; 0x43
 8003d1a:	7812      	ldrb	r2, [r2, #0]
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	d001      	beq.n	8003d24 <_printf_common+0x24>
 8003d20:	3301      	adds	r3, #1
 8003d22:	602b      	str	r3, [r5, #0]
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	069b      	lsls	r3, r3, #26
 8003d28:	d502      	bpl.n	8003d30 <_printf_common+0x30>
 8003d2a:	682b      	ldr	r3, [r5, #0]
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	6822      	ldr	r2, [r4, #0]
 8003d32:	2306      	movs	r3, #6
 8003d34:	0017      	movs	r7, r2
 8003d36:	401f      	ands	r7, r3
 8003d38:	421a      	tst	r2, r3
 8003d3a:	d027      	beq.n	8003d8c <_printf_common+0x8c>
 8003d3c:	0023      	movs	r3, r4
 8003d3e:	3343      	adds	r3, #67	; 0x43
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	1e5a      	subs	r2, r3, #1
 8003d44:	4193      	sbcs	r3, r2
 8003d46:	6822      	ldr	r2, [r4, #0]
 8003d48:	0692      	lsls	r2, r2, #26
 8003d4a:	d430      	bmi.n	8003dae <_printf_common+0xae>
 8003d4c:	0022      	movs	r2, r4
 8003d4e:	9901      	ldr	r1, [sp, #4]
 8003d50:	9800      	ldr	r0, [sp, #0]
 8003d52:	9e08      	ldr	r6, [sp, #32]
 8003d54:	3243      	adds	r2, #67	; 0x43
 8003d56:	47b0      	blx	r6
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	d025      	beq.n	8003da8 <_printf_common+0xa8>
 8003d5c:	2306      	movs	r3, #6
 8003d5e:	6820      	ldr	r0, [r4, #0]
 8003d60:	682a      	ldr	r2, [r5, #0]
 8003d62:	68e1      	ldr	r1, [r4, #12]
 8003d64:	2500      	movs	r5, #0
 8003d66:	4003      	ands	r3, r0
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d103      	bne.n	8003d74 <_printf_common+0x74>
 8003d6c:	1a8d      	subs	r5, r1, r2
 8003d6e:	43eb      	mvns	r3, r5
 8003d70:	17db      	asrs	r3, r3, #31
 8003d72:	401d      	ands	r5, r3
 8003d74:	68a3      	ldr	r3, [r4, #8]
 8003d76:	6922      	ldr	r2, [r4, #16]
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	dd01      	ble.n	8003d80 <_printf_common+0x80>
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	18ed      	adds	r5, r5, r3
 8003d80:	2700      	movs	r7, #0
 8003d82:	42bd      	cmp	r5, r7
 8003d84:	d120      	bne.n	8003dc8 <_printf_common+0xc8>
 8003d86:	2000      	movs	r0, #0
 8003d88:	e010      	b.n	8003dac <_printf_common+0xac>
 8003d8a:	3701      	adds	r7, #1
 8003d8c:	68e3      	ldr	r3, [r4, #12]
 8003d8e:	682a      	ldr	r2, [r5, #0]
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	42bb      	cmp	r3, r7
 8003d94:	ddd2      	ble.n	8003d3c <_printf_common+0x3c>
 8003d96:	0022      	movs	r2, r4
 8003d98:	2301      	movs	r3, #1
 8003d9a:	9901      	ldr	r1, [sp, #4]
 8003d9c:	9800      	ldr	r0, [sp, #0]
 8003d9e:	9e08      	ldr	r6, [sp, #32]
 8003da0:	3219      	adds	r2, #25
 8003da2:	47b0      	blx	r6
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d1f0      	bne.n	8003d8a <_printf_common+0x8a>
 8003da8:	2001      	movs	r0, #1
 8003daa:	4240      	negs	r0, r0
 8003dac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dae:	2030      	movs	r0, #48	; 0x30
 8003db0:	18e1      	adds	r1, r4, r3
 8003db2:	3143      	adds	r1, #67	; 0x43
 8003db4:	7008      	strb	r0, [r1, #0]
 8003db6:	0021      	movs	r1, r4
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	3145      	adds	r1, #69	; 0x45
 8003dbc:	7809      	ldrb	r1, [r1, #0]
 8003dbe:	18a2      	adds	r2, r4, r2
 8003dc0:	3243      	adds	r2, #67	; 0x43
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	7011      	strb	r1, [r2, #0]
 8003dc6:	e7c1      	b.n	8003d4c <_printf_common+0x4c>
 8003dc8:	0022      	movs	r2, r4
 8003dca:	2301      	movs	r3, #1
 8003dcc:	9901      	ldr	r1, [sp, #4]
 8003dce:	9800      	ldr	r0, [sp, #0]
 8003dd0:	9e08      	ldr	r6, [sp, #32]
 8003dd2:	321a      	adds	r2, #26
 8003dd4:	47b0      	blx	r6
 8003dd6:	1c43      	adds	r3, r0, #1
 8003dd8:	d0e6      	beq.n	8003da8 <_printf_common+0xa8>
 8003dda:	3701      	adds	r7, #1
 8003ddc:	e7d1      	b.n	8003d82 <_printf_common+0x82>
	...

08003de0 <_printf_i>:
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	b08b      	sub	sp, #44	; 0x2c
 8003de4:	9206      	str	r2, [sp, #24]
 8003de6:	000a      	movs	r2, r1
 8003de8:	3243      	adds	r2, #67	; 0x43
 8003dea:	9307      	str	r3, [sp, #28]
 8003dec:	9005      	str	r0, [sp, #20]
 8003dee:	9204      	str	r2, [sp, #16]
 8003df0:	7e0a      	ldrb	r2, [r1, #24]
 8003df2:	000c      	movs	r4, r1
 8003df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003df6:	2a78      	cmp	r2, #120	; 0x78
 8003df8:	d806      	bhi.n	8003e08 <_printf_i+0x28>
 8003dfa:	2a62      	cmp	r2, #98	; 0x62
 8003dfc:	d808      	bhi.n	8003e10 <_printf_i+0x30>
 8003dfe:	2a00      	cmp	r2, #0
 8003e00:	d100      	bne.n	8003e04 <_printf_i+0x24>
 8003e02:	e0c0      	b.n	8003f86 <_printf_i+0x1a6>
 8003e04:	2a58      	cmp	r2, #88	; 0x58
 8003e06:	d052      	beq.n	8003eae <_printf_i+0xce>
 8003e08:	0026      	movs	r6, r4
 8003e0a:	3642      	adds	r6, #66	; 0x42
 8003e0c:	7032      	strb	r2, [r6, #0]
 8003e0e:	e022      	b.n	8003e56 <_printf_i+0x76>
 8003e10:	0010      	movs	r0, r2
 8003e12:	3863      	subs	r0, #99	; 0x63
 8003e14:	2815      	cmp	r0, #21
 8003e16:	d8f7      	bhi.n	8003e08 <_printf_i+0x28>
 8003e18:	f7fc f976 	bl	8000108 <__gnu_thumb1_case_shi>
 8003e1c:	001f0016 	.word	0x001f0016
 8003e20:	fff6fff6 	.word	0xfff6fff6
 8003e24:	fff6fff6 	.word	0xfff6fff6
 8003e28:	fff6001f 	.word	0xfff6001f
 8003e2c:	fff6fff6 	.word	0xfff6fff6
 8003e30:	00a8fff6 	.word	0x00a8fff6
 8003e34:	009a0036 	.word	0x009a0036
 8003e38:	fff6fff6 	.word	0xfff6fff6
 8003e3c:	fff600b9 	.word	0xfff600b9
 8003e40:	fff60036 	.word	0xfff60036
 8003e44:	009efff6 	.word	0x009efff6
 8003e48:	0026      	movs	r6, r4
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	3642      	adds	r6, #66	; 0x42
 8003e4e:	1d11      	adds	r1, r2, #4
 8003e50:	6019      	str	r1, [r3, #0]
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	7033      	strb	r3, [r6, #0]
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0a7      	b.n	8003faa <_printf_i+0x1ca>
 8003e5a:	6808      	ldr	r0, [r1, #0]
 8003e5c:	6819      	ldr	r1, [r3, #0]
 8003e5e:	1d0a      	adds	r2, r1, #4
 8003e60:	0605      	lsls	r5, r0, #24
 8003e62:	d50b      	bpl.n	8003e7c <_printf_i+0x9c>
 8003e64:	680d      	ldr	r5, [r1, #0]
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	2d00      	cmp	r5, #0
 8003e6a:	da03      	bge.n	8003e74 <_printf_i+0x94>
 8003e6c:	232d      	movs	r3, #45	; 0x2d
 8003e6e:	9a04      	ldr	r2, [sp, #16]
 8003e70:	426d      	negs	r5, r5
 8003e72:	7013      	strb	r3, [r2, #0]
 8003e74:	4b61      	ldr	r3, [pc, #388]	; (8003ffc <_printf_i+0x21c>)
 8003e76:	270a      	movs	r7, #10
 8003e78:	9303      	str	r3, [sp, #12]
 8003e7a:	e032      	b.n	8003ee2 <_printf_i+0x102>
 8003e7c:	680d      	ldr	r5, [r1, #0]
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	0641      	lsls	r1, r0, #25
 8003e82:	d5f1      	bpl.n	8003e68 <_printf_i+0x88>
 8003e84:	b22d      	sxth	r5, r5
 8003e86:	e7ef      	b.n	8003e68 <_printf_i+0x88>
 8003e88:	680d      	ldr	r5, [r1, #0]
 8003e8a:	6819      	ldr	r1, [r3, #0]
 8003e8c:	1d08      	adds	r0, r1, #4
 8003e8e:	6018      	str	r0, [r3, #0]
 8003e90:	062e      	lsls	r6, r5, #24
 8003e92:	d501      	bpl.n	8003e98 <_printf_i+0xb8>
 8003e94:	680d      	ldr	r5, [r1, #0]
 8003e96:	e003      	b.n	8003ea0 <_printf_i+0xc0>
 8003e98:	066d      	lsls	r5, r5, #25
 8003e9a:	d5fb      	bpl.n	8003e94 <_printf_i+0xb4>
 8003e9c:	680d      	ldr	r5, [r1, #0]
 8003e9e:	b2ad      	uxth	r5, r5
 8003ea0:	4b56      	ldr	r3, [pc, #344]	; (8003ffc <_printf_i+0x21c>)
 8003ea2:	270a      	movs	r7, #10
 8003ea4:	9303      	str	r3, [sp, #12]
 8003ea6:	2a6f      	cmp	r2, #111	; 0x6f
 8003ea8:	d117      	bne.n	8003eda <_printf_i+0xfa>
 8003eaa:	2708      	movs	r7, #8
 8003eac:	e015      	b.n	8003eda <_printf_i+0xfa>
 8003eae:	3145      	adds	r1, #69	; 0x45
 8003eb0:	700a      	strb	r2, [r1, #0]
 8003eb2:	4a52      	ldr	r2, [pc, #328]	; (8003ffc <_printf_i+0x21c>)
 8003eb4:	9203      	str	r2, [sp, #12]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	6821      	ldr	r1, [r4, #0]
 8003eba:	ca20      	ldmia	r2!, {r5}
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	0608      	lsls	r0, r1, #24
 8003ec0:	d550      	bpl.n	8003f64 <_printf_i+0x184>
 8003ec2:	07cb      	lsls	r3, r1, #31
 8003ec4:	d502      	bpl.n	8003ecc <_printf_i+0xec>
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	4319      	orrs	r1, r3
 8003eca:	6021      	str	r1, [r4, #0]
 8003ecc:	2710      	movs	r7, #16
 8003ece:	2d00      	cmp	r5, #0
 8003ed0:	d103      	bne.n	8003eda <_printf_i+0xfa>
 8003ed2:	2320      	movs	r3, #32
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	439a      	bics	r2, r3
 8003ed8:	6022      	str	r2, [r4, #0]
 8003eda:	0023      	movs	r3, r4
 8003edc:	2200      	movs	r2, #0
 8003ede:	3343      	adds	r3, #67	; 0x43
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	6863      	ldr	r3, [r4, #4]
 8003ee4:	60a3      	str	r3, [r4, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	db03      	blt.n	8003ef2 <_printf_i+0x112>
 8003eea:	2204      	movs	r2, #4
 8003eec:	6821      	ldr	r1, [r4, #0]
 8003eee:	4391      	bics	r1, r2
 8003ef0:	6021      	str	r1, [r4, #0]
 8003ef2:	2d00      	cmp	r5, #0
 8003ef4:	d102      	bne.n	8003efc <_printf_i+0x11c>
 8003ef6:	9e04      	ldr	r6, [sp, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00c      	beq.n	8003f16 <_printf_i+0x136>
 8003efc:	9e04      	ldr	r6, [sp, #16]
 8003efe:	0028      	movs	r0, r5
 8003f00:	0039      	movs	r1, r7
 8003f02:	f7fc f991 	bl	8000228 <__aeabi_uidivmod>
 8003f06:	9b03      	ldr	r3, [sp, #12]
 8003f08:	3e01      	subs	r6, #1
 8003f0a:	5c5b      	ldrb	r3, [r3, r1]
 8003f0c:	7033      	strb	r3, [r6, #0]
 8003f0e:	002b      	movs	r3, r5
 8003f10:	0005      	movs	r5, r0
 8003f12:	429f      	cmp	r7, r3
 8003f14:	d9f3      	bls.n	8003efe <_printf_i+0x11e>
 8003f16:	2f08      	cmp	r7, #8
 8003f18:	d109      	bne.n	8003f2e <_printf_i+0x14e>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	07db      	lsls	r3, r3, #31
 8003f1e:	d506      	bpl.n	8003f2e <_printf_i+0x14e>
 8003f20:	6863      	ldr	r3, [r4, #4]
 8003f22:	6922      	ldr	r2, [r4, #16]
 8003f24:	4293      	cmp	r3, r2
 8003f26:	dc02      	bgt.n	8003f2e <_printf_i+0x14e>
 8003f28:	2330      	movs	r3, #48	; 0x30
 8003f2a:	3e01      	subs	r6, #1
 8003f2c:	7033      	strb	r3, [r6, #0]
 8003f2e:	9b04      	ldr	r3, [sp, #16]
 8003f30:	1b9b      	subs	r3, r3, r6
 8003f32:	6123      	str	r3, [r4, #16]
 8003f34:	9b07      	ldr	r3, [sp, #28]
 8003f36:	0021      	movs	r1, r4
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	9805      	ldr	r0, [sp, #20]
 8003f3c:	9b06      	ldr	r3, [sp, #24]
 8003f3e:	aa09      	add	r2, sp, #36	; 0x24
 8003f40:	f7ff fede 	bl	8003d00 <_printf_common>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d135      	bne.n	8003fb4 <_printf_i+0x1d4>
 8003f48:	2001      	movs	r0, #1
 8003f4a:	4240      	negs	r0, r0
 8003f4c:	b00b      	add	sp, #44	; 0x2c
 8003f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f50:	2220      	movs	r2, #32
 8003f52:	6809      	ldr	r1, [r1, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	6022      	str	r2, [r4, #0]
 8003f58:	0022      	movs	r2, r4
 8003f5a:	2178      	movs	r1, #120	; 0x78
 8003f5c:	3245      	adds	r2, #69	; 0x45
 8003f5e:	7011      	strb	r1, [r2, #0]
 8003f60:	4a27      	ldr	r2, [pc, #156]	; (8004000 <_printf_i+0x220>)
 8003f62:	e7a7      	b.n	8003eb4 <_printf_i+0xd4>
 8003f64:	0648      	lsls	r0, r1, #25
 8003f66:	d5ac      	bpl.n	8003ec2 <_printf_i+0xe2>
 8003f68:	b2ad      	uxth	r5, r5
 8003f6a:	e7aa      	b.n	8003ec2 <_printf_i+0xe2>
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	680d      	ldr	r5, [r1, #0]
 8003f70:	1d10      	adds	r0, r2, #4
 8003f72:	6949      	ldr	r1, [r1, #20]
 8003f74:	6018      	str	r0, [r3, #0]
 8003f76:	6813      	ldr	r3, [r2, #0]
 8003f78:	062e      	lsls	r6, r5, #24
 8003f7a:	d501      	bpl.n	8003f80 <_printf_i+0x1a0>
 8003f7c:	6019      	str	r1, [r3, #0]
 8003f7e:	e002      	b.n	8003f86 <_printf_i+0x1a6>
 8003f80:	066d      	lsls	r5, r5, #25
 8003f82:	d5fb      	bpl.n	8003f7c <_printf_i+0x19c>
 8003f84:	8019      	strh	r1, [r3, #0]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9e04      	ldr	r6, [sp, #16]
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	e7d2      	b.n	8003f34 <_printf_i+0x154>
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	1d11      	adds	r1, r2, #4
 8003f92:	6019      	str	r1, [r3, #0]
 8003f94:	6816      	ldr	r6, [r2, #0]
 8003f96:	2100      	movs	r1, #0
 8003f98:	0030      	movs	r0, r6
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	f000 fb66 	bl	800466c <memchr>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d001      	beq.n	8003fa8 <_printf_i+0x1c8>
 8003fa4:	1b80      	subs	r0, r0, r6
 8003fa6:	6060      	str	r0, [r4, #4]
 8003fa8:	6863      	ldr	r3, [r4, #4]
 8003faa:	6123      	str	r3, [r4, #16]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9a04      	ldr	r2, [sp, #16]
 8003fb0:	7013      	strb	r3, [r2, #0]
 8003fb2:	e7bf      	b.n	8003f34 <_printf_i+0x154>
 8003fb4:	6923      	ldr	r3, [r4, #16]
 8003fb6:	0032      	movs	r2, r6
 8003fb8:	9906      	ldr	r1, [sp, #24]
 8003fba:	9805      	ldr	r0, [sp, #20]
 8003fbc:	9d07      	ldr	r5, [sp, #28]
 8003fbe:	47a8      	blx	r5
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d0c1      	beq.n	8003f48 <_printf_i+0x168>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	079b      	lsls	r3, r3, #30
 8003fc8:	d415      	bmi.n	8003ff6 <_printf_i+0x216>
 8003fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fcc:	68e0      	ldr	r0, [r4, #12]
 8003fce:	4298      	cmp	r0, r3
 8003fd0:	dabc      	bge.n	8003f4c <_printf_i+0x16c>
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	e7ba      	b.n	8003f4c <_printf_i+0x16c>
 8003fd6:	0022      	movs	r2, r4
 8003fd8:	2301      	movs	r3, #1
 8003fda:	9906      	ldr	r1, [sp, #24]
 8003fdc:	9805      	ldr	r0, [sp, #20]
 8003fde:	9e07      	ldr	r6, [sp, #28]
 8003fe0:	3219      	adds	r2, #25
 8003fe2:	47b0      	blx	r6
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d0af      	beq.n	8003f48 <_printf_i+0x168>
 8003fe8:	3501      	adds	r5, #1
 8003fea:	68e3      	ldr	r3, [r4, #12]
 8003fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	42ab      	cmp	r3, r5
 8003ff2:	dcf0      	bgt.n	8003fd6 <_printf_i+0x1f6>
 8003ff4:	e7e9      	b.n	8003fca <_printf_i+0x1ea>
 8003ff6:	2500      	movs	r5, #0
 8003ff8:	e7f7      	b.n	8003fea <_printf_i+0x20a>
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	08005359 	.word	0x08005359
 8004000:	0800536a 	.word	0x0800536a

08004004 <siprintf>:
 8004004:	b40e      	push	{r1, r2, r3}
 8004006:	b500      	push	{lr}
 8004008:	490b      	ldr	r1, [pc, #44]	; (8004038 <siprintf+0x34>)
 800400a:	b09c      	sub	sp, #112	; 0x70
 800400c:	ab1d      	add	r3, sp, #116	; 0x74
 800400e:	9002      	str	r0, [sp, #8]
 8004010:	9006      	str	r0, [sp, #24]
 8004012:	9107      	str	r1, [sp, #28]
 8004014:	9104      	str	r1, [sp, #16]
 8004016:	4809      	ldr	r0, [pc, #36]	; (800403c <siprintf+0x38>)
 8004018:	4909      	ldr	r1, [pc, #36]	; (8004040 <siprintf+0x3c>)
 800401a:	cb04      	ldmia	r3!, {r2}
 800401c:	9105      	str	r1, [sp, #20]
 800401e:	6800      	ldr	r0, [r0, #0]
 8004020:	a902      	add	r1, sp, #8
 8004022:	9301      	str	r3, [sp, #4]
 8004024:	f000 fc70 	bl	8004908 <_svfiprintf_r>
 8004028:	2300      	movs	r3, #0
 800402a:	9a02      	ldr	r2, [sp, #8]
 800402c:	7013      	strb	r3, [r2, #0]
 800402e:	b01c      	add	sp, #112	; 0x70
 8004030:	bc08      	pop	{r3}
 8004032:	b003      	add	sp, #12
 8004034:	4718      	bx	r3
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	7fffffff 	.word	0x7fffffff
 800403c:	2000015c 	.word	0x2000015c
 8004040:	ffff0208 	.word	0xffff0208

08004044 <__swbuf_r>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	0005      	movs	r5, r0
 8004048:	000e      	movs	r6, r1
 800404a:	0014      	movs	r4, r2
 800404c:	2800      	cmp	r0, #0
 800404e:	d004      	beq.n	800405a <__swbuf_r+0x16>
 8004050:	6983      	ldr	r3, [r0, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <__swbuf_r+0x16>
 8004056:	f000 f9f9 	bl	800444c <__sinit>
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <__swbuf_r+0xa0>)
 800405c:	429c      	cmp	r4, r3
 800405e:	d12e      	bne.n	80040be <__swbuf_r+0x7a>
 8004060:	686c      	ldr	r4, [r5, #4]
 8004062:	69a3      	ldr	r3, [r4, #24]
 8004064:	60a3      	str	r3, [r4, #8]
 8004066:	89a3      	ldrh	r3, [r4, #12]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	d532      	bpl.n	80040d2 <__swbuf_r+0x8e>
 800406c:	6923      	ldr	r3, [r4, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d02f      	beq.n	80040d2 <__swbuf_r+0x8e>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	6922      	ldr	r2, [r4, #16]
 8004076:	b2f7      	uxtb	r7, r6
 8004078:	1a98      	subs	r0, r3, r2
 800407a:	6963      	ldr	r3, [r4, #20]
 800407c:	b2f6      	uxtb	r6, r6
 800407e:	4283      	cmp	r3, r0
 8004080:	dc05      	bgt.n	800408e <__swbuf_r+0x4a>
 8004082:	0021      	movs	r1, r4
 8004084:	0028      	movs	r0, r5
 8004086:	f000 f93f 	bl	8004308 <_fflush_r>
 800408a:	2800      	cmp	r0, #0
 800408c:	d127      	bne.n	80040de <__swbuf_r+0x9a>
 800408e:	68a3      	ldr	r3, [r4, #8]
 8004090:	3001      	adds	r0, #1
 8004092:	3b01      	subs	r3, #1
 8004094:	60a3      	str	r3, [r4, #8]
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	6022      	str	r2, [r4, #0]
 800409c:	701f      	strb	r7, [r3, #0]
 800409e:	6963      	ldr	r3, [r4, #20]
 80040a0:	4283      	cmp	r3, r0
 80040a2:	d004      	beq.n	80040ae <__swbuf_r+0x6a>
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	07db      	lsls	r3, r3, #31
 80040a8:	d507      	bpl.n	80040ba <__swbuf_r+0x76>
 80040aa:	2e0a      	cmp	r6, #10
 80040ac:	d105      	bne.n	80040ba <__swbuf_r+0x76>
 80040ae:	0021      	movs	r1, r4
 80040b0:	0028      	movs	r0, r5
 80040b2:	f000 f929 	bl	8004308 <_fflush_r>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d111      	bne.n	80040de <__swbuf_r+0x9a>
 80040ba:	0030      	movs	r0, r6
 80040bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <__swbuf_r+0xa4>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	d101      	bne.n	80040c8 <__swbuf_r+0x84>
 80040c4:	68ac      	ldr	r4, [r5, #8]
 80040c6:	e7cc      	b.n	8004062 <__swbuf_r+0x1e>
 80040c8:	4b08      	ldr	r3, [pc, #32]	; (80040ec <__swbuf_r+0xa8>)
 80040ca:	429c      	cmp	r4, r3
 80040cc:	d1c9      	bne.n	8004062 <__swbuf_r+0x1e>
 80040ce:	68ec      	ldr	r4, [r5, #12]
 80040d0:	e7c7      	b.n	8004062 <__swbuf_r+0x1e>
 80040d2:	0021      	movs	r1, r4
 80040d4:	0028      	movs	r0, r5
 80040d6:	f000 f80b 	bl	80040f0 <__swsetup_r>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d0c9      	beq.n	8004072 <__swbuf_r+0x2e>
 80040de:	2601      	movs	r6, #1
 80040e0:	4276      	negs	r6, r6
 80040e2:	e7ea      	b.n	80040ba <__swbuf_r+0x76>
 80040e4:	0800539c 	.word	0x0800539c
 80040e8:	080053bc 	.word	0x080053bc
 80040ec:	0800537c 	.word	0x0800537c

080040f0 <__swsetup_r>:
 80040f0:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <__swsetup_r+0xe0>)
 80040f2:	b570      	push	{r4, r5, r6, lr}
 80040f4:	681d      	ldr	r5, [r3, #0]
 80040f6:	0006      	movs	r6, r0
 80040f8:	000c      	movs	r4, r1
 80040fa:	2d00      	cmp	r5, #0
 80040fc:	d005      	beq.n	800410a <__swsetup_r+0x1a>
 80040fe:	69ab      	ldr	r3, [r5, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <__swsetup_r+0x1a>
 8004104:	0028      	movs	r0, r5
 8004106:	f000 f9a1 	bl	800444c <__sinit>
 800410a:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <__swsetup_r+0xe4>)
 800410c:	429c      	cmp	r4, r3
 800410e:	d10f      	bne.n	8004130 <__swsetup_r+0x40>
 8004110:	686c      	ldr	r4, [r5, #4]
 8004112:	230c      	movs	r3, #12
 8004114:	5ee2      	ldrsh	r2, [r4, r3]
 8004116:	b293      	uxth	r3, r2
 8004118:	0711      	lsls	r1, r2, #28
 800411a:	d42d      	bmi.n	8004178 <__swsetup_r+0x88>
 800411c:	06d9      	lsls	r1, r3, #27
 800411e:	d411      	bmi.n	8004144 <__swsetup_r+0x54>
 8004120:	2309      	movs	r3, #9
 8004122:	2001      	movs	r0, #1
 8004124:	6033      	str	r3, [r6, #0]
 8004126:	3337      	adds	r3, #55	; 0x37
 8004128:	4313      	orrs	r3, r2
 800412a:	81a3      	strh	r3, [r4, #12]
 800412c:	4240      	negs	r0, r0
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <__swsetup_r+0xe8>)
 8004132:	429c      	cmp	r4, r3
 8004134:	d101      	bne.n	800413a <__swsetup_r+0x4a>
 8004136:	68ac      	ldr	r4, [r5, #8]
 8004138:	e7eb      	b.n	8004112 <__swsetup_r+0x22>
 800413a:	4b28      	ldr	r3, [pc, #160]	; (80041dc <__swsetup_r+0xec>)
 800413c:	429c      	cmp	r4, r3
 800413e:	d1e8      	bne.n	8004112 <__swsetup_r+0x22>
 8004140:	68ec      	ldr	r4, [r5, #12]
 8004142:	e7e6      	b.n	8004112 <__swsetup_r+0x22>
 8004144:	075b      	lsls	r3, r3, #29
 8004146:	d513      	bpl.n	8004170 <__swsetup_r+0x80>
 8004148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800414a:	2900      	cmp	r1, #0
 800414c:	d008      	beq.n	8004160 <__swsetup_r+0x70>
 800414e:	0023      	movs	r3, r4
 8004150:	3344      	adds	r3, #68	; 0x44
 8004152:	4299      	cmp	r1, r3
 8004154:	d002      	beq.n	800415c <__swsetup_r+0x6c>
 8004156:	0030      	movs	r0, r6
 8004158:	f000 faa6 	bl	80046a8 <_free_r>
 800415c:	2300      	movs	r3, #0
 800415e:	6363      	str	r3, [r4, #52]	; 0x34
 8004160:	2224      	movs	r2, #36	; 0x24
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	4393      	bics	r3, r2
 8004166:	81a3      	strh	r3, [r4, #12]
 8004168:	2300      	movs	r3, #0
 800416a:	6063      	str	r3, [r4, #4]
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	6023      	str	r3, [r4, #0]
 8004170:	2308      	movs	r3, #8
 8004172:	89a2      	ldrh	r2, [r4, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	81a3      	strh	r3, [r4, #12]
 8004178:	6923      	ldr	r3, [r4, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10b      	bne.n	8004196 <__swsetup_r+0xa6>
 800417e:	21a0      	movs	r1, #160	; 0xa0
 8004180:	2280      	movs	r2, #128	; 0x80
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	0089      	lsls	r1, r1, #2
 8004186:	0092      	lsls	r2, r2, #2
 8004188:	400b      	ands	r3, r1
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <__swsetup_r+0xa6>
 800418e:	0021      	movs	r1, r4
 8004190:	0030      	movs	r0, r6
 8004192:	f000 fa27 	bl	80045e4 <__smakebuf_r>
 8004196:	220c      	movs	r2, #12
 8004198:	5ea3      	ldrsh	r3, [r4, r2]
 800419a:	2001      	movs	r0, #1
 800419c:	001a      	movs	r2, r3
 800419e:	b299      	uxth	r1, r3
 80041a0:	4002      	ands	r2, r0
 80041a2:	4203      	tst	r3, r0
 80041a4:	d00f      	beq.n	80041c6 <__swsetup_r+0xd6>
 80041a6:	2200      	movs	r2, #0
 80041a8:	60a2      	str	r2, [r4, #8]
 80041aa:	6962      	ldr	r2, [r4, #20]
 80041ac:	4252      	negs	r2, r2
 80041ae:	61a2      	str	r2, [r4, #24]
 80041b0:	2000      	movs	r0, #0
 80041b2:	6922      	ldr	r2, [r4, #16]
 80041b4:	4282      	cmp	r2, r0
 80041b6:	d1ba      	bne.n	800412e <__swsetup_r+0x3e>
 80041b8:	060a      	lsls	r2, r1, #24
 80041ba:	d5b8      	bpl.n	800412e <__swsetup_r+0x3e>
 80041bc:	2240      	movs	r2, #64	; 0x40
 80041be:	4313      	orrs	r3, r2
 80041c0:	81a3      	strh	r3, [r4, #12]
 80041c2:	3801      	subs	r0, #1
 80041c4:	e7b3      	b.n	800412e <__swsetup_r+0x3e>
 80041c6:	0788      	lsls	r0, r1, #30
 80041c8:	d400      	bmi.n	80041cc <__swsetup_r+0xdc>
 80041ca:	6962      	ldr	r2, [r4, #20]
 80041cc:	60a2      	str	r2, [r4, #8]
 80041ce:	e7ef      	b.n	80041b0 <__swsetup_r+0xc0>
 80041d0:	2000015c 	.word	0x2000015c
 80041d4:	0800539c 	.word	0x0800539c
 80041d8:	080053bc 	.word	0x080053bc
 80041dc:	0800537c 	.word	0x0800537c

080041e0 <abort>:
 80041e0:	2006      	movs	r0, #6
 80041e2:	b510      	push	{r4, lr}
 80041e4:	f000 fccc 	bl	8004b80 <raise>
 80041e8:	2001      	movs	r0, #1
 80041ea:	f000 fe0f 	bl	8004e0c <_exit>
	...

080041f0 <__sflush_r>:
 80041f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041f2:	898b      	ldrh	r3, [r1, #12]
 80041f4:	0005      	movs	r5, r0
 80041f6:	000c      	movs	r4, r1
 80041f8:	071a      	lsls	r2, r3, #28
 80041fa:	d45f      	bmi.n	80042bc <__sflush_r+0xcc>
 80041fc:	684a      	ldr	r2, [r1, #4]
 80041fe:	2a00      	cmp	r2, #0
 8004200:	dc04      	bgt.n	800420c <__sflush_r+0x1c>
 8004202:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004204:	2a00      	cmp	r2, #0
 8004206:	dc01      	bgt.n	800420c <__sflush_r+0x1c>
 8004208:	2000      	movs	r0, #0
 800420a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800420c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800420e:	2f00      	cmp	r7, #0
 8004210:	d0fa      	beq.n	8004208 <__sflush_r+0x18>
 8004212:	2200      	movs	r2, #0
 8004214:	2180      	movs	r1, #128	; 0x80
 8004216:	682e      	ldr	r6, [r5, #0]
 8004218:	602a      	str	r2, [r5, #0]
 800421a:	001a      	movs	r2, r3
 800421c:	0149      	lsls	r1, r1, #5
 800421e:	400a      	ands	r2, r1
 8004220:	420b      	tst	r3, r1
 8004222:	d034      	beq.n	800428e <__sflush_r+0x9e>
 8004224:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	075b      	lsls	r3, r3, #29
 800422a:	d506      	bpl.n	800423a <__sflush_r+0x4a>
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	1ac0      	subs	r0, r0, r3
 8004230:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <__sflush_r+0x4a>
 8004236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004238:	1ac0      	subs	r0, r0, r3
 800423a:	0002      	movs	r2, r0
 800423c:	6a21      	ldr	r1, [r4, #32]
 800423e:	2300      	movs	r3, #0
 8004240:	0028      	movs	r0, r5
 8004242:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004244:	47b8      	blx	r7
 8004246:	89a1      	ldrh	r1, [r4, #12]
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d106      	bne.n	800425a <__sflush_r+0x6a>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	2b1d      	cmp	r3, #29
 8004250:	d831      	bhi.n	80042b6 <__sflush_r+0xc6>
 8004252:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <__sflush_r+0x114>)
 8004254:	40da      	lsrs	r2, r3
 8004256:	07d3      	lsls	r3, r2, #31
 8004258:	d52d      	bpl.n	80042b6 <__sflush_r+0xc6>
 800425a:	2300      	movs	r3, #0
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	04cb      	lsls	r3, r1, #19
 8004264:	d505      	bpl.n	8004272 <__sflush_r+0x82>
 8004266:	1c43      	adds	r3, r0, #1
 8004268:	d102      	bne.n	8004270 <__sflush_r+0x80>
 800426a:	682b      	ldr	r3, [r5, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d100      	bne.n	8004272 <__sflush_r+0x82>
 8004270:	6560      	str	r0, [r4, #84]	; 0x54
 8004272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004274:	602e      	str	r6, [r5, #0]
 8004276:	2900      	cmp	r1, #0
 8004278:	d0c6      	beq.n	8004208 <__sflush_r+0x18>
 800427a:	0023      	movs	r3, r4
 800427c:	3344      	adds	r3, #68	; 0x44
 800427e:	4299      	cmp	r1, r3
 8004280:	d002      	beq.n	8004288 <__sflush_r+0x98>
 8004282:	0028      	movs	r0, r5
 8004284:	f000 fa10 	bl	80046a8 <_free_r>
 8004288:	2000      	movs	r0, #0
 800428a:	6360      	str	r0, [r4, #52]	; 0x34
 800428c:	e7bd      	b.n	800420a <__sflush_r+0x1a>
 800428e:	2301      	movs	r3, #1
 8004290:	0028      	movs	r0, r5
 8004292:	6a21      	ldr	r1, [r4, #32]
 8004294:	47b8      	blx	r7
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	d1c5      	bne.n	8004226 <__sflush_r+0x36>
 800429a:	682b      	ldr	r3, [r5, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0c2      	beq.n	8004226 <__sflush_r+0x36>
 80042a0:	2b1d      	cmp	r3, #29
 80042a2:	d001      	beq.n	80042a8 <__sflush_r+0xb8>
 80042a4:	2b16      	cmp	r3, #22
 80042a6:	d101      	bne.n	80042ac <__sflush_r+0xbc>
 80042a8:	602e      	str	r6, [r5, #0]
 80042aa:	e7ad      	b.n	8004208 <__sflush_r+0x18>
 80042ac:	2340      	movs	r3, #64	; 0x40
 80042ae:	89a2      	ldrh	r2, [r4, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	e7a9      	b.n	800420a <__sflush_r+0x1a>
 80042b6:	2340      	movs	r3, #64	; 0x40
 80042b8:	430b      	orrs	r3, r1
 80042ba:	e7fa      	b.n	80042b2 <__sflush_r+0xc2>
 80042bc:	690f      	ldr	r7, [r1, #16]
 80042be:	2f00      	cmp	r7, #0
 80042c0:	d0a2      	beq.n	8004208 <__sflush_r+0x18>
 80042c2:	680a      	ldr	r2, [r1, #0]
 80042c4:	600f      	str	r7, [r1, #0]
 80042c6:	1bd2      	subs	r2, r2, r7
 80042c8:	9201      	str	r2, [sp, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	079b      	lsls	r3, r3, #30
 80042ce:	d100      	bne.n	80042d2 <__sflush_r+0xe2>
 80042d0:	694a      	ldr	r2, [r1, #20]
 80042d2:	60a2      	str	r2, [r4, #8]
 80042d4:	9b01      	ldr	r3, [sp, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	dc00      	bgt.n	80042dc <__sflush_r+0xec>
 80042da:	e795      	b.n	8004208 <__sflush_r+0x18>
 80042dc:	003a      	movs	r2, r7
 80042de:	0028      	movs	r0, r5
 80042e0:	9b01      	ldr	r3, [sp, #4]
 80042e2:	6a21      	ldr	r1, [r4, #32]
 80042e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042e6:	47b0      	blx	r6
 80042e8:	2800      	cmp	r0, #0
 80042ea:	dc06      	bgt.n	80042fa <__sflush_r+0x10a>
 80042ec:	2340      	movs	r3, #64	; 0x40
 80042ee:	2001      	movs	r0, #1
 80042f0:	89a2      	ldrh	r2, [r4, #12]
 80042f2:	4240      	negs	r0, r0
 80042f4:	4313      	orrs	r3, r2
 80042f6:	81a3      	strh	r3, [r4, #12]
 80042f8:	e787      	b.n	800420a <__sflush_r+0x1a>
 80042fa:	9b01      	ldr	r3, [sp, #4]
 80042fc:	183f      	adds	r7, r7, r0
 80042fe:	1a1b      	subs	r3, r3, r0
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	e7e7      	b.n	80042d4 <__sflush_r+0xe4>
 8004304:	20400001 	.word	0x20400001

08004308 <_fflush_r>:
 8004308:	690b      	ldr	r3, [r1, #16]
 800430a:	b570      	push	{r4, r5, r6, lr}
 800430c:	0005      	movs	r5, r0
 800430e:	000c      	movs	r4, r1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <_fflush_r+0x12>
 8004314:	2500      	movs	r5, #0
 8004316:	0028      	movs	r0, r5
 8004318:	bd70      	pop	{r4, r5, r6, pc}
 800431a:	2800      	cmp	r0, #0
 800431c:	d004      	beq.n	8004328 <_fflush_r+0x20>
 800431e:	6983      	ldr	r3, [r0, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <_fflush_r+0x20>
 8004324:	f000 f892 	bl	800444c <__sinit>
 8004328:	4b14      	ldr	r3, [pc, #80]	; (800437c <_fflush_r+0x74>)
 800432a:	429c      	cmp	r4, r3
 800432c:	d11b      	bne.n	8004366 <_fflush_r+0x5e>
 800432e:	686c      	ldr	r4, [r5, #4]
 8004330:	220c      	movs	r2, #12
 8004332:	5ea3      	ldrsh	r3, [r4, r2]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0ed      	beq.n	8004314 <_fflush_r+0xc>
 8004338:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800433a:	07d2      	lsls	r2, r2, #31
 800433c:	d404      	bmi.n	8004348 <_fflush_r+0x40>
 800433e:	059b      	lsls	r3, r3, #22
 8004340:	d402      	bmi.n	8004348 <_fflush_r+0x40>
 8004342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004344:	f000 f923 	bl	800458e <__retarget_lock_acquire_recursive>
 8004348:	0028      	movs	r0, r5
 800434a:	0021      	movs	r1, r4
 800434c:	f7ff ff50 	bl	80041f0 <__sflush_r>
 8004350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004352:	0005      	movs	r5, r0
 8004354:	07db      	lsls	r3, r3, #31
 8004356:	d4de      	bmi.n	8004316 <_fflush_r+0xe>
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	059b      	lsls	r3, r3, #22
 800435c:	d4db      	bmi.n	8004316 <_fflush_r+0xe>
 800435e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004360:	f000 f916 	bl	8004590 <__retarget_lock_release_recursive>
 8004364:	e7d7      	b.n	8004316 <_fflush_r+0xe>
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <_fflush_r+0x78>)
 8004368:	429c      	cmp	r4, r3
 800436a:	d101      	bne.n	8004370 <_fflush_r+0x68>
 800436c:	68ac      	ldr	r4, [r5, #8]
 800436e:	e7df      	b.n	8004330 <_fflush_r+0x28>
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <_fflush_r+0x7c>)
 8004372:	429c      	cmp	r4, r3
 8004374:	d1dc      	bne.n	8004330 <_fflush_r+0x28>
 8004376:	68ec      	ldr	r4, [r5, #12]
 8004378:	e7da      	b.n	8004330 <_fflush_r+0x28>
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	0800539c 	.word	0x0800539c
 8004380:	080053bc 	.word	0x080053bc
 8004384:	0800537c 	.word	0x0800537c

08004388 <std>:
 8004388:	2300      	movs	r3, #0
 800438a:	b510      	push	{r4, lr}
 800438c:	0004      	movs	r4, r0
 800438e:	6003      	str	r3, [r0, #0]
 8004390:	6043      	str	r3, [r0, #4]
 8004392:	6083      	str	r3, [r0, #8]
 8004394:	8181      	strh	r1, [r0, #12]
 8004396:	6643      	str	r3, [r0, #100]	; 0x64
 8004398:	0019      	movs	r1, r3
 800439a:	81c2      	strh	r2, [r0, #14]
 800439c:	6103      	str	r3, [r0, #16]
 800439e:	6143      	str	r3, [r0, #20]
 80043a0:	6183      	str	r3, [r0, #24]
 80043a2:	2208      	movs	r2, #8
 80043a4:	305c      	adds	r0, #92	; 0x5c
 80043a6:	f7ff fb42 	bl	8003a2e <memset>
 80043aa:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <std+0x38>)
 80043ac:	6263      	str	r3, [r4, #36]	; 0x24
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <std+0x3c>)
 80043b0:	6224      	str	r4, [r4, #32]
 80043b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <std+0x40>)
 80043b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <std+0x44>)
 80043ba:	6323      	str	r3, [r4, #48]	; 0x30
 80043bc:	bd10      	pop	{r4, pc}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	08004bc1 	.word	0x08004bc1
 80043c4:	08004be9 	.word	0x08004be9
 80043c8:	08004c21 	.word	0x08004c21
 80043cc:	08004c4d 	.word	0x08004c4d

080043d0 <_cleanup_r>:
 80043d0:	b510      	push	{r4, lr}
 80043d2:	4902      	ldr	r1, [pc, #8]	; (80043dc <_cleanup_r+0xc>)
 80043d4:	f000 f8ba 	bl	800454c <_fwalk_reent>
 80043d8:	bd10      	pop	{r4, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	08004309 	.word	0x08004309

080043e0 <__sfmoreglue>:
 80043e0:	b570      	push	{r4, r5, r6, lr}
 80043e2:	2568      	movs	r5, #104	; 0x68
 80043e4:	1e4a      	subs	r2, r1, #1
 80043e6:	4355      	muls	r5, r2
 80043e8:	000e      	movs	r6, r1
 80043ea:	0029      	movs	r1, r5
 80043ec:	3174      	adds	r1, #116	; 0x74
 80043ee:	f000 f9a5 	bl	800473c <_malloc_r>
 80043f2:	1e04      	subs	r4, r0, #0
 80043f4:	d008      	beq.n	8004408 <__sfmoreglue+0x28>
 80043f6:	2100      	movs	r1, #0
 80043f8:	002a      	movs	r2, r5
 80043fa:	6001      	str	r1, [r0, #0]
 80043fc:	6046      	str	r6, [r0, #4]
 80043fe:	300c      	adds	r0, #12
 8004400:	60a0      	str	r0, [r4, #8]
 8004402:	3268      	adds	r2, #104	; 0x68
 8004404:	f7ff fb13 	bl	8003a2e <memset>
 8004408:	0020      	movs	r0, r4
 800440a:	bd70      	pop	{r4, r5, r6, pc}

0800440c <__sfp_lock_acquire>:
 800440c:	b510      	push	{r4, lr}
 800440e:	4802      	ldr	r0, [pc, #8]	; (8004418 <__sfp_lock_acquire+0xc>)
 8004410:	f000 f8bd 	bl	800458e <__retarget_lock_acquire_recursive>
 8004414:	bd10      	pop	{r4, pc}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	20000590 	.word	0x20000590

0800441c <__sfp_lock_release>:
 800441c:	b510      	push	{r4, lr}
 800441e:	4802      	ldr	r0, [pc, #8]	; (8004428 <__sfp_lock_release+0xc>)
 8004420:	f000 f8b6 	bl	8004590 <__retarget_lock_release_recursive>
 8004424:	bd10      	pop	{r4, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	20000590 	.word	0x20000590

0800442c <__sinit_lock_acquire>:
 800442c:	b510      	push	{r4, lr}
 800442e:	4802      	ldr	r0, [pc, #8]	; (8004438 <__sinit_lock_acquire+0xc>)
 8004430:	f000 f8ad 	bl	800458e <__retarget_lock_acquire_recursive>
 8004434:	bd10      	pop	{r4, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	2000058b 	.word	0x2000058b

0800443c <__sinit_lock_release>:
 800443c:	b510      	push	{r4, lr}
 800443e:	4802      	ldr	r0, [pc, #8]	; (8004448 <__sinit_lock_release+0xc>)
 8004440:	f000 f8a6 	bl	8004590 <__retarget_lock_release_recursive>
 8004444:	bd10      	pop	{r4, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	2000058b 	.word	0x2000058b

0800444c <__sinit>:
 800444c:	b513      	push	{r0, r1, r4, lr}
 800444e:	0004      	movs	r4, r0
 8004450:	f7ff ffec 	bl	800442c <__sinit_lock_acquire>
 8004454:	69a3      	ldr	r3, [r4, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <__sinit+0x14>
 800445a:	f7ff ffef 	bl	800443c <__sinit_lock_release>
 800445e:	bd13      	pop	{r0, r1, r4, pc}
 8004460:	64a3      	str	r3, [r4, #72]	; 0x48
 8004462:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004464:	6523      	str	r3, [r4, #80]	; 0x50
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <__sinit+0x68>)
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <__sinit+0x6c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	62a2      	str	r2, [r4, #40]	; 0x28
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	42a3      	cmp	r3, r4
 8004472:	d101      	bne.n	8004478 <__sinit+0x2c>
 8004474:	2301      	movs	r3, #1
 8004476:	61a3      	str	r3, [r4, #24]
 8004478:	0020      	movs	r0, r4
 800447a:	f000 f81f 	bl	80044bc <__sfp>
 800447e:	6060      	str	r0, [r4, #4]
 8004480:	0020      	movs	r0, r4
 8004482:	f000 f81b 	bl	80044bc <__sfp>
 8004486:	60a0      	str	r0, [r4, #8]
 8004488:	0020      	movs	r0, r4
 800448a:	f000 f817 	bl	80044bc <__sfp>
 800448e:	2200      	movs	r2, #0
 8004490:	2104      	movs	r1, #4
 8004492:	60e0      	str	r0, [r4, #12]
 8004494:	6860      	ldr	r0, [r4, #4]
 8004496:	f7ff ff77 	bl	8004388 <std>
 800449a:	2201      	movs	r2, #1
 800449c:	2109      	movs	r1, #9
 800449e:	68a0      	ldr	r0, [r4, #8]
 80044a0:	f7ff ff72 	bl	8004388 <std>
 80044a4:	2202      	movs	r2, #2
 80044a6:	2112      	movs	r1, #18
 80044a8:	68e0      	ldr	r0, [r4, #12]
 80044aa:	f7ff ff6d 	bl	8004388 <std>
 80044ae:	2301      	movs	r3, #1
 80044b0:	61a3      	str	r3, [r4, #24]
 80044b2:	e7d2      	b.n	800445a <__sinit+0xe>
 80044b4:	08005344 	.word	0x08005344
 80044b8:	080043d1 	.word	0x080043d1

080044bc <__sfp>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	0007      	movs	r7, r0
 80044c0:	f7ff ffa4 	bl	800440c <__sfp_lock_acquire>
 80044c4:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <__sfp+0x88>)
 80044c6:	681e      	ldr	r6, [r3, #0]
 80044c8:	69b3      	ldr	r3, [r6, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <__sfp+0x18>
 80044ce:	0030      	movs	r0, r6
 80044d0:	f7ff ffbc 	bl	800444c <__sinit>
 80044d4:	3648      	adds	r6, #72	; 0x48
 80044d6:	68b4      	ldr	r4, [r6, #8]
 80044d8:	6873      	ldr	r3, [r6, #4]
 80044da:	3b01      	subs	r3, #1
 80044dc:	d504      	bpl.n	80044e8 <__sfp+0x2c>
 80044de:	6833      	ldr	r3, [r6, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d022      	beq.n	800452a <__sfp+0x6e>
 80044e4:	6836      	ldr	r6, [r6, #0]
 80044e6:	e7f6      	b.n	80044d6 <__sfp+0x1a>
 80044e8:	220c      	movs	r2, #12
 80044ea:	5ea5      	ldrsh	r5, [r4, r2]
 80044ec:	2d00      	cmp	r5, #0
 80044ee:	d11a      	bne.n	8004526 <__sfp+0x6a>
 80044f0:	0020      	movs	r0, r4
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <__sfp+0x8c>)
 80044f4:	3058      	adds	r0, #88	; 0x58
 80044f6:	60e3      	str	r3, [r4, #12]
 80044f8:	6665      	str	r5, [r4, #100]	; 0x64
 80044fa:	f000 f847 	bl	800458c <__retarget_lock_init_recursive>
 80044fe:	f7ff ff8d 	bl	800441c <__sfp_lock_release>
 8004502:	0020      	movs	r0, r4
 8004504:	2208      	movs	r2, #8
 8004506:	0029      	movs	r1, r5
 8004508:	6025      	str	r5, [r4, #0]
 800450a:	60a5      	str	r5, [r4, #8]
 800450c:	6065      	str	r5, [r4, #4]
 800450e:	6125      	str	r5, [r4, #16]
 8004510:	6165      	str	r5, [r4, #20]
 8004512:	61a5      	str	r5, [r4, #24]
 8004514:	305c      	adds	r0, #92	; 0x5c
 8004516:	f7ff fa8a 	bl	8003a2e <memset>
 800451a:	6365      	str	r5, [r4, #52]	; 0x34
 800451c:	63a5      	str	r5, [r4, #56]	; 0x38
 800451e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004520:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004522:	0020      	movs	r0, r4
 8004524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004526:	3468      	adds	r4, #104	; 0x68
 8004528:	e7d7      	b.n	80044da <__sfp+0x1e>
 800452a:	2104      	movs	r1, #4
 800452c:	0038      	movs	r0, r7
 800452e:	f7ff ff57 	bl	80043e0 <__sfmoreglue>
 8004532:	1e04      	subs	r4, r0, #0
 8004534:	6030      	str	r0, [r6, #0]
 8004536:	d1d5      	bne.n	80044e4 <__sfp+0x28>
 8004538:	f7ff ff70 	bl	800441c <__sfp_lock_release>
 800453c:	230c      	movs	r3, #12
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	e7ef      	b.n	8004522 <__sfp+0x66>
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	08005344 	.word	0x08005344
 8004548:	ffff0001 	.word	0xffff0001

0800454c <_fwalk_reent>:
 800454c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800454e:	0004      	movs	r4, r0
 8004550:	0006      	movs	r6, r0
 8004552:	2700      	movs	r7, #0
 8004554:	9101      	str	r1, [sp, #4]
 8004556:	3448      	adds	r4, #72	; 0x48
 8004558:	6863      	ldr	r3, [r4, #4]
 800455a:	68a5      	ldr	r5, [r4, #8]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	9b00      	ldr	r3, [sp, #0]
 8004560:	3b01      	subs	r3, #1
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	d504      	bpl.n	8004570 <_fwalk_reent+0x24>
 8004566:	6824      	ldr	r4, [r4, #0]
 8004568:	2c00      	cmp	r4, #0
 800456a:	d1f5      	bne.n	8004558 <_fwalk_reent+0xc>
 800456c:	0038      	movs	r0, r7
 800456e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004570:	89ab      	ldrh	r3, [r5, #12]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d908      	bls.n	8004588 <_fwalk_reent+0x3c>
 8004576:	220e      	movs	r2, #14
 8004578:	5eab      	ldrsh	r3, [r5, r2]
 800457a:	3301      	adds	r3, #1
 800457c:	d004      	beq.n	8004588 <_fwalk_reent+0x3c>
 800457e:	0029      	movs	r1, r5
 8004580:	0030      	movs	r0, r6
 8004582:	9b01      	ldr	r3, [sp, #4]
 8004584:	4798      	blx	r3
 8004586:	4307      	orrs	r7, r0
 8004588:	3568      	adds	r5, #104	; 0x68
 800458a:	e7e8      	b.n	800455e <_fwalk_reent+0x12>

0800458c <__retarget_lock_init_recursive>:
 800458c:	4770      	bx	lr

0800458e <__retarget_lock_acquire_recursive>:
 800458e:	4770      	bx	lr

08004590 <__retarget_lock_release_recursive>:
 8004590:	4770      	bx	lr
	...

08004594 <__swhatbuf_r>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	000e      	movs	r6, r1
 8004598:	001d      	movs	r5, r3
 800459a:	230e      	movs	r3, #14
 800459c:	5ec9      	ldrsh	r1, [r1, r3]
 800459e:	0014      	movs	r4, r2
 80045a0:	b096      	sub	sp, #88	; 0x58
 80045a2:	2900      	cmp	r1, #0
 80045a4:	da07      	bge.n	80045b6 <__swhatbuf_r+0x22>
 80045a6:	2300      	movs	r3, #0
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	89b3      	ldrh	r3, [r6, #12]
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	d411      	bmi.n	80045d4 <__swhatbuf_r+0x40>
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	e00f      	b.n	80045d6 <__swhatbuf_r+0x42>
 80045b6:	466a      	mov	r2, sp
 80045b8:	f000 fb74 	bl	8004ca4 <_fstat_r>
 80045bc:	2800      	cmp	r0, #0
 80045be:	dbf2      	blt.n	80045a6 <__swhatbuf_r+0x12>
 80045c0:	23f0      	movs	r3, #240	; 0xf0
 80045c2:	9901      	ldr	r1, [sp, #4]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	4019      	ands	r1, r3
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <__swhatbuf_r+0x4c>)
 80045ca:	18c9      	adds	r1, r1, r3
 80045cc:	424b      	negs	r3, r1
 80045ce:	4159      	adcs	r1, r3
 80045d0:	6029      	str	r1, [r5, #0]
 80045d2:	e7ed      	b.n	80045b0 <__swhatbuf_r+0x1c>
 80045d4:	2340      	movs	r3, #64	; 0x40
 80045d6:	2000      	movs	r0, #0
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	b016      	add	sp, #88	; 0x58
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	ffffe000 	.word	0xffffe000

080045e4 <__smakebuf_r>:
 80045e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045e6:	2602      	movs	r6, #2
 80045e8:	898b      	ldrh	r3, [r1, #12]
 80045ea:	0005      	movs	r5, r0
 80045ec:	000c      	movs	r4, r1
 80045ee:	4233      	tst	r3, r6
 80045f0:	d006      	beq.n	8004600 <__smakebuf_r+0x1c>
 80045f2:	0023      	movs	r3, r4
 80045f4:	3347      	adds	r3, #71	; 0x47
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	6123      	str	r3, [r4, #16]
 80045fa:	2301      	movs	r3, #1
 80045fc:	6163      	str	r3, [r4, #20]
 80045fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004600:	466a      	mov	r2, sp
 8004602:	ab01      	add	r3, sp, #4
 8004604:	f7ff ffc6 	bl	8004594 <__swhatbuf_r>
 8004608:	9900      	ldr	r1, [sp, #0]
 800460a:	0007      	movs	r7, r0
 800460c:	0028      	movs	r0, r5
 800460e:	f000 f895 	bl	800473c <_malloc_r>
 8004612:	2800      	cmp	r0, #0
 8004614:	d108      	bne.n	8004628 <__smakebuf_r+0x44>
 8004616:	220c      	movs	r2, #12
 8004618:	5ea3      	ldrsh	r3, [r4, r2]
 800461a:	059a      	lsls	r2, r3, #22
 800461c:	d4ef      	bmi.n	80045fe <__smakebuf_r+0x1a>
 800461e:	2203      	movs	r2, #3
 8004620:	4393      	bics	r3, r2
 8004622:	431e      	orrs	r6, r3
 8004624:	81a6      	strh	r6, [r4, #12]
 8004626:	e7e4      	b.n	80045f2 <__smakebuf_r+0xe>
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <__smakebuf_r+0x84>)
 800462a:	62ab      	str	r3, [r5, #40]	; 0x28
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	89a2      	ldrh	r2, [r4, #12]
 8004630:	6020      	str	r0, [r4, #0]
 8004632:	4313      	orrs	r3, r2
 8004634:	81a3      	strh	r3, [r4, #12]
 8004636:	9b00      	ldr	r3, [sp, #0]
 8004638:	6120      	str	r0, [r4, #16]
 800463a:	6163      	str	r3, [r4, #20]
 800463c:	9b01      	ldr	r3, [sp, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <__smakebuf_r+0x7a>
 8004642:	0028      	movs	r0, r5
 8004644:	230e      	movs	r3, #14
 8004646:	5ee1      	ldrsh	r1, [r4, r3]
 8004648:	f000 fb3e 	bl	8004cc8 <_isatty_r>
 800464c:	2800      	cmp	r0, #0
 800464e:	d006      	beq.n	800465e <__smakebuf_r+0x7a>
 8004650:	2203      	movs	r2, #3
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	4393      	bics	r3, r2
 8004656:	001a      	movs	r2, r3
 8004658:	2301      	movs	r3, #1
 800465a:	4313      	orrs	r3, r2
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	89a0      	ldrh	r0, [r4, #12]
 8004660:	4307      	orrs	r7, r0
 8004662:	81a7      	strh	r7, [r4, #12]
 8004664:	e7cb      	b.n	80045fe <__smakebuf_r+0x1a>
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	080043d1 	.word	0x080043d1

0800466c <memchr>:
 800466c:	b2c9      	uxtb	r1, r1
 800466e:	1882      	adds	r2, r0, r2
 8004670:	4290      	cmp	r0, r2
 8004672:	d101      	bne.n	8004678 <memchr+0xc>
 8004674:	2000      	movs	r0, #0
 8004676:	4770      	bx	lr
 8004678:	7803      	ldrb	r3, [r0, #0]
 800467a:	428b      	cmp	r3, r1
 800467c:	d0fb      	beq.n	8004676 <memchr+0xa>
 800467e:	3001      	adds	r0, #1
 8004680:	e7f6      	b.n	8004670 <memchr+0x4>

08004682 <memmove>:
 8004682:	b510      	push	{r4, lr}
 8004684:	4288      	cmp	r0, r1
 8004686:	d902      	bls.n	800468e <memmove+0xc>
 8004688:	188b      	adds	r3, r1, r2
 800468a:	4298      	cmp	r0, r3
 800468c:	d303      	bcc.n	8004696 <memmove+0x14>
 800468e:	2300      	movs	r3, #0
 8004690:	e007      	b.n	80046a2 <memmove+0x20>
 8004692:	5c8b      	ldrb	r3, [r1, r2]
 8004694:	5483      	strb	r3, [r0, r2]
 8004696:	3a01      	subs	r2, #1
 8004698:	d2fb      	bcs.n	8004692 <memmove+0x10>
 800469a:	bd10      	pop	{r4, pc}
 800469c:	5ccc      	ldrb	r4, [r1, r3]
 800469e:	54c4      	strb	r4, [r0, r3]
 80046a0:	3301      	adds	r3, #1
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d1fa      	bne.n	800469c <memmove+0x1a>
 80046a6:	e7f8      	b.n	800469a <memmove+0x18>

080046a8 <_free_r>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	0005      	movs	r5, r0
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d010      	beq.n	80046d2 <_free_r+0x2a>
 80046b0:	1f0c      	subs	r4, r1, #4
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da00      	bge.n	80046ba <_free_r+0x12>
 80046b8:	18e4      	adds	r4, r4, r3
 80046ba:	0028      	movs	r0, r5
 80046bc:	f000 fb2a 	bl	8004d14 <__malloc_lock>
 80046c0:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <_free_r+0x90>)
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <_free_r+0x2c>
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	6014      	str	r4, [r2, #0]
 80046cc:	0028      	movs	r0, r5
 80046ce:	f000 fb29 	bl	8004d24 <__malloc_unlock>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	d908      	bls.n	80046ea <_free_r+0x42>
 80046d8:	6821      	ldr	r1, [r4, #0]
 80046da:	1860      	adds	r0, r4, r1
 80046dc:	4283      	cmp	r3, r0
 80046de:	d1f3      	bne.n	80046c8 <_free_r+0x20>
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	1841      	adds	r1, r0, r1
 80046e6:	6021      	str	r1, [r4, #0]
 80046e8:	e7ee      	b.n	80046c8 <_free_r+0x20>
 80046ea:	001a      	movs	r2, r3
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <_free_r+0x4e>
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	d9f9      	bls.n	80046ea <_free_r+0x42>
 80046f6:	6811      	ldr	r1, [r2, #0]
 80046f8:	1850      	adds	r0, r2, r1
 80046fa:	42a0      	cmp	r0, r4
 80046fc:	d10b      	bne.n	8004716 <_free_r+0x6e>
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	1809      	adds	r1, r1, r0
 8004702:	1850      	adds	r0, r2, r1
 8004704:	6011      	str	r1, [r2, #0]
 8004706:	4283      	cmp	r3, r0
 8004708:	d1e0      	bne.n	80046cc <_free_r+0x24>
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	1841      	adds	r1, r0, r1
 8004710:	6011      	str	r1, [r2, #0]
 8004712:	6053      	str	r3, [r2, #4]
 8004714:	e7da      	b.n	80046cc <_free_r+0x24>
 8004716:	42a0      	cmp	r0, r4
 8004718:	d902      	bls.n	8004720 <_free_r+0x78>
 800471a:	230c      	movs	r3, #12
 800471c:	602b      	str	r3, [r5, #0]
 800471e:	e7d5      	b.n	80046cc <_free_r+0x24>
 8004720:	6821      	ldr	r1, [r4, #0]
 8004722:	1860      	adds	r0, r4, r1
 8004724:	4283      	cmp	r3, r0
 8004726:	d103      	bne.n	8004730 <_free_r+0x88>
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	1841      	adds	r1, r0, r1
 800472e:	6021      	str	r1, [r4, #0]
 8004730:	6063      	str	r3, [r4, #4]
 8004732:	6054      	str	r4, [r2, #4]
 8004734:	e7ca      	b.n	80046cc <_free_r+0x24>
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	20000254 	.word	0x20000254

0800473c <_malloc_r>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	2303      	movs	r3, #3
 8004740:	1ccd      	adds	r5, r1, #3
 8004742:	439d      	bics	r5, r3
 8004744:	3508      	adds	r5, #8
 8004746:	0006      	movs	r6, r0
 8004748:	2d0c      	cmp	r5, #12
 800474a:	d21f      	bcs.n	800478c <_malloc_r+0x50>
 800474c:	250c      	movs	r5, #12
 800474e:	42a9      	cmp	r1, r5
 8004750:	d81e      	bhi.n	8004790 <_malloc_r+0x54>
 8004752:	0030      	movs	r0, r6
 8004754:	f000 fade 	bl	8004d14 <__malloc_lock>
 8004758:	4925      	ldr	r1, [pc, #148]	; (80047f0 <_malloc_r+0xb4>)
 800475a:	680a      	ldr	r2, [r1, #0]
 800475c:	0014      	movs	r4, r2
 800475e:	2c00      	cmp	r4, #0
 8004760:	d11a      	bne.n	8004798 <_malloc_r+0x5c>
 8004762:	4f24      	ldr	r7, [pc, #144]	; (80047f4 <_malloc_r+0xb8>)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d104      	bne.n	8004774 <_malloc_r+0x38>
 800476a:	0021      	movs	r1, r4
 800476c:	0030      	movs	r0, r6
 800476e:	f000 f9cb 	bl	8004b08 <_sbrk_r>
 8004772:	6038      	str	r0, [r7, #0]
 8004774:	0029      	movs	r1, r5
 8004776:	0030      	movs	r0, r6
 8004778:	f000 f9c6 	bl	8004b08 <_sbrk_r>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d12b      	bne.n	80047d8 <_malloc_r+0x9c>
 8004780:	230c      	movs	r3, #12
 8004782:	0030      	movs	r0, r6
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	f000 facd 	bl	8004d24 <__malloc_unlock>
 800478a:	e003      	b.n	8004794 <_malloc_r+0x58>
 800478c:	2d00      	cmp	r5, #0
 800478e:	dade      	bge.n	800474e <_malloc_r+0x12>
 8004790:	230c      	movs	r3, #12
 8004792:	6033      	str	r3, [r6, #0]
 8004794:	2000      	movs	r0, #0
 8004796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	1b5b      	subs	r3, r3, r5
 800479c:	d419      	bmi.n	80047d2 <_malloc_r+0x96>
 800479e:	2b0b      	cmp	r3, #11
 80047a0:	d903      	bls.n	80047aa <_malloc_r+0x6e>
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	18e4      	adds	r4, r4, r3
 80047a6:	6025      	str	r5, [r4, #0]
 80047a8:	e003      	b.n	80047b2 <_malloc_r+0x76>
 80047aa:	6863      	ldr	r3, [r4, #4]
 80047ac:	42a2      	cmp	r2, r4
 80047ae:	d10e      	bne.n	80047ce <_malloc_r+0x92>
 80047b0:	600b      	str	r3, [r1, #0]
 80047b2:	0030      	movs	r0, r6
 80047b4:	f000 fab6 	bl	8004d24 <__malloc_unlock>
 80047b8:	0020      	movs	r0, r4
 80047ba:	2207      	movs	r2, #7
 80047bc:	300b      	adds	r0, #11
 80047be:	1d23      	adds	r3, r4, #4
 80047c0:	4390      	bics	r0, r2
 80047c2:	1ac2      	subs	r2, r0, r3
 80047c4:	4298      	cmp	r0, r3
 80047c6:	d0e6      	beq.n	8004796 <_malloc_r+0x5a>
 80047c8:	1a1b      	subs	r3, r3, r0
 80047ca:	50a3      	str	r3, [r4, r2]
 80047cc:	e7e3      	b.n	8004796 <_malloc_r+0x5a>
 80047ce:	6053      	str	r3, [r2, #4]
 80047d0:	e7ef      	b.n	80047b2 <_malloc_r+0x76>
 80047d2:	0022      	movs	r2, r4
 80047d4:	6864      	ldr	r4, [r4, #4]
 80047d6:	e7c2      	b.n	800475e <_malloc_r+0x22>
 80047d8:	2303      	movs	r3, #3
 80047da:	1cc4      	adds	r4, r0, #3
 80047dc:	439c      	bics	r4, r3
 80047de:	42a0      	cmp	r0, r4
 80047e0:	d0e1      	beq.n	80047a6 <_malloc_r+0x6a>
 80047e2:	1a21      	subs	r1, r4, r0
 80047e4:	0030      	movs	r0, r6
 80047e6:	f000 f98f 	bl	8004b08 <_sbrk_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	d1db      	bne.n	80047a6 <_malloc_r+0x6a>
 80047ee:	e7c7      	b.n	8004780 <_malloc_r+0x44>
 80047f0:	20000254 	.word	0x20000254
 80047f4:	20000258 	.word	0x20000258

080047f8 <_realloc_r>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	0007      	movs	r7, r0
 80047fc:	000d      	movs	r5, r1
 80047fe:	0016      	movs	r6, r2
 8004800:	2900      	cmp	r1, #0
 8004802:	d105      	bne.n	8004810 <_realloc_r+0x18>
 8004804:	0011      	movs	r1, r2
 8004806:	f7ff ff99 	bl	800473c <_malloc_r>
 800480a:	0004      	movs	r4, r0
 800480c:	0020      	movs	r0, r4
 800480e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004810:	2a00      	cmp	r2, #0
 8004812:	d103      	bne.n	800481c <_realloc_r+0x24>
 8004814:	f7ff ff48 	bl	80046a8 <_free_r>
 8004818:	0034      	movs	r4, r6
 800481a:	e7f7      	b.n	800480c <_realloc_r+0x14>
 800481c:	f000 fa8a 	bl	8004d34 <_malloc_usable_size_r>
 8004820:	002c      	movs	r4, r5
 8004822:	42b0      	cmp	r0, r6
 8004824:	d2f2      	bcs.n	800480c <_realloc_r+0x14>
 8004826:	0031      	movs	r1, r6
 8004828:	0038      	movs	r0, r7
 800482a:	f7ff ff87 	bl	800473c <_malloc_r>
 800482e:	1e04      	subs	r4, r0, #0
 8004830:	d0ec      	beq.n	800480c <_realloc_r+0x14>
 8004832:	0029      	movs	r1, r5
 8004834:	0032      	movs	r2, r6
 8004836:	f7ff f8f1 	bl	8003a1c <memcpy>
 800483a:	0029      	movs	r1, r5
 800483c:	0038      	movs	r0, r7
 800483e:	f7ff ff33 	bl	80046a8 <_free_r>
 8004842:	e7e3      	b.n	800480c <_realloc_r+0x14>

08004844 <__ssputs_r>:
 8004844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004846:	688e      	ldr	r6, [r1, #8]
 8004848:	b085      	sub	sp, #20
 800484a:	0007      	movs	r7, r0
 800484c:	000c      	movs	r4, r1
 800484e:	9203      	str	r2, [sp, #12]
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	429e      	cmp	r6, r3
 8004854:	d83c      	bhi.n	80048d0 <__ssputs_r+0x8c>
 8004856:	2390      	movs	r3, #144	; 0x90
 8004858:	898a      	ldrh	r2, [r1, #12]
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	421a      	tst	r2, r3
 800485e:	d034      	beq.n	80048ca <__ssputs_r+0x86>
 8004860:	2503      	movs	r5, #3
 8004862:	6909      	ldr	r1, [r1, #16]
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	1a5b      	subs	r3, r3, r1
 8004868:	9302      	str	r3, [sp, #8]
 800486a:	6963      	ldr	r3, [r4, #20]
 800486c:	9802      	ldr	r0, [sp, #8]
 800486e:	435d      	muls	r5, r3
 8004870:	0feb      	lsrs	r3, r5, #31
 8004872:	195d      	adds	r5, r3, r5
 8004874:	9b01      	ldr	r3, [sp, #4]
 8004876:	106d      	asrs	r5, r5, #1
 8004878:	3301      	adds	r3, #1
 800487a:	181b      	adds	r3, r3, r0
 800487c:	42ab      	cmp	r3, r5
 800487e:	d900      	bls.n	8004882 <__ssputs_r+0x3e>
 8004880:	001d      	movs	r5, r3
 8004882:	0553      	lsls	r3, r2, #21
 8004884:	d532      	bpl.n	80048ec <__ssputs_r+0xa8>
 8004886:	0029      	movs	r1, r5
 8004888:	0038      	movs	r0, r7
 800488a:	f7ff ff57 	bl	800473c <_malloc_r>
 800488e:	1e06      	subs	r6, r0, #0
 8004890:	d109      	bne.n	80048a6 <__ssputs_r+0x62>
 8004892:	230c      	movs	r3, #12
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	2340      	movs	r3, #64	; 0x40
 8004898:	2001      	movs	r0, #1
 800489a:	89a2      	ldrh	r2, [r4, #12]
 800489c:	4240      	negs	r0, r0
 800489e:	4313      	orrs	r3, r2
 80048a0:	81a3      	strh	r3, [r4, #12]
 80048a2:	b005      	add	sp, #20
 80048a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048a6:	9a02      	ldr	r2, [sp, #8]
 80048a8:	6921      	ldr	r1, [r4, #16]
 80048aa:	f7ff f8b7 	bl	8003a1c <memcpy>
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	4a14      	ldr	r2, [pc, #80]	; (8004904 <__ssputs_r+0xc0>)
 80048b2:	401a      	ands	r2, r3
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	4313      	orrs	r3, r2
 80048b8:	81a3      	strh	r3, [r4, #12]
 80048ba:	9b02      	ldr	r3, [sp, #8]
 80048bc:	6126      	str	r6, [r4, #16]
 80048be:	18f6      	adds	r6, r6, r3
 80048c0:	6026      	str	r6, [r4, #0]
 80048c2:	6165      	str	r5, [r4, #20]
 80048c4:	9e01      	ldr	r6, [sp, #4]
 80048c6:	1aed      	subs	r5, r5, r3
 80048c8:	60a5      	str	r5, [r4, #8]
 80048ca:	9b01      	ldr	r3, [sp, #4]
 80048cc:	429e      	cmp	r6, r3
 80048ce:	d900      	bls.n	80048d2 <__ssputs_r+0x8e>
 80048d0:	9e01      	ldr	r6, [sp, #4]
 80048d2:	0032      	movs	r2, r6
 80048d4:	9903      	ldr	r1, [sp, #12]
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	f7ff fed3 	bl	8004682 <memmove>
 80048dc:	68a3      	ldr	r3, [r4, #8]
 80048de:	2000      	movs	r0, #0
 80048e0:	1b9b      	subs	r3, r3, r6
 80048e2:	60a3      	str	r3, [r4, #8]
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	199e      	adds	r6, r3, r6
 80048e8:	6026      	str	r6, [r4, #0]
 80048ea:	e7da      	b.n	80048a2 <__ssputs_r+0x5e>
 80048ec:	002a      	movs	r2, r5
 80048ee:	0038      	movs	r0, r7
 80048f0:	f7ff ff82 	bl	80047f8 <_realloc_r>
 80048f4:	1e06      	subs	r6, r0, #0
 80048f6:	d1e0      	bne.n	80048ba <__ssputs_r+0x76>
 80048f8:	0038      	movs	r0, r7
 80048fa:	6921      	ldr	r1, [r4, #16]
 80048fc:	f7ff fed4 	bl	80046a8 <_free_r>
 8004900:	e7c7      	b.n	8004892 <__ssputs_r+0x4e>
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	fffffb7f 	.word	0xfffffb7f

08004908 <_svfiprintf_r>:
 8004908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800490a:	b0a1      	sub	sp, #132	; 0x84
 800490c:	9003      	str	r0, [sp, #12]
 800490e:	001d      	movs	r5, r3
 8004910:	898b      	ldrh	r3, [r1, #12]
 8004912:	000f      	movs	r7, r1
 8004914:	0016      	movs	r6, r2
 8004916:	061b      	lsls	r3, r3, #24
 8004918:	d511      	bpl.n	800493e <_svfiprintf_r+0x36>
 800491a:	690b      	ldr	r3, [r1, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10e      	bne.n	800493e <_svfiprintf_r+0x36>
 8004920:	2140      	movs	r1, #64	; 0x40
 8004922:	f7ff ff0b 	bl	800473c <_malloc_r>
 8004926:	6038      	str	r0, [r7, #0]
 8004928:	6138      	str	r0, [r7, #16]
 800492a:	2800      	cmp	r0, #0
 800492c:	d105      	bne.n	800493a <_svfiprintf_r+0x32>
 800492e:	230c      	movs	r3, #12
 8004930:	9a03      	ldr	r2, [sp, #12]
 8004932:	3801      	subs	r0, #1
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	b021      	add	sp, #132	; 0x84
 8004938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800493a:	2340      	movs	r3, #64	; 0x40
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	2300      	movs	r3, #0
 8004940:	ac08      	add	r4, sp, #32
 8004942:	6163      	str	r3, [r4, #20]
 8004944:	3320      	adds	r3, #32
 8004946:	7663      	strb	r3, [r4, #25]
 8004948:	3310      	adds	r3, #16
 800494a:	76a3      	strb	r3, [r4, #26]
 800494c:	9507      	str	r5, [sp, #28]
 800494e:	0035      	movs	r5, r6
 8004950:	782b      	ldrb	r3, [r5, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <_svfiprintf_r+0x52>
 8004956:	2b25      	cmp	r3, #37	; 0x25
 8004958:	d147      	bne.n	80049ea <_svfiprintf_r+0xe2>
 800495a:	1bab      	subs	r3, r5, r6
 800495c:	9305      	str	r3, [sp, #20]
 800495e:	42b5      	cmp	r5, r6
 8004960:	d00c      	beq.n	800497c <_svfiprintf_r+0x74>
 8004962:	0032      	movs	r2, r6
 8004964:	0039      	movs	r1, r7
 8004966:	9803      	ldr	r0, [sp, #12]
 8004968:	f7ff ff6c 	bl	8004844 <__ssputs_r>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d100      	bne.n	8004972 <_svfiprintf_r+0x6a>
 8004970:	e0ae      	b.n	8004ad0 <_svfiprintf_r+0x1c8>
 8004972:	6962      	ldr	r2, [r4, #20]
 8004974:	9b05      	ldr	r3, [sp, #20]
 8004976:	4694      	mov	ip, r2
 8004978:	4463      	add	r3, ip
 800497a:	6163      	str	r3, [r4, #20]
 800497c:	782b      	ldrb	r3, [r5, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d100      	bne.n	8004984 <_svfiprintf_r+0x7c>
 8004982:	e0a5      	b.n	8004ad0 <_svfiprintf_r+0x1c8>
 8004984:	2201      	movs	r2, #1
 8004986:	2300      	movs	r3, #0
 8004988:	4252      	negs	r2, r2
 800498a:	6062      	str	r2, [r4, #4]
 800498c:	a904      	add	r1, sp, #16
 800498e:	3254      	adds	r2, #84	; 0x54
 8004990:	1852      	adds	r2, r2, r1
 8004992:	1c6e      	adds	r6, r5, #1
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	60e3      	str	r3, [r4, #12]
 8004998:	60a3      	str	r3, [r4, #8]
 800499a:	7013      	strb	r3, [r2, #0]
 800499c:	65a3      	str	r3, [r4, #88]	; 0x58
 800499e:	2205      	movs	r2, #5
 80049a0:	7831      	ldrb	r1, [r6, #0]
 80049a2:	4854      	ldr	r0, [pc, #336]	; (8004af4 <_svfiprintf_r+0x1ec>)
 80049a4:	f7ff fe62 	bl	800466c <memchr>
 80049a8:	1c75      	adds	r5, r6, #1
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d11f      	bne.n	80049ee <_svfiprintf_r+0xe6>
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	06d3      	lsls	r3, r2, #27
 80049b2:	d504      	bpl.n	80049be <_svfiprintf_r+0xb6>
 80049b4:	2353      	movs	r3, #83	; 0x53
 80049b6:	a904      	add	r1, sp, #16
 80049b8:	185b      	adds	r3, r3, r1
 80049ba:	2120      	movs	r1, #32
 80049bc:	7019      	strb	r1, [r3, #0]
 80049be:	0713      	lsls	r3, r2, #28
 80049c0:	d504      	bpl.n	80049cc <_svfiprintf_r+0xc4>
 80049c2:	2353      	movs	r3, #83	; 0x53
 80049c4:	a904      	add	r1, sp, #16
 80049c6:	185b      	adds	r3, r3, r1
 80049c8:	212b      	movs	r1, #43	; 0x2b
 80049ca:	7019      	strb	r1, [r3, #0]
 80049cc:	7833      	ldrb	r3, [r6, #0]
 80049ce:	2b2a      	cmp	r3, #42	; 0x2a
 80049d0:	d016      	beq.n	8004a00 <_svfiprintf_r+0xf8>
 80049d2:	0035      	movs	r5, r6
 80049d4:	2100      	movs	r1, #0
 80049d6:	200a      	movs	r0, #10
 80049d8:	68e3      	ldr	r3, [r4, #12]
 80049da:	782a      	ldrb	r2, [r5, #0]
 80049dc:	1c6e      	adds	r6, r5, #1
 80049de:	3a30      	subs	r2, #48	; 0x30
 80049e0:	2a09      	cmp	r2, #9
 80049e2:	d94e      	bls.n	8004a82 <_svfiprintf_r+0x17a>
 80049e4:	2900      	cmp	r1, #0
 80049e6:	d111      	bne.n	8004a0c <_svfiprintf_r+0x104>
 80049e8:	e017      	b.n	8004a1a <_svfiprintf_r+0x112>
 80049ea:	3501      	adds	r5, #1
 80049ec:	e7b0      	b.n	8004950 <_svfiprintf_r+0x48>
 80049ee:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <_svfiprintf_r+0x1ec>)
 80049f0:	6822      	ldr	r2, [r4, #0]
 80049f2:	1ac0      	subs	r0, r0, r3
 80049f4:	2301      	movs	r3, #1
 80049f6:	4083      	lsls	r3, r0
 80049f8:	4313      	orrs	r3, r2
 80049fa:	002e      	movs	r6, r5
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	e7ce      	b.n	800499e <_svfiprintf_r+0x96>
 8004a00:	9b07      	ldr	r3, [sp, #28]
 8004a02:	1d19      	adds	r1, r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	9107      	str	r1, [sp, #28]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	db01      	blt.n	8004a10 <_svfiprintf_r+0x108>
 8004a0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a0e:	e004      	b.n	8004a1a <_svfiprintf_r+0x112>
 8004a10:	425b      	negs	r3, r3
 8004a12:	60e3      	str	r3, [r4, #12]
 8004a14:	2302      	movs	r3, #2
 8004a16:	4313      	orrs	r3, r2
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	782b      	ldrb	r3, [r5, #0]
 8004a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a1e:	d10a      	bne.n	8004a36 <_svfiprintf_r+0x12e>
 8004a20:	786b      	ldrb	r3, [r5, #1]
 8004a22:	2b2a      	cmp	r3, #42	; 0x2a
 8004a24:	d135      	bne.n	8004a92 <_svfiprintf_r+0x18a>
 8004a26:	9b07      	ldr	r3, [sp, #28]
 8004a28:	3502      	adds	r5, #2
 8004a2a:	1d1a      	adds	r2, r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	9207      	str	r2, [sp, #28]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	db2b      	blt.n	8004a8c <_svfiprintf_r+0x184>
 8004a34:	9309      	str	r3, [sp, #36]	; 0x24
 8004a36:	4e30      	ldr	r6, [pc, #192]	; (8004af8 <_svfiprintf_r+0x1f0>)
 8004a38:	2203      	movs	r2, #3
 8004a3a:	0030      	movs	r0, r6
 8004a3c:	7829      	ldrb	r1, [r5, #0]
 8004a3e:	f7ff fe15 	bl	800466c <memchr>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d006      	beq.n	8004a54 <_svfiprintf_r+0x14c>
 8004a46:	2340      	movs	r3, #64	; 0x40
 8004a48:	1b80      	subs	r0, r0, r6
 8004a4a:	4083      	lsls	r3, r0
 8004a4c:	6822      	ldr	r2, [r4, #0]
 8004a4e:	3501      	adds	r5, #1
 8004a50:	4313      	orrs	r3, r2
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	7829      	ldrb	r1, [r5, #0]
 8004a56:	2206      	movs	r2, #6
 8004a58:	4828      	ldr	r0, [pc, #160]	; (8004afc <_svfiprintf_r+0x1f4>)
 8004a5a:	1c6e      	adds	r6, r5, #1
 8004a5c:	7621      	strb	r1, [r4, #24]
 8004a5e:	f7ff fe05 	bl	800466c <memchr>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d03c      	beq.n	8004ae0 <_svfiprintf_r+0x1d8>
 8004a66:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <_svfiprintf_r+0x1f8>)
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d125      	bne.n	8004ab8 <_svfiprintf_r+0x1b0>
 8004a6c:	2207      	movs	r2, #7
 8004a6e:	9b07      	ldr	r3, [sp, #28]
 8004a70:	3307      	adds	r3, #7
 8004a72:	4393      	bics	r3, r2
 8004a74:	3308      	adds	r3, #8
 8004a76:	9307      	str	r3, [sp, #28]
 8004a78:	6963      	ldr	r3, [r4, #20]
 8004a7a:	9a04      	ldr	r2, [sp, #16]
 8004a7c:	189b      	adds	r3, r3, r2
 8004a7e:	6163      	str	r3, [r4, #20]
 8004a80:	e765      	b.n	800494e <_svfiprintf_r+0x46>
 8004a82:	4343      	muls	r3, r0
 8004a84:	0035      	movs	r5, r6
 8004a86:	2101      	movs	r1, #1
 8004a88:	189b      	adds	r3, r3, r2
 8004a8a:	e7a6      	b.n	80049da <_svfiprintf_r+0xd2>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	425b      	negs	r3, r3
 8004a90:	e7d0      	b.n	8004a34 <_svfiprintf_r+0x12c>
 8004a92:	2300      	movs	r3, #0
 8004a94:	200a      	movs	r0, #10
 8004a96:	001a      	movs	r2, r3
 8004a98:	3501      	adds	r5, #1
 8004a9a:	6063      	str	r3, [r4, #4]
 8004a9c:	7829      	ldrb	r1, [r5, #0]
 8004a9e:	1c6e      	adds	r6, r5, #1
 8004aa0:	3930      	subs	r1, #48	; 0x30
 8004aa2:	2909      	cmp	r1, #9
 8004aa4:	d903      	bls.n	8004aae <_svfiprintf_r+0x1a6>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0c5      	beq.n	8004a36 <_svfiprintf_r+0x12e>
 8004aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8004aac:	e7c3      	b.n	8004a36 <_svfiprintf_r+0x12e>
 8004aae:	4342      	muls	r2, r0
 8004ab0:	0035      	movs	r5, r6
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	1852      	adds	r2, r2, r1
 8004ab6:	e7f1      	b.n	8004a9c <_svfiprintf_r+0x194>
 8004ab8:	ab07      	add	r3, sp, #28
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	003a      	movs	r2, r7
 8004abe:	0021      	movs	r1, r4
 8004ac0:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <_svfiprintf_r+0x1fc>)
 8004ac2:	9803      	ldr	r0, [sp, #12]
 8004ac4:	e000      	b.n	8004ac8 <_svfiprintf_r+0x1c0>
 8004ac6:	bf00      	nop
 8004ac8:	9004      	str	r0, [sp, #16]
 8004aca:	9b04      	ldr	r3, [sp, #16]
 8004acc:	3301      	adds	r3, #1
 8004ace:	d1d3      	bne.n	8004a78 <_svfiprintf_r+0x170>
 8004ad0:	89bb      	ldrh	r3, [r7, #12]
 8004ad2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ad4:	065b      	lsls	r3, r3, #25
 8004ad6:	d400      	bmi.n	8004ada <_svfiprintf_r+0x1d2>
 8004ad8:	e72d      	b.n	8004936 <_svfiprintf_r+0x2e>
 8004ada:	2001      	movs	r0, #1
 8004adc:	4240      	negs	r0, r0
 8004ade:	e72a      	b.n	8004936 <_svfiprintf_r+0x2e>
 8004ae0:	ab07      	add	r3, sp, #28
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	003a      	movs	r2, r7
 8004ae6:	0021      	movs	r1, r4
 8004ae8:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <_svfiprintf_r+0x1fc>)
 8004aea:	9803      	ldr	r0, [sp, #12]
 8004aec:	f7ff f978 	bl	8003de0 <_printf_i>
 8004af0:	e7ea      	b.n	8004ac8 <_svfiprintf_r+0x1c0>
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	08005348 	.word	0x08005348
 8004af8:	0800534e 	.word	0x0800534e
 8004afc:	08005352 	.word	0x08005352
 8004b00:	00000000 	.word	0x00000000
 8004b04:	08004845 	.word	0x08004845

08004b08 <_sbrk_r>:
 8004b08:	2300      	movs	r3, #0
 8004b0a:	b570      	push	{r4, r5, r6, lr}
 8004b0c:	4d06      	ldr	r5, [pc, #24]	; (8004b28 <_sbrk_r+0x20>)
 8004b0e:	0004      	movs	r4, r0
 8004b10:	0008      	movs	r0, r1
 8004b12:	602b      	str	r3, [r5, #0]
 8004b14:	f000 f962 	bl	8004ddc <_sbrk>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d103      	bne.n	8004b24 <_sbrk_r+0x1c>
 8004b1c:	682b      	ldr	r3, [r5, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d000      	beq.n	8004b24 <_sbrk_r+0x1c>
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	bd70      	pop	{r4, r5, r6, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	20000594 	.word	0x20000594

08004b2c <_raise_r>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	0004      	movs	r4, r0
 8004b30:	000d      	movs	r5, r1
 8004b32:	291f      	cmp	r1, #31
 8004b34:	d904      	bls.n	8004b40 <_raise_r+0x14>
 8004b36:	2316      	movs	r3, #22
 8004b38:	6003      	str	r3, [r0, #0]
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	4240      	negs	r0, r0
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d004      	beq.n	8004b50 <_raise_r+0x24>
 8004b46:	008a      	lsls	r2, r1, #2
 8004b48:	189b      	adds	r3, r3, r2
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	2a00      	cmp	r2, #0
 8004b4e:	d108      	bne.n	8004b62 <_raise_r+0x36>
 8004b50:	0020      	movs	r0, r4
 8004b52:	f000 f831 	bl	8004bb8 <_getpid_r>
 8004b56:	002a      	movs	r2, r5
 8004b58:	0001      	movs	r1, r0
 8004b5a:	0020      	movs	r0, r4
 8004b5c:	f000 f81a 	bl	8004b94 <_kill_r>
 8004b60:	e7ed      	b.n	8004b3e <_raise_r+0x12>
 8004b62:	2000      	movs	r0, #0
 8004b64:	2a01      	cmp	r2, #1
 8004b66:	d0ea      	beq.n	8004b3e <_raise_r+0x12>
 8004b68:	1c51      	adds	r1, r2, #1
 8004b6a:	d103      	bne.n	8004b74 <_raise_r+0x48>
 8004b6c:	2316      	movs	r3, #22
 8004b6e:	3001      	adds	r0, #1
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	e7e4      	b.n	8004b3e <_raise_r+0x12>
 8004b74:	2400      	movs	r4, #0
 8004b76:	0028      	movs	r0, r5
 8004b78:	601c      	str	r4, [r3, #0]
 8004b7a:	4790      	blx	r2
 8004b7c:	0020      	movs	r0, r4
 8004b7e:	e7de      	b.n	8004b3e <_raise_r+0x12>

08004b80 <raise>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <raise+0x10>)
 8004b84:	0001      	movs	r1, r0
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	f7ff ffd0 	bl	8004b2c <_raise_r>
 8004b8c:	bd10      	pop	{r4, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	2000015c 	.word	0x2000015c

08004b94 <_kill_r>:
 8004b94:	2300      	movs	r3, #0
 8004b96:	b570      	push	{r4, r5, r6, lr}
 8004b98:	4d06      	ldr	r5, [pc, #24]	; (8004bb4 <_kill_r+0x20>)
 8004b9a:	0004      	movs	r4, r0
 8004b9c:	0008      	movs	r0, r1
 8004b9e:	0011      	movs	r1, r2
 8004ba0:	602b      	str	r3, [r5, #0]
 8004ba2:	f000 f903 	bl	8004dac <_kill>
 8004ba6:	1c43      	adds	r3, r0, #1
 8004ba8:	d103      	bne.n	8004bb2 <_kill_r+0x1e>
 8004baa:	682b      	ldr	r3, [r5, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d000      	beq.n	8004bb2 <_kill_r+0x1e>
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
 8004bb4:	20000594 	.word	0x20000594

08004bb8 <_getpid_r>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	f000 f8e7 	bl	8004d8c <_getpid>
 8004bbe:	bd10      	pop	{r4, pc}

08004bc0 <__sread>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	000c      	movs	r4, r1
 8004bc4:	250e      	movs	r5, #14
 8004bc6:	5f49      	ldrsh	r1, [r1, r5]
 8004bc8:	f000 f8bc 	bl	8004d44 <_read_r>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	db03      	blt.n	8004bd8 <__sread+0x18>
 8004bd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004bd2:	181b      	adds	r3, r3, r0
 8004bd4:	6563      	str	r3, [r4, #84]	; 0x54
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	4a02      	ldr	r2, [pc, #8]	; (8004be4 <__sread+0x24>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	81a3      	strh	r3, [r4, #12]
 8004be0:	e7f9      	b.n	8004bd6 <__sread+0x16>
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	ffffefff 	.word	0xffffefff

08004be8 <__swrite>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	001f      	movs	r7, r3
 8004bec:	898b      	ldrh	r3, [r1, #12]
 8004bee:	0005      	movs	r5, r0
 8004bf0:	000c      	movs	r4, r1
 8004bf2:	0016      	movs	r6, r2
 8004bf4:	05db      	lsls	r3, r3, #23
 8004bf6:	d505      	bpl.n	8004c04 <__swrite+0x1c>
 8004bf8:	230e      	movs	r3, #14
 8004bfa:	5ec9      	ldrsh	r1, [r1, r3]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2302      	movs	r3, #2
 8004c00:	f000 f874 	bl	8004cec <_lseek_r>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <__swrite+0x34>)
 8004c08:	0028      	movs	r0, r5
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	0032      	movs	r2, r6
 8004c10:	230e      	movs	r3, #14
 8004c12:	5ee1      	ldrsh	r1, [r4, r3]
 8004c14:	003b      	movs	r3, r7
 8004c16:	f000 f81f 	bl	8004c58 <_write_r>
 8004c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c1c:	ffffefff 	.word	0xffffefff

08004c20 <__sseek>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	000c      	movs	r4, r1
 8004c24:	250e      	movs	r5, #14
 8004c26:	5f49      	ldrsh	r1, [r1, r5]
 8004c28:	f000 f860 	bl	8004cec <_lseek_r>
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	1c42      	adds	r2, r0, #1
 8004c30:	d103      	bne.n	8004c3a <__sseek+0x1a>
 8004c32:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <__sseek+0x28>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	81a3      	strh	r3, [r4, #12]
 8004c38:	bd70      	pop	{r4, r5, r6, pc}
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	0152      	lsls	r2, r2, #5
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	6560      	str	r0, [r4, #84]	; 0x54
 8004c44:	e7f8      	b.n	8004c38 <__sseek+0x18>
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	ffffefff 	.word	0xffffefff

08004c4c <__sclose>:
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	230e      	movs	r3, #14
 8004c50:	5ec9      	ldrsh	r1, [r1, r3]
 8004c52:	f000 f815 	bl	8004c80 <_close_r>
 8004c56:	bd10      	pop	{r4, pc}

08004c58 <_write_r>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	0004      	movs	r4, r0
 8004c5c:	0008      	movs	r0, r1
 8004c5e:	0011      	movs	r1, r2
 8004c60:	001a      	movs	r2, r3
 8004c62:	2300      	movs	r3, #0
 8004c64:	4d05      	ldr	r5, [pc, #20]	; (8004c7c <_write_r+0x24>)
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	f000 f8c8 	bl	8004dfc <_write>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d103      	bne.n	8004c78 <_write_r+0x20>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d000      	beq.n	8004c78 <_write_r+0x20>
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	bd70      	pop	{r4, r5, r6, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	20000594 	.word	0x20000594

08004c80 <_close_r>:
 8004c80:	2300      	movs	r3, #0
 8004c82:	b570      	push	{r4, r5, r6, lr}
 8004c84:	4d06      	ldr	r5, [pc, #24]	; (8004ca0 <_close_r+0x20>)
 8004c86:	0004      	movs	r4, r0
 8004c88:	0008      	movs	r0, r1
 8004c8a:	602b      	str	r3, [r5, #0]
 8004c8c:	f000 f86e 	bl	8004d6c <_close>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d103      	bne.n	8004c9c <_close_r+0x1c>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d000      	beq.n	8004c9c <_close_r+0x1c>
 8004c9a:	6023      	str	r3, [r4, #0]
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	20000594 	.word	0x20000594

08004ca4 <_fstat_r>:
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	b570      	push	{r4, r5, r6, lr}
 8004ca8:	4d06      	ldr	r5, [pc, #24]	; (8004cc4 <_fstat_r+0x20>)
 8004caa:	0004      	movs	r4, r0
 8004cac:	0008      	movs	r0, r1
 8004cae:	0011      	movs	r1, r2
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	f000 f863 	bl	8004d7c <_fstat>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d103      	bne.n	8004cc2 <_fstat_r+0x1e>
 8004cba:	682b      	ldr	r3, [r5, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d000      	beq.n	8004cc2 <_fstat_r+0x1e>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	20000594 	.word	0x20000594

08004cc8 <_isatty_r>:
 8004cc8:	2300      	movs	r3, #0
 8004cca:	b570      	push	{r4, r5, r6, lr}
 8004ccc:	4d06      	ldr	r5, [pc, #24]	; (8004ce8 <_isatty_r+0x20>)
 8004cce:	0004      	movs	r4, r0
 8004cd0:	0008      	movs	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f000 f862 	bl	8004d9c <_isatty>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d103      	bne.n	8004ce4 <_isatty_r+0x1c>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d000      	beq.n	8004ce4 <_isatty_r+0x1c>
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	bd70      	pop	{r4, r5, r6, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	20000594 	.word	0x20000594

08004cec <_lseek_r>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	0004      	movs	r4, r0
 8004cf0:	0008      	movs	r0, r1
 8004cf2:	0011      	movs	r1, r2
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	4d05      	ldr	r5, [pc, #20]	; (8004d10 <_lseek_r+0x24>)
 8004cfa:	602b      	str	r3, [r5, #0]
 8004cfc:	f000 f85e 	bl	8004dbc <_lseek>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d103      	bne.n	8004d0c <_lseek_r+0x20>
 8004d04:	682b      	ldr	r3, [r5, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d000      	beq.n	8004d0c <_lseek_r+0x20>
 8004d0a:	6023      	str	r3, [r4, #0]
 8004d0c:	bd70      	pop	{r4, r5, r6, pc}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	20000594 	.word	0x20000594

08004d14 <__malloc_lock>:
 8004d14:	b510      	push	{r4, lr}
 8004d16:	4802      	ldr	r0, [pc, #8]	; (8004d20 <__malloc_lock+0xc>)
 8004d18:	f7ff fc39 	bl	800458e <__retarget_lock_acquire_recursive>
 8004d1c:	bd10      	pop	{r4, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	2000058c 	.word	0x2000058c

08004d24 <__malloc_unlock>:
 8004d24:	b510      	push	{r4, lr}
 8004d26:	4802      	ldr	r0, [pc, #8]	; (8004d30 <__malloc_unlock+0xc>)
 8004d28:	f7ff fc32 	bl	8004590 <__retarget_lock_release_recursive>
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	2000058c 	.word	0x2000058c

08004d34 <_malloc_usable_size_r>:
 8004d34:	1f0b      	subs	r3, r1, #4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	1f18      	subs	r0, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da01      	bge.n	8004d42 <_malloc_usable_size_r+0xe>
 8004d3e:	580b      	ldr	r3, [r1, r0]
 8004d40:	18c0      	adds	r0, r0, r3
 8004d42:	4770      	bx	lr

08004d44 <_read_r>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	0004      	movs	r4, r0
 8004d48:	0008      	movs	r0, r1
 8004d4a:	0011      	movs	r1, r2
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	2300      	movs	r3, #0
 8004d50:	4d05      	ldr	r5, [pc, #20]	; (8004d68 <_read_r+0x24>)
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	f000 f83a 	bl	8004dcc <_read>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d103      	bne.n	8004d64 <_read_r+0x20>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d000      	beq.n	8004d64 <_read_r+0x20>
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	20000594 	.word	0x20000594

08004d6c <_close>:
 8004d6c:	2258      	movs	r2, #88	; 0x58
 8004d6e:	2001      	movs	r0, #1
 8004d70:	4b01      	ldr	r3, [pc, #4]	; (8004d78 <_close+0xc>)
 8004d72:	4240      	negs	r0, r0
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	4770      	bx	lr
 8004d78:	20000594 	.word	0x20000594

08004d7c <_fstat>:
 8004d7c:	2258      	movs	r2, #88	; 0x58
 8004d7e:	2001      	movs	r0, #1
 8004d80:	4b01      	ldr	r3, [pc, #4]	; (8004d88 <_fstat+0xc>)
 8004d82:	4240      	negs	r0, r0
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	4770      	bx	lr
 8004d88:	20000594 	.word	0x20000594

08004d8c <_getpid>:
 8004d8c:	2258      	movs	r2, #88	; 0x58
 8004d8e:	2001      	movs	r0, #1
 8004d90:	4b01      	ldr	r3, [pc, #4]	; (8004d98 <_getpid+0xc>)
 8004d92:	4240      	negs	r0, r0
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	4770      	bx	lr
 8004d98:	20000594 	.word	0x20000594

08004d9c <_isatty>:
 8004d9c:	2258      	movs	r2, #88	; 0x58
 8004d9e:	4b02      	ldr	r3, [pc, #8]	; (8004da8 <_isatty+0xc>)
 8004da0:	2000      	movs	r0, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	4770      	bx	lr
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	20000594 	.word	0x20000594

08004dac <_kill>:
 8004dac:	2258      	movs	r2, #88	; 0x58
 8004dae:	2001      	movs	r0, #1
 8004db0:	4b01      	ldr	r3, [pc, #4]	; (8004db8 <_kill+0xc>)
 8004db2:	4240      	negs	r0, r0
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	4770      	bx	lr
 8004db8:	20000594 	.word	0x20000594

08004dbc <_lseek>:
 8004dbc:	2258      	movs	r2, #88	; 0x58
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	4b01      	ldr	r3, [pc, #4]	; (8004dc8 <_lseek+0xc>)
 8004dc2:	4240      	negs	r0, r0
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	4770      	bx	lr
 8004dc8:	20000594 	.word	0x20000594

08004dcc <_read>:
 8004dcc:	2258      	movs	r2, #88	; 0x58
 8004dce:	2001      	movs	r0, #1
 8004dd0:	4b01      	ldr	r3, [pc, #4]	; (8004dd8 <_read+0xc>)
 8004dd2:	4240      	negs	r0, r0
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	4770      	bx	lr
 8004dd8:	20000594 	.word	0x20000594

08004ddc <_sbrk>:
 8004ddc:	4a05      	ldr	r2, [pc, #20]	; (8004df4 <_sbrk+0x18>)
 8004dde:	0003      	movs	r3, r0
 8004de0:	6811      	ldr	r1, [r2, #0]
 8004de2:	2900      	cmp	r1, #0
 8004de4:	d101      	bne.n	8004dea <_sbrk+0xe>
 8004de6:	4904      	ldr	r1, [pc, #16]	; (8004df8 <_sbrk+0x1c>)
 8004de8:	6011      	str	r1, [r2, #0]
 8004dea:	6810      	ldr	r0, [r2, #0]
 8004dec:	18c3      	adds	r3, r0, r3
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4770      	bx	lr
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	2000025c 	.word	0x2000025c
 8004df8:	20000598 	.word	0x20000598

08004dfc <_write>:
 8004dfc:	2258      	movs	r2, #88	; 0x58
 8004dfe:	2001      	movs	r0, #1
 8004e00:	4b01      	ldr	r3, [pc, #4]	; (8004e08 <_write+0xc>)
 8004e02:	4240      	negs	r0, r0
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	4770      	bx	lr
 8004e08:	20000594 	.word	0x20000594

08004e0c <_exit>:
 8004e0c:	e7fe      	b.n	8004e0c <_exit>
	...

08004e10 <_init>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr

08004e1c <_fini>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr
