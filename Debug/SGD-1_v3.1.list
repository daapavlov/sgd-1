
SGD-1_v3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008294  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  08008354  08008354  00018354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000015c  20000000  08008a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000053c  2000015c  08008b6c  0002015c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000698  08008b6c  00020698  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001fa75  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000044c9  00000000  00000000  0003fbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00012345  00000000  00000000  000440c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011a0  00000000  00000000  00056408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001118  00000000  00000000  000575a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00013bc2  00000000  00000000  000586c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ebad  00000000  00000000  0006c282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0006a5a4  00000000  00000000  0008ae2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000f53d3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003cf0  00000000  00000000  000f5428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  000f9118  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  000f91e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000015c 	.word	0x2000015c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800833c 	.word	0x0800833c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000160 	.word	0x20000160
 8000104:	0800833c 	.word	0x0800833c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c10      	adds	r0, r2, #0
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	1c19      	adds	r1, r3, #0
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f001 fb9d 	bl	8001984 <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f001 fae7 	bl	8001828 <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fb8f 	bl	8001984 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fb85 	bl	8001984 <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fb09 	bl	80018a0 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 faff 	bl	80018a0 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_cfrcmple>:
 80002b0:	4684      	mov	ip, r0
 80002b2:	1c08      	adds	r0, r1, #0
 80002b4:	4661      	mov	r1, ip
 80002b6:	e7ff      	b.n	80002b8 <__aeabi_cfcmpeq>

080002b8 <__aeabi_cfcmpeq>:
 80002b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ba:	f000 fb67 	bl	800098c <__lesf2>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d401      	bmi.n	80002c6 <__aeabi_cfcmpeq+0xe>
 80002c2:	2100      	movs	r1, #0
 80002c4:	42c8      	cmn	r0, r1
 80002c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c8 <__aeabi_fcmpeq>:
 80002c8:	b510      	push	{r4, lr}
 80002ca:	f000 faeb 	bl	80008a4 <__eqsf2>
 80002ce:	4240      	negs	r0, r0
 80002d0:	3001      	adds	r0, #1
 80002d2:	bd10      	pop	{r4, pc}

080002d4 <__aeabi_fcmplt>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb59 	bl	800098c <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	db01      	blt.n	80002e2 <__aeabi_fcmplt+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmple>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fb4f 	bl	800098c <__lesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dd01      	ble.n	80002f6 <__aeabi_fcmple+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpgt>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 faf9 	bl	80008f4 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	dc01      	bgt.n	800030a <__aeabi_fcmpgt+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fcmpge>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f000 faef 	bl	80008f4 <__gesf2>
 8000316:	2800      	cmp	r0, #0
 8000318:	da01      	bge.n	800031e <__aeabi_fcmpge+0xe>
 800031a:	2000      	movs	r0, #0
 800031c:	bd10      	pop	{r4, pc}
 800031e:	2001      	movs	r0, #1
 8000320:	bd10      	pop	{r4, pc}
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <__aeabi_f2uiz>:
 8000324:	219e      	movs	r1, #158	; 0x9e
 8000326:	b510      	push	{r4, lr}
 8000328:	05c9      	lsls	r1, r1, #23
 800032a:	1c04      	adds	r4, r0, #0
 800032c:	f7ff fff0 	bl	8000310 <__aeabi_fcmpge>
 8000330:	2800      	cmp	r0, #0
 8000332:	d103      	bne.n	800033c <__aeabi_f2uiz+0x18>
 8000334:	1c20      	adds	r0, r4, #0
 8000336:	f000 fe6b 	bl	8001010 <__aeabi_f2iz>
 800033a:	bd10      	pop	{r4, pc}
 800033c:	219e      	movs	r1, #158	; 0x9e
 800033e:	1c20      	adds	r0, r4, #0
 8000340:	05c9      	lsls	r1, r1, #23
 8000342:	f000 fc87 	bl	8000c54 <__aeabi_fsub>
 8000346:	f000 fe63 	bl	8001010 <__aeabi_f2iz>
 800034a:	2380      	movs	r3, #128	; 0x80
 800034c:	061b      	lsls	r3, r3, #24
 800034e:	469c      	mov	ip, r3
 8000350:	4460      	add	r0, ip
 8000352:	e7f2      	b.n	800033a <__aeabi_f2uiz+0x16>

08000354 <__aeabi_fadd>:
 8000354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000356:	4646      	mov	r6, r8
 8000358:	46d6      	mov	lr, sl
 800035a:	464f      	mov	r7, r9
 800035c:	024d      	lsls	r5, r1, #9
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	b5c0      	push	{r6, r7, lr}
 8000362:	0a52      	lsrs	r2, r2, #9
 8000364:	0a6e      	lsrs	r6, r5, #9
 8000366:	0047      	lsls	r7, r0, #1
 8000368:	46b0      	mov	r8, r6
 800036a:	0e3f      	lsrs	r7, r7, #24
 800036c:	004e      	lsls	r6, r1, #1
 800036e:	0fc4      	lsrs	r4, r0, #31
 8000370:	00d0      	lsls	r0, r2, #3
 8000372:	4694      	mov	ip, r2
 8000374:	003b      	movs	r3, r7
 8000376:	4682      	mov	sl, r0
 8000378:	0e36      	lsrs	r6, r6, #24
 800037a:	0fc9      	lsrs	r1, r1, #31
 800037c:	09ad      	lsrs	r5, r5, #6
 800037e:	428c      	cmp	r4, r1
 8000380:	d06d      	beq.n	800045e <__aeabi_fadd+0x10a>
 8000382:	1bb8      	subs	r0, r7, r6
 8000384:	4681      	mov	r9, r0
 8000386:	2800      	cmp	r0, #0
 8000388:	dd4d      	ble.n	8000426 <__aeabi_fadd+0xd2>
 800038a:	2e00      	cmp	r6, #0
 800038c:	d100      	bne.n	8000390 <__aeabi_fadd+0x3c>
 800038e:	e088      	b.n	80004a2 <__aeabi_fadd+0x14e>
 8000390:	2fff      	cmp	r7, #255	; 0xff
 8000392:	d05a      	beq.n	800044a <__aeabi_fadd+0xf6>
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	04db      	lsls	r3, r3, #19
 8000398:	431d      	orrs	r5, r3
 800039a:	464b      	mov	r3, r9
 800039c:	2201      	movs	r2, #1
 800039e:	2b1b      	cmp	r3, #27
 80003a0:	dc0a      	bgt.n	80003b8 <__aeabi_fadd+0x64>
 80003a2:	002b      	movs	r3, r5
 80003a4:	464a      	mov	r2, r9
 80003a6:	4649      	mov	r1, r9
 80003a8:	40d3      	lsrs	r3, r2
 80003aa:	2220      	movs	r2, #32
 80003ac:	1a52      	subs	r2, r2, r1
 80003ae:	4095      	lsls	r5, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	1e55      	subs	r5, r2, #1
 80003b4:	41aa      	sbcs	r2, r5
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	1a9a      	subs	r2, r3, r2
 80003bc:	0153      	lsls	r3, r2, #5
 80003be:	d400      	bmi.n	80003c2 <__aeabi_fadd+0x6e>
 80003c0:	e0b9      	b.n	8000536 <__aeabi_fadd+0x1e2>
 80003c2:	0192      	lsls	r2, r2, #6
 80003c4:	0996      	lsrs	r6, r2, #6
 80003c6:	0030      	movs	r0, r6
 80003c8:	f002 fa4a 	bl	8002860 <__clzsi2>
 80003cc:	3805      	subs	r0, #5
 80003ce:	4086      	lsls	r6, r0
 80003d0:	4287      	cmp	r7, r0
 80003d2:	dd00      	ble.n	80003d6 <__aeabi_fadd+0x82>
 80003d4:	e0d4      	b.n	8000580 <__aeabi_fadd+0x22c>
 80003d6:	0033      	movs	r3, r6
 80003d8:	1bc7      	subs	r7, r0, r7
 80003da:	2020      	movs	r0, #32
 80003dc:	3701      	adds	r7, #1
 80003de:	40fb      	lsrs	r3, r7
 80003e0:	1bc7      	subs	r7, r0, r7
 80003e2:	40be      	lsls	r6, r7
 80003e4:	0032      	movs	r2, r6
 80003e6:	1e56      	subs	r6, r2, #1
 80003e8:	41b2      	sbcs	r2, r6
 80003ea:	2700      	movs	r7, #0
 80003ec:	431a      	orrs	r2, r3
 80003ee:	0753      	lsls	r3, r2, #29
 80003f0:	d004      	beq.n	80003fc <__aeabi_fadd+0xa8>
 80003f2:	230f      	movs	r3, #15
 80003f4:	4013      	ands	r3, r2
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d000      	beq.n	80003fc <__aeabi_fadd+0xa8>
 80003fa:	3204      	adds	r2, #4
 80003fc:	0153      	lsls	r3, r2, #5
 80003fe:	d400      	bmi.n	8000402 <__aeabi_fadd+0xae>
 8000400:	e09c      	b.n	800053c <__aeabi_fadd+0x1e8>
 8000402:	1c7b      	adds	r3, r7, #1
 8000404:	2ffe      	cmp	r7, #254	; 0xfe
 8000406:	d100      	bne.n	800040a <__aeabi_fadd+0xb6>
 8000408:	e09a      	b.n	8000540 <__aeabi_fadd+0x1ec>
 800040a:	0192      	lsls	r2, r2, #6
 800040c:	0a52      	lsrs	r2, r2, #9
 800040e:	4694      	mov	ip, r2
 8000410:	b2db      	uxtb	r3, r3
 8000412:	05d8      	lsls	r0, r3, #23
 8000414:	4663      	mov	r3, ip
 8000416:	07e4      	lsls	r4, r4, #31
 8000418:	4318      	orrs	r0, r3
 800041a:	4320      	orrs	r0, r4
 800041c:	bce0      	pop	{r5, r6, r7}
 800041e:	46ba      	mov	sl, r7
 8000420:	46b1      	mov	r9, r6
 8000422:	46a8      	mov	r8, r5
 8000424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000426:	2800      	cmp	r0, #0
 8000428:	d049      	beq.n	80004be <__aeabi_fadd+0x16a>
 800042a:	1bf3      	subs	r3, r6, r7
 800042c:	2f00      	cmp	r7, #0
 800042e:	d000      	beq.n	8000432 <__aeabi_fadd+0xde>
 8000430:	e0b6      	b.n	80005a0 <__aeabi_fadd+0x24c>
 8000432:	4652      	mov	r2, sl
 8000434:	2a00      	cmp	r2, #0
 8000436:	d060      	beq.n	80004fa <__aeabi_fadd+0x1a6>
 8000438:	3b01      	subs	r3, #1
 800043a:	2b00      	cmp	r3, #0
 800043c:	d100      	bne.n	8000440 <__aeabi_fadd+0xec>
 800043e:	e0fc      	b.n	800063a <__aeabi_fadd+0x2e6>
 8000440:	2eff      	cmp	r6, #255	; 0xff
 8000442:	d000      	beq.n	8000446 <__aeabi_fadd+0xf2>
 8000444:	e0b4      	b.n	80005b0 <__aeabi_fadd+0x25c>
 8000446:	000c      	movs	r4, r1
 8000448:	4642      	mov	r2, r8
 800044a:	2a00      	cmp	r2, #0
 800044c:	d078      	beq.n	8000540 <__aeabi_fadd+0x1ec>
 800044e:	2080      	movs	r0, #128	; 0x80
 8000450:	03c0      	lsls	r0, r0, #15
 8000452:	4310      	orrs	r0, r2
 8000454:	0242      	lsls	r2, r0, #9
 8000456:	0a53      	lsrs	r3, r2, #9
 8000458:	469c      	mov	ip, r3
 800045a:	23ff      	movs	r3, #255	; 0xff
 800045c:	e7d9      	b.n	8000412 <__aeabi_fadd+0xbe>
 800045e:	1bb9      	subs	r1, r7, r6
 8000460:	2900      	cmp	r1, #0
 8000462:	dd71      	ble.n	8000548 <__aeabi_fadd+0x1f4>
 8000464:	2e00      	cmp	r6, #0
 8000466:	d03f      	beq.n	80004e8 <__aeabi_fadd+0x194>
 8000468:	2fff      	cmp	r7, #255	; 0xff
 800046a:	d0ee      	beq.n	800044a <__aeabi_fadd+0xf6>
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	04db      	lsls	r3, r3, #19
 8000470:	431d      	orrs	r5, r3
 8000472:	2201      	movs	r2, #1
 8000474:	291b      	cmp	r1, #27
 8000476:	dc07      	bgt.n	8000488 <__aeabi_fadd+0x134>
 8000478:	002a      	movs	r2, r5
 800047a:	2320      	movs	r3, #32
 800047c:	40ca      	lsrs	r2, r1
 800047e:	1a59      	subs	r1, r3, r1
 8000480:	408d      	lsls	r5, r1
 8000482:	1e6b      	subs	r3, r5, #1
 8000484:	419d      	sbcs	r5, r3
 8000486:	432a      	orrs	r2, r5
 8000488:	4452      	add	r2, sl
 800048a:	0153      	lsls	r3, r2, #5
 800048c:	d553      	bpl.n	8000536 <__aeabi_fadd+0x1e2>
 800048e:	3701      	adds	r7, #1
 8000490:	2fff      	cmp	r7, #255	; 0xff
 8000492:	d055      	beq.n	8000540 <__aeabi_fadd+0x1ec>
 8000494:	2301      	movs	r3, #1
 8000496:	497b      	ldr	r1, [pc, #492]	; (8000684 <__aeabi_fadd+0x330>)
 8000498:	4013      	ands	r3, r2
 800049a:	0852      	lsrs	r2, r2, #1
 800049c:	400a      	ands	r2, r1
 800049e:	431a      	orrs	r2, r3
 80004a0:	e7a5      	b.n	80003ee <__aeabi_fadd+0x9a>
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d02c      	beq.n	8000500 <__aeabi_fadd+0x1ac>
 80004a6:	2301      	movs	r3, #1
 80004a8:	425b      	negs	r3, r3
 80004aa:	469c      	mov	ip, r3
 80004ac:	44e1      	add	r9, ip
 80004ae:	464b      	mov	r3, r9
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fadd+0x162>
 80004b4:	e0ad      	b.n	8000612 <__aeabi_fadd+0x2be>
 80004b6:	2fff      	cmp	r7, #255	; 0xff
 80004b8:	d000      	beq.n	80004bc <__aeabi_fadd+0x168>
 80004ba:	e76e      	b.n	800039a <__aeabi_fadd+0x46>
 80004bc:	e7c5      	b.n	800044a <__aeabi_fadd+0xf6>
 80004be:	20fe      	movs	r0, #254	; 0xfe
 80004c0:	1c7e      	adds	r6, r7, #1
 80004c2:	4230      	tst	r0, r6
 80004c4:	d160      	bne.n	8000588 <__aeabi_fadd+0x234>
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	d000      	beq.n	80004cc <__aeabi_fadd+0x178>
 80004ca:	e093      	b.n	80005f4 <__aeabi_fadd+0x2a0>
 80004cc:	4652      	mov	r2, sl
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fadd+0x180>
 80004d2:	e0b6      	b.n	8000642 <__aeabi_fadd+0x2ee>
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d09c      	beq.n	8000412 <__aeabi_fadd+0xbe>
 80004d8:	1b52      	subs	r2, r2, r5
 80004da:	0150      	lsls	r0, r2, #5
 80004dc:	d400      	bmi.n	80004e0 <__aeabi_fadd+0x18c>
 80004de:	e0c3      	b.n	8000668 <__aeabi_fadd+0x314>
 80004e0:	4653      	mov	r3, sl
 80004e2:	000c      	movs	r4, r1
 80004e4:	1aea      	subs	r2, r5, r3
 80004e6:	e782      	b.n	80003ee <__aeabi_fadd+0x9a>
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d009      	beq.n	8000500 <__aeabi_fadd+0x1ac>
 80004ec:	3901      	subs	r1, #1
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x1a0>
 80004f2:	e08b      	b.n	800060c <__aeabi_fadd+0x2b8>
 80004f4:	2fff      	cmp	r7, #255	; 0xff
 80004f6:	d1bc      	bne.n	8000472 <__aeabi_fadd+0x11e>
 80004f8:	e7a7      	b.n	800044a <__aeabi_fadd+0xf6>
 80004fa:	000c      	movs	r4, r1
 80004fc:	4642      	mov	r2, r8
 80004fe:	0037      	movs	r7, r6
 8000500:	2fff      	cmp	r7, #255	; 0xff
 8000502:	d0a2      	beq.n	800044a <__aeabi_fadd+0xf6>
 8000504:	0252      	lsls	r2, r2, #9
 8000506:	0a53      	lsrs	r3, r2, #9
 8000508:	469c      	mov	ip, r3
 800050a:	b2fb      	uxtb	r3, r7
 800050c:	e781      	b.n	8000412 <__aeabi_fadd+0xbe>
 800050e:	21fe      	movs	r1, #254	; 0xfe
 8000510:	3701      	adds	r7, #1
 8000512:	4239      	tst	r1, r7
 8000514:	d165      	bne.n	80005e2 <__aeabi_fadd+0x28e>
 8000516:	2b00      	cmp	r3, #0
 8000518:	d17e      	bne.n	8000618 <__aeabi_fadd+0x2c4>
 800051a:	2800      	cmp	r0, #0
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x1cc>
 800051e:	e0aa      	b.n	8000676 <__aeabi_fadd+0x322>
 8000520:	2d00      	cmp	r5, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_fadd+0x1d2>
 8000524:	e775      	b.n	8000412 <__aeabi_fadd+0xbe>
 8000526:	002a      	movs	r2, r5
 8000528:	4452      	add	r2, sl
 800052a:	2700      	movs	r7, #0
 800052c:	0153      	lsls	r3, r2, #5
 800052e:	d502      	bpl.n	8000536 <__aeabi_fadd+0x1e2>
 8000530:	4b55      	ldr	r3, [pc, #340]	; (8000688 <__aeabi_fadd+0x334>)
 8000532:	3701      	adds	r7, #1
 8000534:	401a      	ands	r2, r3
 8000536:	0753      	lsls	r3, r2, #29
 8000538:	d000      	beq.n	800053c <__aeabi_fadd+0x1e8>
 800053a:	e75a      	b.n	80003f2 <__aeabi_fadd+0x9e>
 800053c:	08d2      	lsrs	r2, r2, #3
 800053e:	e7df      	b.n	8000500 <__aeabi_fadd+0x1ac>
 8000540:	2200      	movs	r2, #0
 8000542:	23ff      	movs	r3, #255	; 0xff
 8000544:	4694      	mov	ip, r2
 8000546:	e764      	b.n	8000412 <__aeabi_fadd+0xbe>
 8000548:	2900      	cmp	r1, #0
 800054a:	d0e0      	beq.n	800050e <__aeabi_fadd+0x1ba>
 800054c:	1bf3      	subs	r3, r6, r7
 800054e:	2f00      	cmp	r7, #0
 8000550:	d03e      	beq.n	80005d0 <__aeabi_fadd+0x27c>
 8000552:	2eff      	cmp	r6, #255	; 0xff
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x204>
 8000556:	e777      	b.n	8000448 <__aeabi_fadd+0xf4>
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	0001      	movs	r1, r0
 800055c:	04d2      	lsls	r2, r2, #19
 800055e:	4311      	orrs	r1, r2
 8000560:	468a      	mov	sl, r1
 8000562:	2201      	movs	r2, #1
 8000564:	2b1b      	cmp	r3, #27
 8000566:	dc08      	bgt.n	800057a <__aeabi_fadd+0x226>
 8000568:	4652      	mov	r2, sl
 800056a:	2120      	movs	r1, #32
 800056c:	4650      	mov	r0, sl
 800056e:	40da      	lsrs	r2, r3
 8000570:	1acb      	subs	r3, r1, r3
 8000572:	4098      	lsls	r0, r3
 8000574:	1e43      	subs	r3, r0, #1
 8000576:	4198      	sbcs	r0, r3
 8000578:	4302      	orrs	r2, r0
 800057a:	0037      	movs	r7, r6
 800057c:	1952      	adds	r2, r2, r5
 800057e:	e784      	b.n	800048a <__aeabi_fadd+0x136>
 8000580:	4a41      	ldr	r2, [pc, #260]	; (8000688 <__aeabi_fadd+0x334>)
 8000582:	1a3f      	subs	r7, r7, r0
 8000584:	4032      	ands	r2, r6
 8000586:	e732      	b.n	80003ee <__aeabi_fadd+0x9a>
 8000588:	4653      	mov	r3, sl
 800058a:	1b5e      	subs	r6, r3, r5
 800058c:	0173      	lsls	r3, r6, #5
 800058e:	d42d      	bmi.n	80005ec <__aeabi_fadd+0x298>
 8000590:	2e00      	cmp	r6, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_fadd+0x242>
 8000594:	e717      	b.n	80003c6 <__aeabi_fadd+0x72>
 8000596:	2200      	movs	r2, #0
 8000598:	2400      	movs	r4, #0
 800059a:	2300      	movs	r3, #0
 800059c:	4694      	mov	ip, r2
 800059e:	e738      	b.n	8000412 <__aeabi_fadd+0xbe>
 80005a0:	2eff      	cmp	r6, #255	; 0xff
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x252>
 80005a4:	e74f      	b.n	8000446 <__aeabi_fadd+0xf2>
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	4650      	mov	r0, sl
 80005aa:	04d2      	lsls	r2, r2, #19
 80005ac:	4310      	orrs	r0, r2
 80005ae:	4682      	mov	sl, r0
 80005b0:	2201      	movs	r2, #1
 80005b2:	2b1b      	cmp	r3, #27
 80005b4:	dc08      	bgt.n	80005c8 <__aeabi_fadd+0x274>
 80005b6:	4652      	mov	r2, sl
 80005b8:	2420      	movs	r4, #32
 80005ba:	4650      	mov	r0, sl
 80005bc:	40da      	lsrs	r2, r3
 80005be:	1ae3      	subs	r3, r4, r3
 80005c0:	4098      	lsls	r0, r3
 80005c2:	1e43      	subs	r3, r0, #1
 80005c4:	4198      	sbcs	r0, r3
 80005c6:	4302      	orrs	r2, r0
 80005c8:	000c      	movs	r4, r1
 80005ca:	0037      	movs	r7, r6
 80005cc:	1aaa      	subs	r2, r5, r2
 80005ce:	e6f5      	b.n	80003bc <__aeabi_fadd+0x68>
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d093      	beq.n	80004fc <__aeabi_fadd+0x1a8>
 80005d4:	3b01      	subs	r3, #1
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d04f      	beq.n	800067a <__aeabi_fadd+0x326>
 80005da:	2eff      	cmp	r6, #255	; 0xff
 80005dc:	d1c1      	bne.n	8000562 <__aeabi_fadd+0x20e>
 80005de:	4642      	mov	r2, r8
 80005e0:	e733      	b.n	800044a <__aeabi_fadd+0xf6>
 80005e2:	2fff      	cmp	r7, #255	; 0xff
 80005e4:	d0ac      	beq.n	8000540 <__aeabi_fadd+0x1ec>
 80005e6:	4455      	add	r5, sl
 80005e8:	086a      	lsrs	r2, r5, #1
 80005ea:	e7a4      	b.n	8000536 <__aeabi_fadd+0x1e2>
 80005ec:	4653      	mov	r3, sl
 80005ee:	000c      	movs	r4, r1
 80005f0:	1aee      	subs	r6, r5, r3
 80005f2:	e6e8      	b.n	80003c6 <__aeabi_fadd+0x72>
 80005f4:	4653      	mov	r3, sl
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d128      	bne.n	800064c <__aeabi_fadd+0x2f8>
 80005fa:	2d00      	cmp	r5, #0
 80005fc:	d000      	beq.n	8000600 <__aeabi_fadd+0x2ac>
 80005fe:	e722      	b.n	8000446 <__aeabi_fadd+0xf2>
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	03db      	lsls	r3, r3, #15
 8000604:	469c      	mov	ip, r3
 8000606:	2400      	movs	r4, #0
 8000608:	23ff      	movs	r3, #255	; 0xff
 800060a:	e702      	b.n	8000412 <__aeabi_fadd+0xbe>
 800060c:	002a      	movs	r2, r5
 800060e:	4452      	add	r2, sl
 8000610:	e73b      	b.n	800048a <__aeabi_fadd+0x136>
 8000612:	4653      	mov	r3, sl
 8000614:	1b5a      	subs	r2, r3, r5
 8000616:	e6d1      	b.n	80003bc <__aeabi_fadd+0x68>
 8000618:	2800      	cmp	r0, #0
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0x2ca>
 800061c:	e714      	b.n	8000448 <__aeabi_fadd+0xf4>
 800061e:	2d00      	cmp	r5, #0
 8000620:	d100      	bne.n	8000624 <__aeabi_fadd+0x2d0>
 8000622:	e712      	b.n	800044a <__aeabi_fadd+0xf6>
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	03db      	lsls	r3, r3, #15
 8000628:	421a      	tst	r2, r3
 800062a:	d100      	bne.n	800062e <__aeabi_fadd+0x2da>
 800062c:	e70d      	b.n	800044a <__aeabi_fadd+0xf6>
 800062e:	4641      	mov	r1, r8
 8000630:	4219      	tst	r1, r3
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0x2e2>
 8000634:	e709      	b.n	800044a <__aeabi_fadd+0xf6>
 8000636:	4642      	mov	r2, r8
 8000638:	e707      	b.n	800044a <__aeabi_fadd+0xf6>
 800063a:	000c      	movs	r4, r1
 800063c:	0037      	movs	r7, r6
 800063e:	1aaa      	subs	r2, r5, r2
 8000640:	e6bc      	b.n	80003bc <__aeabi_fadd+0x68>
 8000642:	2d00      	cmp	r5, #0
 8000644:	d013      	beq.n	800066e <__aeabi_fadd+0x31a>
 8000646:	000c      	movs	r4, r1
 8000648:	46c4      	mov	ip, r8
 800064a:	e6e2      	b.n	8000412 <__aeabi_fadd+0xbe>
 800064c:	2d00      	cmp	r5, #0
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0x2fe>
 8000650:	e6fb      	b.n	800044a <__aeabi_fadd+0xf6>
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	03db      	lsls	r3, r3, #15
 8000656:	421a      	tst	r2, r3
 8000658:	d100      	bne.n	800065c <__aeabi_fadd+0x308>
 800065a:	e6f6      	b.n	800044a <__aeabi_fadd+0xf6>
 800065c:	4640      	mov	r0, r8
 800065e:	4218      	tst	r0, r3
 8000660:	d000      	beq.n	8000664 <__aeabi_fadd+0x310>
 8000662:	e6f2      	b.n	800044a <__aeabi_fadd+0xf6>
 8000664:	000c      	movs	r4, r1
 8000666:	e6ef      	b.n	8000448 <__aeabi_fadd+0xf4>
 8000668:	2a00      	cmp	r2, #0
 800066a:	d000      	beq.n	800066e <__aeabi_fadd+0x31a>
 800066c:	e763      	b.n	8000536 <__aeabi_fadd+0x1e2>
 800066e:	2200      	movs	r2, #0
 8000670:	2400      	movs	r4, #0
 8000672:	4694      	mov	ip, r2
 8000674:	e6cd      	b.n	8000412 <__aeabi_fadd+0xbe>
 8000676:	46c4      	mov	ip, r8
 8000678:	e6cb      	b.n	8000412 <__aeabi_fadd+0xbe>
 800067a:	002a      	movs	r2, r5
 800067c:	0037      	movs	r7, r6
 800067e:	4452      	add	r2, sl
 8000680:	e703      	b.n	800048a <__aeabi_fadd+0x136>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	7dffffff 	.word	0x7dffffff
 8000688:	fbffffff 	.word	0xfbffffff

0800068c <__aeabi_fdiv>:
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	464f      	mov	r7, r9
 8000690:	4646      	mov	r6, r8
 8000692:	46d6      	mov	lr, sl
 8000694:	0245      	lsls	r5, r0, #9
 8000696:	b5c0      	push	{r6, r7, lr}
 8000698:	0047      	lsls	r7, r0, #1
 800069a:	1c0c      	adds	r4, r1, #0
 800069c:	0a6d      	lsrs	r5, r5, #9
 800069e:	0e3f      	lsrs	r7, r7, #24
 80006a0:	0fc6      	lsrs	r6, r0, #31
 80006a2:	2f00      	cmp	r7, #0
 80006a4:	d066      	beq.n	8000774 <__aeabi_fdiv+0xe8>
 80006a6:	2fff      	cmp	r7, #255	; 0xff
 80006a8:	d06c      	beq.n	8000784 <__aeabi_fdiv+0xf8>
 80006aa:	2300      	movs	r3, #0
 80006ac:	00ea      	lsls	r2, r5, #3
 80006ae:	2580      	movs	r5, #128	; 0x80
 80006b0:	4699      	mov	r9, r3
 80006b2:	469a      	mov	sl, r3
 80006b4:	04ed      	lsls	r5, r5, #19
 80006b6:	4315      	orrs	r5, r2
 80006b8:	3f7f      	subs	r7, #127	; 0x7f
 80006ba:	0260      	lsls	r0, r4, #9
 80006bc:	0061      	lsls	r1, r4, #1
 80006be:	0a43      	lsrs	r3, r0, #9
 80006c0:	4698      	mov	r8, r3
 80006c2:	0e09      	lsrs	r1, r1, #24
 80006c4:	0fe4      	lsrs	r4, r4, #31
 80006c6:	2900      	cmp	r1, #0
 80006c8:	d048      	beq.n	800075c <__aeabi_fdiv+0xd0>
 80006ca:	29ff      	cmp	r1, #255	; 0xff
 80006cc:	d010      	beq.n	80006f0 <__aeabi_fdiv+0x64>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	00d8      	lsls	r0, r3, #3
 80006d2:	04d2      	lsls	r2, r2, #19
 80006d4:	4302      	orrs	r2, r0
 80006d6:	4690      	mov	r8, r2
 80006d8:	2000      	movs	r0, #0
 80006da:	397f      	subs	r1, #127	; 0x7f
 80006dc:	464a      	mov	r2, r9
 80006de:	0033      	movs	r3, r6
 80006e0:	1a7f      	subs	r7, r7, r1
 80006e2:	4302      	orrs	r2, r0
 80006e4:	496c      	ldr	r1, [pc, #432]	; (8000898 <__aeabi_fdiv+0x20c>)
 80006e6:	0092      	lsls	r2, r2, #2
 80006e8:	588a      	ldr	r2, [r1, r2]
 80006ea:	4063      	eors	r3, r4
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4697      	mov	pc, r2
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d16d      	bne.n	80007d0 <__aeabi_fdiv+0x144>
 80006f4:	2002      	movs	r0, #2
 80006f6:	3fff      	subs	r7, #255	; 0xff
 80006f8:	e033      	b.n	8000762 <__aeabi_fdiv+0xd6>
 80006fa:	2300      	movs	r3, #0
 80006fc:	4698      	mov	r8, r3
 80006fe:	0026      	movs	r6, r4
 8000700:	4645      	mov	r5, r8
 8000702:	4682      	mov	sl, r0
 8000704:	4653      	mov	r3, sl
 8000706:	2b02      	cmp	r3, #2
 8000708:	d100      	bne.n	800070c <__aeabi_fdiv+0x80>
 800070a:	e07f      	b.n	800080c <__aeabi_fdiv+0x180>
 800070c:	2b03      	cmp	r3, #3
 800070e:	d100      	bne.n	8000712 <__aeabi_fdiv+0x86>
 8000710:	e094      	b.n	800083c <__aeabi_fdiv+0x1b0>
 8000712:	2b01      	cmp	r3, #1
 8000714:	d017      	beq.n	8000746 <__aeabi_fdiv+0xba>
 8000716:	0038      	movs	r0, r7
 8000718:	307f      	adds	r0, #127	; 0x7f
 800071a:	2800      	cmp	r0, #0
 800071c:	dd5f      	ble.n	80007de <__aeabi_fdiv+0x152>
 800071e:	076b      	lsls	r3, r5, #29
 8000720:	d004      	beq.n	800072c <__aeabi_fdiv+0xa0>
 8000722:	230f      	movs	r3, #15
 8000724:	402b      	ands	r3, r5
 8000726:	2b04      	cmp	r3, #4
 8000728:	d000      	beq.n	800072c <__aeabi_fdiv+0xa0>
 800072a:	3504      	adds	r5, #4
 800072c:	012b      	lsls	r3, r5, #4
 800072e:	d503      	bpl.n	8000738 <__aeabi_fdiv+0xac>
 8000730:	0038      	movs	r0, r7
 8000732:	4b5a      	ldr	r3, [pc, #360]	; (800089c <__aeabi_fdiv+0x210>)
 8000734:	3080      	adds	r0, #128	; 0x80
 8000736:	401d      	ands	r5, r3
 8000738:	28fe      	cmp	r0, #254	; 0xfe
 800073a:	dc67      	bgt.n	800080c <__aeabi_fdiv+0x180>
 800073c:	01ad      	lsls	r5, r5, #6
 800073e:	0a6d      	lsrs	r5, r5, #9
 8000740:	b2c0      	uxtb	r0, r0
 8000742:	e002      	b.n	800074a <__aeabi_fdiv+0xbe>
 8000744:	001e      	movs	r6, r3
 8000746:	2000      	movs	r0, #0
 8000748:	2500      	movs	r5, #0
 800074a:	05c0      	lsls	r0, r0, #23
 800074c:	4328      	orrs	r0, r5
 800074e:	07f6      	lsls	r6, r6, #31
 8000750:	4330      	orrs	r0, r6
 8000752:	bce0      	pop	{r5, r6, r7}
 8000754:	46ba      	mov	sl, r7
 8000756:	46b1      	mov	r9, r6
 8000758:	46a8      	mov	r8, r5
 800075a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800075c:	2b00      	cmp	r3, #0
 800075e:	d12b      	bne.n	80007b8 <__aeabi_fdiv+0x12c>
 8000760:	2001      	movs	r0, #1
 8000762:	464a      	mov	r2, r9
 8000764:	0033      	movs	r3, r6
 8000766:	494e      	ldr	r1, [pc, #312]	; (80008a0 <__aeabi_fdiv+0x214>)
 8000768:	4302      	orrs	r2, r0
 800076a:	0092      	lsls	r2, r2, #2
 800076c:	588a      	ldr	r2, [r1, r2]
 800076e:	4063      	eors	r3, r4
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4697      	mov	pc, r2
 8000774:	2d00      	cmp	r5, #0
 8000776:	d113      	bne.n	80007a0 <__aeabi_fdiv+0x114>
 8000778:	2304      	movs	r3, #4
 800077a:	4699      	mov	r9, r3
 800077c:	3b03      	subs	r3, #3
 800077e:	2700      	movs	r7, #0
 8000780:	469a      	mov	sl, r3
 8000782:	e79a      	b.n	80006ba <__aeabi_fdiv+0x2e>
 8000784:	2d00      	cmp	r5, #0
 8000786:	d105      	bne.n	8000794 <__aeabi_fdiv+0x108>
 8000788:	2308      	movs	r3, #8
 800078a:	4699      	mov	r9, r3
 800078c:	3b06      	subs	r3, #6
 800078e:	27ff      	movs	r7, #255	; 0xff
 8000790:	469a      	mov	sl, r3
 8000792:	e792      	b.n	80006ba <__aeabi_fdiv+0x2e>
 8000794:	230c      	movs	r3, #12
 8000796:	4699      	mov	r9, r3
 8000798:	3b09      	subs	r3, #9
 800079a:	27ff      	movs	r7, #255	; 0xff
 800079c:	469a      	mov	sl, r3
 800079e:	e78c      	b.n	80006ba <__aeabi_fdiv+0x2e>
 80007a0:	0028      	movs	r0, r5
 80007a2:	f002 f85d 	bl	8002860 <__clzsi2>
 80007a6:	2776      	movs	r7, #118	; 0x76
 80007a8:	1f43      	subs	r3, r0, #5
 80007aa:	409d      	lsls	r5, r3
 80007ac:	2300      	movs	r3, #0
 80007ae:	427f      	negs	r7, r7
 80007b0:	4699      	mov	r9, r3
 80007b2:	469a      	mov	sl, r3
 80007b4:	1a3f      	subs	r7, r7, r0
 80007b6:	e780      	b.n	80006ba <__aeabi_fdiv+0x2e>
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 f851 	bl	8002860 <__clzsi2>
 80007be:	4642      	mov	r2, r8
 80007c0:	1f43      	subs	r3, r0, #5
 80007c2:	2176      	movs	r1, #118	; 0x76
 80007c4:	409a      	lsls	r2, r3
 80007c6:	4249      	negs	r1, r1
 80007c8:	1a09      	subs	r1, r1, r0
 80007ca:	4690      	mov	r8, r2
 80007cc:	2000      	movs	r0, #0
 80007ce:	e785      	b.n	80006dc <__aeabi_fdiv+0x50>
 80007d0:	21ff      	movs	r1, #255	; 0xff
 80007d2:	2003      	movs	r0, #3
 80007d4:	e782      	b.n	80006dc <__aeabi_fdiv+0x50>
 80007d6:	001e      	movs	r6, r3
 80007d8:	20ff      	movs	r0, #255	; 0xff
 80007da:	2500      	movs	r5, #0
 80007dc:	e7b5      	b.n	800074a <__aeabi_fdiv+0xbe>
 80007de:	2301      	movs	r3, #1
 80007e0:	1a1b      	subs	r3, r3, r0
 80007e2:	2b1b      	cmp	r3, #27
 80007e4:	dcaf      	bgt.n	8000746 <__aeabi_fdiv+0xba>
 80007e6:	379e      	adds	r7, #158	; 0x9e
 80007e8:	0029      	movs	r1, r5
 80007ea:	40bd      	lsls	r5, r7
 80007ec:	40d9      	lsrs	r1, r3
 80007ee:	1e6a      	subs	r2, r5, #1
 80007f0:	4195      	sbcs	r5, r2
 80007f2:	430d      	orrs	r5, r1
 80007f4:	076b      	lsls	r3, r5, #29
 80007f6:	d004      	beq.n	8000802 <__aeabi_fdiv+0x176>
 80007f8:	230f      	movs	r3, #15
 80007fa:	402b      	ands	r3, r5
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d000      	beq.n	8000802 <__aeabi_fdiv+0x176>
 8000800:	3504      	adds	r5, #4
 8000802:	016b      	lsls	r3, r5, #5
 8000804:	d544      	bpl.n	8000890 <__aeabi_fdiv+0x204>
 8000806:	2001      	movs	r0, #1
 8000808:	2500      	movs	r5, #0
 800080a:	e79e      	b.n	800074a <__aeabi_fdiv+0xbe>
 800080c:	20ff      	movs	r0, #255	; 0xff
 800080e:	2500      	movs	r5, #0
 8000810:	e79b      	b.n	800074a <__aeabi_fdiv+0xbe>
 8000812:	2580      	movs	r5, #128	; 0x80
 8000814:	2600      	movs	r6, #0
 8000816:	20ff      	movs	r0, #255	; 0xff
 8000818:	03ed      	lsls	r5, r5, #15
 800081a:	e796      	b.n	800074a <__aeabi_fdiv+0xbe>
 800081c:	2300      	movs	r3, #0
 800081e:	4698      	mov	r8, r3
 8000820:	2080      	movs	r0, #128	; 0x80
 8000822:	03c0      	lsls	r0, r0, #15
 8000824:	4205      	tst	r5, r0
 8000826:	d009      	beq.n	800083c <__aeabi_fdiv+0x1b0>
 8000828:	4643      	mov	r3, r8
 800082a:	4203      	tst	r3, r0
 800082c:	d106      	bne.n	800083c <__aeabi_fdiv+0x1b0>
 800082e:	4645      	mov	r5, r8
 8000830:	4305      	orrs	r5, r0
 8000832:	026d      	lsls	r5, r5, #9
 8000834:	0026      	movs	r6, r4
 8000836:	20ff      	movs	r0, #255	; 0xff
 8000838:	0a6d      	lsrs	r5, r5, #9
 800083a:	e786      	b.n	800074a <__aeabi_fdiv+0xbe>
 800083c:	2080      	movs	r0, #128	; 0x80
 800083e:	03c0      	lsls	r0, r0, #15
 8000840:	4305      	orrs	r5, r0
 8000842:	026d      	lsls	r5, r5, #9
 8000844:	20ff      	movs	r0, #255	; 0xff
 8000846:	0a6d      	lsrs	r5, r5, #9
 8000848:	e77f      	b.n	800074a <__aeabi_fdiv+0xbe>
 800084a:	4641      	mov	r1, r8
 800084c:	016a      	lsls	r2, r5, #5
 800084e:	0148      	lsls	r0, r1, #5
 8000850:	4282      	cmp	r2, r0
 8000852:	d219      	bcs.n	8000888 <__aeabi_fdiv+0x1fc>
 8000854:	211b      	movs	r1, #27
 8000856:	2500      	movs	r5, #0
 8000858:	3f01      	subs	r7, #1
 800085a:	2601      	movs	r6, #1
 800085c:	0014      	movs	r4, r2
 800085e:	006d      	lsls	r5, r5, #1
 8000860:	0052      	lsls	r2, r2, #1
 8000862:	2c00      	cmp	r4, #0
 8000864:	db01      	blt.n	800086a <__aeabi_fdiv+0x1de>
 8000866:	4290      	cmp	r0, r2
 8000868:	d801      	bhi.n	800086e <__aeabi_fdiv+0x1e2>
 800086a:	1a12      	subs	r2, r2, r0
 800086c:	4335      	orrs	r5, r6
 800086e:	3901      	subs	r1, #1
 8000870:	2900      	cmp	r1, #0
 8000872:	d1f3      	bne.n	800085c <__aeabi_fdiv+0x1d0>
 8000874:	1e50      	subs	r0, r2, #1
 8000876:	4182      	sbcs	r2, r0
 8000878:	0038      	movs	r0, r7
 800087a:	307f      	adds	r0, #127	; 0x7f
 800087c:	001e      	movs	r6, r3
 800087e:	4315      	orrs	r5, r2
 8000880:	2800      	cmp	r0, #0
 8000882:	dd00      	ble.n	8000886 <__aeabi_fdiv+0x1fa>
 8000884:	e74b      	b.n	800071e <__aeabi_fdiv+0x92>
 8000886:	e7aa      	b.n	80007de <__aeabi_fdiv+0x152>
 8000888:	211a      	movs	r1, #26
 800088a:	2501      	movs	r5, #1
 800088c:	1a12      	subs	r2, r2, r0
 800088e:	e7e4      	b.n	800085a <__aeabi_fdiv+0x1ce>
 8000890:	01ad      	lsls	r5, r5, #6
 8000892:	2000      	movs	r0, #0
 8000894:	0a6d      	lsrs	r5, r5, #9
 8000896:	e758      	b.n	800074a <__aeabi_fdiv+0xbe>
 8000898:	08008730 	.word	0x08008730
 800089c:	f7ffffff 	.word	0xf7ffffff
 80008a0:	08008770 	.word	0x08008770

080008a4 <__eqsf2>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	0042      	lsls	r2, r0, #1
 80008a8:	024e      	lsls	r6, r1, #9
 80008aa:	004c      	lsls	r4, r1, #1
 80008ac:	0245      	lsls	r5, r0, #9
 80008ae:	0a6d      	lsrs	r5, r5, #9
 80008b0:	0e12      	lsrs	r2, r2, #24
 80008b2:	0fc3      	lsrs	r3, r0, #31
 80008b4:	0a76      	lsrs	r6, r6, #9
 80008b6:	0e24      	lsrs	r4, r4, #24
 80008b8:	0fc9      	lsrs	r1, r1, #31
 80008ba:	2aff      	cmp	r2, #255	; 0xff
 80008bc:	d00f      	beq.n	80008de <__eqsf2+0x3a>
 80008be:	2cff      	cmp	r4, #255	; 0xff
 80008c0:	d011      	beq.n	80008e6 <__eqsf2+0x42>
 80008c2:	2001      	movs	r0, #1
 80008c4:	42a2      	cmp	r2, r4
 80008c6:	d000      	beq.n	80008ca <__eqsf2+0x26>
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
 80008ca:	42b5      	cmp	r5, r6
 80008cc:	d1fc      	bne.n	80008c8 <__eqsf2+0x24>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d00d      	beq.n	80008ee <__eqsf2+0x4a>
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d1f8      	bne.n	80008c8 <__eqsf2+0x24>
 80008d6:	0028      	movs	r0, r5
 80008d8:	1e45      	subs	r5, r0, #1
 80008da:	41a8      	sbcs	r0, r5
 80008dc:	e7f4      	b.n	80008c8 <__eqsf2+0x24>
 80008de:	2001      	movs	r0, #1
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d1f1      	bne.n	80008c8 <__eqsf2+0x24>
 80008e4:	e7eb      	b.n	80008be <__eqsf2+0x1a>
 80008e6:	2001      	movs	r0, #1
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d1ed      	bne.n	80008c8 <__eqsf2+0x24>
 80008ec:	e7e9      	b.n	80008c2 <__eqsf2+0x1e>
 80008ee:	2000      	movs	r0, #0
 80008f0:	e7ea      	b.n	80008c8 <__eqsf2+0x24>
 80008f2:	46c0      	nop			; (mov r8, r8)

080008f4 <__gesf2>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	0042      	lsls	r2, r0, #1
 80008f8:	0246      	lsls	r6, r0, #9
 80008fa:	024d      	lsls	r5, r1, #9
 80008fc:	004c      	lsls	r4, r1, #1
 80008fe:	0fc3      	lsrs	r3, r0, #31
 8000900:	0a76      	lsrs	r6, r6, #9
 8000902:	0e12      	lsrs	r2, r2, #24
 8000904:	0a6d      	lsrs	r5, r5, #9
 8000906:	0e24      	lsrs	r4, r4, #24
 8000908:	0fc8      	lsrs	r0, r1, #31
 800090a:	2aff      	cmp	r2, #255	; 0xff
 800090c:	d01f      	beq.n	800094e <__gesf2+0x5a>
 800090e:	2cff      	cmp	r4, #255	; 0xff
 8000910:	d010      	beq.n	8000934 <__gesf2+0x40>
 8000912:	2a00      	cmp	r2, #0
 8000914:	d11f      	bne.n	8000956 <__gesf2+0x62>
 8000916:	4271      	negs	r1, r6
 8000918:	4171      	adcs	r1, r6
 800091a:	2c00      	cmp	r4, #0
 800091c:	d101      	bne.n	8000922 <__gesf2+0x2e>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d01e      	beq.n	8000960 <__gesf2+0x6c>
 8000922:	2900      	cmp	r1, #0
 8000924:	d10e      	bne.n	8000944 <__gesf2+0x50>
 8000926:	4283      	cmp	r3, r0
 8000928:	d01e      	beq.n	8000968 <__gesf2+0x74>
 800092a:	2102      	movs	r1, #2
 800092c:	1e58      	subs	r0, r3, #1
 800092e:	4008      	ands	r0, r1
 8000930:	3801      	subs	r0, #1
 8000932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000934:	2d00      	cmp	r5, #0
 8000936:	d126      	bne.n	8000986 <__gesf2+0x92>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d1f4      	bne.n	8000926 <__gesf2+0x32>
 800093c:	4271      	negs	r1, r6
 800093e:	4171      	adcs	r1, r6
 8000940:	2900      	cmp	r1, #0
 8000942:	d0f0      	beq.n	8000926 <__gesf2+0x32>
 8000944:	2800      	cmp	r0, #0
 8000946:	d1f4      	bne.n	8000932 <__gesf2+0x3e>
 8000948:	2001      	movs	r0, #1
 800094a:	4240      	negs	r0, r0
 800094c:	e7f1      	b.n	8000932 <__gesf2+0x3e>
 800094e:	2e00      	cmp	r6, #0
 8000950:	d119      	bne.n	8000986 <__gesf2+0x92>
 8000952:	2cff      	cmp	r4, #255	; 0xff
 8000954:	d0ee      	beq.n	8000934 <__gesf2+0x40>
 8000956:	2c00      	cmp	r4, #0
 8000958:	d1e5      	bne.n	8000926 <__gesf2+0x32>
 800095a:	2d00      	cmp	r5, #0
 800095c:	d1e3      	bne.n	8000926 <__gesf2+0x32>
 800095e:	e7e4      	b.n	800092a <__gesf2+0x36>
 8000960:	2000      	movs	r0, #0
 8000962:	2e00      	cmp	r6, #0
 8000964:	d0e5      	beq.n	8000932 <__gesf2+0x3e>
 8000966:	e7e0      	b.n	800092a <__gesf2+0x36>
 8000968:	42a2      	cmp	r2, r4
 800096a:	dc05      	bgt.n	8000978 <__gesf2+0x84>
 800096c:	dbea      	blt.n	8000944 <__gesf2+0x50>
 800096e:	42ae      	cmp	r6, r5
 8000970:	d802      	bhi.n	8000978 <__gesf2+0x84>
 8000972:	d3e7      	bcc.n	8000944 <__gesf2+0x50>
 8000974:	2000      	movs	r0, #0
 8000976:	e7dc      	b.n	8000932 <__gesf2+0x3e>
 8000978:	4241      	negs	r1, r0
 800097a:	4141      	adcs	r1, r0
 800097c:	4248      	negs	r0, r1
 800097e:	2102      	movs	r1, #2
 8000980:	4008      	ands	r0, r1
 8000982:	3801      	subs	r0, #1
 8000984:	e7d5      	b.n	8000932 <__gesf2+0x3e>
 8000986:	2002      	movs	r0, #2
 8000988:	4240      	negs	r0, r0
 800098a:	e7d2      	b.n	8000932 <__gesf2+0x3e>

0800098c <__lesf2>:
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	0042      	lsls	r2, r0, #1
 8000990:	0246      	lsls	r6, r0, #9
 8000992:	024d      	lsls	r5, r1, #9
 8000994:	004c      	lsls	r4, r1, #1
 8000996:	0fc3      	lsrs	r3, r0, #31
 8000998:	0a76      	lsrs	r6, r6, #9
 800099a:	0e12      	lsrs	r2, r2, #24
 800099c:	0a6d      	lsrs	r5, r5, #9
 800099e:	0e24      	lsrs	r4, r4, #24
 80009a0:	0fc8      	lsrs	r0, r1, #31
 80009a2:	2aff      	cmp	r2, #255	; 0xff
 80009a4:	d00d      	beq.n	80009c2 <__lesf2+0x36>
 80009a6:	2cff      	cmp	r4, #255	; 0xff
 80009a8:	d00f      	beq.n	80009ca <__lesf2+0x3e>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d123      	bne.n	80009f6 <__lesf2+0x6a>
 80009ae:	4271      	negs	r1, r6
 80009b0:	4171      	adcs	r1, r6
 80009b2:	2c00      	cmp	r4, #0
 80009b4:	d10f      	bne.n	80009d6 <__lesf2+0x4a>
 80009b6:	2d00      	cmp	r5, #0
 80009b8:	d10d      	bne.n	80009d6 <__lesf2+0x4a>
 80009ba:	2000      	movs	r0, #0
 80009bc:	2e00      	cmp	r6, #0
 80009be:	d014      	beq.n	80009ea <__lesf2+0x5e>
 80009c0:	e00d      	b.n	80009de <__lesf2+0x52>
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d110      	bne.n	80009e8 <__lesf2+0x5c>
 80009c6:	2cff      	cmp	r4, #255	; 0xff
 80009c8:	d115      	bne.n	80009f6 <__lesf2+0x6a>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d10c      	bne.n	80009e8 <__lesf2+0x5c>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d103      	bne.n	80009da <__lesf2+0x4e>
 80009d2:	4271      	negs	r1, r6
 80009d4:	4171      	adcs	r1, r6
 80009d6:	2900      	cmp	r1, #0
 80009d8:	d108      	bne.n	80009ec <__lesf2+0x60>
 80009da:	4283      	cmp	r3, r0
 80009dc:	d010      	beq.n	8000a00 <__lesf2+0x74>
 80009de:	2102      	movs	r1, #2
 80009e0:	1e58      	subs	r0, r3, #1
 80009e2:	4008      	ands	r0, r1
 80009e4:	3801      	subs	r0, #1
 80009e6:	e000      	b.n	80009ea <__lesf2+0x5e>
 80009e8:	2002      	movs	r0, #2
 80009ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ec:	2800      	cmp	r0, #0
 80009ee:	d1fc      	bne.n	80009ea <__lesf2+0x5e>
 80009f0:	2001      	movs	r0, #1
 80009f2:	4240      	negs	r0, r0
 80009f4:	e7f9      	b.n	80009ea <__lesf2+0x5e>
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d1ef      	bne.n	80009da <__lesf2+0x4e>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d1ed      	bne.n	80009da <__lesf2+0x4e>
 80009fe:	e7ee      	b.n	80009de <__lesf2+0x52>
 8000a00:	42a2      	cmp	r2, r4
 8000a02:	dc05      	bgt.n	8000a10 <__lesf2+0x84>
 8000a04:	dbf2      	blt.n	80009ec <__lesf2+0x60>
 8000a06:	42ae      	cmp	r6, r5
 8000a08:	d802      	bhi.n	8000a10 <__lesf2+0x84>
 8000a0a:	d3ef      	bcc.n	80009ec <__lesf2+0x60>
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	e7ec      	b.n	80009ea <__lesf2+0x5e>
 8000a10:	4241      	negs	r1, r0
 8000a12:	4141      	adcs	r1, r0
 8000a14:	4248      	negs	r0, r1
 8000a16:	2102      	movs	r1, #2
 8000a18:	4008      	ands	r0, r1
 8000a1a:	3801      	subs	r0, #1
 8000a1c:	e7e5      	b.n	80009ea <__lesf2+0x5e>
 8000a1e:	46c0      	nop			; (mov r8, r8)

08000a20 <__aeabi_fmul>:
 8000a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a22:	4657      	mov	r7, sl
 8000a24:	464e      	mov	r6, r9
 8000a26:	4645      	mov	r5, r8
 8000a28:	46de      	mov	lr, fp
 8000a2a:	0244      	lsls	r4, r0, #9
 8000a2c:	b5e0      	push	{r5, r6, r7, lr}
 8000a2e:	0045      	lsls	r5, r0, #1
 8000a30:	1c0f      	adds	r7, r1, #0
 8000a32:	0a64      	lsrs	r4, r4, #9
 8000a34:	0e2d      	lsrs	r5, r5, #24
 8000a36:	0fc6      	lsrs	r6, r0, #31
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d047      	beq.n	8000acc <__aeabi_fmul+0xac>
 8000a3c:	2dff      	cmp	r5, #255	; 0xff
 8000a3e:	d04d      	beq.n	8000adc <__aeabi_fmul+0xbc>
 8000a40:	2300      	movs	r3, #0
 8000a42:	2080      	movs	r0, #128	; 0x80
 8000a44:	469a      	mov	sl, r3
 8000a46:	469b      	mov	fp, r3
 8000a48:	00e4      	lsls	r4, r4, #3
 8000a4a:	04c0      	lsls	r0, r0, #19
 8000a4c:	4304      	orrs	r4, r0
 8000a4e:	3d7f      	subs	r5, #127	; 0x7f
 8000a50:	0278      	lsls	r0, r7, #9
 8000a52:	0a43      	lsrs	r3, r0, #9
 8000a54:	4699      	mov	r9, r3
 8000a56:	007a      	lsls	r2, r7, #1
 8000a58:	0ffb      	lsrs	r3, r7, #31
 8000a5a:	4698      	mov	r8, r3
 8000a5c:	0e12      	lsrs	r2, r2, #24
 8000a5e:	464b      	mov	r3, r9
 8000a60:	d044      	beq.n	8000aec <__aeabi_fmul+0xcc>
 8000a62:	2aff      	cmp	r2, #255	; 0xff
 8000a64:	d011      	beq.n	8000a8a <__aeabi_fmul+0x6a>
 8000a66:	00d8      	lsls	r0, r3, #3
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	04db      	lsls	r3, r3, #19
 8000a6c:	4303      	orrs	r3, r0
 8000a6e:	4699      	mov	r9, r3
 8000a70:	2000      	movs	r0, #0
 8000a72:	3a7f      	subs	r2, #127	; 0x7f
 8000a74:	18ad      	adds	r5, r5, r2
 8000a76:	4647      	mov	r7, r8
 8000a78:	4653      	mov	r3, sl
 8000a7a:	4077      	eors	r7, r6
 8000a7c:	1c69      	adds	r1, r5, #1
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	d83f      	bhi.n	8000b02 <__aeabi_fmul+0xe2>
 8000a82:	4a72      	ldr	r2, [pc, #456]	; (8000c4c <__aeabi_fmul+0x22c>)
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	58d3      	ldr	r3, [r2, r3]
 8000a88:	469f      	mov	pc, r3
 8000a8a:	35ff      	adds	r5, #255	; 0xff
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d000      	beq.n	8000a92 <__aeabi_fmul+0x72>
 8000a90:	e079      	b.n	8000b86 <__aeabi_fmul+0x166>
 8000a92:	4652      	mov	r2, sl
 8000a94:	2302      	movs	r3, #2
 8000a96:	431a      	orrs	r2, r3
 8000a98:	4692      	mov	sl, r2
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	e7eb      	b.n	8000a76 <__aeabi_fmul+0x56>
 8000a9e:	4647      	mov	r7, r8
 8000aa0:	464c      	mov	r4, r9
 8000aa2:	4683      	mov	fp, r0
 8000aa4:	465b      	mov	r3, fp
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d028      	beq.n	8000afc <__aeabi_fmul+0xdc>
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fmul+0x90>
 8000aae:	e0c6      	b.n	8000c3e <__aeabi_fmul+0x21e>
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d14f      	bne.n	8000b54 <__aeabi_fmul+0x134>
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	2400      	movs	r4, #0
 8000ab8:	05c0      	lsls	r0, r0, #23
 8000aba:	07ff      	lsls	r7, r7, #31
 8000abc:	4320      	orrs	r0, r4
 8000abe:	4338      	orrs	r0, r7
 8000ac0:	bcf0      	pop	{r4, r5, r6, r7}
 8000ac2:	46bb      	mov	fp, r7
 8000ac4:	46b2      	mov	sl, r6
 8000ac6:	46a9      	mov	r9, r5
 8000ac8:	46a0      	mov	r8, r4
 8000aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	d171      	bne.n	8000bb4 <__aeabi_fmul+0x194>
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	469a      	mov	sl, r3
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	469b      	mov	fp, r3
 8000ada:	e7b9      	b.n	8000a50 <__aeabi_fmul+0x30>
 8000adc:	2c00      	cmp	r4, #0
 8000ade:	d163      	bne.n	8000ba8 <__aeabi_fmul+0x188>
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	469a      	mov	sl, r3
 8000ae4:	3b06      	subs	r3, #6
 8000ae6:	25ff      	movs	r5, #255	; 0xff
 8000ae8:	469b      	mov	fp, r3
 8000aea:	e7b1      	b.n	8000a50 <__aeabi_fmul+0x30>
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d150      	bne.n	8000b92 <__aeabi_fmul+0x172>
 8000af0:	4652      	mov	r2, sl
 8000af2:	3301      	adds	r3, #1
 8000af4:	431a      	orrs	r2, r3
 8000af6:	4692      	mov	sl, r2
 8000af8:	2001      	movs	r0, #1
 8000afa:	e7bc      	b.n	8000a76 <__aeabi_fmul+0x56>
 8000afc:	20ff      	movs	r0, #255	; 0xff
 8000afe:	2400      	movs	r4, #0
 8000b00:	e7da      	b.n	8000ab8 <__aeabi_fmul+0x98>
 8000b02:	4648      	mov	r0, r9
 8000b04:	0c26      	lsrs	r6, r4, #16
 8000b06:	0424      	lsls	r4, r4, #16
 8000b08:	0c22      	lsrs	r2, r4, #16
 8000b0a:	0404      	lsls	r4, r0, #16
 8000b0c:	0c24      	lsrs	r4, r4, #16
 8000b0e:	464b      	mov	r3, r9
 8000b10:	0020      	movs	r0, r4
 8000b12:	0c1b      	lsrs	r3, r3, #16
 8000b14:	4350      	muls	r0, r2
 8000b16:	4374      	muls	r4, r6
 8000b18:	435a      	muls	r2, r3
 8000b1a:	435e      	muls	r6, r3
 8000b1c:	1912      	adds	r2, r2, r4
 8000b1e:	0c03      	lsrs	r3, r0, #16
 8000b20:	189b      	adds	r3, r3, r2
 8000b22:	429c      	cmp	r4, r3
 8000b24:	d903      	bls.n	8000b2e <__aeabi_fmul+0x10e>
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	0252      	lsls	r2, r2, #9
 8000b2a:	4694      	mov	ip, r2
 8000b2c:	4466      	add	r6, ip
 8000b2e:	0400      	lsls	r0, r0, #16
 8000b30:	041a      	lsls	r2, r3, #16
 8000b32:	0c00      	lsrs	r0, r0, #16
 8000b34:	1812      	adds	r2, r2, r0
 8000b36:	0194      	lsls	r4, r2, #6
 8000b38:	1e60      	subs	r0, r4, #1
 8000b3a:	4184      	sbcs	r4, r0
 8000b3c:	0c1b      	lsrs	r3, r3, #16
 8000b3e:	0e92      	lsrs	r2, r2, #26
 8000b40:	199b      	adds	r3, r3, r6
 8000b42:	4314      	orrs	r4, r2
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	431c      	orrs	r4, r3
 8000b48:	011b      	lsls	r3, r3, #4
 8000b4a:	d572      	bpl.n	8000c32 <__aeabi_fmul+0x212>
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	0863      	lsrs	r3, r4, #1
 8000b50:	4004      	ands	r4, r0
 8000b52:	431c      	orrs	r4, r3
 8000b54:	0008      	movs	r0, r1
 8000b56:	307f      	adds	r0, #127	; 0x7f
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	dd3c      	ble.n	8000bd6 <__aeabi_fmul+0x1b6>
 8000b5c:	0763      	lsls	r3, r4, #29
 8000b5e:	d004      	beq.n	8000b6a <__aeabi_fmul+0x14a>
 8000b60:	230f      	movs	r3, #15
 8000b62:	4023      	ands	r3, r4
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fmul+0x14a>
 8000b68:	3404      	adds	r4, #4
 8000b6a:	0123      	lsls	r3, r4, #4
 8000b6c:	d503      	bpl.n	8000b76 <__aeabi_fmul+0x156>
 8000b6e:	3180      	adds	r1, #128	; 0x80
 8000b70:	0008      	movs	r0, r1
 8000b72:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <__aeabi_fmul+0x230>)
 8000b74:	401c      	ands	r4, r3
 8000b76:	28fe      	cmp	r0, #254	; 0xfe
 8000b78:	dcc0      	bgt.n	8000afc <__aeabi_fmul+0xdc>
 8000b7a:	01a4      	lsls	r4, r4, #6
 8000b7c:	0a64      	lsrs	r4, r4, #9
 8000b7e:	b2c0      	uxtb	r0, r0
 8000b80:	e79a      	b.n	8000ab8 <__aeabi_fmul+0x98>
 8000b82:	0037      	movs	r7, r6
 8000b84:	e78e      	b.n	8000aa4 <__aeabi_fmul+0x84>
 8000b86:	4652      	mov	r2, sl
 8000b88:	2303      	movs	r3, #3
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	4692      	mov	sl, r2
 8000b8e:	2003      	movs	r0, #3
 8000b90:	e771      	b.n	8000a76 <__aeabi_fmul+0x56>
 8000b92:	4648      	mov	r0, r9
 8000b94:	f001 fe64 	bl	8002860 <__clzsi2>
 8000b98:	464a      	mov	r2, r9
 8000b9a:	1f43      	subs	r3, r0, #5
 8000b9c:	409a      	lsls	r2, r3
 8000b9e:	1a2d      	subs	r5, r5, r0
 8000ba0:	4691      	mov	r9, r2
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	3d76      	subs	r5, #118	; 0x76
 8000ba6:	e766      	b.n	8000a76 <__aeabi_fmul+0x56>
 8000ba8:	230c      	movs	r3, #12
 8000baa:	469a      	mov	sl, r3
 8000bac:	3b09      	subs	r3, #9
 8000bae:	25ff      	movs	r5, #255	; 0xff
 8000bb0:	469b      	mov	fp, r3
 8000bb2:	e74d      	b.n	8000a50 <__aeabi_fmul+0x30>
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f001 fe53 	bl	8002860 <__clzsi2>
 8000bba:	2576      	movs	r5, #118	; 0x76
 8000bbc:	1f43      	subs	r3, r0, #5
 8000bbe:	409c      	lsls	r4, r3
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	426d      	negs	r5, r5
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	469b      	mov	fp, r3
 8000bc8:	1a2d      	subs	r5, r5, r0
 8000bca:	e741      	b.n	8000a50 <__aeabi_fmul+0x30>
 8000bcc:	2480      	movs	r4, #128	; 0x80
 8000bce:	2700      	movs	r7, #0
 8000bd0:	20ff      	movs	r0, #255	; 0xff
 8000bd2:	03e4      	lsls	r4, r4, #15
 8000bd4:	e770      	b.n	8000ab8 <__aeabi_fmul+0x98>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	1a1b      	subs	r3, r3, r0
 8000bda:	2b1b      	cmp	r3, #27
 8000bdc:	dd00      	ble.n	8000be0 <__aeabi_fmul+0x1c0>
 8000bde:	e769      	b.n	8000ab4 <__aeabi_fmul+0x94>
 8000be0:	319e      	adds	r1, #158	; 0x9e
 8000be2:	0020      	movs	r0, r4
 8000be4:	408c      	lsls	r4, r1
 8000be6:	40d8      	lsrs	r0, r3
 8000be8:	1e63      	subs	r3, r4, #1
 8000bea:	419c      	sbcs	r4, r3
 8000bec:	4304      	orrs	r4, r0
 8000bee:	0763      	lsls	r3, r4, #29
 8000bf0:	d004      	beq.n	8000bfc <__aeabi_fmul+0x1dc>
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	4023      	ands	r3, r4
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d000      	beq.n	8000bfc <__aeabi_fmul+0x1dc>
 8000bfa:	3404      	adds	r4, #4
 8000bfc:	0163      	lsls	r3, r4, #5
 8000bfe:	d51a      	bpl.n	8000c36 <__aeabi_fmul+0x216>
 8000c00:	2001      	movs	r0, #1
 8000c02:	2400      	movs	r4, #0
 8000c04:	e758      	b.n	8000ab8 <__aeabi_fmul+0x98>
 8000c06:	2080      	movs	r0, #128	; 0x80
 8000c08:	03c0      	lsls	r0, r0, #15
 8000c0a:	4204      	tst	r4, r0
 8000c0c:	d009      	beq.n	8000c22 <__aeabi_fmul+0x202>
 8000c0e:	464b      	mov	r3, r9
 8000c10:	4203      	tst	r3, r0
 8000c12:	d106      	bne.n	8000c22 <__aeabi_fmul+0x202>
 8000c14:	464c      	mov	r4, r9
 8000c16:	4304      	orrs	r4, r0
 8000c18:	0264      	lsls	r4, r4, #9
 8000c1a:	4647      	mov	r7, r8
 8000c1c:	20ff      	movs	r0, #255	; 0xff
 8000c1e:	0a64      	lsrs	r4, r4, #9
 8000c20:	e74a      	b.n	8000ab8 <__aeabi_fmul+0x98>
 8000c22:	2080      	movs	r0, #128	; 0x80
 8000c24:	03c0      	lsls	r0, r0, #15
 8000c26:	4304      	orrs	r4, r0
 8000c28:	0264      	lsls	r4, r4, #9
 8000c2a:	0037      	movs	r7, r6
 8000c2c:	20ff      	movs	r0, #255	; 0xff
 8000c2e:	0a64      	lsrs	r4, r4, #9
 8000c30:	e742      	b.n	8000ab8 <__aeabi_fmul+0x98>
 8000c32:	0029      	movs	r1, r5
 8000c34:	e78e      	b.n	8000b54 <__aeabi_fmul+0x134>
 8000c36:	01a4      	lsls	r4, r4, #6
 8000c38:	2000      	movs	r0, #0
 8000c3a:	0a64      	lsrs	r4, r4, #9
 8000c3c:	e73c      	b.n	8000ab8 <__aeabi_fmul+0x98>
 8000c3e:	2080      	movs	r0, #128	; 0x80
 8000c40:	03c0      	lsls	r0, r0, #15
 8000c42:	4304      	orrs	r4, r0
 8000c44:	0264      	lsls	r4, r4, #9
 8000c46:	20ff      	movs	r0, #255	; 0xff
 8000c48:	0a64      	lsrs	r4, r4, #9
 8000c4a:	e735      	b.n	8000ab8 <__aeabi_fmul+0x98>
 8000c4c:	080087b0 	.word	0x080087b0
 8000c50:	f7ffffff 	.word	0xf7ffffff

08000c54 <__aeabi_fsub>:
 8000c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c56:	4646      	mov	r6, r8
 8000c58:	46d6      	mov	lr, sl
 8000c5a:	464f      	mov	r7, r9
 8000c5c:	0243      	lsls	r3, r0, #9
 8000c5e:	0a5b      	lsrs	r3, r3, #9
 8000c60:	00da      	lsls	r2, r3, #3
 8000c62:	4694      	mov	ip, r2
 8000c64:	024a      	lsls	r2, r1, #9
 8000c66:	b5c0      	push	{r6, r7, lr}
 8000c68:	0044      	lsls	r4, r0, #1
 8000c6a:	0a56      	lsrs	r6, r2, #9
 8000c6c:	1c05      	adds	r5, r0, #0
 8000c6e:	46b0      	mov	r8, r6
 8000c70:	0e24      	lsrs	r4, r4, #24
 8000c72:	004e      	lsls	r6, r1, #1
 8000c74:	0992      	lsrs	r2, r2, #6
 8000c76:	001f      	movs	r7, r3
 8000c78:	0020      	movs	r0, r4
 8000c7a:	4692      	mov	sl, r2
 8000c7c:	0fed      	lsrs	r5, r5, #31
 8000c7e:	0e36      	lsrs	r6, r6, #24
 8000c80:	0fc9      	lsrs	r1, r1, #31
 8000c82:	2eff      	cmp	r6, #255	; 0xff
 8000c84:	d100      	bne.n	8000c88 <__aeabi_fsub+0x34>
 8000c86:	e07f      	b.n	8000d88 <__aeabi_fsub+0x134>
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4051      	eors	r1, r2
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d051      	beq.n	8000d34 <__aeabi_fsub+0xe0>
 8000c90:	1ba2      	subs	r2, r4, r6
 8000c92:	4691      	mov	r9, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	dc00      	bgt.n	8000c9a <__aeabi_fsub+0x46>
 8000c98:	e07e      	b.n	8000d98 <__aeabi_fsub+0x144>
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fsub+0x4c>
 8000c9e:	e099      	b.n	8000dd4 <__aeabi_fsub+0x180>
 8000ca0:	2cff      	cmp	r4, #255	; 0xff
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fsub+0x52>
 8000ca4:	e08c      	b.n	8000dc0 <__aeabi_fsub+0x16c>
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	4652      	mov	r2, sl
 8000caa:	04db      	lsls	r3, r3, #19
 8000cac:	431a      	orrs	r2, r3
 8000cae:	4692      	mov	sl, r2
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	2a1b      	cmp	r2, #27
 8000cb6:	dc08      	bgt.n	8000cca <__aeabi_fsub+0x76>
 8000cb8:	4653      	mov	r3, sl
 8000cba:	2120      	movs	r1, #32
 8000cbc:	40d3      	lsrs	r3, r2
 8000cbe:	1a89      	subs	r1, r1, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	408a      	lsls	r2, r1
 8000cc4:	1e51      	subs	r1, r2, #1
 8000cc6:	418a      	sbcs	r2, r1
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	4662      	mov	r2, ip
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	015a      	lsls	r2, r3, #5
 8000cd0:	d400      	bmi.n	8000cd4 <__aeabi_fsub+0x80>
 8000cd2:	e0f3      	b.n	8000ebc <__aeabi_fsub+0x268>
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	099e      	lsrs	r6, r3, #6
 8000cd8:	0030      	movs	r0, r6
 8000cda:	f001 fdc1 	bl	8002860 <__clzsi2>
 8000cde:	3805      	subs	r0, #5
 8000ce0:	4086      	lsls	r6, r0
 8000ce2:	4284      	cmp	r4, r0
 8000ce4:	dd00      	ble.n	8000ce8 <__aeabi_fsub+0x94>
 8000ce6:	e0f7      	b.n	8000ed8 <__aeabi_fsub+0x284>
 8000ce8:	0032      	movs	r2, r6
 8000cea:	1b04      	subs	r4, r0, r4
 8000cec:	2020      	movs	r0, #32
 8000cee:	3401      	adds	r4, #1
 8000cf0:	40e2      	lsrs	r2, r4
 8000cf2:	1b04      	subs	r4, r0, r4
 8000cf4:	40a6      	lsls	r6, r4
 8000cf6:	0033      	movs	r3, r6
 8000cf8:	1e5e      	subs	r6, r3, #1
 8000cfa:	41b3      	sbcs	r3, r6
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	d004      	beq.n	8000d0e <__aeabi_fsub+0xba>
 8000d04:	220f      	movs	r2, #15
 8000d06:	401a      	ands	r2, r3
 8000d08:	2a04      	cmp	r2, #4
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_fsub+0xba>
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d400      	bmi.n	8000d14 <__aeabi_fsub+0xc0>
 8000d12:	e0d6      	b.n	8000ec2 <__aeabi_fsub+0x26e>
 8000d14:	1c62      	adds	r2, r4, #1
 8000d16:	2cfe      	cmp	r4, #254	; 0xfe
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0xc8>
 8000d1a:	e0da      	b.n	8000ed2 <__aeabi_fsub+0x27e>
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	0a5f      	lsrs	r7, r3, #9
 8000d20:	b2d0      	uxtb	r0, r2
 8000d22:	05c0      	lsls	r0, r0, #23
 8000d24:	4338      	orrs	r0, r7
 8000d26:	07ed      	lsls	r5, r5, #31
 8000d28:	4328      	orrs	r0, r5
 8000d2a:	bce0      	pop	{r5, r6, r7}
 8000d2c:	46ba      	mov	sl, r7
 8000d2e:	46b1      	mov	r9, r6
 8000d30:	46a8      	mov	r8, r5
 8000d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d34:	1ba2      	subs	r2, r4, r6
 8000d36:	4691      	mov	r9, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	dd63      	ble.n	8000e04 <__aeabi_fsub+0x1b0>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_fsub+0xee>
 8000d40:	e099      	b.n	8000e76 <__aeabi_fsub+0x222>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d03c      	beq.n	8000dc0 <__aeabi_fsub+0x16c>
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	4652      	mov	r2, sl
 8000d4a:	04db      	lsls	r3, r3, #19
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4692      	mov	sl, r2
 8000d50:	464a      	mov	r2, r9
 8000d52:	2301      	movs	r3, #1
 8000d54:	2a1b      	cmp	r2, #27
 8000d56:	dc08      	bgt.n	8000d6a <__aeabi_fsub+0x116>
 8000d58:	4653      	mov	r3, sl
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	40d3      	lsrs	r3, r2
 8000d5e:	1a89      	subs	r1, r1, r2
 8000d60:	4652      	mov	r2, sl
 8000d62:	408a      	lsls	r2, r1
 8000d64:	1e51      	subs	r1, r2, #1
 8000d66:	418a      	sbcs	r2, r1
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	015a      	lsls	r2, r3, #5
 8000d6e:	d400      	bmi.n	8000d72 <__aeabi_fsub+0x11e>
 8000d70:	e0a4      	b.n	8000ebc <__aeabi_fsub+0x268>
 8000d72:	3401      	adds	r4, #1
 8000d74:	2cff      	cmp	r4, #255	; 0xff
 8000d76:	d100      	bne.n	8000d7a <__aeabi_fsub+0x126>
 8000d78:	e0ab      	b.n	8000ed2 <__aeabi_fsub+0x27e>
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4997      	ldr	r1, [pc, #604]	; (8000fdc <__aeabi_fsub+0x388>)
 8000d7e:	401a      	ands	r2, r3
 8000d80:	085b      	lsrs	r3, r3, #1
 8000d82:	400b      	ands	r3, r1
 8000d84:	4313      	orrs	r3, r2
 8000d86:	e7bb      	b.n	8000d00 <__aeabi_fsub+0xac>
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	d032      	beq.n	8000df2 <__aeabi_fsub+0x19e>
 8000d8c:	428d      	cmp	r5, r1
 8000d8e:	d035      	beq.n	8000dfc <__aeabi_fsub+0x1a8>
 8000d90:	22ff      	movs	r2, #255	; 0xff
 8000d92:	4252      	negs	r2, r2
 8000d94:	4691      	mov	r9, r2
 8000d96:	44a1      	add	r9, r4
 8000d98:	464a      	mov	r2, r9
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d051      	beq.n	8000e42 <__aeabi_fsub+0x1ee>
 8000d9e:	1b30      	subs	r0, r6, r4
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	d000      	beq.n	8000da6 <__aeabi_fsub+0x152>
 8000da4:	e09c      	b.n	8000ee0 <__aeabi_fsub+0x28c>
 8000da6:	4663      	mov	r3, ip
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x15a>
 8000dac:	e0df      	b.n	8000f6e <__aeabi_fsub+0x31a>
 8000dae:	3801      	subs	r0, #1
 8000db0:	2800      	cmp	r0, #0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_fsub+0x162>
 8000db4:	e0f7      	b.n	8000fa6 <__aeabi_fsub+0x352>
 8000db6:	2eff      	cmp	r6, #255	; 0xff
 8000db8:	d000      	beq.n	8000dbc <__aeabi_fsub+0x168>
 8000dba:	e099      	b.n	8000ef0 <__aeabi_fsub+0x29c>
 8000dbc:	000d      	movs	r5, r1
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x172>
 8000dc4:	e085      	b.n	8000ed2 <__aeabi_fsub+0x27e>
 8000dc6:	2780      	movs	r7, #128	; 0x80
 8000dc8:	03ff      	lsls	r7, r7, #15
 8000dca:	431f      	orrs	r7, r3
 8000dcc:	027f      	lsls	r7, r7, #9
 8000dce:	20ff      	movs	r0, #255	; 0xff
 8000dd0:	0a7f      	lsrs	r7, r7, #9
 8000dd2:	e7a6      	b.n	8000d22 <__aeabi_fsub+0xce>
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d074      	beq.n	8000ec4 <__aeabi_fsub+0x270>
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4252      	negs	r2, r2
 8000dde:	4690      	mov	r8, r2
 8000de0:	44c1      	add	r9, r8
 8000de2:	464a      	mov	r2, r9
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	d100      	bne.n	8000dea <__aeabi_fsub+0x196>
 8000de8:	e0c8      	b.n	8000f7c <__aeabi_fsub+0x328>
 8000dea:	2cff      	cmp	r4, #255	; 0xff
 8000dec:	d000      	beq.n	8000df0 <__aeabi_fsub+0x19c>
 8000dee:	e75f      	b.n	8000cb0 <__aeabi_fsub+0x5c>
 8000df0:	e7e6      	b.n	8000dc0 <__aeabi_fsub+0x16c>
 8000df2:	2201      	movs	r2, #1
 8000df4:	4051      	eors	r1, r2
 8000df6:	42a9      	cmp	r1, r5
 8000df8:	d000      	beq.n	8000dfc <__aeabi_fsub+0x1a8>
 8000dfa:	e749      	b.n	8000c90 <__aeabi_fsub+0x3c>
 8000dfc:	22ff      	movs	r2, #255	; 0xff
 8000dfe:	4252      	negs	r2, r2
 8000e00:	4691      	mov	r9, r2
 8000e02:	44a1      	add	r9, r4
 8000e04:	464a      	mov	r2, r9
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d043      	beq.n	8000e92 <__aeabi_fsub+0x23e>
 8000e0a:	1b31      	subs	r1, r6, r4
 8000e0c:	2c00      	cmp	r4, #0
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_fsub+0x1be>
 8000e10:	e08c      	b.n	8000f2c <__aeabi_fsub+0x2d8>
 8000e12:	2eff      	cmp	r6, #255	; 0xff
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fsub+0x1c4>
 8000e16:	e092      	b.n	8000f3e <__aeabi_fsub+0x2ea>
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	4662      	mov	r2, ip
 8000e1c:	04db      	lsls	r3, r3, #19
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	4694      	mov	ip, r2
 8000e22:	2301      	movs	r3, #1
 8000e24:	291b      	cmp	r1, #27
 8000e26:	dc09      	bgt.n	8000e3c <__aeabi_fsub+0x1e8>
 8000e28:	2020      	movs	r0, #32
 8000e2a:	4663      	mov	r3, ip
 8000e2c:	4662      	mov	r2, ip
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	1a41      	subs	r1, r0, r1
 8000e32:	408a      	lsls	r2, r1
 8000e34:	0011      	movs	r1, r2
 8000e36:	1e48      	subs	r0, r1, #1
 8000e38:	4181      	sbcs	r1, r0
 8000e3a:	430b      	orrs	r3, r1
 8000e3c:	0034      	movs	r4, r6
 8000e3e:	4453      	add	r3, sl
 8000e40:	e794      	b.n	8000d6c <__aeabi_fsub+0x118>
 8000e42:	22fe      	movs	r2, #254	; 0xfe
 8000e44:	1c66      	adds	r6, r4, #1
 8000e46:	4232      	tst	r2, r6
 8000e48:	d164      	bne.n	8000f14 <__aeabi_fsub+0x2c0>
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_fsub+0x1fc>
 8000e4e:	e082      	b.n	8000f56 <__aeabi_fsub+0x302>
 8000e50:	4663      	mov	r3, ip
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x204>
 8000e56:	e0ab      	b.n	8000fb0 <__aeabi_fsub+0x35c>
 8000e58:	4653      	mov	r3, sl
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_fsub+0x20c>
 8000e5e:	e760      	b.n	8000d22 <__aeabi_fsub+0xce>
 8000e60:	4663      	mov	r3, ip
 8000e62:	4652      	mov	r2, sl
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	015a      	lsls	r2, r3, #5
 8000e68:	d400      	bmi.n	8000e6c <__aeabi_fsub+0x218>
 8000e6a:	e0aa      	b.n	8000fc2 <__aeabi_fsub+0x36e>
 8000e6c:	4663      	mov	r3, ip
 8000e6e:	4652      	mov	r2, sl
 8000e70:	000d      	movs	r5, r1
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	e744      	b.n	8000d00 <__aeabi_fsub+0xac>
 8000e76:	4652      	mov	r2, sl
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	d023      	beq.n	8000ec4 <__aeabi_fsub+0x270>
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4252      	negs	r2, r2
 8000e80:	4690      	mov	r8, r2
 8000e82:	44c1      	add	r9, r8
 8000e84:	464a      	mov	r2, r9
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	d075      	beq.n	8000f76 <__aeabi_fsub+0x322>
 8000e8a:	2cff      	cmp	r4, #255	; 0xff
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_fsub+0x23c>
 8000e8e:	e75f      	b.n	8000d50 <__aeabi_fsub+0xfc>
 8000e90:	e796      	b.n	8000dc0 <__aeabi_fsub+0x16c>
 8000e92:	26fe      	movs	r6, #254	; 0xfe
 8000e94:	3401      	adds	r4, #1
 8000e96:	4226      	tst	r6, r4
 8000e98:	d153      	bne.n	8000f42 <__aeabi_fsub+0x2ee>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d172      	bne.n	8000f84 <__aeabi_fsub+0x330>
 8000e9e:	4663      	mov	r3, ip
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x252>
 8000ea4:	e093      	b.n	8000fce <__aeabi_fsub+0x37a>
 8000ea6:	4653      	mov	r3, sl
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d100      	bne.n	8000eae <__aeabi_fsub+0x25a>
 8000eac:	e739      	b.n	8000d22 <__aeabi_fsub+0xce>
 8000eae:	4463      	add	r3, ip
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	015a      	lsls	r2, r3, #5
 8000eb4:	d502      	bpl.n	8000ebc <__aeabi_fsub+0x268>
 8000eb6:	4a4a      	ldr	r2, [pc, #296]	; (8000fe0 <__aeabi_fsub+0x38c>)
 8000eb8:	3401      	adds	r4, #1
 8000eba:	4013      	ands	r3, r2
 8000ebc:	075a      	lsls	r2, r3, #29
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_fsub+0x26e>
 8000ec0:	e720      	b.n	8000d04 <__aeabi_fsub+0xb0>
 8000ec2:	08db      	lsrs	r3, r3, #3
 8000ec4:	2cff      	cmp	r4, #255	; 0xff
 8000ec6:	d100      	bne.n	8000eca <__aeabi_fsub+0x276>
 8000ec8:	e77a      	b.n	8000dc0 <__aeabi_fsub+0x16c>
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	0a5f      	lsrs	r7, r3, #9
 8000ece:	b2e0      	uxtb	r0, r4
 8000ed0:	e727      	b.n	8000d22 <__aeabi_fsub+0xce>
 8000ed2:	20ff      	movs	r0, #255	; 0xff
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e724      	b.n	8000d22 <__aeabi_fsub+0xce>
 8000ed8:	4b41      	ldr	r3, [pc, #260]	; (8000fe0 <__aeabi_fsub+0x38c>)
 8000eda:	1a24      	subs	r4, r4, r0
 8000edc:	4033      	ands	r3, r6
 8000ede:	e70f      	b.n	8000d00 <__aeabi_fsub+0xac>
 8000ee0:	2eff      	cmp	r6, #255	; 0xff
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fsub+0x292>
 8000ee4:	e76a      	b.n	8000dbc <__aeabi_fsub+0x168>
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	4662      	mov	r2, ip
 8000eea:	04db      	lsls	r3, r3, #19
 8000eec:	431a      	orrs	r2, r3
 8000eee:	4694      	mov	ip, r2
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	281b      	cmp	r0, #27
 8000ef4:	dc09      	bgt.n	8000f0a <__aeabi_fsub+0x2b6>
 8000ef6:	2420      	movs	r4, #32
 8000ef8:	4663      	mov	r3, ip
 8000efa:	4662      	mov	r2, ip
 8000efc:	40c3      	lsrs	r3, r0
 8000efe:	1a20      	subs	r0, r4, r0
 8000f00:	4082      	lsls	r2, r0
 8000f02:	0010      	movs	r0, r2
 8000f04:	1e44      	subs	r4, r0, #1
 8000f06:	41a0      	sbcs	r0, r4
 8000f08:	4303      	orrs	r3, r0
 8000f0a:	4652      	mov	r2, sl
 8000f0c:	000d      	movs	r5, r1
 8000f0e:	0034      	movs	r4, r6
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	e6dc      	b.n	8000cce <__aeabi_fsub+0x7a>
 8000f14:	4663      	mov	r3, ip
 8000f16:	4652      	mov	r2, sl
 8000f18:	1a9e      	subs	r6, r3, r2
 8000f1a:	0173      	lsls	r3, r6, #5
 8000f1c:	d417      	bmi.n	8000f4e <__aeabi_fsub+0x2fa>
 8000f1e:	2e00      	cmp	r6, #0
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fsub+0x2d0>
 8000f22:	e6d9      	b.n	8000cd8 <__aeabi_fsub+0x84>
 8000f24:	2500      	movs	r5, #0
 8000f26:	2000      	movs	r0, #0
 8000f28:	2700      	movs	r7, #0
 8000f2a:	e6fa      	b.n	8000d22 <__aeabi_fsub+0xce>
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d044      	beq.n	8000fbc <__aeabi_fsub+0x368>
 8000f32:	3901      	subs	r1, #1
 8000f34:	2900      	cmp	r1, #0
 8000f36:	d04c      	beq.n	8000fd2 <__aeabi_fsub+0x37e>
 8000f38:	2eff      	cmp	r6, #255	; 0xff
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fsub+0x2ea>
 8000f3c:	e771      	b.n	8000e22 <__aeabi_fsub+0x1ce>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	e73e      	b.n	8000dc0 <__aeabi_fsub+0x16c>
 8000f42:	2cff      	cmp	r4, #255	; 0xff
 8000f44:	d0c5      	beq.n	8000ed2 <__aeabi_fsub+0x27e>
 8000f46:	4652      	mov	r2, sl
 8000f48:	4462      	add	r2, ip
 8000f4a:	0853      	lsrs	r3, r2, #1
 8000f4c:	e7b6      	b.n	8000ebc <__aeabi_fsub+0x268>
 8000f4e:	4663      	mov	r3, ip
 8000f50:	000d      	movs	r5, r1
 8000f52:	1ad6      	subs	r6, r2, r3
 8000f54:	e6c0      	b.n	8000cd8 <__aeabi_fsub+0x84>
 8000f56:	4662      	mov	r2, ip
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d116      	bne.n	8000f8a <__aeabi_fsub+0x336>
 8000f5c:	4653      	mov	r3, sl
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d000      	beq.n	8000f64 <__aeabi_fsub+0x310>
 8000f62:	e72b      	b.n	8000dbc <__aeabi_fsub+0x168>
 8000f64:	2780      	movs	r7, #128	; 0x80
 8000f66:	2500      	movs	r5, #0
 8000f68:	20ff      	movs	r0, #255	; 0xff
 8000f6a:	03ff      	lsls	r7, r7, #15
 8000f6c:	e6d9      	b.n	8000d22 <__aeabi_fsub+0xce>
 8000f6e:	000d      	movs	r5, r1
 8000f70:	4643      	mov	r3, r8
 8000f72:	0034      	movs	r4, r6
 8000f74:	e7a6      	b.n	8000ec4 <__aeabi_fsub+0x270>
 8000f76:	4653      	mov	r3, sl
 8000f78:	4463      	add	r3, ip
 8000f7a:	e6f7      	b.n	8000d6c <__aeabi_fsub+0x118>
 8000f7c:	4663      	mov	r3, ip
 8000f7e:	4652      	mov	r2, sl
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	e6a4      	b.n	8000cce <__aeabi_fsub+0x7a>
 8000f84:	4662      	mov	r2, ip
 8000f86:	2a00      	cmp	r2, #0
 8000f88:	d0d9      	beq.n	8000f3e <__aeabi_fsub+0x2ea>
 8000f8a:	4652      	mov	r2, sl
 8000f8c:	2a00      	cmp	r2, #0
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0x33e>
 8000f90:	e716      	b.n	8000dc0 <__aeabi_fsub+0x16c>
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	03d2      	lsls	r2, r2, #15
 8000f96:	4213      	tst	r3, r2
 8000f98:	d100      	bne.n	8000f9c <__aeabi_fsub+0x348>
 8000f9a:	e711      	b.n	8000dc0 <__aeabi_fsub+0x16c>
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	4210      	tst	r0, r2
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_fsub+0x350>
 8000fa2:	e70d      	b.n	8000dc0 <__aeabi_fsub+0x16c>
 8000fa4:	e70a      	b.n	8000dbc <__aeabi_fsub+0x168>
 8000fa6:	4652      	mov	r2, sl
 8000fa8:	000d      	movs	r5, r1
 8000faa:	0034      	movs	r4, r6
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	e68e      	b.n	8000cce <__aeabi_fsub+0x7a>
 8000fb0:	4653      	mov	r3, sl
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d008      	beq.n	8000fc8 <__aeabi_fsub+0x374>
 8000fb6:	000d      	movs	r5, r1
 8000fb8:	4647      	mov	r7, r8
 8000fba:	e6b2      	b.n	8000d22 <__aeabi_fsub+0xce>
 8000fbc:	4643      	mov	r3, r8
 8000fbe:	0034      	movs	r4, r6
 8000fc0:	e780      	b.n	8000ec4 <__aeabi_fsub+0x270>
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d000      	beq.n	8000fc8 <__aeabi_fsub+0x374>
 8000fc6:	e779      	b.n	8000ebc <__aeabi_fsub+0x268>
 8000fc8:	2500      	movs	r5, #0
 8000fca:	2700      	movs	r7, #0
 8000fcc:	e6a9      	b.n	8000d22 <__aeabi_fsub+0xce>
 8000fce:	4647      	mov	r7, r8
 8000fd0:	e6a7      	b.n	8000d22 <__aeabi_fsub+0xce>
 8000fd2:	4653      	mov	r3, sl
 8000fd4:	0034      	movs	r4, r6
 8000fd6:	4463      	add	r3, ip
 8000fd8:	e6c8      	b.n	8000d6c <__aeabi_fsub+0x118>
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	7dffffff 	.word	0x7dffffff
 8000fe0:	fbffffff 	.word	0xfbffffff

08000fe4 <__aeabi_fcmpun>:
 8000fe4:	0242      	lsls	r2, r0, #9
 8000fe6:	024b      	lsls	r3, r1, #9
 8000fe8:	0040      	lsls	r0, r0, #1
 8000fea:	0049      	lsls	r1, r1, #1
 8000fec:	0a52      	lsrs	r2, r2, #9
 8000fee:	0a5b      	lsrs	r3, r3, #9
 8000ff0:	0e09      	lsrs	r1, r1, #24
 8000ff2:	0e00      	lsrs	r0, r0, #24
 8000ff4:	28ff      	cmp	r0, #255	; 0xff
 8000ff6:	d006      	beq.n	8001006 <__aeabi_fcmpun+0x22>
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	29ff      	cmp	r1, #255	; 0xff
 8000ffc:	d102      	bne.n	8001004 <__aeabi_fcmpun+0x20>
 8000ffe:	0018      	movs	r0, r3
 8001000:	1e43      	subs	r3, r0, #1
 8001002:	4198      	sbcs	r0, r3
 8001004:	4770      	bx	lr
 8001006:	38fe      	subs	r0, #254	; 0xfe
 8001008:	2a00      	cmp	r2, #0
 800100a:	d1fb      	bne.n	8001004 <__aeabi_fcmpun+0x20>
 800100c:	e7f4      	b.n	8000ff8 <__aeabi_fcmpun+0x14>
 800100e:	46c0      	nop			; (mov r8, r8)

08001010 <__aeabi_f2iz>:
 8001010:	0241      	lsls	r1, r0, #9
 8001012:	0042      	lsls	r2, r0, #1
 8001014:	0fc3      	lsrs	r3, r0, #31
 8001016:	0a49      	lsrs	r1, r1, #9
 8001018:	2000      	movs	r0, #0
 800101a:	0e12      	lsrs	r2, r2, #24
 800101c:	2a7e      	cmp	r2, #126	; 0x7e
 800101e:	d903      	bls.n	8001028 <__aeabi_f2iz+0x18>
 8001020:	2a9d      	cmp	r2, #157	; 0x9d
 8001022:	d902      	bls.n	800102a <__aeabi_f2iz+0x1a>
 8001024:	4a09      	ldr	r2, [pc, #36]	; (800104c <__aeabi_f2iz+0x3c>)
 8001026:	1898      	adds	r0, r3, r2
 8001028:	4770      	bx	lr
 800102a:	2080      	movs	r0, #128	; 0x80
 800102c:	0400      	lsls	r0, r0, #16
 800102e:	4301      	orrs	r1, r0
 8001030:	2a95      	cmp	r2, #149	; 0x95
 8001032:	dc07      	bgt.n	8001044 <__aeabi_f2iz+0x34>
 8001034:	2096      	movs	r0, #150	; 0x96
 8001036:	1a82      	subs	r2, r0, r2
 8001038:	40d1      	lsrs	r1, r2
 800103a:	4248      	negs	r0, r1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f3      	bne.n	8001028 <__aeabi_f2iz+0x18>
 8001040:	0008      	movs	r0, r1
 8001042:	e7f1      	b.n	8001028 <__aeabi_f2iz+0x18>
 8001044:	3a96      	subs	r2, #150	; 0x96
 8001046:	4091      	lsls	r1, r2
 8001048:	e7f7      	b.n	800103a <__aeabi_f2iz+0x2a>
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	7fffffff 	.word	0x7fffffff

08001050 <__aeabi_i2f>:
 8001050:	b570      	push	{r4, r5, r6, lr}
 8001052:	2800      	cmp	r0, #0
 8001054:	d013      	beq.n	800107e <__aeabi_i2f+0x2e>
 8001056:	17c3      	asrs	r3, r0, #31
 8001058:	18c5      	adds	r5, r0, r3
 800105a:	405d      	eors	r5, r3
 800105c:	0fc4      	lsrs	r4, r0, #31
 800105e:	0028      	movs	r0, r5
 8001060:	f001 fbfe 	bl	8002860 <__clzsi2>
 8001064:	239e      	movs	r3, #158	; 0x9e
 8001066:	0001      	movs	r1, r0
 8001068:	1a1b      	subs	r3, r3, r0
 800106a:	2b96      	cmp	r3, #150	; 0x96
 800106c:	dc0f      	bgt.n	800108e <__aeabi_i2f+0x3e>
 800106e:	2808      	cmp	r0, #8
 8001070:	dd01      	ble.n	8001076 <__aeabi_i2f+0x26>
 8001072:	3908      	subs	r1, #8
 8001074:	408d      	lsls	r5, r1
 8001076:	026d      	lsls	r5, r5, #9
 8001078:	0a6d      	lsrs	r5, r5, #9
 800107a:	b2d8      	uxtb	r0, r3
 800107c:	e002      	b.n	8001084 <__aeabi_i2f+0x34>
 800107e:	2400      	movs	r4, #0
 8001080:	2000      	movs	r0, #0
 8001082:	2500      	movs	r5, #0
 8001084:	05c0      	lsls	r0, r0, #23
 8001086:	4328      	orrs	r0, r5
 8001088:	07e4      	lsls	r4, r4, #31
 800108a:	4320      	orrs	r0, r4
 800108c:	bd70      	pop	{r4, r5, r6, pc}
 800108e:	2b99      	cmp	r3, #153	; 0x99
 8001090:	dd0b      	ble.n	80010aa <__aeabi_i2f+0x5a>
 8001092:	2205      	movs	r2, #5
 8001094:	002e      	movs	r6, r5
 8001096:	1a12      	subs	r2, r2, r0
 8001098:	40d6      	lsrs	r6, r2
 800109a:	0002      	movs	r2, r0
 800109c:	321b      	adds	r2, #27
 800109e:	4095      	lsls	r5, r2
 80010a0:	0028      	movs	r0, r5
 80010a2:	1e45      	subs	r5, r0, #1
 80010a4:	41a8      	sbcs	r0, r5
 80010a6:	0035      	movs	r5, r6
 80010a8:	4305      	orrs	r5, r0
 80010aa:	2905      	cmp	r1, #5
 80010ac:	dd01      	ble.n	80010b2 <__aeabi_i2f+0x62>
 80010ae:	1f4a      	subs	r2, r1, #5
 80010b0:	4095      	lsls	r5, r2
 80010b2:	002a      	movs	r2, r5
 80010b4:	4e08      	ldr	r6, [pc, #32]	; (80010d8 <__aeabi_i2f+0x88>)
 80010b6:	4032      	ands	r2, r6
 80010b8:	0768      	lsls	r0, r5, #29
 80010ba:	d009      	beq.n	80010d0 <__aeabi_i2f+0x80>
 80010bc:	200f      	movs	r0, #15
 80010be:	4028      	ands	r0, r5
 80010c0:	2804      	cmp	r0, #4
 80010c2:	d005      	beq.n	80010d0 <__aeabi_i2f+0x80>
 80010c4:	3204      	adds	r2, #4
 80010c6:	0150      	lsls	r0, r2, #5
 80010c8:	d502      	bpl.n	80010d0 <__aeabi_i2f+0x80>
 80010ca:	239f      	movs	r3, #159	; 0x9f
 80010cc:	4032      	ands	r2, r6
 80010ce:	1a5b      	subs	r3, r3, r1
 80010d0:	0192      	lsls	r2, r2, #6
 80010d2:	0a55      	lsrs	r5, r2, #9
 80010d4:	b2d8      	uxtb	r0, r3
 80010d6:	e7d5      	b.n	8001084 <__aeabi_i2f+0x34>
 80010d8:	fbffffff 	.word	0xfbffffff

080010dc <__aeabi_ui2f>:
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	1e05      	subs	r5, r0, #0
 80010e0:	d00e      	beq.n	8001100 <__aeabi_ui2f+0x24>
 80010e2:	f001 fbbd 	bl	8002860 <__clzsi2>
 80010e6:	239e      	movs	r3, #158	; 0x9e
 80010e8:	0004      	movs	r4, r0
 80010ea:	1a1b      	subs	r3, r3, r0
 80010ec:	2b96      	cmp	r3, #150	; 0x96
 80010ee:	dc0c      	bgt.n	800110a <__aeabi_ui2f+0x2e>
 80010f0:	2808      	cmp	r0, #8
 80010f2:	dd01      	ble.n	80010f8 <__aeabi_ui2f+0x1c>
 80010f4:	3c08      	subs	r4, #8
 80010f6:	40a5      	lsls	r5, r4
 80010f8:	026d      	lsls	r5, r5, #9
 80010fa:	0a6d      	lsrs	r5, r5, #9
 80010fc:	b2d8      	uxtb	r0, r3
 80010fe:	e001      	b.n	8001104 <__aeabi_ui2f+0x28>
 8001100:	2000      	movs	r0, #0
 8001102:	2500      	movs	r5, #0
 8001104:	05c0      	lsls	r0, r0, #23
 8001106:	4328      	orrs	r0, r5
 8001108:	bd70      	pop	{r4, r5, r6, pc}
 800110a:	2b99      	cmp	r3, #153	; 0x99
 800110c:	dd09      	ble.n	8001122 <__aeabi_ui2f+0x46>
 800110e:	0002      	movs	r2, r0
 8001110:	0029      	movs	r1, r5
 8001112:	321b      	adds	r2, #27
 8001114:	4091      	lsls	r1, r2
 8001116:	1e4a      	subs	r2, r1, #1
 8001118:	4191      	sbcs	r1, r2
 800111a:	2205      	movs	r2, #5
 800111c:	1a12      	subs	r2, r2, r0
 800111e:	40d5      	lsrs	r5, r2
 8001120:	430d      	orrs	r5, r1
 8001122:	2c05      	cmp	r4, #5
 8001124:	dd01      	ble.n	800112a <__aeabi_ui2f+0x4e>
 8001126:	1f62      	subs	r2, r4, #5
 8001128:	4095      	lsls	r5, r2
 800112a:	0029      	movs	r1, r5
 800112c:	4e08      	ldr	r6, [pc, #32]	; (8001150 <__aeabi_ui2f+0x74>)
 800112e:	4031      	ands	r1, r6
 8001130:	076a      	lsls	r2, r5, #29
 8001132:	d009      	beq.n	8001148 <__aeabi_ui2f+0x6c>
 8001134:	200f      	movs	r0, #15
 8001136:	4028      	ands	r0, r5
 8001138:	2804      	cmp	r0, #4
 800113a:	d005      	beq.n	8001148 <__aeabi_ui2f+0x6c>
 800113c:	3104      	adds	r1, #4
 800113e:	014a      	lsls	r2, r1, #5
 8001140:	d502      	bpl.n	8001148 <__aeabi_ui2f+0x6c>
 8001142:	239f      	movs	r3, #159	; 0x9f
 8001144:	4031      	ands	r1, r6
 8001146:	1b1b      	subs	r3, r3, r4
 8001148:	0189      	lsls	r1, r1, #6
 800114a:	0a4d      	lsrs	r5, r1, #9
 800114c:	b2d8      	uxtb	r0, r3
 800114e:	e7d9      	b.n	8001104 <__aeabi_ui2f+0x28>
 8001150:	fbffffff 	.word	0xfbffffff

08001154 <__aeabi_dadd>:
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001156:	464f      	mov	r7, r9
 8001158:	46d6      	mov	lr, sl
 800115a:	4646      	mov	r6, r8
 800115c:	000d      	movs	r5, r1
 800115e:	0001      	movs	r1, r0
 8001160:	0018      	movs	r0, r3
 8001162:	b5c0      	push	{r6, r7, lr}
 8001164:	0017      	movs	r7, r2
 8001166:	032b      	lsls	r3, r5, #12
 8001168:	0a5a      	lsrs	r2, r3, #9
 800116a:	0f4b      	lsrs	r3, r1, #29
 800116c:	4313      	orrs	r3, r2
 800116e:	00ca      	lsls	r2, r1, #3
 8001170:	4691      	mov	r9, r2
 8001172:	0302      	lsls	r2, r0, #12
 8001174:	006e      	lsls	r6, r5, #1
 8001176:	0041      	lsls	r1, r0, #1
 8001178:	0a52      	lsrs	r2, r2, #9
 800117a:	0fec      	lsrs	r4, r5, #31
 800117c:	0f7d      	lsrs	r5, r7, #29
 800117e:	4315      	orrs	r5, r2
 8001180:	0d76      	lsrs	r6, r6, #21
 8001182:	0d49      	lsrs	r1, r1, #21
 8001184:	0fc0      	lsrs	r0, r0, #31
 8001186:	4682      	mov	sl, r0
 8001188:	46ac      	mov	ip, r5
 800118a:	00ff      	lsls	r7, r7, #3
 800118c:	1a72      	subs	r2, r6, r1
 800118e:	4284      	cmp	r4, r0
 8001190:	d100      	bne.n	8001194 <__aeabi_dadd+0x40>
 8001192:	e098      	b.n	80012c6 <__aeabi_dadd+0x172>
 8001194:	2a00      	cmp	r2, #0
 8001196:	dc00      	bgt.n	800119a <__aeabi_dadd+0x46>
 8001198:	e081      	b.n	800129e <__aeabi_dadd+0x14a>
 800119a:	2900      	cmp	r1, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x4c>
 800119e:	e0b6      	b.n	800130e <__aeabi_dadd+0x1ba>
 80011a0:	49c9      	ldr	r1, [pc, #804]	; (80014c8 <__aeabi_dadd+0x374>)
 80011a2:	428e      	cmp	r6, r1
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dadd+0x54>
 80011a6:	e172      	b.n	800148e <__aeabi_dadd+0x33a>
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	0028      	movs	r0, r5
 80011ac:	0409      	lsls	r1, r1, #16
 80011ae:	4308      	orrs	r0, r1
 80011b0:	4684      	mov	ip, r0
 80011b2:	2a38      	cmp	r2, #56	; 0x38
 80011b4:	dd00      	ble.n	80011b8 <__aeabi_dadd+0x64>
 80011b6:	e15e      	b.n	8001476 <__aeabi_dadd+0x322>
 80011b8:	2a1f      	cmp	r2, #31
 80011ba:	dd00      	ble.n	80011be <__aeabi_dadd+0x6a>
 80011bc:	e1ee      	b.n	800159c <__aeabi_dadd+0x448>
 80011be:	2020      	movs	r0, #32
 80011c0:	0039      	movs	r1, r7
 80011c2:	4665      	mov	r5, ip
 80011c4:	1a80      	subs	r0, r0, r2
 80011c6:	4087      	lsls	r7, r0
 80011c8:	40d1      	lsrs	r1, r2
 80011ca:	4085      	lsls	r5, r0
 80011cc:	430d      	orrs	r5, r1
 80011ce:	0039      	movs	r1, r7
 80011d0:	1e4f      	subs	r7, r1, #1
 80011d2:	41b9      	sbcs	r1, r7
 80011d4:	4667      	mov	r7, ip
 80011d6:	40d7      	lsrs	r7, r2
 80011d8:	4329      	orrs	r1, r5
 80011da:	1bdb      	subs	r3, r3, r7
 80011dc:	464a      	mov	r2, r9
 80011de:	1a55      	subs	r5, r2, r1
 80011e0:	45a9      	cmp	r9, r5
 80011e2:	4189      	sbcs	r1, r1
 80011e4:	4249      	negs	r1, r1
 80011e6:	1a5b      	subs	r3, r3, r1
 80011e8:	4698      	mov	r8, r3
 80011ea:	4643      	mov	r3, r8
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	d400      	bmi.n	80011f2 <__aeabi_dadd+0x9e>
 80011f0:	e0cc      	b.n	800138c <__aeabi_dadd+0x238>
 80011f2:	4643      	mov	r3, r8
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	0a5b      	lsrs	r3, r3, #9
 80011f8:	4698      	mov	r8, r3
 80011fa:	4643      	mov	r3, r8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d100      	bne.n	8001202 <__aeabi_dadd+0xae>
 8001200:	e12c      	b.n	800145c <__aeabi_dadd+0x308>
 8001202:	4640      	mov	r0, r8
 8001204:	f001 fb2c 	bl	8002860 <__clzsi2>
 8001208:	0001      	movs	r1, r0
 800120a:	3908      	subs	r1, #8
 800120c:	2220      	movs	r2, #32
 800120e:	0028      	movs	r0, r5
 8001210:	4643      	mov	r3, r8
 8001212:	1a52      	subs	r2, r2, r1
 8001214:	408b      	lsls	r3, r1
 8001216:	40d0      	lsrs	r0, r2
 8001218:	408d      	lsls	r5, r1
 800121a:	4303      	orrs	r3, r0
 800121c:	428e      	cmp	r6, r1
 800121e:	dd00      	ble.n	8001222 <__aeabi_dadd+0xce>
 8001220:	e117      	b.n	8001452 <__aeabi_dadd+0x2fe>
 8001222:	1b8e      	subs	r6, r1, r6
 8001224:	1c72      	adds	r2, r6, #1
 8001226:	2a1f      	cmp	r2, #31
 8001228:	dd00      	ble.n	800122c <__aeabi_dadd+0xd8>
 800122a:	e1a7      	b.n	800157c <__aeabi_dadd+0x428>
 800122c:	2120      	movs	r1, #32
 800122e:	0018      	movs	r0, r3
 8001230:	002e      	movs	r6, r5
 8001232:	1a89      	subs	r1, r1, r2
 8001234:	408d      	lsls	r5, r1
 8001236:	4088      	lsls	r0, r1
 8001238:	40d6      	lsrs	r6, r2
 800123a:	40d3      	lsrs	r3, r2
 800123c:	1e69      	subs	r1, r5, #1
 800123e:	418d      	sbcs	r5, r1
 8001240:	4330      	orrs	r0, r6
 8001242:	4698      	mov	r8, r3
 8001244:	2600      	movs	r6, #0
 8001246:	4305      	orrs	r5, r0
 8001248:	076b      	lsls	r3, r5, #29
 800124a:	d009      	beq.n	8001260 <__aeabi_dadd+0x10c>
 800124c:	230f      	movs	r3, #15
 800124e:	402b      	ands	r3, r5
 8001250:	2b04      	cmp	r3, #4
 8001252:	d005      	beq.n	8001260 <__aeabi_dadd+0x10c>
 8001254:	1d2b      	adds	r3, r5, #4
 8001256:	42ab      	cmp	r3, r5
 8001258:	41ad      	sbcs	r5, r5
 800125a:	426d      	negs	r5, r5
 800125c:	44a8      	add	r8, r5
 800125e:	001d      	movs	r5, r3
 8001260:	4643      	mov	r3, r8
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	d400      	bmi.n	8001268 <__aeabi_dadd+0x114>
 8001266:	e094      	b.n	8001392 <__aeabi_dadd+0x23e>
 8001268:	4b97      	ldr	r3, [pc, #604]	; (80014c8 <__aeabi_dadd+0x374>)
 800126a:	1c72      	adds	r2, r6, #1
 800126c:	429a      	cmp	r2, r3
 800126e:	d100      	bne.n	8001272 <__aeabi_dadd+0x11e>
 8001270:	e09d      	b.n	80013ae <__aeabi_dadd+0x25a>
 8001272:	4641      	mov	r1, r8
 8001274:	4b95      	ldr	r3, [pc, #596]	; (80014cc <__aeabi_dadd+0x378>)
 8001276:	08ed      	lsrs	r5, r5, #3
 8001278:	4019      	ands	r1, r3
 800127a:	000b      	movs	r3, r1
 800127c:	0552      	lsls	r2, r2, #21
 800127e:	0749      	lsls	r1, r1, #29
 8001280:	025b      	lsls	r3, r3, #9
 8001282:	4329      	orrs	r1, r5
 8001284:	0b1b      	lsrs	r3, r3, #12
 8001286:	0d52      	lsrs	r2, r2, #21
 8001288:	0512      	lsls	r2, r2, #20
 800128a:	4313      	orrs	r3, r2
 800128c:	07e4      	lsls	r4, r4, #31
 800128e:	4323      	orrs	r3, r4
 8001290:	0008      	movs	r0, r1
 8001292:	0019      	movs	r1, r3
 8001294:	bce0      	pop	{r5, r6, r7}
 8001296:	46ba      	mov	sl, r7
 8001298:	46b1      	mov	r9, r6
 800129a:	46a8      	mov	r8, r5
 800129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129e:	2a00      	cmp	r2, #0
 80012a0:	d043      	beq.n	800132a <__aeabi_dadd+0x1d6>
 80012a2:	1b8a      	subs	r2, r1, r6
 80012a4:	2e00      	cmp	r6, #0
 80012a6:	d000      	beq.n	80012aa <__aeabi_dadd+0x156>
 80012a8:	e12a      	b.n	8001500 <__aeabi_dadd+0x3ac>
 80012aa:	464c      	mov	r4, r9
 80012ac:	431c      	orrs	r4, r3
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dadd+0x15e>
 80012b0:	e1d1      	b.n	8001656 <__aeabi_dadd+0x502>
 80012b2:	1e54      	subs	r4, r2, #1
 80012b4:	2a01      	cmp	r2, #1
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x166>
 80012b8:	e21f      	b.n	80016fa <__aeabi_dadd+0x5a6>
 80012ba:	4d83      	ldr	r5, [pc, #524]	; (80014c8 <__aeabi_dadd+0x374>)
 80012bc:	42aa      	cmp	r2, r5
 80012be:	d100      	bne.n	80012c2 <__aeabi_dadd+0x16e>
 80012c0:	e272      	b.n	80017a8 <__aeabi_dadd+0x654>
 80012c2:	0022      	movs	r2, r4
 80012c4:	e123      	b.n	800150e <__aeabi_dadd+0x3ba>
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	dc00      	bgt.n	80012cc <__aeabi_dadd+0x178>
 80012ca:	e098      	b.n	80013fe <__aeabi_dadd+0x2aa>
 80012cc:	2900      	cmp	r1, #0
 80012ce:	d042      	beq.n	8001356 <__aeabi_dadd+0x202>
 80012d0:	497d      	ldr	r1, [pc, #500]	; (80014c8 <__aeabi_dadd+0x374>)
 80012d2:	428e      	cmp	r6, r1
 80012d4:	d100      	bne.n	80012d8 <__aeabi_dadd+0x184>
 80012d6:	e0da      	b.n	800148e <__aeabi_dadd+0x33a>
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	0028      	movs	r0, r5
 80012dc:	0409      	lsls	r1, r1, #16
 80012de:	4308      	orrs	r0, r1
 80012e0:	4684      	mov	ip, r0
 80012e2:	2a38      	cmp	r2, #56	; 0x38
 80012e4:	dd00      	ble.n	80012e8 <__aeabi_dadd+0x194>
 80012e6:	e129      	b.n	800153c <__aeabi_dadd+0x3e8>
 80012e8:	2a1f      	cmp	r2, #31
 80012ea:	dc00      	bgt.n	80012ee <__aeabi_dadd+0x19a>
 80012ec:	e187      	b.n	80015fe <__aeabi_dadd+0x4aa>
 80012ee:	0011      	movs	r1, r2
 80012f0:	4665      	mov	r5, ip
 80012f2:	3920      	subs	r1, #32
 80012f4:	40cd      	lsrs	r5, r1
 80012f6:	2a20      	cmp	r2, #32
 80012f8:	d004      	beq.n	8001304 <__aeabi_dadd+0x1b0>
 80012fa:	2040      	movs	r0, #64	; 0x40
 80012fc:	4661      	mov	r1, ip
 80012fe:	1a82      	subs	r2, r0, r2
 8001300:	4091      	lsls	r1, r2
 8001302:	430f      	orrs	r7, r1
 8001304:	0039      	movs	r1, r7
 8001306:	1e4f      	subs	r7, r1, #1
 8001308:	41b9      	sbcs	r1, r7
 800130a:	430d      	orrs	r5, r1
 800130c:	e11b      	b.n	8001546 <__aeabi_dadd+0x3f2>
 800130e:	0029      	movs	r1, r5
 8001310:	4339      	orrs	r1, r7
 8001312:	d100      	bne.n	8001316 <__aeabi_dadd+0x1c2>
 8001314:	e0b5      	b.n	8001482 <__aeabi_dadd+0x32e>
 8001316:	1e51      	subs	r1, r2, #1
 8001318:	2a01      	cmp	r2, #1
 800131a:	d100      	bne.n	800131e <__aeabi_dadd+0x1ca>
 800131c:	e1ab      	b.n	8001676 <__aeabi_dadd+0x522>
 800131e:	486a      	ldr	r0, [pc, #424]	; (80014c8 <__aeabi_dadd+0x374>)
 8001320:	4282      	cmp	r2, r0
 8001322:	d100      	bne.n	8001326 <__aeabi_dadd+0x1d2>
 8001324:	e1b2      	b.n	800168c <__aeabi_dadd+0x538>
 8001326:	000a      	movs	r2, r1
 8001328:	e743      	b.n	80011b2 <__aeabi_dadd+0x5e>
 800132a:	4969      	ldr	r1, [pc, #420]	; (80014d0 <__aeabi_dadd+0x37c>)
 800132c:	1c75      	adds	r5, r6, #1
 800132e:	420d      	tst	r5, r1
 8001330:	d000      	beq.n	8001334 <__aeabi_dadd+0x1e0>
 8001332:	e0cf      	b.n	80014d4 <__aeabi_dadd+0x380>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d000      	beq.n	800133a <__aeabi_dadd+0x1e6>
 8001338:	e193      	b.n	8001662 <__aeabi_dadd+0x50e>
 800133a:	4649      	mov	r1, r9
 800133c:	4319      	orrs	r1, r3
 800133e:	d100      	bne.n	8001342 <__aeabi_dadd+0x1ee>
 8001340:	e1d1      	b.n	80016e6 <__aeabi_dadd+0x592>
 8001342:	4661      	mov	r1, ip
 8001344:	4339      	orrs	r1, r7
 8001346:	d000      	beq.n	800134a <__aeabi_dadd+0x1f6>
 8001348:	e1e3      	b.n	8001712 <__aeabi_dadd+0x5be>
 800134a:	4649      	mov	r1, r9
 800134c:	0758      	lsls	r0, r3, #29
 800134e:	08c9      	lsrs	r1, r1, #3
 8001350:	4301      	orrs	r1, r0
 8001352:	08db      	lsrs	r3, r3, #3
 8001354:	e026      	b.n	80013a4 <__aeabi_dadd+0x250>
 8001356:	0029      	movs	r1, r5
 8001358:	4339      	orrs	r1, r7
 800135a:	d100      	bne.n	800135e <__aeabi_dadd+0x20a>
 800135c:	e091      	b.n	8001482 <__aeabi_dadd+0x32e>
 800135e:	1e51      	subs	r1, r2, #1
 8001360:	2a01      	cmp	r2, #1
 8001362:	d005      	beq.n	8001370 <__aeabi_dadd+0x21c>
 8001364:	4858      	ldr	r0, [pc, #352]	; (80014c8 <__aeabi_dadd+0x374>)
 8001366:	4282      	cmp	r2, r0
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x218>
 800136a:	e18f      	b.n	800168c <__aeabi_dadd+0x538>
 800136c:	000a      	movs	r2, r1
 800136e:	e7b8      	b.n	80012e2 <__aeabi_dadd+0x18e>
 8001370:	003d      	movs	r5, r7
 8001372:	444d      	add	r5, r9
 8001374:	454d      	cmp	r5, r9
 8001376:	4189      	sbcs	r1, r1
 8001378:	4463      	add	r3, ip
 800137a:	4698      	mov	r8, r3
 800137c:	4249      	negs	r1, r1
 800137e:	4488      	add	r8, r1
 8001380:	4643      	mov	r3, r8
 8001382:	2602      	movs	r6, #2
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	d500      	bpl.n	800138a <__aeabi_dadd+0x236>
 8001388:	e0eb      	b.n	8001562 <__aeabi_dadd+0x40e>
 800138a:	3e01      	subs	r6, #1
 800138c:	076b      	lsls	r3, r5, #29
 800138e:	d000      	beq.n	8001392 <__aeabi_dadd+0x23e>
 8001390:	e75c      	b.n	800124c <__aeabi_dadd+0xf8>
 8001392:	4643      	mov	r3, r8
 8001394:	08e9      	lsrs	r1, r5, #3
 8001396:	075a      	lsls	r2, r3, #29
 8001398:	4311      	orrs	r1, r2
 800139a:	0032      	movs	r2, r6
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	484a      	ldr	r0, [pc, #296]	; (80014c8 <__aeabi_dadd+0x374>)
 80013a0:	4282      	cmp	r2, r0
 80013a2:	d021      	beq.n	80013e8 <__aeabi_dadd+0x294>
 80013a4:	031b      	lsls	r3, r3, #12
 80013a6:	0552      	lsls	r2, r2, #21
 80013a8:	0b1b      	lsrs	r3, r3, #12
 80013aa:	0d52      	lsrs	r2, r2, #21
 80013ac:	e76c      	b.n	8001288 <__aeabi_dadd+0x134>
 80013ae:	2300      	movs	r3, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	e769      	b.n	8001288 <__aeabi_dadd+0x134>
 80013b4:	002a      	movs	r2, r5
 80013b6:	433a      	orrs	r2, r7
 80013b8:	d069      	beq.n	800148e <__aeabi_dadd+0x33a>
 80013ba:	464a      	mov	r2, r9
 80013bc:	0758      	lsls	r0, r3, #29
 80013be:	08d1      	lsrs	r1, r2, #3
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	031b      	lsls	r3, r3, #12
 80013c6:	4308      	orrs	r0, r1
 80013c8:	421a      	tst	r2, r3
 80013ca:	d007      	beq.n	80013dc <__aeabi_dadd+0x288>
 80013cc:	0029      	movs	r1, r5
 80013ce:	08ed      	lsrs	r5, r5, #3
 80013d0:	421d      	tst	r5, r3
 80013d2:	d103      	bne.n	80013dc <__aeabi_dadd+0x288>
 80013d4:	002a      	movs	r2, r5
 80013d6:	08ff      	lsrs	r7, r7, #3
 80013d8:	0748      	lsls	r0, r1, #29
 80013da:	4338      	orrs	r0, r7
 80013dc:	0f43      	lsrs	r3, r0, #29
 80013de:	00c1      	lsls	r1, r0, #3
 80013e0:	075b      	lsls	r3, r3, #29
 80013e2:	08c9      	lsrs	r1, r1, #3
 80013e4:	4319      	orrs	r1, r3
 80013e6:	0013      	movs	r3, r2
 80013e8:	000a      	movs	r2, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dadd+0x29c>
 80013ee:	e213      	b.n	8001818 <__aeabi_dadd+0x6c4>
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	0312      	lsls	r2, r2, #12
 80013f4:	4313      	orrs	r3, r2
 80013f6:	031b      	lsls	r3, r3, #12
 80013f8:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <__aeabi_dadd+0x374>)
 80013fa:	0b1b      	lsrs	r3, r3, #12
 80013fc:	e744      	b.n	8001288 <__aeabi_dadd+0x134>
 80013fe:	2a00      	cmp	r2, #0
 8001400:	d04b      	beq.n	800149a <__aeabi_dadd+0x346>
 8001402:	1b8a      	subs	r2, r1, r6
 8001404:	2e00      	cmp	r6, #0
 8001406:	d100      	bne.n	800140a <__aeabi_dadd+0x2b6>
 8001408:	e0e7      	b.n	80015da <__aeabi_dadd+0x486>
 800140a:	482f      	ldr	r0, [pc, #188]	; (80014c8 <__aeabi_dadd+0x374>)
 800140c:	4281      	cmp	r1, r0
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x2be>
 8001410:	e195      	b.n	800173e <__aeabi_dadd+0x5ea>
 8001412:	2080      	movs	r0, #128	; 0x80
 8001414:	0400      	lsls	r0, r0, #16
 8001416:	4303      	orrs	r3, r0
 8001418:	2a38      	cmp	r2, #56	; 0x38
 800141a:	dd00      	ble.n	800141e <__aeabi_dadd+0x2ca>
 800141c:	e143      	b.n	80016a6 <__aeabi_dadd+0x552>
 800141e:	2a1f      	cmp	r2, #31
 8001420:	dd00      	ble.n	8001424 <__aeabi_dadd+0x2d0>
 8001422:	e1db      	b.n	80017dc <__aeabi_dadd+0x688>
 8001424:	2020      	movs	r0, #32
 8001426:	001d      	movs	r5, r3
 8001428:	464e      	mov	r6, r9
 800142a:	1a80      	subs	r0, r0, r2
 800142c:	4085      	lsls	r5, r0
 800142e:	40d6      	lsrs	r6, r2
 8001430:	4335      	orrs	r5, r6
 8001432:	464e      	mov	r6, r9
 8001434:	4086      	lsls	r6, r0
 8001436:	0030      	movs	r0, r6
 8001438:	40d3      	lsrs	r3, r2
 800143a:	1e46      	subs	r6, r0, #1
 800143c:	41b0      	sbcs	r0, r6
 800143e:	449c      	add	ip, r3
 8001440:	4305      	orrs	r5, r0
 8001442:	19ed      	adds	r5, r5, r7
 8001444:	42bd      	cmp	r5, r7
 8001446:	419b      	sbcs	r3, r3
 8001448:	425b      	negs	r3, r3
 800144a:	4463      	add	r3, ip
 800144c:	4698      	mov	r8, r3
 800144e:	000e      	movs	r6, r1
 8001450:	e07f      	b.n	8001552 <__aeabi_dadd+0x3fe>
 8001452:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <__aeabi_dadd+0x378>)
 8001454:	1a76      	subs	r6, r6, r1
 8001456:	4013      	ands	r3, r2
 8001458:	4698      	mov	r8, r3
 800145a:	e6f5      	b.n	8001248 <__aeabi_dadd+0xf4>
 800145c:	0028      	movs	r0, r5
 800145e:	f001 f9ff 	bl	8002860 <__clzsi2>
 8001462:	0001      	movs	r1, r0
 8001464:	3118      	adds	r1, #24
 8001466:	291f      	cmp	r1, #31
 8001468:	dc00      	bgt.n	800146c <__aeabi_dadd+0x318>
 800146a:	e6cf      	b.n	800120c <__aeabi_dadd+0xb8>
 800146c:	002b      	movs	r3, r5
 800146e:	3808      	subs	r0, #8
 8001470:	4083      	lsls	r3, r0
 8001472:	2500      	movs	r5, #0
 8001474:	e6d2      	b.n	800121c <__aeabi_dadd+0xc8>
 8001476:	4662      	mov	r2, ip
 8001478:	433a      	orrs	r2, r7
 800147a:	0011      	movs	r1, r2
 800147c:	1e4f      	subs	r7, r1, #1
 800147e:	41b9      	sbcs	r1, r7
 8001480:	e6ac      	b.n	80011dc <__aeabi_dadd+0x88>
 8001482:	4649      	mov	r1, r9
 8001484:	0758      	lsls	r0, r3, #29
 8001486:	08c9      	lsrs	r1, r1, #3
 8001488:	4301      	orrs	r1, r0
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e787      	b.n	800139e <__aeabi_dadd+0x24a>
 800148e:	4649      	mov	r1, r9
 8001490:	075a      	lsls	r2, r3, #29
 8001492:	08c9      	lsrs	r1, r1, #3
 8001494:	4311      	orrs	r1, r2
 8001496:	08db      	lsrs	r3, r3, #3
 8001498:	e7a6      	b.n	80013e8 <__aeabi_dadd+0x294>
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <__aeabi_dadd+0x37c>)
 800149c:	1c70      	adds	r0, r6, #1
 800149e:	4208      	tst	r0, r1
 80014a0:	d000      	beq.n	80014a4 <__aeabi_dadd+0x350>
 80014a2:	e0bb      	b.n	800161c <__aeabi_dadd+0x4c8>
 80014a4:	2e00      	cmp	r6, #0
 80014a6:	d000      	beq.n	80014aa <__aeabi_dadd+0x356>
 80014a8:	e114      	b.n	80016d4 <__aeabi_dadd+0x580>
 80014aa:	4649      	mov	r1, r9
 80014ac:	4319      	orrs	r1, r3
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0x35e>
 80014b0:	e175      	b.n	800179e <__aeabi_dadd+0x64a>
 80014b2:	0029      	movs	r1, r5
 80014b4:	4339      	orrs	r1, r7
 80014b6:	d000      	beq.n	80014ba <__aeabi_dadd+0x366>
 80014b8:	e17e      	b.n	80017b8 <__aeabi_dadd+0x664>
 80014ba:	4649      	mov	r1, r9
 80014bc:	0758      	lsls	r0, r3, #29
 80014be:	08c9      	lsrs	r1, r1, #3
 80014c0:	4301      	orrs	r1, r0
 80014c2:	08db      	lsrs	r3, r3, #3
 80014c4:	e76e      	b.n	80013a4 <__aeabi_dadd+0x250>
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	000007ff 	.word	0x000007ff
 80014cc:	ff7fffff 	.word	0xff7fffff
 80014d0:	000007fe 	.word	0x000007fe
 80014d4:	4649      	mov	r1, r9
 80014d6:	1bcd      	subs	r5, r1, r7
 80014d8:	4661      	mov	r1, ip
 80014da:	1a58      	subs	r0, r3, r1
 80014dc:	45a9      	cmp	r9, r5
 80014de:	4189      	sbcs	r1, r1
 80014e0:	4249      	negs	r1, r1
 80014e2:	4688      	mov	r8, r1
 80014e4:	0001      	movs	r1, r0
 80014e6:	4640      	mov	r0, r8
 80014e8:	1a09      	subs	r1, r1, r0
 80014ea:	4688      	mov	r8, r1
 80014ec:	0209      	lsls	r1, r1, #8
 80014ee:	d500      	bpl.n	80014f2 <__aeabi_dadd+0x39e>
 80014f0:	e0a6      	b.n	8001640 <__aeabi_dadd+0x4ec>
 80014f2:	4641      	mov	r1, r8
 80014f4:	4329      	orrs	r1, r5
 80014f6:	d000      	beq.n	80014fa <__aeabi_dadd+0x3a6>
 80014f8:	e67f      	b.n	80011fa <__aeabi_dadd+0xa6>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2400      	movs	r4, #0
 80014fe:	e751      	b.n	80013a4 <__aeabi_dadd+0x250>
 8001500:	4cc7      	ldr	r4, [pc, #796]	; (8001820 <__aeabi_dadd+0x6cc>)
 8001502:	42a1      	cmp	r1, r4
 8001504:	d100      	bne.n	8001508 <__aeabi_dadd+0x3b4>
 8001506:	e0c7      	b.n	8001698 <__aeabi_dadd+0x544>
 8001508:	2480      	movs	r4, #128	; 0x80
 800150a:	0424      	lsls	r4, r4, #16
 800150c:	4323      	orrs	r3, r4
 800150e:	2a38      	cmp	r2, #56	; 0x38
 8001510:	dc54      	bgt.n	80015bc <__aeabi_dadd+0x468>
 8001512:	2a1f      	cmp	r2, #31
 8001514:	dd00      	ble.n	8001518 <__aeabi_dadd+0x3c4>
 8001516:	e0cc      	b.n	80016b2 <__aeabi_dadd+0x55e>
 8001518:	2420      	movs	r4, #32
 800151a:	4648      	mov	r0, r9
 800151c:	1aa4      	subs	r4, r4, r2
 800151e:	001d      	movs	r5, r3
 8001520:	464e      	mov	r6, r9
 8001522:	40a0      	lsls	r0, r4
 8001524:	40d6      	lsrs	r6, r2
 8001526:	40a5      	lsls	r5, r4
 8001528:	0004      	movs	r4, r0
 800152a:	40d3      	lsrs	r3, r2
 800152c:	4662      	mov	r2, ip
 800152e:	4335      	orrs	r5, r6
 8001530:	1e66      	subs	r6, r4, #1
 8001532:	41b4      	sbcs	r4, r6
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	469c      	mov	ip, r3
 8001538:	4325      	orrs	r5, r4
 800153a:	e044      	b.n	80015c6 <__aeabi_dadd+0x472>
 800153c:	4662      	mov	r2, ip
 800153e:	433a      	orrs	r2, r7
 8001540:	0015      	movs	r5, r2
 8001542:	1e6f      	subs	r7, r5, #1
 8001544:	41bd      	sbcs	r5, r7
 8001546:	444d      	add	r5, r9
 8001548:	454d      	cmp	r5, r9
 800154a:	4189      	sbcs	r1, r1
 800154c:	4249      	negs	r1, r1
 800154e:	4688      	mov	r8, r1
 8001550:	4498      	add	r8, r3
 8001552:	4643      	mov	r3, r8
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	d400      	bmi.n	800155a <__aeabi_dadd+0x406>
 8001558:	e718      	b.n	800138c <__aeabi_dadd+0x238>
 800155a:	4bb1      	ldr	r3, [pc, #708]	; (8001820 <__aeabi_dadd+0x6cc>)
 800155c:	3601      	adds	r6, #1
 800155e:	429e      	cmp	r6, r3
 8001560:	d049      	beq.n	80015f6 <__aeabi_dadd+0x4a2>
 8001562:	4642      	mov	r2, r8
 8001564:	4baf      	ldr	r3, [pc, #700]	; (8001824 <__aeabi_dadd+0x6d0>)
 8001566:	2101      	movs	r1, #1
 8001568:	401a      	ands	r2, r3
 800156a:	0013      	movs	r3, r2
 800156c:	086a      	lsrs	r2, r5, #1
 800156e:	400d      	ands	r5, r1
 8001570:	4315      	orrs	r5, r2
 8001572:	07d9      	lsls	r1, r3, #31
 8001574:	085b      	lsrs	r3, r3, #1
 8001576:	4698      	mov	r8, r3
 8001578:	430d      	orrs	r5, r1
 800157a:	e665      	b.n	8001248 <__aeabi_dadd+0xf4>
 800157c:	0018      	movs	r0, r3
 800157e:	3e1f      	subs	r6, #31
 8001580:	40f0      	lsrs	r0, r6
 8001582:	2a20      	cmp	r2, #32
 8001584:	d003      	beq.n	800158e <__aeabi_dadd+0x43a>
 8001586:	2140      	movs	r1, #64	; 0x40
 8001588:	1a8a      	subs	r2, r1, r2
 800158a:	4093      	lsls	r3, r2
 800158c:	431d      	orrs	r5, r3
 800158e:	1e69      	subs	r1, r5, #1
 8001590:	418d      	sbcs	r5, r1
 8001592:	2300      	movs	r3, #0
 8001594:	2600      	movs	r6, #0
 8001596:	4698      	mov	r8, r3
 8001598:	4305      	orrs	r5, r0
 800159a:	e6f7      	b.n	800138c <__aeabi_dadd+0x238>
 800159c:	0011      	movs	r1, r2
 800159e:	4665      	mov	r5, ip
 80015a0:	3920      	subs	r1, #32
 80015a2:	40cd      	lsrs	r5, r1
 80015a4:	2a20      	cmp	r2, #32
 80015a6:	d004      	beq.n	80015b2 <__aeabi_dadd+0x45e>
 80015a8:	2040      	movs	r0, #64	; 0x40
 80015aa:	4661      	mov	r1, ip
 80015ac:	1a82      	subs	r2, r0, r2
 80015ae:	4091      	lsls	r1, r2
 80015b0:	430f      	orrs	r7, r1
 80015b2:	0039      	movs	r1, r7
 80015b4:	1e4f      	subs	r7, r1, #1
 80015b6:	41b9      	sbcs	r1, r7
 80015b8:	4329      	orrs	r1, r5
 80015ba:	e60f      	b.n	80011dc <__aeabi_dadd+0x88>
 80015bc:	464a      	mov	r2, r9
 80015be:	4313      	orrs	r3, r2
 80015c0:	001d      	movs	r5, r3
 80015c2:	1e6b      	subs	r3, r5, #1
 80015c4:	419d      	sbcs	r5, r3
 80015c6:	1b7d      	subs	r5, r7, r5
 80015c8:	42af      	cmp	r7, r5
 80015ca:	419b      	sbcs	r3, r3
 80015cc:	4662      	mov	r2, ip
 80015ce:	425b      	negs	r3, r3
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	4698      	mov	r8, r3
 80015d4:	4654      	mov	r4, sl
 80015d6:	000e      	movs	r6, r1
 80015d8:	e607      	b.n	80011ea <__aeabi_dadd+0x96>
 80015da:	4648      	mov	r0, r9
 80015dc:	4318      	orrs	r0, r3
 80015de:	d100      	bne.n	80015e2 <__aeabi_dadd+0x48e>
 80015e0:	e0b3      	b.n	800174a <__aeabi_dadd+0x5f6>
 80015e2:	1e50      	subs	r0, r2, #1
 80015e4:	2a01      	cmp	r2, #1
 80015e6:	d100      	bne.n	80015ea <__aeabi_dadd+0x496>
 80015e8:	e10d      	b.n	8001806 <__aeabi_dadd+0x6b2>
 80015ea:	4d8d      	ldr	r5, [pc, #564]	; (8001820 <__aeabi_dadd+0x6cc>)
 80015ec:	42aa      	cmp	r2, r5
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x49e>
 80015f0:	e0a5      	b.n	800173e <__aeabi_dadd+0x5ea>
 80015f2:	0002      	movs	r2, r0
 80015f4:	e710      	b.n	8001418 <__aeabi_dadd+0x2c4>
 80015f6:	0032      	movs	r2, r6
 80015f8:	2300      	movs	r3, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	e644      	b.n	8001288 <__aeabi_dadd+0x134>
 80015fe:	2120      	movs	r1, #32
 8001600:	0038      	movs	r0, r7
 8001602:	1a89      	subs	r1, r1, r2
 8001604:	4665      	mov	r5, ip
 8001606:	408f      	lsls	r7, r1
 8001608:	408d      	lsls	r5, r1
 800160a:	40d0      	lsrs	r0, r2
 800160c:	1e79      	subs	r1, r7, #1
 800160e:	418f      	sbcs	r7, r1
 8001610:	4305      	orrs	r5, r0
 8001612:	433d      	orrs	r5, r7
 8001614:	4667      	mov	r7, ip
 8001616:	40d7      	lsrs	r7, r2
 8001618:	19db      	adds	r3, r3, r7
 800161a:	e794      	b.n	8001546 <__aeabi_dadd+0x3f2>
 800161c:	4a80      	ldr	r2, [pc, #512]	; (8001820 <__aeabi_dadd+0x6cc>)
 800161e:	4290      	cmp	r0, r2
 8001620:	d100      	bne.n	8001624 <__aeabi_dadd+0x4d0>
 8001622:	e0ec      	b.n	80017fe <__aeabi_dadd+0x6aa>
 8001624:	0039      	movs	r1, r7
 8001626:	4449      	add	r1, r9
 8001628:	4549      	cmp	r1, r9
 800162a:	4192      	sbcs	r2, r2
 800162c:	4463      	add	r3, ip
 800162e:	4252      	negs	r2, r2
 8001630:	189b      	adds	r3, r3, r2
 8001632:	07dd      	lsls	r5, r3, #31
 8001634:	0849      	lsrs	r1, r1, #1
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	4698      	mov	r8, r3
 800163a:	0006      	movs	r6, r0
 800163c:	430d      	orrs	r5, r1
 800163e:	e6a5      	b.n	800138c <__aeabi_dadd+0x238>
 8001640:	464a      	mov	r2, r9
 8001642:	1abd      	subs	r5, r7, r2
 8001644:	42af      	cmp	r7, r5
 8001646:	4189      	sbcs	r1, r1
 8001648:	4662      	mov	r2, ip
 800164a:	4249      	negs	r1, r1
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	1a5b      	subs	r3, r3, r1
 8001650:	4698      	mov	r8, r3
 8001652:	4654      	mov	r4, sl
 8001654:	e5d1      	b.n	80011fa <__aeabi_dadd+0xa6>
 8001656:	076c      	lsls	r4, r5, #29
 8001658:	08f9      	lsrs	r1, r7, #3
 800165a:	4321      	orrs	r1, r4
 800165c:	08eb      	lsrs	r3, r5, #3
 800165e:	0004      	movs	r4, r0
 8001660:	e69d      	b.n	800139e <__aeabi_dadd+0x24a>
 8001662:	464a      	mov	r2, r9
 8001664:	431a      	orrs	r2, r3
 8001666:	d175      	bne.n	8001754 <__aeabi_dadd+0x600>
 8001668:	4661      	mov	r1, ip
 800166a:	4339      	orrs	r1, r7
 800166c:	d114      	bne.n	8001698 <__aeabi_dadd+0x544>
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	2400      	movs	r4, #0
 8001672:	031b      	lsls	r3, r3, #12
 8001674:	e6bc      	b.n	80013f0 <__aeabi_dadd+0x29c>
 8001676:	464a      	mov	r2, r9
 8001678:	1bd5      	subs	r5, r2, r7
 800167a:	45a9      	cmp	r9, r5
 800167c:	4189      	sbcs	r1, r1
 800167e:	4662      	mov	r2, ip
 8001680:	4249      	negs	r1, r1
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	1a5b      	subs	r3, r3, r1
 8001686:	4698      	mov	r8, r3
 8001688:	2601      	movs	r6, #1
 800168a:	e5ae      	b.n	80011ea <__aeabi_dadd+0x96>
 800168c:	464a      	mov	r2, r9
 800168e:	08d1      	lsrs	r1, r2, #3
 8001690:	075a      	lsls	r2, r3, #29
 8001692:	4311      	orrs	r1, r2
 8001694:	08db      	lsrs	r3, r3, #3
 8001696:	e6a7      	b.n	80013e8 <__aeabi_dadd+0x294>
 8001698:	4663      	mov	r3, ip
 800169a:	08f9      	lsrs	r1, r7, #3
 800169c:	075a      	lsls	r2, r3, #29
 800169e:	4654      	mov	r4, sl
 80016a0:	4311      	orrs	r1, r2
 80016a2:	08db      	lsrs	r3, r3, #3
 80016a4:	e6a0      	b.n	80013e8 <__aeabi_dadd+0x294>
 80016a6:	464a      	mov	r2, r9
 80016a8:	4313      	orrs	r3, r2
 80016aa:	001d      	movs	r5, r3
 80016ac:	1e6b      	subs	r3, r5, #1
 80016ae:	419d      	sbcs	r5, r3
 80016b0:	e6c7      	b.n	8001442 <__aeabi_dadd+0x2ee>
 80016b2:	0014      	movs	r4, r2
 80016b4:	001e      	movs	r6, r3
 80016b6:	3c20      	subs	r4, #32
 80016b8:	40e6      	lsrs	r6, r4
 80016ba:	2a20      	cmp	r2, #32
 80016bc:	d005      	beq.n	80016ca <__aeabi_dadd+0x576>
 80016be:	2440      	movs	r4, #64	; 0x40
 80016c0:	1aa2      	subs	r2, r4, r2
 80016c2:	4093      	lsls	r3, r2
 80016c4:	464a      	mov	r2, r9
 80016c6:	431a      	orrs	r2, r3
 80016c8:	4691      	mov	r9, r2
 80016ca:	464d      	mov	r5, r9
 80016cc:	1e6b      	subs	r3, r5, #1
 80016ce:	419d      	sbcs	r5, r3
 80016d0:	4335      	orrs	r5, r6
 80016d2:	e778      	b.n	80015c6 <__aeabi_dadd+0x472>
 80016d4:	464a      	mov	r2, r9
 80016d6:	431a      	orrs	r2, r3
 80016d8:	d000      	beq.n	80016dc <__aeabi_dadd+0x588>
 80016da:	e66b      	b.n	80013b4 <__aeabi_dadd+0x260>
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	08f9      	lsrs	r1, r7, #3
 80016e0:	4319      	orrs	r1, r3
 80016e2:	08eb      	lsrs	r3, r5, #3
 80016e4:	e680      	b.n	80013e8 <__aeabi_dadd+0x294>
 80016e6:	4661      	mov	r1, ip
 80016e8:	4339      	orrs	r1, r7
 80016ea:	d054      	beq.n	8001796 <__aeabi_dadd+0x642>
 80016ec:	4663      	mov	r3, ip
 80016ee:	08f9      	lsrs	r1, r7, #3
 80016f0:	075c      	lsls	r4, r3, #29
 80016f2:	4321      	orrs	r1, r4
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	0004      	movs	r4, r0
 80016f8:	e654      	b.n	80013a4 <__aeabi_dadd+0x250>
 80016fa:	464a      	mov	r2, r9
 80016fc:	1abd      	subs	r5, r7, r2
 80016fe:	42af      	cmp	r7, r5
 8001700:	4189      	sbcs	r1, r1
 8001702:	4662      	mov	r2, ip
 8001704:	4249      	negs	r1, r1
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	1a5b      	subs	r3, r3, r1
 800170a:	4698      	mov	r8, r3
 800170c:	0004      	movs	r4, r0
 800170e:	2601      	movs	r6, #1
 8001710:	e56b      	b.n	80011ea <__aeabi_dadd+0x96>
 8001712:	464a      	mov	r2, r9
 8001714:	1bd5      	subs	r5, r2, r7
 8001716:	45a9      	cmp	r9, r5
 8001718:	4189      	sbcs	r1, r1
 800171a:	4662      	mov	r2, ip
 800171c:	4249      	negs	r1, r1
 800171e:	1a9a      	subs	r2, r3, r2
 8001720:	1a52      	subs	r2, r2, r1
 8001722:	4690      	mov	r8, r2
 8001724:	0212      	lsls	r2, r2, #8
 8001726:	d532      	bpl.n	800178e <__aeabi_dadd+0x63a>
 8001728:	464a      	mov	r2, r9
 800172a:	1abd      	subs	r5, r7, r2
 800172c:	42af      	cmp	r7, r5
 800172e:	4189      	sbcs	r1, r1
 8001730:	4662      	mov	r2, ip
 8001732:	4249      	negs	r1, r1
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	1a5b      	subs	r3, r3, r1
 8001738:	4698      	mov	r8, r3
 800173a:	0004      	movs	r4, r0
 800173c:	e584      	b.n	8001248 <__aeabi_dadd+0xf4>
 800173e:	4663      	mov	r3, ip
 8001740:	08f9      	lsrs	r1, r7, #3
 8001742:	075a      	lsls	r2, r3, #29
 8001744:	4311      	orrs	r1, r2
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	e64e      	b.n	80013e8 <__aeabi_dadd+0x294>
 800174a:	08f9      	lsrs	r1, r7, #3
 800174c:	0768      	lsls	r0, r5, #29
 800174e:	4301      	orrs	r1, r0
 8001750:	08eb      	lsrs	r3, r5, #3
 8001752:	e624      	b.n	800139e <__aeabi_dadd+0x24a>
 8001754:	4662      	mov	r2, ip
 8001756:	433a      	orrs	r2, r7
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x608>
 800175a:	e698      	b.n	800148e <__aeabi_dadd+0x33a>
 800175c:	464a      	mov	r2, r9
 800175e:	08d1      	lsrs	r1, r2, #3
 8001760:	075a      	lsls	r2, r3, #29
 8001762:	4311      	orrs	r1, r2
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	031b      	lsls	r3, r3, #12
 800176a:	421a      	tst	r2, r3
 800176c:	d008      	beq.n	8001780 <__aeabi_dadd+0x62c>
 800176e:	4660      	mov	r0, ip
 8001770:	08c5      	lsrs	r5, r0, #3
 8001772:	421d      	tst	r5, r3
 8001774:	d104      	bne.n	8001780 <__aeabi_dadd+0x62c>
 8001776:	4654      	mov	r4, sl
 8001778:	002a      	movs	r2, r5
 800177a:	08f9      	lsrs	r1, r7, #3
 800177c:	0743      	lsls	r3, r0, #29
 800177e:	4319      	orrs	r1, r3
 8001780:	0f4b      	lsrs	r3, r1, #29
 8001782:	00c9      	lsls	r1, r1, #3
 8001784:	075b      	lsls	r3, r3, #29
 8001786:	08c9      	lsrs	r1, r1, #3
 8001788:	4319      	orrs	r1, r3
 800178a:	0013      	movs	r3, r2
 800178c:	e62c      	b.n	80013e8 <__aeabi_dadd+0x294>
 800178e:	4641      	mov	r1, r8
 8001790:	4329      	orrs	r1, r5
 8001792:	d000      	beq.n	8001796 <__aeabi_dadd+0x642>
 8001794:	e5fa      	b.n	800138c <__aeabi_dadd+0x238>
 8001796:	2300      	movs	r3, #0
 8001798:	000a      	movs	r2, r1
 800179a:	2400      	movs	r4, #0
 800179c:	e602      	b.n	80013a4 <__aeabi_dadd+0x250>
 800179e:	076b      	lsls	r3, r5, #29
 80017a0:	08f9      	lsrs	r1, r7, #3
 80017a2:	4319      	orrs	r1, r3
 80017a4:	08eb      	lsrs	r3, r5, #3
 80017a6:	e5fd      	b.n	80013a4 <__aeabi_dadd+0x250>
 80017a8:	4663      	mov	r3, ip
 80017aa:	08f9      	lsrs	r1, r7, #3
 80017ac:	075b      	lsls	r3, r3, #29
 80017ae:	4319      	orrs	r1, r3
 80017b0:	4663      	mov	r3, ip
 80017b2:	0004      	movs	r4, r0
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	e617      	b.n	80013e8 <__aeabi_dadd+0x294>
 80017b8:	003d      	movs	r5, r7
 80017ba:	444d      	add	r5, r9
 80017bc:	4463      	add	r3, ip
 80017be:	454d      	cmp	r5, r9
 80017c0:	4189      	sbcs	r1, r1
 80017c2:	4698      	mov	r8, r3
 80017c4:	4249      	negs	r1, r1
 80017c6:	4488      	add	r8, r1
 80017c8:	4643      	mov	r3, r8
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	d400      	bmi.n	80017d0 <__aeabi_dadd+0x67c>
 80017ce:	e5dd      	b.n	800138c <__aeabi_dadd+0x238>
 80017d0:	4642      	mov	r2, r8
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <__aeabi_dadd+0x6d0>)
 80017d4:	2601      	movs	r6, #1
 80017d6:	401a      	ands	r2, r3
 80017d8:	4690      	mov	r8, r2
 80017da:	e5d7      	b.n	800138c <__aeabi_dadd+0x238>
 80017dc:	0010      	movs	r0, r2
 80017de:	001e      	movs	r6, r3
 80017e0:	3820      	subs	r0, #32
 80017e2:	40c6      	lsrs	r6, r0
 80017e4:	2a20      	cmp	r2, #32
 80017e6:	d005      	beq.n	80017f4 <__aeabi_dadd+0x6a0>
 80017e8:	2040      	movs	r0, #64	; 0x40
 80017ea:	1a82      	subs	r2, r0, r2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	464a      	mov	r2, r9
 80017f0:	431a      	orrs	r2, r3
 80017f2:	4691      	mov	r9, r2
 80017f4:	464d      	mov	r5, r9
 80017f6:	1e6b      	subs	r3, r5, #1
 80017f8:	419d      	sbcs	r5, r3
 80017fa:	4335      	orrs	r5, r6
 80017fc:	e621      	b.n	8001442 <__aeabi_dadd+0x2ee>
 80017fe:	0002      	movs	r2, r0
 8001800:	2300      	movs	r3, #0
 8001802:	2100      	movs	r1, #0
 8001804:	e540      	b.n	8001288 <__aeabi_dadd+0x134>
 8001806:	464a      	mov	r2, r9
 8001808:	19d5      	adds	r5, r2, r7
 800180a:	42bd      	cmp	r5, r7
 800180c:	4189      	sbcs	r1, r1
 800180e:	4463      	add	r3, ip
 8001810:	4698      	mov	r8, r3
 8001812:	4249      	negs	r1, r1
 8001814:	4488      	add	r8, r1
 8001816:	e5b3      	b.n	8001380 <__aeabi_dadd+0x22c>
 8001818:	2100      	movs	r1, #0
 800181a:	4a01      	ldr	r2, [pc, #4]	; (8001820 <__aeabi_dadd+0x6cc>)
 800181c:	000b      	movs	r3, r1
 800181e:	e533      	b.n	8001288 <__aeabi_dadd+0x134>
 8001820:	000007ff 	.word	0x000007ff
 8001824:	ff7fffff 	.word	0xff7fffff

08001828 <__eqdf2>:
 8001828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182a:	464f      	mov	r7, r9
 800182c:	4646      	mov	r6, r8
 800182e:	46d6      	mov	lr, sl
 8001830:	4694      	mov	ip, r2
 8001832:	4691      	mov	r9, r2
 8001834:	031a      	lsls	r2, r3, #12
 8001836:	0b12      	lsrs	r2, r2, #12
 8001838:	4d18      	ldr	r5, [pc, #96]	; (800189c <__eqdf2+0x74>)
 800183a:	b5c0      	push	{r6, r7, lr}
 800183c:	004c      	lsls	r4, r1, #1
 800183e:	030f      	lsls	r7, r1, #12
 8001840:	4692      	mov	sl, r2
 8001842:	005a      	lsls	r2, r3, #1
 8001844:	0006      	movs	r6, r0
 8001846:	4680      	mov	r8, r0
 8001848:	0b3f      	lsrs	r7, r7, #12
 800184a:	2001      	movs	r0, #1
 800184c:	0d64      	lsrs	r4, r4, #21
 800184e:	0fc9      	lsrs	r1, r1, #31
 8001850:	0d52      	lsrs	r2, r2, #21
 8001852:	0fdb      	lsrs	r3, r3, #31
 8001854:	42ac      	cmp	r4, r5
 8001856:	d00a      	beq.n	800186e <__eqdf2+0x46>
 8001858:	42aa      	cmp	r2, r5
 800185a:	d003      	beq.n	8001864 <__eqdf2+0x3c>
 800185c:	4294      	cmp	r4, r2
 800185e:	d101      	bne.n	8001864 <__eqdf2+0x3c>
 8001860:	4557      	cmp	r7, sl
 8001862:	d00d      	beq.n	8001880 <__eqdf2+0x58>
 8001864:	bce0      	pop	{r5, r6, r7}
 8001866:	46ba      	mov	sl, r7
 8001868:	46b1      	mov	r9, r6
 800186a:	46a8      	mov	r8, r5
 800186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186e:	003d      	movs	r5, r7
 8001870:	4335      	orrs	r5, r6
 8001872:	d1f7      	bne.n	8001864 <__eqdf2+0x3c>
 8001874:	42a2      	cmp	r2, r4
 8001876:	d1f5      	bne.n	8001864 <__eqdf2+0x3c>
 8001878:	4652      	mov	r2, sl
 800187a:	4665      	mov	r5, ip
 800187c:	432a      	orrs	r2, r5
 800187e:	d1f1      	bne.n	8001864 <__eqdf2+0x3c>
 8001880:	2001      	movs	r0, #1
 8001882:	45c8      	cmp	r8, r9
 8001884:	d1ee      	bne.n	8001864 <__eqdf2+0x3c>
 8001886:	4299      	cmp	r1, r3
 8001888:	d006      	beq.n	8001898 <__eqdf2+0x70>
 800188a:	2c00      	cmp	r4, #0
 800188c:	d1ea      	bne.n	8001864 <__eqdf2+0x3c>
 800188e:	433e      	orrs	r6, r7
 8001890:	0030      	movs	r0, r6
 8001892:	1e46      	subs	r6, r0, #1
 8001894:	41b0      	sbcs	r0, r6
 8001896:	e7e5      	b.n	8001864 <__eqdf2+0x3c>
 8001898:	2000      	movs	r0, #0
 800189a:	e7e3      	b.n	8001864 <__eqdf2+0x3c>
 800189c:	000007ff 	.word	0x000007ff

080018a0 <__gedf2>:
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	464e      	mov	r6, r9
 80018a4:	4645      	mov	r5, r8
 80018a6:	4657      	mov	r7, sl
 80018a8:	46de      	mov	lr, fp
 80018aa:	0004      	movs	r4, r0
 80018ac:	0018      	movs	r0, r3
 80018ae:	b5e0      	push	{r5, r6, r7, lr}
 80018b0:	0016      	movs	r6, r2
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	0b1b      	lsrs	r3, r3, #12
 80018b6:	4d32      	ldr	r5, [pc, #200]	; (8001980 <__gedf2+0xe0>)
 80018b8:	030f      	lsls	r7, r1, #12
 80018ba:	004a      	lsls	r2, r1, #1
 80018bc:	4699      	mov	r9, r3
 80018be:	0043      	lsls	r3, r0, #1
 80018c0:	46a4      	mov	ip, r4
 80018c2:	46b0      	mov	r8, r6
 80018c4:	0b3f      	lsrs	r7, r7, #12
 80018c6:	0d52      	lsrs	r2, r2, #21
 80018c8:	0fc9      	lsrs	r1, r1, #31
 80018ca:	0d5b      	lsrs	r3, r3, #21
 80018cc:	0fc0      	lsrs	r0, r0, #31
 80018ce:	42aa      	cmp	r2, r5
 80018d0:	d029      	beq.n	8001926 <__gedf2+0x86>
 80018d2:	42ab      	cmp	r3, r5
 80018d4:	d018      	beq.n	8001908 <__gedf2+0x68>
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d12a      	bne.n	8001930 <__gedf2+0x90>
 80018da:	433c      	orrs	r4, r7
 80018dc:	46a3      	mov	fp, r4
 80018de:	4265      	negs	r5, r4
 80018e0:	4165      	adcs	r5, r4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <__gedf2+0x4c>
 80018e6:	464c      	mov	r4, r9
 80018e8:	4326      	orrs	r6, r4
 80018ea:	d027      	beq.n	800193c <__gedf2+0x9c>
 80018ec:	2d00      	cmp	r5, #0
 80018ee:	d115      	bne.n	800191c <__gedf2+0x7c>
 80018f0:	4281      	cmp	r1, r0
 80018f2:	d028      	beq.n	8001946 <__gedf2+0xa6>
 80018f4:	2002      	movs	r0, #2
 80018f6:	3901      	subs	r1, #1
 80018f8:	4008      	ands	r0, r1
 80018fa:	3801      	subs	r0, #1
 80018fc:	bcf0      	pop	{r4, r5, r6, r7}
 80018fe:	46bb      	mov	fp, r7
 8001900:	46b2      	mov	sl, r6
 8001902:	46a9      	mov	r9, r5
 8001904:	46a0      	mov	r8, r4
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	464d      	mov	r5, r9
 800190a:	432e      	orrs	r6, r5
 800190c:	d12f      	bne.n	800196e <__gedf2+0xce>
 800190e:	2a00      	cmp	r2, #0
 8001910:	d1ee      	bne.n	80018f0 <__gedf2+0x50>
 8001912:	433c      	orrs	r4, r7
 8001914:	4265      	negs	r5, r4
 8001916:	4165      	adcs	r5, r4
 8001918:	2d00      	cmp	r5, #0
 800191a:	d0e9      	beq.n	80018f0 <__gedf2+0x50>
 800191c:	2800      	cmp	r0, #0
 800191e:	d1ed      	bne.n	80018fc <__gedf2+0x5c>
 8001920:	2001      	movs	r0, #1
 8001922:	4240      	negs	r0, r0
 8001924:	e7ea      	b.n	80018fc <__gedf2+0x5c>
 8001926:	003d      	movs	r5, r7
 8001928:	4325      	orrs	r5, r4
 800192a:	d120      	bne.n	800196e <__gedf2+0xce>
 800192c:	4293      	cmp	r3, r2
 800192e:	d0eb      	beq.n	8001908 <__gedf2+0x68>
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1dd      	bne.n	80018f0 <__gedf2+0x50>
 8001934:	464c      	mov	r4, r9
 8001936:	4326      	orrs	r6, r4
 8001938:	d1da      	bne.n	80018f0 <__gedf2+0x50>
 800193a:	e7db      	b.n	80018f4 <__gedf2+0x54>
 800193c:	465b      	mov	r3, fp
 800193e:	2000      	movs	r0, #0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0db      	beq.n	80018fc <__gedf2+0x5c>
 8001944:	e7d6      	b.n	80018f4 <__gedf2+0x54>
 8001946:	429a      	cmp	r2, r3
 8001948:	dc0a      	bgt.n	8001960 <__gedf2+0xc0>
 800194a:	dbe7      	blt.n	800191c <__gedf2+0x7c>
 800194c:	454f      	cmp	r7, r9
 800194e:	d8d1      	bhi.n	80018f4 <__gedf2+0x54>
 8001950:	d010      	beq.n	8001974 <__gedf2+0xd4>
 8001952:	2000      	movs	r0, #0
 8001954:	454f      	cmp	r7, r9
 8001956:	d2d1      	bcs.n	80018fc <__gedf2+0x5c>
 8001958:	2900      	cmp	r1, #0
 800195a:	d0e1      	beq.n	8001920 <__gedf2+0x80>
 800195c:	0008      	movs	r0, r1
 800195e:	e7cd      	b.n	80018fc <__gedf2+0x5c>
 8001960:	4243      	negs	r3, r0
 8001962:	4158      	adcs	r0, r3
 8001964:	2302      	movs	r3, #2
 8001966:	4240      	negs	r0, r0
 8001968:	4018      	ands	r0, r3
 800196a:	3801      	subs	r0, #1
 800196c:	e7c6      	b.n	80018fc <__gedf2+0x5c>
 800196e:	2002      	movs	r0, #2
 8001970:	4240      	negs	r0, r0
 8001972:	e7c3      	b.n	80018fc <__gedf2+0x5c>
 8001974:	45c4      	cmp	ip, r8
 8001976:	d8bd      	bhi.n	80018f4 <__gedf2+0x54>
 8001978:	2000      	movs	r0, #0
 800197a:	45c4      	cmp	ip, r8
 800197c:	d2be      	bcs.n	80018fc <__gedf2+0x5c>
 800197e:	e7eb      	b.n	8001958 <__gedf2+0xb8>
 8001980:	000007ff 	.word	0x000007ff

08001984 <__ledf2>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	464e      	mov	r6, r9
 8001988:	4645      	mov	r5, r8
 800198a:	4657      	mov	r7, sl
 800198c:	46de      	mov	lr, fp
 800198e:	0004      	movs	r4, r0
 8001990:	0018      	movs	r0, r3
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	0016      	movs	r6, r2
 8001996:	031b      	lsls	r3, r3, #12
 8001998:	0b1b      	lsrs	r3, r3, #12
 800199a:	4d31      	ldr	r5, [pc, #196]	; (8001a60 <__ledf2+0xdc>)
 800199c:	030f      	lsls	r7, r1, #12
 800199e:	004a      	lsls	r2, r1, #1
 80019a0:	4699      	mov	r9, r3
 80019a2:	0043      	lsls	r3, r0, #1
 80019a4:	46a4      	mov	ip, r4
 80019a6:	46b0      	mov	r8, r6
 80019a8:	0b3f      	lsrs	r7, r7, #12
 80019aa:	0d52      	lsrs	r2, r2, #21
 80019ac:	0fc9      	lsrs	r1, r1, #31
 80019ae:	0d5b      	lsrs	r3, r3, #21
 80019b0:	0fc0      	lsrs	r0, r0, #31
 80019b2:	42aa      	cmp	r2, r5
 80019b4:	d011      	beq.n	80019da <__ledf2+0x56>
 80019b6:	42ab      	cmp	r3, r5
 80019b8:	d014      	beq.n	80019e4 <__ledf2+0x60>
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d12f      	bne.n	8001a1e <__ledf2+0x9a>
 80019be:	433c      	orrs	r4, r7
 80019c0:	46a3      	mov	fp, r4
 80019c2:	4265      	negs	r5, r4
 80019c4:	4165      	adcs	r5, r4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d114      	bne.n	80019f4 <__ledf2+0x70>
 80019ca:	464c      	mov	r4, r9
 80019cc:	4326      	orrs	r6, r4
 80019ce:	d111      	bne.n	80019f4 <__ledf2+0x70>
 80019d0:	465b      	mov	r3, fp
 80019d2:	2000      	movs	r0, #0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d017      	beq.n	8001a08 <__ledf2+0x84>
 80019d8:	e010      	b.n	80019fc <__ledf2+0x78>
 80019da:	003d      	movs	r5, r7
 80019dc:	4325      	orrs	r5, r4
 80019de:	d112      	bne.n	8001a06 <__ledf2+0x82>
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d11c      	bne.n	8001a1e <__ledf2+0x9a>
 80019e4:	464d      	mov	r5, r9
 80019e6:	432e      	orrs	r6, r5
 80019e8:	d10d      	bne.n	8001a06 <__ledf2+0x82>
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	d104      	bne.n	80019f8 <__ledf2+0x74>
 80019ee:	433c      	orrs	r4, r7
 80019f0:	4265      	negs	r5, r4
 80019f2:	4165      	adcs	r5, r4
 80019f4:	2d00      	cmp	r5, #0
 80019f6:	d10d      	bne.n	8001a14 <__ledf2+0x90>
 80019f8:	4281      	cmp	r1, r0
 80019fa:	d016      	beq.n	8001a2a <__ledf2+0xa6>
 80019fc:	2002      	movs	r0, #2
 80019fe:	3901      	subs	r1, #1
 8001a00:	4008      	ands	r0, r1
 8001a02:	3801      	subs	r0, #1
 8001a04:	e000      	b.n	8001a08 <__ledf2+0x84>
 8001a06:	2002      	movs	r0, #2
 8001a08:	bcf0      	pop	{r4, r5, r6, r7}
 8001a0a:	46bb      	mov	fp, r7
 8001a0c:	46b2      	mov	sl, r6
 8001a0e:	46a9      	mov	r9, r5
 8001a10:	46a0      	mov	r8, r4
 8001a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d1f7      	bne.n	8001a08 <__ledf2+0x84>
 8001a18:	2001      	movs	r0, #1
 8001a1a:	4240      	negs	r0, r0
 8001a1c:	e7f4      	b.n	8001a08 <__ledf2+0x84>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ea      	bne.n	80019f8 <__ledf2+0x74>
 8001a22:	464c      	mov	r4, r9
 8001a24:	4326      	orrs	r6, r4
 8001a26:	d1e7      	bne.n	80019f8 <__ledf2+0x74>
 8001a28:	e7e8      	b.n	80019fc <__ledf2+0x78>
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dd06      	ble.n	8001a3c <__ledf2+0xb8>
 8001a2e:	4243      	negs	r3, r0
 8001a30:	4158      	adcs	r0, r3
 8001a32:	2302      	movs	r3, #2
 8001a34:	4240      	negs	r0, r0
 8001a36:	4018      	ands	r0, r3
 8001a38:	3801      	subs	r0, #1
 8001a3a:	e7e5      	b.n	8001a08 <__ledf2+0x84>
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbe9      	blt.n	8001a14 <__ledf2+0x90>
 8001a40:	454f      	cmp	r7, r9
 8001a42:	d8db      	bhi.n	80019fc <__ledf2+0x78>
 8001a44:	d006      	beq.n	8001a54 <__ledf2+0xd0>
 8001a46:	2000      	movs	r0, #0
 8001a48:	454f      	cmp	r7, r9
 8001a4a:	d2dd      	bcs.n	8001a08 <__ledf2+0x84>
 8001a4c:	2900      	cmp	r1, #0
 8001a4e:	d0e3      	beq.n	8001a18 <__ledf2+0x94>
 8001a50:	0008      	movs	r0, r1
 8001a52:	e7d9      	b.n	8001a08 <__ledf2+0x84>
 8001a54:	45c4      	cmp	ip, r8
 8001a56:	d8d1      	bhi.n	80019fc <__ledf2+0x78>
 8001a58:	2000      	movs	r0, #0
 8001a5a:	45c4      	cmp	ip, r8
 8001a5c:	d2d4      	bcs.n	8001a08 <__ledf2+0x84>
 8001a5e:	e7f5      	b.n	8001a4c <__ledf2+0xc8>
 8001a60:	000007ff 	.word	0x000007ff

08001a64 <__aeabi_dmul>:
 8001a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a66:	4657      	mov	r7, sl
 8001a68:	464e      	mov	r6, r9
 8001a6a:	4645      	mov	r5, r8
 8001a6c:	46de      	mov	lr, fp
 8001a6e:	b5e0      	push	{r5, r6, r7, lr}
 8001a70:	4698      	mov	r8, r3
 8001a72:	030c      	lsls	r4, r1, #12
 8001a74:	004b      	lsls	r3, r1, #1
 8001a76:	0006      	movs	r6, r0
 8001a78:	4692      	mov	sl, r2
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	0b24      	lsrs	r4, r4, #12
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	0fcf      	lsrs	r7, r1, #31
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d06c      	beq.n	8001b60 <__aeabi_dmul+0xfc>
 8001a86:	4add      	ldr	r2, [pc, #884]	; (8001dfc <__aeabi_dmul+0x398>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dmul+0x2a>
 8001a8c:	e086      	b.n	8001b9c <__aeabi_dmul+0x138>
 8001a8e:	0f42      	lsrs	r2, r0, #29
 8001a90:	00e4      	lsls	r4, r4, #3
 8001a92:	4314      	orrs	r4, r2
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	0412      	lsls	r2, r2, #16
 8001a98:	4314      	orrs	r4, r2
 8001a9a:	4ad9      	ldr	r2, [pc, #868]	; (8001e00 <__aeabi_dmul+0x39c>)
 8001a9c:	00c5      	lsls	r5, r0, #3
 8001a9e:	4694      	mov	ip, r2
 8001aa0:	4463      	add	r3, ip
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	469b      	mov	fp, r3
 8001aaa:	4643      	mov	r3, r8
 8001aac:	4642      	mov	r2, r8
 8001aae:	031e      	lsls	r6, r3, #12
 8001ab0:	0fd2      	lsrs	r2, r2, #31
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4650      	mov	r0, sl
 8001ab6:	4690      	mov	r8, r2
 8001ab8:	0b36      	lsrs	r6, r6, #12
 8001aba:	0d5b      	lsrs	r3, r3, #21
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_dmul+0x5c>
 8001abe:	e078      	b.n	8001bb2 <__aeabi_dmul+0x14e>
 8001ac0:	4ace      	ldr	r2, [pc, #824]	; (8001dfc <__aeabi_dmul+0x398>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <__aeabi_dmul+0x9e>
 8001ac6:	49ce      	ldr	r1, [pc, #824]	; (8001e00 <__aeabi_dmul+0x39c>)
 8001ac8:	0f42      	lsrs	r2, r0, #29
 8001aca:	468c      	mov	ip, r1
 8001acc:	9900      	ldr	r1, [sp, #0]
 8001ace:	4463      	add	r3, ip
 8001ad0:	00f6      	lsls	r6, r6, #3
 8001ad2:	468c      	mov	ip, r1
 8001ad4:	4316      	orrs	r6, r2
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	449c      	add	ip, r3
 8001ada:	0412      	lsls	r2, r2, #16
 8001adc:	4663      	mov	r3, ip
 8001ade:	4316      	orrs	r6, r2
 8001ae0:	00c2      	lsls	r2, r0, #3
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	9900      	ldr	r1, [sp, #0]
 8001ae8:	4643      	mov	r3, r8
 8001aea:	3101      	adds	r1, #1
 8001aec:	468c      	mov	ip, r1
 8001aee:	4649      	mov	r1, r9
 8001af0:	407b      	eors	r3, r7
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	290f      	cmp	r1, #15
 8001af6:	d900      	bls.n	8001afa <__aeabi_dmul+0x96>
 8001af8:	e07e      	b.n	8001bf8 <__aeabi_dmul+0x194>
 8001afa:	4bc2      	ldr	r3, [pc, #776]	; (8001e04 <__aeabi_dmul+0x3a0>)
 8001afc:	0089      	lsls	r1, r1, #2
 8001afe:	5859      	ldr	r1, [r3, r1]
 8001b00:	468f      	mov	pc, r1
 8001b02:	4652      	mov	r2, sl
 8001b04:	9b00      	ldr	r3, [sp, #0]
 8001b06:	4332      	orrs	r2, r6
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dmul+0xa8>
 8001b0a:	e156      	b.n	8001dba <__aeabi_dmul+0x356>
 8001b0c:	49bb      	ldr	r1, [pc, #748]	; (8001dfc <__aeabi_dmul+0x398>)
 8001b0e:	2600      	movs	r6, #0
 8001b10:	468c      	mov	ip, r1
 8001b12:	4463      	add	r3, ip
 8001b14:	4649      	mov	r1, r9
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	4319      	orrs	r1, r3
 8001b1c:	4689      	mov	r9, r1
 8001b1e:	2002      	movs	r0, #2
 8001b20:	e7e1      	b.n	8001ae6 <__aeabi_dmul+0x82>
 8001b22:	4643      	mov	r3, r8
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	0034      	movs	r4, r6
 8001b28:	0015      	movs	r5, r2
 8001b2a:	4683      	mov	fp, r0
 8001b2c:	465b      	mov	r3, fp
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d05e      	beq.n	8001bf0 <__aeabi_dmul+0x18c>
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dmul+0xd4>
 8001b36:	e1f3      	b.n	8001f20 <__aeabi_dmul+0x4bc>
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d000      	beq.n	8001b3e <__aeabi_dmul+0xda>
 8001b3c:	e118      	b.n	8001d70 <__aeabi_dmul+0x30c>
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2400      	movs	r4, #0
 8001b42:	2500      	movs	r5, #0
 8001b44:	9b01      	ldr	r3, [sp, #4]
 8001b46:	0512      	lsls	r2, r2, #20
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	07db      	lsls	r3, r3, #31
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	0028      	movs	r0, r5
 8001b50:	0011      	movs	r1, r2
 8001b52:	b007      	add	sp, #28
 8001b54:	bcf0      	pop	{r4, r5, r6, r7}
 8001b56:	46bb      	mov	fp, r7
 8001b58:	46b2      	mov	sl, r6
 8001b5a:	46a9      	mov	r9, r5
 8001b5c:	46a0      	mov	r8, r4
 8001b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b60:	0025      	movs	r5, r4
 8001b62:	4305      	orrs	r5, r0
 8001b64:	d100      	bne.n	8001b68 <__aeabi_dmul+0x104>
 8001b66:	e141      	b.n	8001dec <__aeabi_dmul+0x388>
 8001b68:	2c00      	cmp	r4, #0
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dmul+0x10a>
 8001b6c:	e1ad      	b.n	8001eca <__aeabi_dmul+0x466>
 8001b6e:	0020      	movs	r0, r4
 8001b70:	f000 fe76 	bl	8002860 <__clzsi2>
 8001b74:	0001      	movs	r1, r0
 8001b76:	0002      	movs	r2, r0
 8001b78:	390b      	subs	r1, #11
 8001b7a:	231d      	movs	r3, #29
 8001b7c:	0010      	movs	r0, r2
 8001b7e:	1a5b      	subs	r3, r3, r1
 8001b80:	0031      	movs	r1, r6
 8001b82:	0035      	movs	r5, r6
 8001b84:	3808      	subs	r0, #8
 8001b86:	4084      	lsls	r4, r0
 8001b88:	40d9      	lsrs	r1, r3
 8001b8a:	4085      	lsls	r5, r0
 8001b8c:	430c      	orrs	r4, r1
 8001b8e:	489e      	ldr	r0, [pc, #632]	; (8001e08 <__aeabi_dmul+0x3a4>)
 8001b90:	1a83      	subs	r3, r0, r2
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2300      	movs	r3, #0
 8001b96:	4699      	mov	r9, r3
 8001b98:	469b      	mov	fp, r3
 8001b9a:	e786      	b.n	8001aaa <__aeabi_dmul+0x46>
 8001b9c:	0005      	movs	r5, r0
 8001b9e:	4325      	orrs	r5, r4
 8001ba0:	d000      	beq.n	8001ba4 <__aeabi_dmul+0x140>
 8001ba2:	e11c      	b.n	8001dde <__aeabi_dmul+0x37a>
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2302      	movs	r3, #2
 8001baa:	2400      	movs	r4, #0
 8001bac:	4691      	mov	r9, r2
 8001bae:	469b      	mov	fp, r3
 8001bb0:	e77b      	b.n	8001aaa <__aeabi_dmul+0x46>
 8001bb2:	4652      	mov	r2, sl
 8001bb4:	4332      	orrs	r2, r6
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dmul+0x156>
 8001bb8:	e10a      	b.n	8001dd0 <__aeabi_dmul+0x36c>
 8001bba:	2e00      	cmp	r6, #0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dmul+0x15c>
 8001bbe:	e176      	b.n	8001eae <__aeabi_dmul+0x44a>
 8001bc0:	0030      	movs	r0, r6
 8001bc2:	f000 fe4d 	bl	8002860 <__clzsi2>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	3a0b      	subs	r2, #11
 8001bca:	231d      	movs	r3, #29
 8001bcc:	0001      	movs	r1, r0
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	4652      	mov	r2, sl
 8001bd2:	3908      	subs	r1, #8
 8001bd4:	40da      	lsrs	r2, r3
 8001bd6:	408e      	lsls	r6, r1
 8001bd8:	4316      	orrs	r6, r2
 8001bda:	4652      	mov	r2, sl
 8001bdc:	408a      	lsls	r2, r1
 8001bde:	9b00      	ldr	r3, [sp, #0]
 8001be0:	4989      	ldr	r1, [pc, #548]	; (8001e08 <__aeabi_dmul+0x3a4>)
 8001be2:	1a18      	subs	r0, r3, r0
 8001be4:	0003      	movs	r3, r0
 8001be6:	468c      	mov	ip, r1
 8001be8:	4463      	add	r3, ip
 8001bea:	2000      	movs	r0, #0
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	e77a      	b.n	8001ae6 <__aeabi_dmul+0x82>
 8001bf0:	2400      	movs	r4, #0
 8001bf2:	2500      	movs	r5, #0
 8001bf4:	4a81      	ldr	r2, [pc, #516]	; (8001dfc <__aeabi_dmul+0x398>)
 8001bf6:	e7a5      	b.n	8001b44 <__aeabi_dmul+0xe0>
 8001bf8:	0c2f      	lsrs	r7, r5, #16
 8001bfa:	042d      	lsls	r5, r5, #16
 8001bfc:	0c2d      	lsrs	r5, r5, #16
 8001bfe:	002b      	movs	r3, r5
 8001c00:	0c11      	lsrs	r1, r2, #16
 8001c02:	0412      	lsls	r2, r2, #16
 8001c04:	0c12      	lsrs	r2, r2, #16
 8001c06:	4353      	muls	r3, r2
 8001c08:	4698      	mov	r8, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	0028      	movs	r0, r5
 8001c0e:	437b      	muls	r3, r7
 8001c10:	4699      	mov	r9, r3
 8001c12:	4348      	muls	r0, r1
 8001c14:	4448      	add	r0, r9
 8001c16:	4683      	mov	fp, r0
 8001c18:	4640      	mov	r0, r8
 8001c1a:	000b      	movs	r3, r1
 8001c1c:	0c00      	lsrs	r0, r0, #16
 8001c1e:	4682      	mov	sl, r0
 8001c20:	4658      	mov	r0, fp
 8001c22:	437b      	muls	r3, r7
 8001c24:	4450      	add	r0, sl
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	4581      	cmp	r9, r0
 8001c2a:	d906      	bls.n	8001c3a <__aeabi_dmul+0x1d6>
 8001c2c:	469a      	mov	sl, r3
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	025b      	lsls	r3, r3, #9
 8001c32:	4699      	mov	r9, r3
 8001c34:	44ca      	add	sl, r9
 8001c36:	4653      	mov	r3, sl
 8001c38:	9302      	str	r3, [sp, #8]
 8001c3a:	0c03      	lsrs	r3, r0, #16
 8001c3c:	469b      	mov	fp, r3
 8001c3e:	4643      	mov	r3, r8
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	0400      	lsls	r0, r0, #16
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	4698      	mov	r8, r3
 8001c48:	0003      	movs	r3, r0
 8001c4a:	4443      	add	r3, r8
 8001c4c:	9304      	str	r3, [sp, #16]
 8001c4e:	0c33      	lsrs	r3, r6, #16
 8001c50:	4699      	mov	r9, r3
 8001c52:	002b      	movs	r3, r5
 8001c54:	0436      	lsls	r6, r6, #16
 8001c56:	0c36      	lsrs	r6, r6, #16
 8001c58:	4373      	muls	r3, r6
 8001c5a:	4698      	mov	r8, r3
 8001c5c:	0033      	movs	r3, r6
 8001c5e:	437b      	muls	r3, r7
 8001c60:	469a      	mov	sl, r3
 8001c62:	464b      	mov	r3, r9
 8001c64:	435d      	muls	r5, r3
 8001c66:	435f      	muls	r7, r3
 8001c68:	4643      	mov	r3, r8
 8001c6a:	4455      	add	r5, sl
 8001c6c:	0c18      	lsrs	r0, r3, #16
 8001c6e:	1940      	adds	r0, r0, r5
 8001c70:	4582      	cmp	sl, r0
 8001c72:	d903      	bls.n	8001c7c <__aeabi_dmul+0x218>
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	025b      	lsls	r3, r3, #9
 8001c78:	469a      	mov	sl, r3
 8001c7a:	4457      	add	r7, sl
 8001c7c:	0c05      	lsrs	r5, r0, #16
 8001c7e:	19eb      	adds	r3, r5, r7
 8001c80:	9305      	str	r3, [sp, #20]
 8001c82:	4643      	mov	r3, r8
 8001c84:	041d      	lsls	r5, r3, #16
 8001c86:	0c2d      	lsrs	r5, r5, #16
 8001c88:	0400      	lsls	r0, r0, #16
 8001c8a:	1940      	adds	r0, r0, r5
 8001c8c:	0c25      	lsrs	r5, r4, #16
 8001c8e:	0424      	lsls	r4, r4, #16
 8001c90:	0c24      	lsrs	r4, r4, #16
 8001c92:	0027      	movs	r7, r4
 8001c94:	4357      	muls	r7, r2
 8001c96:	436a      	muls	r2, r5
 8001c98:	4690      	mov	r8, r2
 8001c9a:	002a      	movs	r2, r5
 8001c9c:	0c3b      	lsrs	r3, r7, #16
 8001c9e:	469a      	mov	sl, r3
 8001ca0:	434a      	muls	r2, r1
 8001ca2:	4361      	muls	r1, r4
 8001ca4:	4441      	add	r1, r8
 8001ca6:	4451      	add	r1, sl
 8001ca8:	4483      	add	fp, r0
 8001caa:	4588      	cmp	r8, r1
 8001cac:	d903      	bls.n	8001cb6 <__aeabi_dmul+0x252>
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	025b      	lsls	r3, r3, #9
 8001cb2:	4698      	mov	r8, r3
 8001cb4:	4442      	add	r2, r8
 8001cb6:	043f      	lsls	r7, r7, #16
 8001cb8:	0c0b      	lsrs	r3, r1, #16
 8001cba:	0c3f      	lsrs	r7, r7, #16
 8001cbc:	0409      	lsls	r1, r1, #16
 8001cbe:	19c9      	adds	r1, r1, r7
 8001cc0:	0027      	movs	r7, r4
 8001cc2:	4698      	mov	r8, r3
 8001cc4:	464b      	mov	r3, r9
 8001cc6:	4377      	muls	r7, r6
 8001cc8:	435c      	muls	r4, r3
 8001cca:	436e      	muls	r6, r5
 8001ccc:	435d      	muls	r5, r3
 8001cce:	0c3b      	lsrs	r3, r7, #16
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	19a4      	adds	r4, r4, r6
 8001cd4:	444c      	add	r4, r9
 8001cd6:	4442      	add	r2, r8
 8001cd8:	9503      	str	r5, [sp, #12]
 8001cda:	42a6      	cmp	r6, r4
 8001cdc:	d904      	bls.n	8001ce8 <__aeabi_dmul+0x284>
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	025b      	lsls	r3, r3, #9
 8001ce2:	4698      	mov	r8, r3
 8001ce4:	4445      	add	r5, r8
 8001ce6:	9503      	str	r5, [sp, #12]
 8001ce8:	9b02      	ldr	r3, [sp, #8]
 8001cea:	043f      	lsls	r7, r7, #16
 8001cec:	445b      	add	r3, fp
 8001cee:	001e      	movs	r6, r3
 8001cf0:	4283      	cmp	r3, r0
 8001cf2:	4180      	sbcs	r0, r0
 8001cf4:	0423      	lsls	r3, r4, #16
 8001cf6:	4698      	mov	r8, r3
 8001cf8:	9b05      	ldr	r3, [sp, #20]
 8001cfa:	0c3f      	lsrs	r7, r7, #16
 8001cfc:	4447      	add	r7, r8
 8001cfe:	4698      	mov	r8, r3
 8001d00:	1876      	adds	r6, r6, r1
 8001d02:	428e      	cmp	r6, r1
 8001d04:	4189      	sbcs	r1, r1
 8001d06:	4447      	add	r7, r8
 8001d08:	4240      	negs	r0, r0
 8001d0a:	183d      	adds	r5, r7, r0
 8001d0c:	46a8      	mov	r8, r5
 8001d0e:	4693      	mov	fp, r2
 8001d10:	4249      	negs	r1, r1
 8001d12:	468a      	mov	sl, r1
 8001d14:	44c3      	add	fp, r8
 8001d16:	429f      	cmp	r7, r3
 8001d18:	41bf      	sbcs	r7, r7
 8001d1a:	4580      	cmp	r8, r0
 8001d1c:	4180      	sbcs	r0, r0
 8001d1e:	9b03      	ldr	r3, [sp, #12]
 8001d20:	44da      	add	sl, fp
 8001d22:	4698      	mov	r8, r3
 8001d24:	4653      	mov	r3, sl
 8001d26:	4240      	negs	r0, r0
 8001d28:	427f      	negs	r7, r7
 8001d2a:	4307      	orrs	r7, r0
 8001d2c:	0c24      	lsrs	r4, r4, #16
 8001d2e:	4593      	cmp	fp, r2
 8001d30:	4192      	sbcs	r2, r2
 8001d32:	458a      	cmp	sl, r1
 8001d34:	4189      	sbcs	r1, r1
 8001d36:	193f      	adds	r7, r7, r4
 8001d38:	0ddc      	lsrs	r4, r3, #23
 8001d3a:	9b04      	ldr	r3, [sp, #16]
 8001d3c:	0275      	lsls	r5, r6, #9
 8001d3e:	431d      	orrs	r5, r3
 8001d40:	1e68      	subs	r0, r5, #1
 8001d42:	4185      	sbcs	r5, r0
 8001d44:	4653      	mov	r3, sl
 8001d46:	4252      	negs	r2, r2
 8001d48:	4249      	negs	r1, r1
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	18bf      	adds	r7, r7, r2
 8001d4e:	4447      	add	r7, r8
 8001d50:	0df6      	lsrs	r6, r6, #23
 8001d52:	027f      	lsls	r7, r7, #9
 8001d54:	4335      	orrs	r5, r6
 8001d56:	025a      	lsls	r2, r3, #9
 8001d58:	433c      	orrs	r4, r7
 8001d5a:	4315      	orrs	r5, r2
 8001d5c:	01fb      	lsls	r3, r7, #7
 8001d5e:	d400      	bmi.n	8001d62 <__aeabi_dmul+0x2fe>
 8001d60:	e0c1      	b.n	8001ee6 <__aeabi_dmul+0x482>
 8001d62:	2101      	movs	r1, #1
 8001d64:	086a      	lsrs	r2, r5, #1
 8001d66:	400d      	ands	r5, r1
 8001d68:	4315      	orrs	r5, r2
 8001d6a:	07e2      	lsls	r2, r4, #31
 8001d6c:	4315      	orrs	r5, r2
 8001d6e:	0864      	lsrs	r4, r4, #1
 8001d70:	4926      	ldr	r1, [pc, #152]	; (8001e0c <__aeabi_dmul+0x3a8>)
 8001d72:	4461      	add	r1, ip
 8001d74:	2900      	cmp	r1, #0
 8001d76:	dd56      	ble.n	8001e26 <__aeabi_dmul+0x3c2>
 8001d78:	076b      	lsls	r3, r5, #29
 8001d7a:	d009      	beq.n	8001d90 <__aeabi_dmul+0x32c>
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	402a      	ands	r2, r5
 8001d80:	2a04      	cmp	r2, #4
 8001d82:	d005      	beq.n	8001d90 <__aeabi_dmul+0x32c>
 8001d84:	1d2a      	adds	r2, r5, #4
 8001d86:	42aa      	cmp	r2, r5
 8001d88:	41ad      	sbcs	r5, r5
 8001d8a:	426d      	negs	r5, r5
 8001d8c:	1964      	adds	r4, r4, r5
 8001d8e:	0015      	movs	r5, r2
 8001d90:	01e3      	lsls	r3, r4, #7
 8001d92:	d504      	bpl.n	8001d9e <__aeabi_dmul+0x33a>
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <__aeabi_dmul+0x3ac>)
 8001d98:	00c9      	lsls	r1, r1, #3
 8001d9a:	4014      	ands	r4, r2
 8001d9c:	4461      	add	r1, ip
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <__aeabi_dmul+0x3b0>)
 8001da0:	4291      	cmp	r1, r2
 8001da2:	dd00      	ble.n	8001da6 <__aeabi_dmul+0x342>
 8001da4:	e724      	b.n	8001bf0 <__aeabi_dmul+0x18c>
 8001da6:	0762      	lsls	r2, r4, #29
 8001da8:	08ed      	lsrs	r5, r5, #3
 8001daa:	0264      	lsls	r4, r4, #9
 8001dac:	0549      	lsls	r1, r1, #21
 8001dae:	4315      	orrs	r5, r2
 8001db0:	0b24      	lsrs	r4, r4, #12
 8001db2:	0d4a      	lsrs	r2, r1, #21
 8001db4:	e6c6      	b.n	8001b44 <__aeabi_dmul+0xe0>
 8001db6:	9701      	str	r7, [sp, #4]
 8001db8:	e6b8      	b.n	8001b2c <__aeabi_dmul+0xc8>
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <__aeabi_dmul+0x398>)
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	4694      	mov	ip, r2
 8001dc0:	4463      	add	r3, ip
 8001dc2:	464a      	mov	r2, r9
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	4691      	mov	r9, r2
 8001dcc:	4652      	mov	r2, sl
 8001dce:	e68a      	b.n	8001ae6 <__aeabi_dmul+0x82>
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	4319      	orrs	r1, r3
 8001dd6:	4689      	mov	r9, r1
 8001dd8:	2600      	movs	r6, #0
 8001dda:	2001      	movs	r0, #1
 8001ddc:	e683      	b.n	8001ae6 <__aeabi_dmul+0x82>
 8001dde:	220c      	movs	r2, #12
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2303      	movs	r3, #3
 8001de4:	0005      	movs	r5, r0
 8001de6:	4691      	mov	r9, r2
 8001de8:	469b      	mov	fp, r3
 8001dea:	e65e      	b.n	8001aaa <__aeabi_dmul+0x46>
 8001dec:	2304      	movs	r3, #4
 8001dee:	4699      	mov	r9, r3
 8001df0:	2300      	movs	r3, #0
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	2400      	movs	r4, #0
 8001df8:	469b      	mov	fp, r3
 8001dfa:	e656      	b.n	8001aaa <__aeabi_dmul+0x46>
 8001dfc:	000007ff 	.word	0x000007ff
 8001e00:	fffffc01 	.word	0xfffffc01
 8001e04:	080087f0 	.word	0x080087f0
 8001e08:	fffffc0d 	.word	0xfffffc0d
 8001e0c:	000003ff 	.word	0x000003ff
 8001e10:	feffffff 	.word	0xfeffffff
 8001e14:	000007fe 	.word	0x000007fe
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2480      	movs	r4, #128	; 0x80
 8001e1c:	2500      	movs	r5, #0
 8001e1e:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <__aeabi_dmul+0x4cc>)
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	0324      	lsls	r4, r4, #12
 8001e24:	e68e      	b.n	8001b44 <__aeabi_dmul+0xe0>
 8001e26:	2001      	movs	r0, #1
 8001e28:	1a40      	subs	r0, r0, r1
 8001e2a:	2838      	cmp	r0, #56	; 0x38
 8001e2c:	dd00      	ble.n	8001e30 <__aeabi_dmul+0x3cc>
 8001e2e:	e686      	b.n	8001b3e <__aeabi_dmul+0xda>
 8001e30:	281f      	cmp	r0, #31
 8001e32:	dd5b      	ble.n	8001eec <__aeabi_dmul+0x488>
 8001e34:	221f      	movs	r2, #31
 8001e36:	0023      	movs	r3, r4
 8001e38:	4252      	negs	r2, r2
 8001e3a:	1a51      	subs	r1, r2, r1
 8001e3c:	40cb      	lsrs	r3, r1
 8001e3e:	0019      	movs	r1, r3
 8001e40:	2820      	cmp	r0, #32
 8001e42:	d003      	beq.n	8001e4c <__aeabi_dmul+0x3e8>
 8001e44:	4a3b      	ldr	r2, [pc, #236]	; (8001f34 <__aeabi_dmul+0x4d0>)
 8001e46:	4462      	add	r2, ip
 8001e48:	4094      	lsls	r4, r2
 8001e4a:	4325      	orrs	r5, r4
 8001e4c:	1e6a      	subs	r2, r5, #1
 8001e4e:	4195      	sbcs	r5, r2
 8001e50:	002a      	movs	r2, r5
 8001e52:	430a      	orrs	r2, r1
 8001e54:	2107      	movs	r1, #7
 8001e56:	000d      	movs	r5, r1
 8001e58:	2400      	movs	r4, #0
 8001e5a:	4015      	ands	r5, r2
 8001e5c:	4211      	tst	r1, r2
 8001e5e:	d05b      	beq.n	8001f18 <__aeabi_dmul+0x4b4>
 8001e60:	210f      	movs	r1, #15
 8001e62:	2400      	movs	r4, #0
 8001e64:	4011      	ands	r1, r2
 8001e66:	2904      	cmp	r1, #4
 8001e68:	d053      	beq.n	8001f12 <__aeabi_dmul+0x4ae>
 8001e6a:	1d11      	adds	r1, r2, #4
 8001e6c:	4291      	cmp	r1, r2
 8001e6e:	4192      	sbcs	r2, r2
 8001e70:	4252      	negs	r2, r2
 8001e72:	18a4      	adds	r4, r4, r2
 8001e74:	000a      	movs	r2, r1
 8001e76:	0223      	lsls	r3, r4, #8
 8001e78:	d54b      	bpl.n	8001f12 <__aeabi_dmul+0x4ae>
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2500      	movs	r5, #0
 8001e80:	e660      	b.n	8001b44 <__aeabi_dmul+0xe0>
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	031b      	lsls	r3, r3, #12
 8001e86:	421c      	tst	r4, r3
 8001e88:	d009      	beq.n	8001e9e <__aeabi_dmul+0x43a>
 8001e8a:	421e      	tst	r6, r3
 8001e8c:	d107      	bne.n	8001e9e <__aeabi_dmul+0x43a>
 8001e8e:	4333      	orrs	r3, r6
 8001e90:	031c      	lsls	r4, r3, #12
 8001e92:	4643      	mov	r3, r8
 8001e94:	0015      	movs	r5, r2
 8001e96:	0b24      	lsrs	r4, r4, #12
 8001e98:	4a25      	ldr	r2, [pc, #148]	; (8001f30 <__aeabi_dmul+0x4cc>)
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	e652      	b.n	8001b44 <__aeabi_dmul+0xe0>
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	0312      	lsls	r2, r2, #12
 8001ea2:	4314      	orrs	r4, r2
 8001ea4:	0324      	lsls	r4, r4, #12
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <__aeabi_dmul+0x4cc>)
 8001ea8:	0b24      	lsrs	r4, r4, #12
 8001eaa:	9701      	str	r7, [sp, #4]
 8001eac:	e64a      	b.n	8001b44 <__aeabi_dmul+0xe0>
 8001eae:	f000 fcd7 	bl	8002860 <__clzsi2>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	001a      	movs	r2, r3
 8001eb6:	3215      	adds	r2, #21
 8001eb8:	3020      	adds	r0, #32
 8001eba:	2a1c      	cmp	r2, #28
 8001ebc:	dc00      	bgt.n	8001ec0 <__aeabi_dmul+0x45c>
 8001ebe:	e684      	b.n	8001bca <__aeabi_dmul+0x166>
 8001ec0:	4656      	mov	r6, sl
 8001ec2:	3b08      	subs	r3, #8
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	409e      	lsls	r6, r3
 8001ec8:	e689      	b.n	8001bde <__aeabi_dmul+0x17a>
 8001eca:	f000 fcc9 	bl	8002860 <__clzsi2>
 8001ece:	0001      	movs	r1, r0
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	3115      	adds	r1, #21
 8001ed4:	3220      	adds	r2, #32
 8001ed6:	291c      	cmp	r1, #28
 8001ed8:	dc00      	bgt.n	8001edc <__aeabi_dmul+0x478>
 8001eda:	e64e      	b.n	8001b7a <__aeabi_dmul+0x116>
 8001edc:	0034      	movs	r4, r6
 8001ede:	3808      	subs	r0, #8
 8001ee0:	2500      	movs	r5, #0
 8001ee2:	4084      	lsls	r4, r0
 8001ee4:	e653      	b.n	8001b8e <__aeabi_dmul+0x12a>
 8001ee6:	9b00      	ldr	r3, [sp, #0]
 8001ee8:	469c      	mov	ip, r3
 8001eea:	e741      	b.n	8001d70 <__aeabi_dmul+0x30c>
 8001eec:	4912      	ldr	r1, [pc, #72]	; (8001f38 <__aeabi_dmul+0x4d4>)
 8001eee:	0022      	movs	r2, r4
 8001ef0:	4461      	add	r1, ip
 8001ef2:	002e      	movs	r6, r5
 8001ef4:	408d      	lsls	r5, r1
 8001ef6:	408a      	lsls	r2, r1
 8001ef8:	40c6      	lsrs	r6, r0
 8001efa:	1e69      	subs	r1, r5, #1
 8001efc:	418d      	sbcs	r5, r1
 8001efe:	4332      	orrs	r2, r6
 8001f00:	432a      	orrs	r2, r5
 8001f02:	40c4      	lsrs	r4, r0
 8001f04:	0753      	lsls	r3, r2, #29
 8001f06:	d0b6      	beq.n	8001e76 <__aeabi_dmul+0x412>
 8001f08:	210f      	movs	r1, #15
 8001f0a:	4011      	ands	r1, r2
 8001f0c:	2904      	cmp	r1, #4
 8001f0e:	d1ac      	bne.n	8001e6a <__aeabi_dmul+0x406>
 8001f10:	e7b1      	b.n	8001e76 <__aeabi_dmul+0x412>
 8001f12:	0765      	lsls	r5, r4, #29
 8001f14:	0264      	lsls	r4, r4, #9
 8001f16:	0b24      	lsrs	r4, r4, #12
 8001f18:	08d2      	lsrs	r2, r2, #3
 8001f1a:	4315      	orrs	r5, r2
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	e611      	b.n	8001b44 <__aeabi_dmul+0xe0>
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	4314      	orrs	r4, r2
 8001f26:	0324      	lsls	r4, r4, #12
 8001f28:	4a01      	ldr	r2, [pc, #4]	; (8001f30 <__aeabi_dmul+0x4cc>)
 8001f2a:	0b24      	lsrs	r4, r4, #12
 8001f2c:	e60a      	b.n	8001b44 <__aeabi_dmul+0xe0>
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	000007ff 	.word	0x000007ff
 8001f34:	0000043e 	.word	0x0000043e
 8001f38:	0000041e 	.word	0x0000041e

08001f3c <__aeabi_dsub>:
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3e:	4657      	mov	r7, sl
 8001f40:	464e      	mov	r6, r9
 8001f42:	4645      	mov	r5, r8
 8001f44:	46de      	mov	lr, fp
 8001f46:	0004      	movs	r4, r0
 8001f48:	b5e0      	push	{r5, r6, r7, lr}
 8001f4a:	001f      	movs	r7, r3
 8001f4c:	0010      	movs	r0, r2
 8001f4e:	030b      	lsls	r3, r1, #12
 8001f50:	0f62      	lsrs	r2, r4, #29
 8001f52:	004e      	lsls	r6, r1, #1
 8001f54:	0fcd      	lsrs	r5, r1, #31
 8001f56:	0a5b      	lsrs	r3, r3, #9
 8001f58:	0339      	lsls	r1, r7, #12
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	0a49      	lsrs	r1, r1, #9
 8001f5e:	00e2      	lsls	r2, r4, #3
 8001f60:	0f44      	lsrs	r4, r0, #29
 8001f62:	4321      	orrs	r1, r4
 8001f64:	4cc2      	ldr	r4, [pc, #776]	; (8002270 <__aeabi_dsub+0x334>)
 8001f66:	4691      	mov	r9, r2
 8001f68:	4692      	mov	sl, r2
 8001f6a:	00c0      	lsls	r0, r0, #3
 8001f6c:	007a      	lsls	r2, r7, #1
 8001f6e:	4680      	mov	r8, r0
 8001f70:	0d76      	lsrs	r6, r6, #21
 8001f72:	0d52      	lsrs	r2, r2, #21
 8001f74:	0fff      	lsrs	r7, r7, #31
 8001f76:	42a2      	cmp	r2, r4
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x40>
 8001f7a:	e0b4      	b.n	80020e6 <__aeabi_dsub+0x1aa>
 8001f7c:	2401      	movs	r4, #1
 8001f7e:	4067      	eors	r7, r4
 8001f80:	46bb      	mov	fp, r7
 8001f82:	42bd      	cmp	r5, r7
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x4c>
 8001f86:	e088      	b.n	800209a <__aeabi_dsub+0x15e>
 8001f88:	1ab4      	subs	r4, r6, r2
 8001f8a:	46a4      	mov	ip, r4
 8001f8c:	2c00      	cmp	r4, #0
 8001f8e:	dc00      	bgt.n	8001f92 <__aeabi_dsub+0x56>
 8001f90:	e0b2      	b.n	80020f8 <__aeabi_dsub+0x1bc>
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x5c>
 8001f96:	e0c5      	b.n	8002124 <__aeabi_dsub+0x1e8>
 8001f98:	4ab5      	ldr	r2, [pc, #724]	; (8002270 <__aeabi_dsub+0x334>)
 8001f9a:	4296      	cmp	r6, r2
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_dsub+0x64>
 8001f9e:	e28b      	b.n	80024b8 <__aeabi_dsub+0x57c>
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	0412      	lsls	r2, r2, #16
 8001fa4:	4311      	orrs	r1, r2
 8001fa6:	4662      	mov	r2, ip
 8001fa8:	2a38      	cmp	r2, #56	; 0x38
 8001faa:	dd00      	ble.n	8001fae <__aeabi_dsub+0x72>
 8001fac:	e1a1      	b.n	80022f2 <__aeabi_dsub+0x3b6>
 8001fae:	2a1f      	cmp	r2, #31
 8001fb0:	dd00      	ble.n	8001fb4 <__aeabi_dsub+0x78>
 8001fb2:	e216      	b.n	80023e2 <__aeabi_dsub+0x4a6>
 8001fb4:	2720      	movs	r7, #32
 8001fb6:	000c      	movs	r4, r1
 8001fb8:	1abf      	subs	r7, r7, r2
 8001fba:	40bc      	lsls	r4, r7
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	46a0      	mov	r8, r4
 8001fc0:	4664      	mov	r4, ip
 8001fc2:	40b8      	lsls	r0, r7
 8001fc4:	40e2      	lsrs	r2, r4
 8001fc6:	4644      	mov	r4, r8
 8001fc8:	4314      	orrs	r4, r2
 8001fca:	0002      	movs	r2, r0
 8001fcc:	1e50      	subs	r0, r2, #1
 8001fce:	4182      	sbcs	r2, r0
 8001fd0:	4660      	mov	r0, ip
 8001fd2:	40c1      	lsrs	r1, r0
 8001fd4:	4322      	orrs	r2, r4
 8001fd6:	1a5b      	subs	r3, r3, r1
 8001fd8:	4649      	mov	r1, r9
 8001fda:	1a8c      	subs	r4, r1, r2
 8001fdc:	45a1      	cmp	r9, r4
 8001fde:	4192      	sbcs	r2, r2
 8001fe0:	4252      	negs	r2, r2
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	4698      	mov	r8, r3
 8001fe6:	4643      	mov	r3, r8
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	d400      	bmi.n	8001fee <__aeabi_dsub+0xb2>
 8001fec:	e117      	b.n	800221e <__aeabi_dsub+0x2e2>
 8001fee:	4643      	mov	r3, r8
 8001ff0:	025b      	lsls	r3, r3, #9
 8001ff2:	0a5b      	lsrs	r3, r3, #9
 8001ff4:	4698      	mov	r8, r3
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0xc2>
 8001ffc:	e16c      	b.n	80022d8 <__aeabi_dsub+0x39c>
 8001ffe:	4640      	mov	r0, r8
 8002000:	f000 fc2e 	bl	8002860 <__clzsi2>
 8002004:	0002      	movs	r2, r0
 8002006:	3a08      	subs	r2, #8
 8002008:	2120      	movs	r1, #32
 800200a:	0020      	movs	r0, r4
 800200c:	4643      	mov	r3, r8
 800200e:	1a89      	subs	r1, r1, r2
 8002010:	4093      	lsls	r3, r2
 8002012:	40c8      	lsrs	r0, r1
 8002014:	4094      	lsls	r4, r2
 8002016:	4303      	orrs	r3, r0
 8002018:	4296      	cmp	r6, r2
 800201a:	dd00      	ble.n	800201e <__aeabi_dsub+0xe2>
 800201c:	e157      	b.n	80022ce <__aeabi_dsub+0x392>
 800201e:	1b96      	subs	r6, r2, r6
 8002020:	1c71      	adds	r1, r6, #1
 8002022:	291f      	cmp	r1, #31
 8002024:	dd00      	ble.n	8002028 <__aeabi_dsub+0xec>
 8002026:	e1cb      	b.n	80023c0 <__aeabi_dsub+0x484>
 8002028:	2220      	movs	r2, #32
 800202a:	0018      	movs	r0, r3
 800202c:	0026      	movs	r6, r4
 800202e:	1a52      	subs	r2, r2, r1
 8002030:	4094      	lsls	r4, r2
 8002032:	4090      	lsls	r0, r2
 8002034:	40ce      	lsrs	r6, r1
 8002036:	40cb      	lsrs	r3, r1
 8002038:	1e62      	subs	r2, r4, #1
 800203a:	4194      	sbcs	r4, r2
 800203c:	4330      	orrs	r0, r6
 800203e:	4698      	mov	r8, r3
 8002040:	2600      	movs	r6, #0
 8002042:	4304      	orrs	r4, r0
 8002044:	0763      	lsls	r3, r4, #29
 8002046:	d009      	beq.n	800205c <__aeabi_dsub+0x120>
 8002048:	230f      	movs	r3, #15
 800204a:	4023      	ands	r3, r4
 800204c:	2b04      	cmp	r3, #4
 800204e:	d005      	beq.n	800205c <__aeabi_dsub+0x120>
 8002050:	1d23      	adds	r3, r4, #4
 8002052:	42a3      	cmp	r3, r4
 8002054:	41a4      	sbcs	r4, r4
 8002056:	4264      	negs	r4, r4
 8002058:	44a0      	add	r8, r4
 800205a:	001c      	movs	r4, r3
 800205c:	4643      	mov	r3, r8
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	d400      	bmi.n	8002064 <__aeabi_dsub+0x128>
 8002062:	e0df      	b.n	8002224 <__aeabi_dsub+0x2e8>
 8002064:	4b82      	ldr	r3, [pc, #520]	; (8002270 <__aeabi_dsub+0x334>)
 8002066:	3601      	adds	r6, #1
 8002068:	429e      	cmp	r6, r3
 800206a:	d100      	bne.n	800206e <__aeabi_dsub+0x132>
 800206c:	e0fb      	b.n	8002266 <__aeabi_dsub+0x32a>
 800206e:	4642      	mov	r2, r8
 8002070:	4b80      	ldr	r3, [pc, #512]	; (8002274 <__aeabi_dsub+0x338>)
 8002072:	08e4      	lsrs	r4, r4, #3
 8002074:	401a      	ands	r2, r3
 8002076:	0013      	movs	r3, r2
 8002078:	0571      	lsls	r1, r6, #21
 800207a:	0752      	lsls	r2, r2, #29
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	4322      	orrs	r2, r4
 8002080:	0b1b      	lsrs	r3, r3, #12
 8002082:	0d49      	lsrs	r1, r1, #21
 8002084:	0509      	lsls	r1, r1, #20
 8002086:	07ed      	lsls	r5, r5, #31
 8002088:	4319      	orrs	r1, r3
 800208a:	4329      	orrs	r1, r5
 800208c:	0010      	movs	r0, r2
 800208e:	bcf0      	pop	{r4, r5, r6, r7}
 8002090:	46bb      	mov	fp, r7
 8002092:	46b2      	mov	sl, r6
 8002094:	46a9      	mov	r9, r5
 8002096:	46a0      	mov	r8, r4
 8002098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800209a:	1ab4      	subs	r4, r6, r2
 800209c:	46a4      	mov	ip, r4
 800209e:	2c00      	cmp	r4, #0
 80020a0:	dd58      	ble.n	8002154 <__aeabi_dsub+0x218>
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x16c>
 80020a6:	e09e      	b.n	80021e6 <__aeabi_dsub+0x2aa>
 80020a8:	4a71      	ldr	r2, [pc, #452]	; (8002270 <__aeabi_dsub+0x334>)
 80020aa:	4296      	cmp	r6, r2
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x174>
 80020ae:	e13b      	b.n	8002328 <__aeabi_dsub+0x3ec>
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	0412      	lsls	r2, r2, #16
 80020b4:	4311      	orrs	r1, r2
 80020b6:	4662      	mov	r2, ip
 80020b8:	2a38      	cmp	r2, #56	; 0x38
 80020ba:	dd00      	ble.n	80020be <__aeabi_dsub+0x182>
 80020bc:	e0c1      	b.n	8002242 <__aeabi_dsub+0x306>
 80020be:	2a1f      	cmp	r2, #31
 80020c0:	dc00      	bgt.n	80020c4 <__aeabi_dsub+0x188>
 80020c2:	e1bb      	b.n	800243c <__aeabi_dsub+0x500>
 80020c4:	000c      	movs	r4, r1
 80020c6:	3a20      	subs	r2, #32
 80020c8:	40d4      	lsrs	r4, r2
 80020ca:	0022      	movs	r2, r4
 80020cc:	4664      	mov	r4, ip
 80020ce:	2c20      	cmp	r4, #32
 80020d0:	d004      	beq.n	80020dc <__aeabi_dsub+0x1a0>
 80020d2:	2740      	movs	r7, #64	; 0x40
 80020d4:	1b3f      	subs	r7, r7, r4
 80020d6:	40b9      	lsls	r1, r7
 80020d8:	4308      	orrs	r0, r1
 80020da:	4680      	mov	r8, r0
 80020dc:	4644      	mov	r4, r8
 80020de:	1e61      	subs	r1, r4, #1
 80020e0:	418c      	sbcs	r4, r1
 80020e2:	4314      	orrs	r4, r2
 80020e4:	e0b1      	b.n	800224a <__aeabi_dsub+0x30e>
 80020e6:	000c      	movs	r4, r1
 80020e8:	4304      	orrs	r4, r0
 80020ea:	d02a      	beq.n	8002142 <__aeabi_dsub+0x206>
 80020ec:	46bb      	mov	fp, r7
 80020ee:	42bd      	cmp	r5, r7
 80020f0:	d02d      	beq.n	800214e <__aeabi_dsub+0x212>
 80020f2:	4c61      	ldr	r4, [pc, #388]	; (8002278 <__aeabi_dsub+0x33c>)
 80020f4:	46a4      	mov	ip, r4
 80020f6:	44b4      	add	ip, r6
 80020f8:	4664      	mov	r4, ip
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d05c      	beq.n	80021b8 <__aeabi_dsub+0x27c>
 80020fe:	1b94      	subs	r4, r2, r6
 8002100:	46a4      	mov	ip, r4
 8002102:	2e00      	cmp	r6, #0
 8002104:	d000      	beq.n	8002108 <__aeabi_dsub+0x1cc>
 8002106:	e115      	b.n	8002334 <__aeabi_dsub+0x3f8>
 8002108:	464d      	mov	r5, r9
 800210a:	431d      	orrs	r5, r3
 800210c:	d100      	bne.n	8002110 <__aeabi_dsub+0x1d4>
 800210e:	e1c3      	b.n	8002498 <__aeabi_dsub+0x55c>
 8002110:	1e65      	subs	r5, r4, #1
 8002112:	2c01      	cmp	r4, #1
 8002114:	d100      	bne.n	8002118 <__aeabi_dsub+0x1dc>
 8002116:	e20c      	b.n	8002532 <__aeabi_dsub+0x5f6>
 8002118:	4e55      	ldr	r6, [pc, #340]	; (8002270 <__aeabi_dsub+0x334>)
 800211a:	42b4      	cmp	r4, r6
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x1e4>
 800211e:	e1f8      	b.n	8002512 <__aeabi_dsub+0x5d6>
 8002120:	46ac      	mov	ip, r5
 8002122:	e10e      	b.n	8002342 <__aeabi_dsub+0x406>
 8002124:	000a      	movs	r2, r1
 8002126:	4302      	orrs	r2, r0
 8002128:	d100      	bne.n	800212c <__aeabi_dsub+0x1f0>
 800212a:	e136      	b.n	800239a <__aeabi_dsub+0x45e>
 800212c:	0022      	movs	r2, r4
 800212e:	3a01      	subs	r2, #1
 8002130:	2c01      	cmp	r4, #1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x1fa>
 8002134:	e1c6      	b.n	80024c4 <__aeabi_dsub+0x588>
 8002136:	4c4e      	ldr	r4, [pc, #312]	; (8002270 <__aeabi_dsub+0x334>)
 8002138:	45a4      	cmp	ip, r4
 800213a:	d100      	bne.n	800213e <__aeabi_dsub+0x202>
 800213c:	e0f4      	b.n	8002328 <__aeabi_dsub+0x3ec>
 800213e:	4694      	mov	ip, r2
 8002140:	e731      	b.n	8001fa6 <__aeabi_dsub+0x6a>
 8002142:	2401      	movs	r4, #1
 8002144:	4067      	eors	r7, r4
 8002146:	46bb      	mov	fp, r7
 8002148:	42bd      	cmp	r5, r7
 800214a:	d000      	beq.n	800214e <__aeabi_dsub+0x212>
 800214c:	e71c      	b.n	8001f88 <__aeabi_dsub+0x4c>
 800214e:	4c4a      	ldr	r4, [pc, #296]	; (8002278 <__aeabi_dsub+0x33c>)
 8002150:	46a4      	mov	ip, r4
 8002152:	44b4      	add	ip, r6
 8002154:	4664      	mov	r4, ip
 8002156:	2c00      	cmp	r4, #0
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x220>
 800215a:	e0cf      	b.n	80022fc <__aeabi_dsub+0x3c0>
 800215c:	1b94      	subs	r4, r2, r6
 800215e:	46a4      	mov	ip, r4
 8002160:	2e00      	cmp	r6, #0
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x22a>
 8002164:	e15c      	b.n	8002420 <__aeabi_dsub+0x4e4>
 8002166:	4e42      	ldr	r6, [pc, #264]	; (8002270 <__aeabi_dsub+0x334>)
 8002168:	42b2      	cmp	r2, r6
 800216a:	d100      	bne.n	800216e <__aeabi_dsub+0x232>
 800216c:	e1ec      	b.n	8002548 <__aeabi_dsub+0x60c>
 800216e:	2680      	movs	r6, #128	; 0x80
 8002170:	0436      	lsls	r6, r6, #16
 8002172:	4333      	orrs	r3, r6
 8002174:	4664      	mov	r4, ip
 8002176:	2c38      	cmp	r4, #56	; 0x38
 8002178:	dd00      	ble.n	800217c <__aeabi_dsub+0x240>
 800217a:	e1b3      	b.n	80024e4 <__aeabi_dsub+0x5a8>
 800217c:	2c1f      	cmp	r4, #31
 800217e:	dd00      	ble.n	8002182 <__aeabi_dsub+0x246>
 8002180:	e238      	b.n	80025f4 <__aeabi_dsub+0x6b8>
 8002182:	2620      	movs	r6, #32
 8002184:	1b36      	subs	r6, r6, r4
 8002186:	001c      	movs	r4, r3
 8002188:	40b4      	lsls	r4, r6
 800218a:	464f      	mov	r7, r9
 800218c:	46a0      	mov	r8, r4
 800218e:	4664      	mov	r4, ip
 8002190:	40e7      	lsrs	r7, r4
 8002192:	4644      	mov	r4, r8
 8002194:	433c      	orrs	r4, r7
 8002196:	464f      	mov	r7, r9
 8002198:	40b7      	lsls	r7, r6
 800219a:	003e      	movs	r6, r7
 800219c:	1e77      	subs	r7, r6, #1
 800219e:	41be      	sbcs	r6, r7
 80021a0:	4334      	orrs	r4, r6
 80021a2:	4666      	mov	r6, ip
 80021a4:	40f3      	lsrs	r3, r6
 80021a6:	18c9      	adds	r1, r1, r3
 80021a8:	1824      	adds	r4, r4, r0
 80021aa:	4284      	cmp	r4, r0
 80021ac:	419b      	sbcs	r3, r3
 80021ae:	425b      	negs	r3, r3
 80021b0:	4698      	mov	r8, r3
 80021b2:	0016      	movs	r6, r2
 80021b4:	4488      	add	r8, r1
 80021b6:	e04e      	b.n	8002256 <__aeabi_dsub+0x31a>
 80021b8:	4a30      	ldr	r2, [pc, #192]	; (800227c <__aeabi_dsub+0x340>)
 80021ba:	1c74      	adds	r4, r6, #1
 80021bc:	4214      	tst	r4, r2
 80021be:	d000      	beq.n	80021c2 <__aeabi_dsub+0x286>
 80021c0:	e0d6      	b.n	8002370 <__aeabi_dsub+0x434>
 80021c2:	464a      	mov	r2, r9
 80021c4:	431a      	orrs	r2, r3
 80021c6:	2e00      	cmp	r6, #0
 80021c8:	d000      	beq.n	80021cc <__aeabi_dsub+0x290>
 80021ca:	e15b      	b.n	8002484 <__aeabi_dsub+0x548>
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d100      	bne.n	80021d2 <__aeabi_dsub+0x296>
 80021d0:	e1a5      	b.n	800251e <__aeabi_dsub+0x5e2>
 80021d2:	000a      	movs	r2, r1
 80021d4:	4302      	orrs	r2, r0
 80021d6:	d000      	beq.n	80021da <__aeabi_dsub+0x29e>
 80021d8:	e1bb      	b.n	8002552 <__aeabi_dsub+0x616>
 80021da:	464a      	mov	r2, r9
 80021dc:	0759      	lsls	r1, r3, #29
 80021de:	08d2      	lsrs	r2, r2, #3
 80021e0:	430a      	orrs	r2, r1
 80021e2:	08db      	lsrs	r3, r3, #3
 80021e4:	e027      	b.n	8002236 <__aeabi_dsub+0x2fa>
 80021e6:	000a      	movs	r2, r1
 80021e8:	4302      	orrs	r2, r0
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0x2b2>
 80021ec:	e174      	b.n	80024d8 <__aeabi_dsub+0x59c>
 80021ee:	0022      	movs	r2, r4
 80021f0:	3a01      	subs	r2, #1
 80021f2:	2c01      	cmp	r4, #1
 80021f4:	d005      	beq.n	8002202 <__aeabi_dsub+0x2c6>
 80021f6:	4c1e      	ldr	r4, [pc, #120]	; (8002270 <__aeabi_dsub+0x334>)
 80021f8:	45a4      	cmp	ip, r4
 80021fa:	d100      	bne.n	80021fe <__aeabi_dsub+0x2c2>
 80021fc:	e094      	b.n	8002328 <__aeabi_dsub+0x3ec>
 80021fe:	4694      	mov	ip, r2
 8002200:	e759      	b.n	80020b6 <__aeabi_dsub+0x17a>
 8002202:	4448      	add	r0, r9
 8002204:	4548      	cmp	r0, r9
 8002206:	4192      	sbcs	r2, r2
 8002208:	185b      	adds	r3, r3, r1
 800220a:	4698      	mov	r8, r3
 800220c:	0004      	movs	r4, r0
 800220e:	4252      	negs	r2, r2
 8002210:	4490      	add	r8, r2
 8002212:	4643      	mov	r3, r8
 8002214:	2602      	movs	r6, #2
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	d500      	bpl.n	800221c <__aeabi_dsub+0x2e0>
 800221a:	e0c4      	b.n	80023a6 <__aeabi_dsub+0x46a>
 800221c:	3e01      	subs	r6, #1
 800221e:	0763      	lsls	r3, r4, #29
 8002220:	d000      	beq.n	8002224 <__aeabi_dsub+0x2e8>
 8002222:	e711      	b.n	8002048 <__aeabi_dsub+0x10c>
 8002224:	4643      	mov	r3, r8
 8002226:	46b4      	mov	ip, r6
 8002228:	0759      	lsls	r1, r3, #29
 800222a:	08e2      	lsrs	r2, r4, #3
 800222c:	430a      	orrs	r2, r1
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	490f      	ldr	r1, [pc, #60]	; (8002270 <__aeabi_dsub+0x334>)
 8002232:	458c      	cmp	ip, r1
 8002234:	d040      	beq.n	80022b8 <__aeabi_dsub+0x37c>
 8002236:	4661      	mov	r1, ip
 8002238:	031b      	lsls	r3, r3, #12
 800223a:	0549      	lsls	r1, r1, #21
 800223c:	0b1b      	lsrs	r3, r3, #12
 800223e:	0d49      	lsrs	r1, r1, #21
 8002240:	e720      	b.n	8002084 <__aeabi_dsub+0x148>
 8002242:	4301      	orrs	r1, r0
 8002244:	000c      	movs	r4, r1
 8002246:	1e61      	subs	r1, r4, #1
 8002248:	418c      	sbcs	r4, r1
 800224a:	444c      	add	r4, r9
 800224c:	454c      	cmp	r4, r9
 800224e:	4192      	sbcs	r2, r2
 8002250:	4252      	negs	r2, r2
 8002252:	4690      	mov	r8, r2
 8002254:	4498      	add	r8, r3
 8002256:	4643      	mov	r3, r8
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	d5e0      	bpl.n	800221e <__aeabi_dsub+0x2e2>
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__aeabi_dsub+0x334>)
 800225e:	3601      	adds	r6, #1
 8002260:	429e      	cmp	r6, r3
 8002262:	d000      	beq.n	8002266 <__aeabi_dsub+0x32a>
 8002264:	e09f      	b.n	80023a6 <__aeabi_dsub+0x46a>
 8002266:	0031      	movs	r1, r6
 8002268:	2300      	movs	r3, #0
 800226a:	2200      	movs	r2, #0
 800226c:	e70a      	b.n	8002084 <__aeabi_dsub+0x148>
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	000007ff 	.word	0x000007ff
 8002274:	ff7fffff 	.word	0xff7fffff
 8002278:	fffff801 	.word	0xfffff801
 800227c:	000007fe 	.word	0x000007fe
 8002280:	2a00      	cmp	r2, #0
 8002282:	d100      	bne.n	8002286 <__aeabi_dsub+0x34a>
 8002284:	e160      	b.n	8002548 <__aeabi_dsub+0x60c>
 8002286:	000a      	movs	r2, r1
 8002288:	4302      	orrs	r2, r0
 800228a:	d04d      	beq.n	8002328 <__aeabi_dsub+0x3ec>
 800228c:	464a      	mov	r2, r9
 800228e:	075c      	lsls	r4, r3, #29
 8002290:	08d2      	lsrs	r2, r2, #3
 8002292:	4322      	orrs	r2, r4
 8002294:	2480      	movs	r4, #128	; 0x80
 8002296:	08db      	lsrs	r3, r3, #3
 8002298:	0324      	lsls	r4, r4, #12
 800229a:	4223      	tst	r3, r4
 800229c:	d007      	beq.n	80022ae <__aeabi_dsub+0x372>
 800229e:	08ce      	lsrs	r6, r1, #3
 80022a0:	4226      	tst	r6, r4
 80022a2:	d104      	bne.n	80022ae <__aeabi_dsub+0x372>
 80022a4:	465d      	mov	r5, fp
 80022a6:	0033      	movs	r3, r6
 80022a8:	08c2      	lsrs	r2, r0, #3
 80022aa:	0749      	lsls	r1, r1, #29
 80022ac:	430a      	orrs	r2, r1
 80022ae:	0f51      	lsrs	r1, r2, #29
 80022b0:	00d2      	lsls	r2, r2, #3
 80022b2:	08d2      	lsrs	r2, r2, #3
 80022b4:	0749      	lsls	r1, r1, #29
 80022b6:	430a      	orrs	r2, r1
 80022b8:	0011      	movs	r1, r2
 80022ba:	4319      	orrs	r1, r3
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dsub+0x384>
 80022be:	e1c8      	b.n	8002652 <__aeabi_dsub+0x716>
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0309      	lsls	r1, r1, #12
 80022c4:	430b      	orrs	r3, r1
 80022c6:	031b      	lsls	r3, r3, #12
 80022c8:	49d5      	ldr	r1, [pc, #852]	; (8002620 <__aeabi_dsub+0x6e4>)
 80022ca:	0b1b      	lsrs	r3, r3, #12
 80022cc:	e6da      	b.n	8002084 <__aeabi_dsub+0x148>
 80022ce:	49d5      	ldr	r1, [pc, #852]	; (8002624 <__aeabi_dsub+0x6e8>)
 80022d0:	1ab6      	subs	r6, r6, r2
 80022d2:	400b      	ands	r3, r1
 80022d4:	4698      	mov	r8, r3
 80022d6:	e6b5      	b.n	8002044 <__aeabi_dsub+0x108>
 80022d8:	0020      	movs	r0, r4
 80022da:	f000 fac1 	bl	8002860 <__clzsi2>
 80022de:	0002      	movs	r2, r0
 80022e0:	3218      	adds	r2, #24
 80022e2:	2a1f      	cmp	r2, #31
 80022e4:	dc00      	bgt.n	80022e8 <__aeabi_dsub+0x3ac>
 80022e6:	e68f      	b.n	8002008 <__aeabi_dsub+0xcc>
 80022e8:	0023      	movs	r3, r4
 80022ea:	3808      	subs	r0, #8
 80022ec:	4083      	lsls	r3, r0
 80022ee:	2400      	movs	r4, #0
 80022f0:	e692      	b.n	8002018 <__aeabi_dsub+0xdc>
 80022f2:	4308      	orrs	r0, r1
 80022f4:	0002      	movs	r2, r0
 80022f6:	1e50      	subs	r0, r2, #1
 80022f8:	4182      	sbcs	r2, r0
 80022fa:	e66d      	b.n	8001fd8 <__aeabi_dsub+0x9c>
 80022fc:	4cca      	ldr	r4, [pc, #808]	; (8002628 <__aeabi_dsub+0x6ec>)
 80022fe:	1c72      	adds	r2, r6, #1
 8002300:	4222      	tst	r2, r4
 8002302:	d000      	beq.n	8002306 <__aeabi_dsub+0x3ca>
 8002304:	e0ad      	b.n	8002462 <__aeabi_dsub+0x526>
 8002306:	464a      	mov	r2, r9
 8002308:	431a      	orrs	r2, r3
 800230a:	2e00      	cmp	r6, #0
 800230c:	d1b8      	bne.n	8002280 <__aeabi_dsub+0x344>
 800230e:	2a00      	cmp	r2, #0
 8002310:	d100      	bne.n	8002314 <__aeabi_dsub+0x3d8>
 8002312:	e158      	b.n	80025c6 <__aeabi_dsub+0x68a>
 8002314:	000a      	movs	r2, r1
 8002316:	4302      	orrs	r2, r0
 8002318:	d000      	beq.n	800231c <__aeabi_dsub+0x3e0>
 800231a:	e159      	b.n	80025d0 <__aeabi_dsub+0x694>
 800231c:	464a      	mov	r2, r9
 800231e:	0759      	lsls	r1, r3, #29
 8002320:	08d2      	lsrs	r2, r2, #3
 8002322:	430a      	orrs	r2, r1
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	e786      	b.n	8002236 <__aeabi_dsub+0x2fa>
 8002328:	464a      	mov	r2, r9
 800232a:	0759      	lsls	r1, r3, #29
 800232c:	08d2      	lsrs	r2, r2, #3
 800232e:	430a      	orrs	r2, r1
 8002330:	08db      	lsrs	r3, r3, #3
 8002332:	e7c1      	b.n	80022b8 <__aeabi_dsub+0x37c>
 8002334:	4dba      	ldr	r5, [pc, #744]	; (8002620 <__aeabi_dsub+0x6e4>)
 8002336:	42aa      	cmp	r2, r5
 8002338:	d100      	bne.n	800233c <__aeabi_dsub+0x400>
 800233a:	e11e      	b.n	800257a <__aeabi_dsub+0x63e>
 800233c:	2580      	movs	r5, #128	; 0x80
 800233e:	042d      	lsls	r5, r5, #16
 8002340:	432b      	orrs	r3, r5
 8002342:	4664      	mov	r4, ip
 8002344:	2c38      	cmp	r4, #56	; 0x38
 8002346:	dc5d      	bgt.n	8002404 <__aeabi_dsub+0x4c8>
 8002348:	2c1f      	cmp	r4, #31
 800234a:	dd00      	ble.n	800234e <__aeabi_dsub+0x412>
 800234c:	e0d0      	b.n	80024f0 <__aeabi_dsub+0x5b4>
 800234e:	2520      	movs	r5, #32
 8002350:	4667      	mov	r7, ip
 8002352:	1b2d      	subs	r5, r5, r4
 8002354:	464e      	mov	r6, r9
 8002356:	001c      	movs	r4, r3
 8002358:	40fe      	lsrs	r6, r7
 800235a:	40ac      	lsls	r4, r5
 800235c:	4334      	orrs	r4, r6
 800235e:	464e      	mov	r6, r9
 8002360:	40ae      	lsls	r6, r5
 8002362:	0035      	movs	r5, r6
 8002364:	40fb      	lsrs	r3, r7
 8002366:	1e6e      	subs	r6, r5, #1
 8002368:	41b5      	sbcs	r5, r6
 800236a:	1ac9      	subs	r1, r1, r3
 800236c:	432c      	orrs	r4, r5
 800236e:	e04e      	b.n	800240e <__aeabi_dsub+0x4d2>
 8002370:	464a      	mov	r2, r9
 8002372:	1a14      	subs	r4, r2, r0
 8002374:	45a1      	cmp	r9, r4
 8002376:	4192      	sbcs	r2, r2
 8002378:	4252      	negs	r2, r2
 800237a:	4690      	mov	r8, r2
 800237c:	1a5f      	subs	r7, r3, r1
 800237e:	003a      	movs	r2, r7
 8002380:	4647      	mov	r7, r8
 8002382:	1bd2      	subs	r2, r2, r7
 8002384:	4690      	mov	r8, r2
 8002386:	0212      	lsls	r2, r2, #8
 8002388:	d500      	bpl.n	800238c <__aeabi_dsub+0x450>
 800238a:	e08b      	b.n	80024a4 <__aeabi_dsub+0x568>
 800238c:	4642      	mov	r2, r8
 800238e:	4322      	orrs	r2, r4
 8002390:	d000      	beq.n	8002394 <__aeabi_dsub+0x458>
 8002392:	e630      	b.n	8001ff6 <__aeabi_dsub+0xba>
 8002394:	2300      	movs	r3, #0
 8002396:	2500      	movs	r5, #0
 8002398:	e74d      	b.n	8002236 <__aeabi_dsub+0x2fa>
 800239a:	464a      	mov	r2, r9
 800239c:	0759      	lsls	r1, r3, #29
 800239e:	08d2      	lsrs	r2, r2, #3
 80023a0:	430a      	orrs	r2, r1
 80023a2:	08db      	lsrs	r3, r3, #3
 80023a4:	e744      	b.n	8002230 <__aeabi_dsub+0x2f4>
 80023a6:	4642      	mov	r2, r8
 80023a8:	4b9e      	ldr	r3, [pc, #632]	; (8002624 <__aeabi_dsub+0x6e8>)
 80023aa:	0861      	lsrs	r1, r4, #1
 80023ac:	401a      	ands	r2, r3
 80023ae:	0013      	movs	r3, r2
 80023b0:	2201      	movs	r2, #1
 80023b2:	4014      	ands	r4, r2
 80023b4:	430c      	orrs	r4, r1
 80023b6:	07da      	lsls	r2, r3, #31
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	4698      	mov	r8, r3
 80023bc:	4314      	orrs	r4, r2
 80023be:	e641      	b.n	8002044 <__aeabi_dsub+0x108>
 80023c0:	001a      	movs	r2, r3
 80023c2:	3e1f      	subs	r6, #31
 80023c4:	40f2      	lsrs	r2, r6
 80023c6:	0016      	movs	r6, r2
 80023c8:	2920      	cmp	r1, #32
 80023ca:	d003      	beq.n	80023d4 <__aeabi_dsub+0x498>
 80023cc:	2240      	movs	r2, #64	; 0x40
 80023ce:	1a51      	subs	r1, r2, r1
 80023d0:	408b      	lsls	r3, r1
 80023d2:	431c      	orrs	r4, r3
 80023d4:	1e62      	subs	r2, r4, #1
 80023d6:	4194      	sbcs	r4, r2
 80023d8:	2300      	movs	r3, #0
 80023da:	4334      	orrs	r4, r6
 80023dc:	4698      	mov	r8, r3
 80023de:	2600      	movs	r6, #0
 80023e0:	e71d      	b.n	800221e <__aeabi_dsub+0x2e2>
 80023e2:	000c      	movs	r4, r1
 80023e4:	3a20      	subs	r2, #32
 80023e6:	40d4      	lsrs	r4, r2
 80023e8:	0022      	movs	r2, r4
 80023ea:	4664      	mov	r4, ip
 80023ec:	2c20      	cmp	r4, #32
 80023ee:	d004      	beq.n	80023fa <__aeabi_dsub+0x4be>
 80023f0:	2740      	movs	r7, #64	; 0x40
 80023f2:	1b3f      	subs	r7, r7, r4
 80023f4:	40b9      	lsls	r1, r7
 80023f6:	4308      	orrs	r0, r1
 80023f8:	4680      	mov	r8, r0
 80023fa:	4644      	mov	r4, r8
 80023fc:	1e61      	subs	r1, r4, #1
 80023fe:	418c      	sbcs	r4, r1
 8002400:	4322      	orrs	r2, r4
 8002402:	e5e9      	b.n	8001fd8 <__aeabi_dsub+0x9c>
 8002404:	464c      	mov	r4, r9
 8002406:	4323      	orrs	r3, r4
 8002408:	001c      	movs	r4, r3
 800240a:	1e63      	subs	r3, r4, #1
 800240c:	419c      	sbcs	r4, r3
 800240e:	1b04      	subs	r4, r0, r4
 8002410:	42a0      	cmp	r0, r4
 8002412:	419b      	sbcs	r3, r3
 8002414:	425b      	negs	r3, r3
 8002416:	1acb      	subs	r3, r1, r3
 8002418:	4698      	mov	r8, r3
 800241a:	465d      	mov	r5, fp
 800241c:	0016      	movs	r6, r2
 800241e:	e5e2      	b.n	8001fe6 <__aeabi_dsub+0xaa>
 8002420:	464e      	mov	r6, r9
 8002422:	431e      	orrs	r6, r3
 8002424:	d100      	bne.n	8002428 <__aeabi_dsub+0x4ec>
 8002426:	e0ae      	b.n	8002586 <__aeabi_dsub+0x64a>
 8002428:	1e66      	subs	r6, r4, #1
 800242a:	2c01      	cmp	r4, #1
 800242c:	d100      	bne.n	8002430 <__aeabi_dsub+0x4f4>
 800242e:	e0fd      	b.n	800262c <__aeabi_dsub+0x6f0>
 8002430:	4f7b      	ldr	r7, [pc, #492]	; (8002620 <__aeabi_dsub+0x6e4>)
 8002432:	42bc      	cmp	r4, r7
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x4fc>
 8002436:	e107      	b.n	8002648 <__aeabi_dsub+0x70c>
 8002438:	46b4      	mov	ip, r6
 800243a:	e69b      	b.n	8002174 <__aeabi_dsub+0x238>
 800243c:	4664      	mov	r4, ip
 800243e:	2220      	movs	r2, #32
 8002440:	1b12      	subs	r2, r2, r4
 8002442:	000c      	movs	r4, r1
 8002444:	4094      	lsls	r4, r2
 8002446:	0007      	movs	r7, r0
 8002448:	4090      	lsls	r0, r2
 800244a:	46a0      	mov	r8, r4
 800244c:	4664      	mov	r4, ip
 800244e:	1e42      	subs	r2, r0, #1
 8002450:	4190      	sbcs	r0, r2
 8002452:	4662      	mov	r2, ip
 8002454:	40e7      	lsrs	r7, r4
 8002456:	4644      	mov	r4, r8
 8002458:	40d1      	lsrs	r1, r2
 800245a:	433c      	orrs	r4, r7
 800245c:	4304      	orrs	r4, r0
 800245e:	185b      	adds	r3, r3, r1
 8002460:	e6f3      	b.n	800224a <__aeabi_dsub+0x30e>
 8002462:	4c6f      	ldr	r4, [pc, #444]	; (8002620 <__aeabi_dsub+0x6e4>)
 8002464:	42a2      	cmp	r2, r4
 8002466:	d100      	bne.n	800246a <__aeabi_dsub+0x52e>
 8002468:	e0d5      	b.n	8002616 <__aeabi_dsub+0x6da>
 800246a:	4448      	add	r0, r9
 800246c:	185b      	adds	r3, r3, r1
 800246e:	4548      	cmp	r0, r9
 8002470:	4189      	sbcs	r1, r1
 8002472:	4249      	negs	r1, r1
 8002474:	185b      	adds	r3, r3, r1
 8002476:	07dc      	lsls	r4, r3, #31
 8002478:	0840      	lsrs	r0, r0, #1
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	4698      	mov	r8, r3
 800247e:	0016      	movs	r6, r2
 8002480:	4304      	orrs	r4, r0
 8002482:	e6cc      	b.n	800221e <__aeabi_dsub+0x2e2>
 8002484:	2a00      	cmp	r2, #0
 8002486:	d000      	beq.n	800248a <__aeabi_dsub+0x54e>
 8002488:	e082      	b.n	8002590 <__aeabi_dsub+0x654>
 800248a:	000a      	movs	r2, r1
 800248c:	4302      	orrs	r2, r0
 800248e:	d140      	bne.n	8002512 <__aeabi_dsub+0x5d6>
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	2500      	movs	r5, #0
 8002494:	031b      	lsls	r3, r3, #12
 8002496:	e713      	b.n	80022c0 <__aeabi_dsub+0x384>
 8002498:	074b      	lsls	r3, r1, #29
 800249a:	08c2      	lsrs	r2, r0, #3
 800249c:	431a      	orrs	r2, r3
 800249e:	465d      	mov	r5, fp
 80024a0:	08cb      	lsrs	r3, r1, #3
 80024a2:	e6c5      	b.n	8002230 <__aeabi_dsub+0x2f4>
 80024a4:	464a      	mov	r2, r9
 80024a6:	1a84      	subs	r4, r0, r2
 80024a8:	42a0      	cmp	r0, r4
 80024aa:	4192      	sbcs	r2, r2
 80024ac:	1acb      	subs	r3, r1, r3
 80024ae:	4252      	negs	r2, r2
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	4698      	mov	r8, r3
 80024b4:	465d      	mov	r5, fp
 80024b6:	e59e      	b.n	8001ff6 <__aeabi_dsub+0xba>
 80024b8:	464a      	mov	r2, r9
 80024ba:	0759      	lsls	r1, r3, #29
 80024bc:	08d2      	lsrs	r2, r2, #3
 80024be:	430a      	orrs	r2, r1
 80024c0:	08db      	lsrs	r3, r3, #3
 80024c2:	e6f9      	b.n	80022b8 <__aeabi_dsub+0x37c>
 80024c4:	464a      	mov	r2, r9
 80024c6:	1a14      	subs	r4, r2, r0
 80024c8:	45a1      	cmp	r9, r4
 80024ca:	4192      	sbcs	r2, r2
 80024cc:	1a5b      	subs	r3, r3, r1
 80024ce:	4252      	negs	r2, r2
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	4698      	mov	r8, r3
 80024d4:	2601      	movs	r6, #1
 80024d6:	e586      	b.n	8001fe6 <__aeabi_dsub+0xaa>
 80024d8:	464a      	mov	r2, r9
 80024da:	0759      	lsls	r1, r3, #29
 80024dc:	08d2      	lsrs	r2, r2, #3
 80024de:	430a      	orrs	r2, r1
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	e6a5      	b.n	8002230 <__aeabi_dsub+0x2f4>
 80024e4:	464c      	mov	r4, r9
 80024e6:	4323      	orrs	r3, r4
 80024e8:	001c      	movs	r4, r3
 80024ea:	1e63      	subs	r3, r4, #1
 80024ec:	419c      	sbcs	r4, r3
 80024ee:	e65b      	b.n	80021a8 <__aeabi_dsub+0x26c>
 80024f0:	4665      	mov	r5, ip
 80024f2:	001e      	movs	r6, r3
 80024f4:	3d20      	subs	r5, #32
 80024f6:	40ee      	lsrs	r6, r5
 80024f8:	2c20      	cmp	r4, #32
 80024fa:	d005      	beq.n	8002508 <__aeabi_dsub+0x5cc>
 80024fc:	2540      	movs	r5, #64	; 0x40
 80024fe:	1b2d      	subs	r5, r5, r4
 8002500:	40ab      	lsls	r3, r5
 8002502:	464c      	mov	r4, r9
 8002504:	431c      	orrs	r4, r3
 8002506:	46a2      	mov	sl, r4
 8002508:	4654      	mov	r4, sl
 800250a:	1e63      	subs	r3, r4, #1
 800250c:	419c      	sbcs	r4, r3
 800250e:	4334      	orrs	r4, r6
 8002510:	e77d      	b.n	800240e <__aeabi_dsub+0x4d2>
 8002512:	074b      	lsls	r3, r1, #29
 8002514:	08c2      	lsrs	r2, r0, #3
 8002516:	431a      	orrs	r2, r3
 8002518:	465d      	mov	r5, fp
 800251a:	08cb      	lsrs	r3, r1, #3
 800251c:	e6cc      	b.n	80022b8 <__aeabi_dsub+0x37c>
 800251e:	000a      	movs	r2, r1
 8002520:	4302      	orrs	r2, r0
 8002522:	d100      	bne.n	8002526 <__aeabi_dsub+0x5ea>
 8002524:	e736      	b.n	8002394 <__aeabi_dsub+0x458>
 8002526:	074b      	lsls	r3, r1, #29
 8002528:	08c2      	lsrs	r2, r0, #3
 800252a:	431a      	orrs	r2, r3
 800252c:	465d      	mov	r5, fp
 800252e:	08cb      	lsrs	r3, r1, #3
 8002530:	e681      	b.n	8002236 <__aeabi_dsub+0x2fa>
 8002532:	464a      	mov	r2, r9
 8002534:	1a84      	subs	r4, r0, r2
 8002536:	42a0      	cmp	r0, r4
 8002538:	4192      	sbcs	r2, r2
 800253a:	1acb      	subs	r3, r1, r3
 800253c:	4252      	negs	r2, r2
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	4698      	mov	r8, r3
 8002542:	465d      	mov	r5, fp
 8002544:	2601      	movs	r6, #1
 8002546:	e54e      	b.n	8001fe6 <__aeabi_dsub+0xaa>
 8002548:	074b      	lsls	r3, r1, #29
 800254a:	08c2      	lsrs	r2, r0, #3
 800254c:	431a      	orrs	r2, r3
 800254e:	08cb      	lsrs	r3, r1, #3
 8002550:	e6b2      	b.n	80022b8 <__aeabi_dsub+0x37c>
 8002552:	464a      	mov	r2, r9
 8002554:	1a14      	subs	r4, r2, r0
 8002556:	45a1      	cmp	r9, r4
 8002558:	4192      	sbcs	r2, r2
 800255a:	1a5f      	subs	r7, r3, r1
 800255c:	4252      	negs	r2, r2
 800255e:	1aba      	subs	r2, r7, r2
 8002560:	4690      	mov	r8, r2
 8002562:	0212      	lsls	r2, r2, #8
 8002564:	d56b      	bpl.n	800263e <__aeabi_dsub+0x702>
 8002566:	464a      	mov	r2, r9
 8002568:	1a84      	subs	r4, r0, r2
 800256a:	42a0      	cmp	r0, r4
 800256c:	4192      	sbcs	r2, r2
 800256e:	1acb      	subs	r3, r1, r3
 8002570:	4252      	negs	r2, r2
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	4698      	mov	r8, r3
 8002576:	465d      	mov	r5, fp
 8002578:	e564      	b.n	8002044 <__aeabi_dsub+0x108>
 800257a:	074b      	lsls	r3, r1, #29
 800257c:	08c2      	lsrs	r2, r0, #3
 800257e:	431a      	orrs	r2, r3
 8002580:	465d      	mov	r5, fp
 8002582:	08cb      	lsrs	r3, r1, #3
 8002584:	e698      	b.n	80022b8 <__aeabi_dsub+0x37c>
 8002586:	074b      	lsls	r3, r1, #29
 8002588:	08c2      	lsrs	r2, r0, #3
 800258a:	431a      	orrs	r2, r3
 800258c:	08cb      	lsrs	r3, r1, #3
 800258e:	e64f      	b.n	8002230 <__aeabi_dsub+0x2f4>
 8002590:	000a      	movs	r2, r1
 8002592:	4302      	orrs	r2, r0
 8002594:	d090      	beq.n	80024b8 <__aeabi_dsub+0x57c>
 8002596:	464a      	mov	r2, r9
 8002598:	075c      	lsls	r4, r3, #29
 800259a:	08d2      	lsrs	r2, r2, #3
 800259c:	4314      	orrs	r4, r2
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	08db      	lsrs	r3, r3, #3
 80025a2:	0312      	lsls	r2, r2, #12
 80025a4:	4213      	tst	r3, r2
 80025a6:	d008      	beq.n	80025ba <__aeabi_dsub+0x67e>
 80025a8:	08ce      	lsrs	r6, r1, #3
 80025aa:	4216      	tst	r6, r2
 80025ac:	d105      	bne.n	80025ba <__aeabi_dsub+0x67e>
 80025ae:	08c0      	lsrs	r0, r0, #3
 80025b0:	0749      	lsls	r1, r1, #29
 80025b2:	4308      	orrs	r0, r1
 80025b4:	0004      	movs	r4, r0
 80025b6:	465d      	mov	r5, fp
 80025b8:	0033      	movs	r3, r6
 80025ba:	0f61      	lsrs	r1, r4, #29
 80025bc:	00e2      	lsls	r2, r4, #3
 80025be:	0749      	lsls	r1, r1, #29
 80025c0:	08d2      	lsrs	r2, r2, #3
 80025c2:	430a      	orrs	r2, r1
 80025c4:	e678      	b.n	80022b8 <__aeabi_dsub+0x37c>
 80025c6:	074b      	lsls	r3, r1, #29
 80025c8:	08c2      	lsrs	r2, r0, #3
 80025ca:	431a      	orrs	r2, r3
 80025cc:	08cb      	lsrs	r3, r1, #3
 80025ce:	e632      	b.n	8002236 <__aeabi_dsub+0x2fa>
 80025d0:	4448      	add	r0, r9
 80025d2:	185b      	adds	r3, r3, r1
 80025d4:	4548      	cmp	r0, r9
 80025d6:	4192      	sbcs	r2, r2
 80025d8:	4698      	mov	r8, r3
 80025da:	4252      	negs	r2, r2
 80025dc:	4490      	add	r8, r2
 80025de:	4643      	mov	r3, r8
 80025e0:	0004      	movs	r4, r0
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	d400      	bmi.n	80025e8 <__aeabi_dsub+0x6ac>
 80025e6:	e61a      	b.n	800221e <__aeabi_dsub+0x2e2>
 80025e8:	4642      	mov	r2, r8
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <__aeabi_dsub+0x6e8>)
 80025ec:	2601      	movs	r6, #1
 80025ee:	401a      	ands	r2, r3
 80025f0:	4690      	mov	r8, r2
 80025f2:	e614      	b.n	800221e <__aeabi_dsub+0x2e2>
 80025f4:	4666      	mov	r6, ip
 80025f6:	001f      	movs	r7, r3
 80025f8:	3e20      	subs	r6, #32
 80025fa:	40f7      	lsrs	r7, r6
 80025fc:	2c20      	cmp	r4, #32
 80025fe:	d005      	beq.n	800260c <__aeabi_dsub+0x6d0>
 8002600:	2640      	movs	r6, #64	; 0x40
 8002602:	1b36      	subs	r6, r6, r4
 8002604:	40b3      	lsls	r3, r6
 8002606:	464c      	mov	r4, r9
 8002608:	431c      	orrs	r4, r3
 800260a:	46a2      	mov	sl, r4
 800260c:	4654      	mov	r4, sl
 800260e:	1e63      	subs	r3, r4, #1
 8002610:	419c      	sbcs	r4, r3
 8002612:	433c      	orrs	r4, r7
 8002614:	e5c8      	b.n	80021a8 <__aeabi_dsub+0x26c>
 8002616:	0011      	movs	r1, r2
 8002618:	2300      	movs	r3, #0
 800261a:	2200      	movs	r2, #0
 800261c:	e532      	b.n	8002084 <__aeabi_dsub+0x148>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	000007ff 	.word	0x000007ff
 8002624:	ff7fffff 	.word	0xff7fffff
 8002628:	000007fe 	.word	0x000007fe
 800262c:	464a      	mov	r2, r9
 800262e:	1814      	adds	r4, r2, r0
 8002630:	4284      	cmp	r4, r0
 8002632:	4192      	sbcs	r2, r2
 8002634:	185b      	adds	r3, r3, r1
 8002636:	4698      	mov	r8, r3
 8002638:	4252      	negs	r2, r2
 800263a:	4490      	add	r8, r2
 800263c:	e5e9      	b.n	8002212 <__aeabi_dsub+0x2d6>
 800263e:	4642      	mov	r2, r8
 8002640:	4322      	orrs	r2, r4
 8002642:	d100      	bne.n	8002646 <__aeabi_dsub+0x70a>
 8002644:	e6a6      	b.n	8002394 <__aeabi_dsub+0x458>
 8002646:	e5ea      	b.n	800221e <__aeabi_dsub+0x2e2>
 8002648:	074b      	lsls	r3, r1, #29
 800264a:	08c2      	lsrs	r2, r0, #3
 800264c:	431a      	orrs	r2, r3
 800264e:	08cb      	lsrs	r3, r1, #3
 8002650:	e632      	b.n	80022b8 <__aeabi_dsub+0x37c>
 8002652:	2200      	movs	r2, #0
 8002654:	4901      	ldr	r1, [pc, #4]	; (800265c <__aeabi_dsub+0x720>)
 8002656:	0013      	movs	r3, r2
 8002658:	e514      	b.n	8002084 <__aeabi_dsub+0x148>
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	000007ff 	.word	0x000007ff

08002660 <__aeabi_i2d>:
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	2800      	cmp	r0, #0
 8002664:	d016      	beq.n	8002694 <__aeabi_i2d+0x34>
 8002666:	17c3      	asrs	r3, r0, #31
 8002668:	18c5      	adds	r5, r0, r3
 800266a:	405d      	eors	r5, r3
 800266c:	0fc4      	lsrs	r4, r0, #31
 800266e:	0028      	movs	r0, r5
 8002670:	f000 f8f6 	bl	8002860 <__clzsi2>
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <__aeabi_i2d+0x5c>)
 8002676:	1a12      	subs	r2, r2, r0
 8002678:	280a      	cmp	r0, #10
 800267a:	dc16      	bgt.n	80026aa <__aeabi_i2d+0x4a>
 800267c:	0003      	movs	r3, r0
 800267e:	002e      	movs	r6, r5
 8002680:	3315      	adds	r3, #21
 8002682:	409e      	lsls	r6, r3
 8002684:	230b      	movs	r3, #11
 8002686:	1a18      	subs	r0, r3, r0
 8002688:	40c5      	lsrs	r5, r0
 800268a:	0553      	lsls	r3, r2, #21
 800268c:	032d      	lsls	r5, r5, #12
 800268e:	0b2d      	lsrs	r5, r5, #12
 8002690:	0d5b      	lsrs	r3, r3, #21
 8002692:	e003      	b.n	800269c <__aeabi_i2d+0x3c>
 8002694:	2400      	movs	r4, #0
 8002696:	2300      	movs	r3, #0
 8002698:	2500      	movs	r5, #0
 800269a:	2600      	movs	r6, #0
 800269c:	051b      	lsls	r3, r3, #20
 800269e:	432b      	orrs	r3, r5
 80026a0:	07e4      	lsls	r4, r4, #31
 80026a2:	4323      	orrs	r3, r4
 80026a4:	0030      	movs	r0, r6
 80026a6:	0019      	movs	r1, r3
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
 80026aa:	380b      	subs	r0, #11
 80026ac:	4085      	lsls	r5, r0
 80026ae:	0553      	lsls	r3, r2, #21
 80026b0:	032d      	lsls	r5, r5, #12
 80026b2:	2600      	movs	r6, #0
 80026b4:	0b2d      	lsrs	r5, r5, #12
 80026b6:	0d5b      	lsrs	r3, r3, #21
 80026b8:	e7f0      	b.n	800269c <__aeabi_i2d+0x3c>
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	0000041e 	.word	0x0000041e

080026c0 <__aeabi_f2d>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	0043      	lsls	r3, r0, #1
 80026c4:	0246      	lsls	r6, r0, #9
 80026c6:	0fc4      	lsrs	r4, r0, #31
 80026c8:	20fe      	movs	r0, #254	; 0xfe
 80026ca:	0e1b      	lsrs	r3, r3, #24
 80026cc:	1c59      	adds	r1, r3, #1
 80026ce:	0a75      	lsrs	r5, r6, #9
 80026d0:	4208      	tst	r0, r1
 80026d2:	d00c      	beq.n	80026ee <__aeabi_f2d+0x2e>
 80026d4:	22e0      	movs	r2, #224	; 0xe0
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4694      	mov	ip, r2
 80026da:	076d      	lsls	r5, r5, #29
 80026dc:	0b36      	lsrs	r6, r6, #12
 80026de:	4463      	add	r3, ip
 80026e0:	051b      	lsls	r3, r3, #20
 80026e2:	4333      	orrs	r3, r6
 80026e4:	07e4      	lsls	r4, r4, #31
 80026e6:	4323      	orrs	r3, r4
 80026e8:	0028      	movs	r0, r5
 80026ea:	0019      	movs	r1, r3
 80026ec:	bd70      	pop	{r4, r5, r6, pc}
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d114      	bne.n	800271c <__aeabi_f2d+0x5c>
 80026f2:	2d00      	cmp	r5, #0
 80026f4:	d01b      	beq.n	800272e <__aeabi_f2d+0x6e>
 80026f6:	0028      	movs	r0, r5
 80026f8:	f000 f8b2 	bl	8002860 <__clzsi2>
 80026fc:	280a      	cmp	r0, #10
 80026fe:	dc1c      	bgt.n	800273a <__aeabi_f2d+0x7a>
 8002700:	230b      	movs	r3, #11
 8002702:	002a      	movs	r2, r5
 8002704:	1a1b      	subs	r3, r3, r0
 8002706:	40da      	lsrs	r2, r3
 8002708:	0003      	movs	r3, r0
 800270a:	3315      	adds	r3, #21
 800270c:	409d      	lsls	r5, r3
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <__aeabi_f2d+0x88>)
 8002710:	0312      	lsls	r2, r2, #12
 8002712:	1a1b      	subs	r3, r3, r0
 8002714:	055b      	lsls	r3, r3, #21
 8002716:	0b16      	lsrs	r6, r2, #12
 8002718:	0d5b      	lsrs	r3, r3, #21
 800271a:	e7e1      	b.n	80026e0 <__aeabi_f2d+0x20>
 800271c:	2d00      	cmp	r5, #0
 800271e:	d009      	beq.n	8002734 <__aeabi_f2d+0x74>
 8002720:	0b32      	lsrs	r2, r6, #12
 8002722:	2680      	movs	r6, #128	; 0x80
 8002724:	0336      	lsls	r6, r6, #12
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <__aeabi_f2d+0x8c>)
 8002728:	076d      	lsls	r5, r5, #29
 800272a:	4316      	orrs	r6, r2
 800272c:	e7d8      	b.n	80026e0 <__aeabi_f2d+0x20>
 800272e:	2300      	movs	r3, #0
 8002730:	2600      	movs	r6, #0
 8002732:	e7d5      	b.n	80026e0 <__aeabi_f2d+0x20>
 8002734:	2600      	movs	r6, #0
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <__aeabi_f2d+0x8c>)
 8002738:	e7d2      	b.n	80026e0 <__aeabi_f2d+0x20>
 800273a:	0003      	movs	r3, r0
 800273c:	002a      	movs	r2, r5
 800273e:	3b0b      	subs	r3, #11
 8002740:	409a      	lsls	r2, r3
 8002742:	2500      	movs	r5, #0
 8002744:	e7e3      	b.n	800270e <__aeabi_f2d+0x4e>
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	00000389 	.word	0x00000389
 800274c:	000007ff 	.word	0x000007ff

08002750 <__aeabi_d2f>:
 8002750:	0002      	movs	r2, r0
 8002752:	004b      	lsls	r3, r1, #1
 8002754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002756:	0308      	lsls	r0, r1, #12
 8002758:	0d5b      	lsrs	r3, r3, #21
 800275a:	4e3d      	ldr	r6, [pc, #244]	; (8002850 <__aeabi_d2f+0x100>)
 800275c:	0fcc      	lsrs	r4, r1, #31
 800275e:	0a40      	lsrs	r0, r0, #9
 8002760:	0f51      	lsrs	r1, r2, #29
 8002762:	1c5f      	adds	r7, r3, #1
 8002764:	4308      	orrs	r0, r1
 8002766:	00d5      	lsls	r5, r2, #3
 8002768:	4237      	tst	r7, r6
 800276a:	d00a      	beq.n	8002782 <__aeabi_d2f+0x32>
 800276c:	4939      	ldr	r1, [pc, #228]	; (8002854 <__aeabi_d2f+0x104>)
 800276e:	185e      	adds	r6, r3, r1
 8002770:	2efe      	cmp	r6, #254	; 0xfe
 8002772:	dd16      	ble.n	80027a2 <__aeabi_d2f+0x52>
 8002774:	23ff      	movs	r3, #255	; 0xff
 8002776:	2100      	movs	r1, #0
 8002778:	05db      	lsls	r3, r3, #23
 800277a:	430b      	orrs	r3, r1
 800277c:	07e0      	lsls	r0, r4, #31
 800277e:	4318      	orrs	r0, r3
 8002780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <__aeabi_d2f+0x44>
 8002786:	4328      	orrs	r0, r5
 8002788:	d027      	beq.n	80027da <__aeabi_d2f+0x8a>
 800278a:	2105      	movs	r1, #5
 800278c:	0189      	lsls	r1, r1, #6
 800278e:	0a49      	lsrs	r1, r1, #9
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e7f1      	b.n	8002778 <__aeabi_d2f+0x28>
 8002794:	4305      	orrs	r5, r0
 8002796:	d0ed      	beq.n	8002774 <__aeabi_d2f+0x24>
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	03c9      	lsls	r1, r1, #15
 800279c:	23ff      	movs	r3, #255	; 0xff
 800279e:	4301      	orrs	r1, r0
 80027a0:	e7ea      	b.n	8002778 <__aeabi_d2f+0x28>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	dd1c      	ble.n	80027e0 <__aeabi_d2f+0x90>
 80027a6:	0192      	lsls	r2, r2, #6
 80027a8:	0011      	movs	r1, r2
 80027aa:	1e4a      	subs	r2, r1, #1
 80027ac:	4191      	sbcs	r1, r2
 80027ae:	00c0      	lsls	r0, r0, #3
 80027b0:	0f6d      	lsrs	r5, r5, #29
 80027b2:	4301      	orrs	r1, r0
 80027b4:	4329      	orrs	r1, r5
 80027b6:	074b      	lsls	r3, r1, #29
 80027b8:	d048      	beq.n	800284c <__aeabi_d2f+0xfc>
 80027ba:	230f      	movs	r3, #15
 80027bc:	400b      	ands	r3, r1
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d000      	beq.n	80027c4 <__aeabi_d2f+0x74>
 80027c2:	3104      	adds	r1, #4
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	04db      	lsls	r3, r3, #19
 80027c8:	400b      	ands	r3, r1
 80027ca:	d03f      	beq.n	800284c <__aeabi_d2f+0xfc>
 80027cc:	1c72      	adds	r2, r6, #1
 80027ce:	2efe      	cmp	r6, #254	; 0xfe
 80027d0:	d0d0      	beq.n	8002774 <__aeabi_d2f+0x24>
 80027d2:	0189      	lsls	r1, r1, #6
 80027d4:	0a49      	lsrs	r1, r1, #9
 80027d6:	b2d3      	uxtb	r3, r2
 80027d8:	e7ce      	b.n	8002778 <__aeabi_d2f+0x28>
 80027da:	2300      	movs	r3, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	e7cb      	b.n	8002778 <__aeabi_d2f+0x28>
 80027e0:	0032      	movs	r2, r6
 80027e2:	3217      	adds	r2, #23
 80027e4:	db22      	blt.n	800282c <__aeabi_d2f+0xdc>
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	221e      	movs	r2, #30
 80027ea:	0409      	lsls	r1, r1, #16
 80027ec:	4308      	orrs	r0, r1
 80027ee:	1b92      	subs	r2, r2, r6
 80027f0:	2a1f      	cmp	r2, #31
 80027f2:	dd1d      	ble.n	8002830 <__aeabi_d2f+0xe0>
 80027f4:	2102      	movs	r1, #2
 80027f6:	4249      	negs	r1, r1
 80027f8:	1b8e      	subs	r6, r1, r6
 80027fa:	0001      	movs	r1, r0
 80027fc:	40f1      	lsrs	r1, r6
 80027fe:	000e      	movs	r6, r1
 8002800:	2a20      	cmp	r2, #32
 8002802:	d004      	beq.n	800280e <__aeabi_d2f+0xbe>
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <__aeabi_d2f+0x108>)
 8002806:	4694      	mov	ip, r2
 8002808:	4463      	add	r3, ip
 800280a:	4098      	lsls	r0, r3
 800280c:	4305      	orrs	r5, r0
 800280e:	0029      	movs	r1, r5
 8002810:	1e4d      	subs	r5, r1, #1
 8002812:	41a9      	sbcs	r1, r5
 8002814:	4331      	orrs	r1, r6
 8002816:	2600      	movs	r6, #0
 8002818:	074b      	lsls	r3, r1, #29
 800281a:	d1ce      	bne.n	80027ba <__aeabi_d2f+0x6a>
 800281c:	2080      	movs	r0, #128	; 0x80
 800281e:	000b      	movs	r3, r1
 8002820:	04c0      	lsls	r0, r0, #19
 8002822:	2201      	movs	r2, #1
 8002824:	4003      	ands	r3, r0
 8002826:	4201      	tst	r1, r0
 8002828:	d1d3      	bne.n	80027d2 <__aeabi_d2f+0x82>
 800282a:	e7af      	b.n	800278c <__aeabi_d2f+0x3c>
 800282c:	2300      	movs	r3, #0
 800282e:	e7ac      	b.n	800278a <__aeabi_d2f+0x3a>
 8002830:	490a      	ldr	r1, [pc, #40]	; (800285c <__aeabi_d2f+0x10c>)
 8002832:	468c      	mov	ip, r1
 8002834:	0029      	movs	r1, r5
 8002836:	4463      	add	r3, ip
 8002838:	40d1      	lsrs	r1, r2
 800283a:	409d      	lsls	r5, r3
 800283c:	000a      	movs	r2, r1
 800283e:	0029      	movs	r1, r5
 8002840:	4098      	lsls	r0, r3
 8002842:	1e4d      	subs	r5, r1, #1
 8002844:	41a9      	sbcs	r1, r5
 8002846:	4301      	orrs	r1, r0
 8002848:	4311      	orrs	r1, r2
 800284a:	e7e4      	b.n	8002816 <__aeabi_d2f+0xc6>
 800284c:	0033      	movs	r3, r6
 800284e:	e79d      	b.n	800278c <__aeabi_d2f+0x3c>
 8002850:	000007fe 	.word	0x000007fe
 8002854:	fffffc80 	.word	0xfffffc80
 8002858:	fffffca2 	.word	0xfffffca2
 800285c:	fffffc82 	.word	0xfffffc82

08002860 <__clzsi2>:
 8002860:	211c      	movs	r1, #28
 8002862:	2301      	movs	r3, #1
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	4298      	cmp	r0, r3
 8002868:	d301      	bcc.n	800286e <__clzsi2+0xe>
 800286a:	0c00      	lsrs	r0, r0, #16
 800286c:	3910      	subs	r1, #16
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	4298      	cmp	r0, r3
 8002872:	d301      	bcc.n	8002878 <__clzsi2+0x18>
 8002874:	0a00      	lsrs	r0, r0, #8
 8002876:	3908      	subs	r1, #8
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	4298      	cmp	r0, r3
 800287c:	d301      	bcc.n	8002882 <__clzsi2+0x22>
 800287e:	0900      	lsrs	r0, r0, #4
 8002880:	3904      	subs	r1, #4
 8002882:	a202      	add	r2, pc, #8	; (adr r2, 800288c <__clzsi2+0x2c>)
 8002884:	5c10      	ldrb	r0, [r2, r0]
 8002886:	1840      	adds	r0, r0, r1
 8002888:	4770      	bx	lr
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	02020304 	.word	0x02020304
 8002890:	01010101 	.word	0x01010101
	...

0800289c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a0:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a2:	4a06      	ldr	r2, [pc, #24]	; (80028bc <HAL_Init+0x1c>)
 80028a4:	6813      	ldr	r3, [r2, #0]
 80028a6:	2110      	movs	r1, #16
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f003 faf7 	bl	8005ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b2:	f003 fa55 	bl	8005d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80028b6:	2000      	movs	r0, #0
 80028b8:	bd10      	pop	{r4, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	40022000 	.word	0x40022000

080028c0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80028c0:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <HAL_IncTick+0x10>)
 80028c2:	6811      	ldr	r1, [r2, #0]
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_IncTick+0x14>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	185b      	adds	r3, r3, r1
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	4770      	bx	lr
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	20000228 	.word	0x20000228
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80028d8:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <HAL_GetTick+0x8>)
 80028da:	6818      	ldr	r0, [r3, #0]
}
 80028dc:	4770      	bx	lr
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	20000228 	.word	0x20000228

080028e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff fff6 	bl	80028d8 <HAL_GetTick>
 80028ec:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ee:	1c63      	adds	r3, r4, #1
 80028f0:	d002      	beq.n	80028f8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_Delay+0x20>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80028f8:	f7ff ffee 	bl	80028d8 <HAL_GetTick>
 80028fc:	1b40      	subs	r0, r0, r5
 80028fe:	42a0      	cmp	r0, r4
 8002900:	d3fa      	bcc.n	80028f8 <HAL_Delay+0x14>
  {
  }
}
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	20000004 	.word	0x20000004

08002908 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002908:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800290a:	2800      	cmp	r0, #0
 800290c:	db11      	blt.n	8002932 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800290e:	0883      	lsrs	r3, r0, #2
 8002910:	4e13      	ldr	r6, [pc, #76]	; (8002960 <HAL_NVIC_SetPriority+0x58>)
 8002912:	33c0      	adds	r3, #192	; 0xc0
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	599d      	ldr	r5, [r3, r6]
 8002918:	2403      	movs	r4, #3
 800291a:	4020      	ands	r0, r4
 800291c:	00c0      	lsls	r0, r0, #3
 800291e:	22ff      	movs	r2, #255	; 0xff
 8002920:	0014      	movs	r4, r2
 8002922:	4084      	lsls	r4, r0
 8002924:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002926:	0189      	lsls	r1, r1, #6
 8002928:	400a      	ands	r2, r1
 800292a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800292c:	432a      	orrs	r2, r5
 800292e:	519a      	str	r2, [r3, r6]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002930:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002932:	230f      	movs	r3, #15
 8002934:	4003      	ands	r3, r0
 8002936:	3b08      	subs	r3, #8
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3306      	adds	r3, #6
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4a09      	ldr	r2, [pc, #36]	; (8002964 <HAL_NVIC_SetPriority+0x5c>)
 8002940:	4694      	mov	ip, r2
 8002942:	4463      	add	r3, ip
 8002944:	685c      	ldr	r4, [r3, #4]
 8002946:	2203      	movs	r2, #3
 8002948:	4010      	ands	r0, r2
 800294a:	00c0      	lsls	r0, r0, #3
 800294c:	32fc      	adds	r2, #252	; 0xfc
 800294e:	0015      	movs	r5, r2
 8002950:	4085      	lsls	r5, r0
 8002952:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002954:	0189      	lsls	r1, r1, #6
 8002956:	400a      	ands	r2, r1
 8002958:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800295a:	4322      	orrs	r2, r4
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	e7e7      	b.n	8002930 <HAL_NVIC_SetPriority+0x28>
 8002960:	e000e100 	.word	0xe000e100
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002968:	2800      	cmp	r0, #0
 800296a:	db05      	blt.n	8002978 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296c:	231f      	movs	r3, #31
 800296e:	4018      	ands	r0, r3
 8002970:	3b1e      	subs	r3, #30
 8002972:	4083      	lsls	r3, r0
 8002974:	4a01      	ldr	r2, [pc, #4]	; (800297c <HAL_NVIC_EnableIRQ+0x14>)
 8002976:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002978:	4770      	bx	lr
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	e000e100 	.word	0xe000e100

08002980 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002980:	3801      	subs	r0, #1
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	045b      	lsls	r3, r3, #17
 8002986:	4298      	cmp	r0, r3
 8002988:	d20f      	bcs.n	80029aa <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_SYSTICK_Config+0x30>)
 800298c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800298e:	4809      	ldr	r0, [pc, #36]	; (80029b4 <HAL_SYSTICK_Config+0x34>)
 8002990:	6a03      	ldr	r3, [r0, #32]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	21c0      	movs	r1, #192	; 0xc0
 8002998:	0609      	lsls	r1, r1, #24
 800299a:	430b      	orrs	r3, r1
 800299c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299e:	2300      	movs	r3, #0
 80029a0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	3307      	adds	r3, #7
 80029a4:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a6:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80029a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80029aa:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80029ac:	e7fc      	b.n	80029a8 <HAL_SYSTICK_Config+0x28>
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	e000e010 	.word	0xe000e010
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80029b8:	2804      	cmp	r0, #4
 80029ba:	d005      	beq.n	80029c8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80029bc:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80029be:	6813      	ldr	r3, [r2, #0]
 80029c0:	2104      	movs	r1, #4
 80029c2:	438b      	bics	r3, r1
 80029c4:	6013      	str	r3, [r2, #0]
  }
}
 80029c6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80029c8:	4a02      	ldr	r2, [pc, #8]	; (80029d4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80029ca:	6813      	ldr	r3, [r2, #0]
 80029cc:	2104      	movs	r1, #4
 80029ce:	430b      	orrs	r3, r1
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e7f8      	b.n	80029c6 <HAL_SYSTICK_CLKSourceConfig+0xe>
 80029d4:	e000e010 	.word	0xe000e010

080029d8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80029d8:	4770      	bx	lr

080029da <HAL_SYSTICK_IRQHandler>:
{
 80029da:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80029dc:	f7ff fffc 	bl	80029d8 <HAL_SYSTICK_Callback>
}
 80029e0:	bd10      	pop	{r4, pc}

080029e2 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029e2:	b510      	push	{r4, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80029e4:	2321      	movs	r3, #33	; 0x21
 80029e6:	5cc3      	ldrb	r3, [r0, r3]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d006      	beq.n	80029fa <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ec:	2304      	movs	r3, #4
 80029ee:	6383      	str	r3, [r0, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f0:	331c      	adds	r3, #28
 80029f2:	2200      	movs	r2, #0
 80029f4:	54c2      	strb	r2, [r0, r3]

    return HAL_ERROR;
 80029f6:	2001      	movs	r0, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 80029f8:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029fa:	6802      	ldr	r2, [r0, #0]
 80029fc:	6813      	ldr	r3, [r2, #0]
 80029fe:	210e      	movs	r1, #14
 8002a00:	438b      	bics	r3, r1
 8002a02:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a04:	6801      	ldr	r1, [r0, #0]
 8002a06:	680a      	ldr	r2, [r1, #0]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	439a      	bics	r2, r3
 8002a0c:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a0e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002a10:	0019      	movs	r1, r3
 8002a12:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002a14:	40a1      	lsls	r1, r4
 8002a16:	6051      	str	r1, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8002a18:	2221      	movs	r2, #33	; 0x21
 8002a1a:	5483      	strb	r3, [r0, r2]
  __HAL_UNLOCK(hdma);
 8002a1c:	331f      	adds	r3, #31
 8002a1e:	2200      	movs	r2, #0
 8002a20:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8002a22:	2000      	movs	r0, #0
 8002a24:	e7e8      	b.n	80029f8 <HAL_DMA_Abort+0x16>

08002a26 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a26:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a28:	2321      	movs	r3, #33	; 0x21
 8002a2a:	5cc3      	ldrb	r3, [r0, r3]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d003      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a30:	2304      	movs	r3, #4
 8002a32:	6383      	str	r3, [r0, #56]	; 0x38

    status = HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8002a36:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a38:	6802      	ldr	r2, [r0, #0]
 8002a3a:	6813      	ldr	r3, [r2, #0]
 8002a3c:	210e      	movs	r1, #14
 8002a3e:	438b      	bics	r3, r1
 8002a40:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a42:	6801      	ldr	r1, [r0, #0]
 8002a44:	680a      	ldr	r2, [r1, #0]
 8002a46:	2301      	movs	r3, #1
 8002a48:	439a      	bics	r2, r3
 8002a4a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002a4e:	0019      	movs	r1, r3
 8002a50:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002a52:	40a1      	lsls	r1, r4
 8002a54:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002a56:	2221      	movs	r2, #33	; 0x21
 8002a58:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8002a5a:	331f      	adds	r3, #31
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8002a60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8002a66:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002a68:	2000      	movs	r0, #0
 8002a6a:	e7e4      	b.n	8002a36 <HAL_DMA_Abort_IT+0x10>
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	e7e2      	b.n	8002a36 <HAL_DMA_Abort_IT+0x10>

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a72:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002a74:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a76:	e057      	b.n	8002b28 <HAL_GPIO_Init+0xb8>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a78:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a7a:	005f      	lsls	r7, r3, #1
 8002a7c:	2603      	movs	r6, #3
 8002a7e:	40be      	lsls	r6, r7
 8002a80:	43b4      	bics	r4, r6
 8002a82:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a84:	68cc      	ldr	r4, [r1, #12]
 8002a86:	40bc      	lsls	r4, r7
 8002a88:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002a8a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a8e:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a90:	684a      	ldr	r2, [r1, #4]
 8002a92:	0916      	lsrs	r6, r2, #4
 8002a94:	2201      	movs	r2, #1
 8002a96:	4032      	ands	r2, r6
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002a9c:	6042      	str	r2, [r0, #4]
 8002a9e:	e053      	b.n	8002b48 <HAL_GPIO_Init+0xd8>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aa0:	08dc      	lsrs	r4, r3, #3
 8002aa2:	3408      	adds	r4, #8
 8002aa4:	00a4      	lsls	r4, r4, #2
 8002aa6:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aa8:	3205      	adds	r2, #5
 8002aaa:	401a      	ands	r2, r3
 8002aac:	0092      	lsls	r2, r2, #2
 8002aae:	270f      	movs	r7, #15
 8002ab0:	4097      	lsls	r7, r2
 8002ab2:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ab4:	690f      	ldr	r7, [r1, #16]
 8002ab6:	4097      	lsls	r7, r2
 8002ab8:	003a      	movs	r2, r7
 8002aba:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 8002abc:	5022      	str	r2, [r4, r0]
 8002abe:	e057      	b.n	8002b70 <HAL_GPIO_Init+0x100>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ac0:	2603      	movs	r6, #3
 8002ac2:	e000      	b.n	8002ac6 <HAL_GPIO_Init+0x56>
 8002ac4:	2600      	movs	r6, #0
 8002ac6:	40a6      	lsls	r6, r4
 8002ac8:	0034      	movs	r4, r6
 8002aca:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002acc:	3202      	adds	r2, #2
 8002ace:	0092      	lsls	r2, r2, #2
 8002ad0:	4e44      	ldr	r6, [pc, #272]	; (8002be4 <HAL_GPIO_Init+0x174>)
 8002ad2:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad4:	4a44      	ldr	r2, [pc, #272]	; (8002be8 <HAL_GPIO_Init+0x178>)
 8002ad6:	6894      	ldr	r4, [r2, #8]
        temp &= ~(iocurrent);
 8002ad8:	43ea      	mvns	r2, r5
 8002ada:	0026      	movs	r6, r4
 8002adc:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ade:	684f      	ldr	r7, [r1, #4]
 8002ae0:	02ff      	lsls	r7, r7, #11
 8002ae2:	d501      	bpl.n	8002ae8 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8002ae4:	432c      	orrs	r4, r5
 8002ae6:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8002ae8:	4c3f      	ldr	r4, [pc, #252]	; (8002be8 <HAL_GPIO_Init+0x178>)
 8002aea:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002aec:	68e4      	ldr	r4, [r4, #12]
        temp &= ~(iocurrent);
 8002aee:	0026      	movs	r6, r4
 8002af0:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002af2:	684f      	ldr	r7, [r1, #4]
 8002af4:	02bf      	lsls	r7, r7, #10
 8002af6:	d501      	bpl.n	8002afc <HAL_GPIO_Init+0x8c>
        {
          temp |= iocurrent;
 8002af8:	432c      	orrs	r4, r5
 8002afa:	0026      	movs	r6, r4
        }
        EXTI->FTSR = temp;
 8002afc:	4c3a      	ldr	r4, [pc, #232]	; (8002be8 <HAL_GPIO_Init+0x178>)
 8002afe:	60e6      	str	r6, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002b00:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 8002b02:	0026      	movs	r6, r4
 8002b04:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b06:	684f      	ldr	r7, [r1, #4]
 8002b08:	03bf      	lsls	r7, r7, #14
 8002b0a:	d501      	bpl.n	8002b10 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8002b0c:	432c      	orrs	r4, r5
 8002b0e:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8002b10:	4c35      	ldr	r4, [pc, #212]	; (8002be8 <HAL_GPIO_Init+0x178>)
 8002b12:	6066      	str	r6, [r4, #4]

        temp = EXTI->IMR;
 8002b14:	6824      	ldr	r4, [r4, #0]
        temp &= ~(iocurrent);
 8002b16:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b18:	684e      	ldr	r6, [r1, #4]
 8002b1a:	03f6      	lsls	r6, r6, #15
 8002b1c:	d501      	bpl.n	8002b22 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8002b1e:	002a      	movs	r2, r5
 8002b20:	4322      	orrs	r2, r4
        }
        EXTI->IMR = temp;
 8002b22:	4c31      	ldr	r4, [pc, #196]	; (8002be8 <HAL_GPIO_Init+0x178>)
 8002b24:	6022      	str	r2, [r4, #0]
      }
    }

    position++;
 8002b26:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b28:	680c      	ldr	r4, [r1, #0]
 8002b2a:	0022      	movs	r2, r4
 8002b2c:	40da      	lsrs	r2, r3
 8002b2e:	d057      	beq.n	8002be0 <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b30:	2201      	movs	r2, #1
 8002b32:	409a      	lsls	r2, r3
 8002b34:	0025      	movs	r5, r4
 8002b36:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8002b38:	4214      	tst	r4, r2
 8002b3a:	d0f4      	beq.n	8002b26 <HAL_GPIO_Init+0xb6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b3c:	2403      	movs	r4, #3
 8002b3e:	684e      	ldr	r6, [r1, #4]
 8002b40:	4034      	ands	r4, r6
 8002b42:	3c01      	subs	r4, #1
 8002b44:	2c01      	cmp	r4, #1
 8002b46:	d997      	bls.n	8002a78 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b48:	2203      	movs	r2, #3
 8002b4a:	684c      	ldr	r4, [r1, #4]
 8002b4c:	4022      	ands	r2, r4
 8002b4e:	2a03      	cmp	r2, #3
 8002b50:	d009      	beq.n	8002b66 <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 8002b52:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b54:	005e      	lsls	r6, r3, #1
 8002b56:	2403      	movs	r4, #3
 8002b58:	40b4      	lsls	r4, r6
 8002b5a:	43a2      	bics	r2, r4
 8002b5c:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b5e:	688a      	ldr	r2, [r1, #8]
 8002b60:	40b2      	lsls	r2, r6
 8002b62:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002b64:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b66:	2203      	movs	r2, #3
 8002b68:	684c      	ldr	r4, [r1, #4]
 8002b6a:	4022      	ands	r2, r4
 8002b6c:	2a02      	cmp	r2, #2
 8002b6e:	d097      	beq.n	8002aa0 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8002b70:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b72:	005e      	lsls	r6, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	0017      	movs	r7, r2
 8002b78:	40b7      	lsls	r7, r6
 8002b7a:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b7c:	684f      	ldr	r7, [r1, #4]
 8002b7e:	403a      	ands	r2, r7
 8002b80:	40b2      	lsls	r2, r6
 8002b82:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002b84:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b86:	22c0      	movs	r2, #192	; 0xc0
 8002b88:	0292      	lsls	r2, r2, #10
 8002b8a:	684c      	ldr	r4, [r1, #4]
 8002b8c:	4214      	tst	r4, r2
 8002b8e:	d0ca      	beq.n	8002b26 <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b90:	4c16      	ldr	r4, [pc, #88]	; (8002bec <HAL_GPIO_Init+0x17c>)
 8002b92:	69a6      	ldr	r6, [r4, #24]
 8002b94:	2201      	movs	r2, #1
 8002b96:	4316      	orrs	r6, r2
 8002b98:	61a6      	str	r6, [r4, #24]
 8002b9a:	69a4      	ldr	r4, [r4, #24]
 8002b9c:	4022      	ands	r2, r4
 8002b9e:	9201      	str	r2, [sp, #4]
 8002ba0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba2:	089a      	lsrs	r2, r3, #2
 8002ba4:	1c94      	adds	r4, r2, #2
 8002ba6:	00a4      	lsls	r4, r4, #2
 8002ba8:	4e0e      	ldr	r6, [pc, #56]	; (8002be4 <HAL_GPIO_Init+0x174>)
 8002baa:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bac:	2403      	movs	r4, #3
 8002bae:	401c      	ands	r4, r3
 8002bb0:	00a4      	lsls	r4, r4, #2
 8002bb2:	260f      	movs	r6, #15
 8002bb4:	40a6      	lsls	r6, r4
 8002bb6:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bb8:	2690      	movs	r6, #144	; 0x90
 8002bba:	05f6      	lsls	r6, r6, #23
 8002bbc:	42b0      	cmp	r0, r6
 8002bbe:	d081      	beq.n	8002ac4 <HAL_GPIO_Init+0x54>
 8002bc0:	4e0b      	ldr	r6, [pc, #44]	; (8002bf0 <HAL_GPIO_Init+0x180>)
 8002bc2:	42b0      	cmp	r0, r6
 8002bc4:	d008      	beq.n	8002bd8 <HAL_GPIO_Init+0x168>
 8002bc6:	4e0b      	ldr	r6, [pc, #44]	; (8002bf4 <HAL_GPIO_Init+0x184>)
 8002bc8:	42b0      	cmp	r0, r6
 8002bca:	d007      	beq.n	8002bdc <HAL_GPIO_Init+0x16c>
 8002bcc:	4e0a      	ldr	r6, [pc, #40]	; (8002bf8 <HAL_GPIO_Init+0x188>)
 8002bce:	42b0      	cmp	r0, r6
 8002bd0:	d100      	bne.n	8002bd4 <HAL_GPIO_Init+0x164>
 8002bd2:	e775      	b.n	8002ac0 <HAL_GPIO_Init+0x50>
 8002bd4:	2605      	movs	r6, #5
 8002bd6:	e776      	b.n	8002ac6 <HAL_GPIO_Init+0x56>
 8002bd8:	2601      	movs	r6, #1
 8002bda:	e774      	b.n	8002ac6 <HAL_GPIO_Init+0x56>
 8002bdc:	2602      	movs	r6, #2
 8002bde:	e772      	b.n	8002ac6 <HAL_GPIO_Init+0x56>
  } 
}
 8002be0:	b003      	add	sp, #12
 8002be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be4:	40010000 	.word	0x40010000
 8002be8:	40010400 	.word	0x40010400
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	48000400 	.word	0x48000400
 8002bf4:	48000800 	.word	0x48000800
 8002bf8:	48000c00 	.word	0x48000c00

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b570      	push	{r4, r5, r6, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c02:	d100      	bne.n	8002c06 <HAL_RCC_OscConfig+0xa>
 8002c04:	e22e      	b.n	8003064 <HAL_RCC_OscConfig+0x468>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	6803      	ldr	r3, [r0, #0]
 8002c08:	07db      	lsls	r3, r3, #31
 8002c0a:	d526      	bpl.n	8002c5a <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c0c:	4bae      	ldr	r3, [pc, #696]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	230c      	movs	r3, #12
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d018      	beq.n	8002c4a <HAL_RCC_OscConfig+0x4e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c18:	4bab      	ldr	r3, [pc, #684]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	230c      	movs	r3, #12
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d00e      	beq.n	8002c42 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	6863      	ldr	r3, [r4, #4]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d03c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xa8>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d151      	bne.n	8002cd2 <HAL_RCC_OscConfig+0xd6>
 8002c2e:	4ba6      	ldr	r3, [pc, #664]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	49a6      	ldr	r1, [pc, #664]	; (8002ecc <HAL_RCC_OscConfig+0x2d0>)
 8002c34:	400a      	ands	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	49a5      	ldr	r1, [pc, #660]	; (8002ed0 <HAL_RCC_OscConfig+0x2d4>)
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e036      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c42:	4ba1      	ldr	r3, [pc, #644]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	03db      	lsls	r3, r3, #15
 8002c48:	d5ec      	bpl.n	8002c24 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4a:	4b9f      	ldr	r3, [pc, #636]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	039b      	lsls	r3, r3, #14
 8002c50:	d503      	bpl.n	8002c5a <HAL_RCC_OscConfig+0x5e>
 8002c52:	6863      	ldr	r3, [r4, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d100      	bne.n	8002c5a <HAL_RCC_OscConfig+0x5e>
 8002c58:	e207      	b.n	800306a <HAL_RCC_OscConfig+0x46e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	079b      	lsls	r3, r3, #30
 8002c5e:	d572      	bpl.n	8002d46 <HAL_RCC_OscConfig+0x14a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c60:	4b99      	ldr	r3, [pc, #612]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	220c      	movs	r2, #12
 8002c66:	421a      	tst	r2, r3
 8002c68:	d05d      	beq.n	8002d26 <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c6a:	4b97      	ldr	r3, [pc, #604]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	230c      	movs	r3, #12
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d053      	beq.n	8002d1e <HAL_RCC_OscConfig+0x122>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c76:	68e3      	ldr	r3, [r4, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d100      	bne.n	8002c7e <HAL_RCC_OscConfig+0x82>
 8002c7c:	e085      	b.n	8002d8a <HAL_RCC_OscConfig+0x18e>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7e:	4a92      	ldr	r2, [pc, #584]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002c80:	6813      	ldr	r3, [r2, #0]
 8002c82:	2101      	movs	r1, #1
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7ff fe26 	bl	80028d8 <HAL_GetTick>
 8002c8c:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	4b8e      	ldr	r3, [pc, #568]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	079b      	lsls	r3, r3, #30
 8002c94:	d470      	bmi.n	8002d78 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c96:	f7ff fe1f 	bl	80028d8 <HAL_GetTick>
 8002c9a:	1b40      	subs	r0, r0, r5
 8002c9c:	2802      	cmp	r0, #2
 8002c9e:	d9f6      	bls.n	8002c8e <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	e1e0      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca4:	4a88      	ldr	r2, [pc, #544]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002ca6:	6811      	ldr	r1, [r2, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb0:	6863      	ldr	r3, [r4, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d025      	beq.n	8002d02 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8002cb6:	f7ff fe0f 	bl	80028d8 <HAL_GetTick>
 8002cba:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbc:	4b82      	ldr	r3, [pc, #520]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	039b      	lsls	r3, r3, #14
 8002cc2:	d4ca      	bmi.n	8002c5a <HAL_RCC_OscConfig+0x5e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7ff fe08 	bl	80028d8 <HAL_GetTick>
 8002cc8:	1b40      	subs	r0, r0, r5
 8002cca:	2864      	cmp	r0, #100	; 0x64
 8002ccc:	d9f6      	bls.n	8002cbc <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8002cce:	2003      	movs	r0, #3
 8002cd0:	e1c9      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_OscConfig+0xee>
 8002cd6:	4b7c      	ldr	r3, [pc, #496]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	497c      	ldr	r1, [pc, #496]	; (8002ecc <HAL_RCC_OscConfig+0x2d0>)
 8002cdc:	400a      	ands	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	497b      	ldr	r1, [pc, #492]	; (8002ed0 <HAL_RCC_OscConfig+0x2d4>)
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e7e2      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb4>
 8002cea:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	02d2      	lsls	r2, r2, #11
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	0252      	lsls	r2, r2, #9
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e7d6      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 8002d02:	f7ff fde9 	bl	80028d8 <HAL_GetTick>
 8002d06:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d08:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	039b      	lsls	r3, r3, #14
 8002d0e:	d5a4      	bpl.n	8002c5a <HAL_RCC_OscConfig+0x5e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d10:	f7ff fde2 	bl	80028d8 <HAL_GetTick>
 8002d14:	1b40      	subs	r0, r0, r5
 8002d16:	2864      	cmp	r0, #100	; 0x64
 8002d18:	d9f6      	bls.n	8002d08 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8002d1a:	2003      	movs	r0, #3
 8002d1c:	e1a3      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	03db      	lsls	r3, r3, #15
 8002d24:	d4a7      	bmi.n	8002c76 <HAL_RCC_OscConfig+0x7a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	4b68      	ldr	r3, [pc, #416]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	079b      	lsls	r3, r3, #30
 8002d2c:	d503      	bpl.n	8002d36 <HAL_RCC_OscConfig+0x13a>
 8002d2e:	68e3      	ldr	r3, [r4, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d000      	beq.n	8002d36 <HAL_RCC_OscConfig+0x13a>
 8002d34:	e19b      	b.n	800306e <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d36:	4964      	ldr	r1, [pc, #400]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002d38:	680b      	ldr	r3, [r1, #0]
 8002d3a:	22f8      	movs	r2, #248	; 0xf8
 8002d3c:	4393      	bics	r3, r2
 8002d3e:	6922      	ldr	r2, [r4, #16]
 8002d40:	00d2      	lsls	r2, r2, #3
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	071b      	lsls	r3, r3, #28
 8002d4a:	d544      	bpl.n	8002dd6 <HAL_RCC_OscConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d4c:	69e3      	ldr	r3, [r4, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02e      	beq.n	8002db0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d52:	4a5d      	ldr	r2, [pc, #372]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002d54:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002d56:	2101      	movs	r1, #1
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7ff fdbc 	bl	80028d8 <HAL_GetTick>
 8002d60:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	079b      	lsls	r3, r3, #30
 8002d68:	d435      	bmi.n	8002dd6 <HAL_RCC_OscConfig+0x1da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6a:	f7ff fdb5 	bl	80028d8 <HAL_GetTick>
 8002d6e:	1b40      	subs	r0, r0, r5
 8002d70:	2802      	cmp	r0, #2
 8002d72:	d9f6      	bls.n	8002d62 <HAL_RCC_OscConfig+0x166>
        {
          return HAL_TIMEOUT;
 8002d74:	2003      	movs	r0, #3
 8002d76:	e176      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4953      	ldr	r1, [pc, #332]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002d7a:	680b      	ldr	r3, [r1, #0]
 8002d7c:	22f8      	movs	r2, #248	; 0xf8
 8002d7e:	4393      	bics	r3, r2
 8002d80:	6922      	ldr	r2, [r4, #16]
 8002d82:	00d2      	lsls	r2, r2, #3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]
 8002d88:	e7dd      	b.n	8002d46 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8002d8a:	4a4f      	ldr	r2, [pc, #316]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	2101      	movs	r1, #1
 8002d90:	438b      	bics	r3, r1
 8002d92:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d94:	f7ff fda0 	bl	80028d8 <HAL_GetTick>
 8002d98:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	079b      	lsls	r3, r3, #30
 8002da0:	d5d1      	bpl.n	8002d46 <HAL_RCC_OscConfig+0x14a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da2:	f7ff fd99 	bl	80028d8 <HAL_GetTick>
 8002da6:	1b40      	subs	r0, r0, r5
 8002da8:	2802      	cmp	r0, #2
 8002daa:	d9f6      	bls.n	8002d9a <HAL_RCC_OscConfig+0x19e>
            return HAL_TIMEOUT;
 8002dac:	2003      	movs	r0, #3
 8002dae:	e15a      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db0:	4a45      	ldr	r2, [pc, #276]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002db2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002db4:	2101      	movs	r1, #1
 8002db6:	438b      	bics	r3, r1
 8002db8:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7ff fd8d 	bl	80028d8 <HAL_GetTick>
 8002dbe:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	079b      	lsls	r3, r3, #30
 8002dc6:	d506      	bpl.n	8002dd6 <HAL_RCC_OscConfig+0x1da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7ff fd86 	bl	80028d8 <HAL_GetTick>
 8002dcc:	1b40      	subs	r0, r0, r5
 8002dce:	2802      	cmp	r0, #2
 8002dd0:	d9f6      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x1c4>
        {
          return HAL_TIMEOUT;
 8002dd2:	2003      	movs	r0, #3
 8002dd4:	e147      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	075b      	lsls	r3, r3, #29
 8002dda:	d400      	bmi.n	8002dde <HAL_RCC_OscConfig+0x1e2>
 8002ddc:	e080      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dde:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	d40b      	bmi.n	8002dfe <HAL_RCC_OscConfig+0x202>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	4a38      	ldr	r2, [pc, #224]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002de8:	69d1      	ldr	r1, [r2, #28]
 8002dea:	2080      	movs	r0, #128	; 0x80
 8002dec:	0540      	lsls	r0, r0, #21
 8002dee:	4301      	orrs	r1, r0
 8002df0:	61d1      	str	r1, [r2, #28]
 8002df2:	69d3      	ldr	r3, [r2, #28]
 8002df4:	4003      	ands	r3, r0
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002dfa:	2501      	movs	r5, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_RCC_OscConfig+0x204>
    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <HAL_RCC_OscConfig+0x2d8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	05db      	lsls	r3, r3, #23
 8002e06:	d50e      	bpl.n	8002e26 <HAL_RCC_OscConfig+0x22a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e08:	68a3      	ldr	r3, [r4, #8]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d01f      	beq.n	8002e4e <HAL_RCC_OscConfig+0x252>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d134      	bne.n	8002e7c <HAL_RCC_OscConfig+0x280>
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	2101      	movs	r1, #1
 8002e18:	438a      	bics	r2, r1
 8002e1a:	621a      	str	r2, [r3, #32]
 8002e1c:	6a1a      	ldr	r2, [r3, #32]
 8002e1e:	3103      	adds	r1, #3
 8002e20:	438a      	bics	r2, r1
 8002e22:	621a      	str	r2, [r3, #32]
 8002e24:	e018      	b.n	8002e58 <HAL_RCC_OscConfig+0x25c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e26:	4a2b      	ldr	r2, [pc, #172]	; (8002ed4 <HAL_RCC_OscConfig+0x2d8>)
 8002e28:	6811      	ldr	r1, [r2, #0]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002e32:	f7ff fd51 	bl	80028d8 <HAL_GetTick>
 8002e36:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <HAL_RCC_OscConfig+0x2d8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	05db      	lsls	r3, r3, #23
 8002e3e:	d4e3      	bmi.n	8002e08 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7ff fd4a 	bl	80028d8 <HAL_GetTick>
 8002e44:	1b80      	subs	r0, r0, r6
 8002e46:	2864      	cmp	r0, #100	; 0x64
 8002e48:	d9f6      	bls.n	8002e38 <HAL_RCC_OscConfig+0x23c>
          return HAL_TIMEOUT;
 8002e4a:	2003      	movs	r0, #3
 8002e4c:	e10b      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002e50:	6a13      	ldr	r3, [r2, #32]
 8002e52:	2101      	movs	r1, #1
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e58:	68a3      	ldr	r3, [r4, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d024      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7ff fd3b 	bl	80028d8 <HAL_GetTick>
 8002e62:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	079b      	lsls	r3, r3, #30
 8002e6a:	d437      	bmi.n	8002edc <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7ff fd34 	bl	80028d8 <HAL_GetTick>
 8002e70:	1b80      	subs	r0, r0, r6
 8002e72:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <HAL_RCC_OscConfig+0x2dc>)
 8002e74:	4298      	cmp	r0, r3
 8002e76:	d9f5      	bls.n	8002e64 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 8002e78:	2003      	movs	r0, #3
 8002e7a:	e0f4      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d009      	beq.n	8002e94 <HAL_RCC_OscConfig+0x298>
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	2101      	movs	r1, #1
 8002e86:	438a      	bics	r2, r1
 8002e88:	621a      	str	r2, [r3, #32]
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	3103      	adds	r1, #3
 8002e8e:	438a      	bics	r2, r1
 8002e90:	621a      	str	r2, [r3, #32]
 8002e92:	e7e1      	b.n	8002e58 <HAL_RCC_OscConfig+0x25c>
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002e96:	6a1a      	ldr	r2, [r3, #32]
 8002e98:	2104      	movs	r1, #4
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	621a      	str	r2, [r3, #32]
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	3903      	subs	r1, #3
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	621a      	str	r2, [r3, #32]
 8002ea6:	e7d7      	b.n	8002e58 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea8:	f7ff fd16 	bl	80028d8 <HAL_GetTick>
 8002eac:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_OscConfig+0x2cc>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	079b      	lsls	r3, r3, #30
 8002eb4:	d512      	bpl.n	8002edc <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7ff fd0f 	bl	80028d8 <HAL_GetTick>
 8002eba:	1b80      	subs	r0, r0, r6
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_RCC_OscConfig+0x2dc>)
 8002ebe:	4298      	cmp	r0, r3
 8002ec0:	d9f5      	bls.n	8002eae <HAL_RCC_OscConfig+0x2b2>
        {
          return HAL_TIMEOUT;
 8002ec2:	2003      	movs	r0, #3
 8002ec4:	e0cf      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	fffeffff 	.word	0xfffeffff
 8002ed0:	fffbffff 	.word	0xfffbffff
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002edc:	2d01      	cmp	r5, #1
 8002ede:	d033      	beq.n	8002f48 <HAL_RCC_OscConfig+0x34c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	06db      	lsls	r3, r3, #27
 8002ee4:	d510      	bpl.n	8002f08 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ee6:	6963      	ldr	r3, [r4, #20]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d033      	beq.n	8002f54 <HAL_RCC_OscConfig+0x358>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002eec:	3305      	adds	r3, #5
 8002eee:	d151      	bne.n	8002f94 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ef0:	4a65      	ldr	r2, [pc, #404]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002ef2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002ef4:	2104      	movs	r1, #4
 8002ef6:	438b      	bics	r3, r1
 8002ef8:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002efa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002efc:	31f4      	adds	r1, #244	; 0xf4
 8002efe:	438b      	bics	r3, r1
 8002f00:	69a1      	ldr	r1, [r4, #24]
 8002f02:	00c9      	lsls	r1, r1, #3
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f08:	6a23      	ldr	r3, [r4, #32]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d100      	bne.n	8002f10 <HAL_RCC_OscConfig+0x314>
 8002f0e:	e0b0      	b.n	8003072 <HAL_RCC_OscConfig+0x476>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f10:	4a5d      	ldr	r2, [pc, #372]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002f12:	6851      	ldr	r1, [r2, #4]
 8002f14:	220c      	movs	r2, #12
 8002f16:	400a      	ands	r2, r1
 8002f18:	2a08      	cmp	r2, #8
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCC_OscConfig+0x322>
 8002f1c:	e08a      	b.n	8003034 <HAL_RCC_OscConfig+0x438>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d04f      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4a59      	ldr	r2, [pc, #356]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002f24:	6813      	ldr	r3, [r2, #0]
 8002f26:	4959      	ldr	r1, [pc, #356]	; (800308c <HAL_RCC_OscConfig+0x490>)
 8002f28:	400b      	ands	r3, r1
 8002f2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7ff fcd4 	bl	80028d8 <HAL_GetTick>
 8002f30:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f32:	4b55      	ldr	r3, [pc, #340]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	019b      	lsls	r3, r3, #6
 8002f38:	d57a      	bpl.n	8003030 <HAL_RCC_OscConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7ff fccd 	bl	80028d8 <HAL_GetTick>
 8002f3e:	1b00      	subs	r0, r0, r4
 8002f40:	2802      	cmp	r0, #2
 8002f42:	d9f6      	bls.n	8002f32 <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 8002f44:	2003      	movs	r0, #3
 8002f46:	e08e      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f48:	4a4f      	ldr	r2, [pc, #316]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002f4a:	69d3      	ldr	r3, [r2, #28]
 8002f4c:	4950      	ldr	r1, [pc, #320]	; (8003090 <HAL_RCC_OscConfig+0x494>)
 8002f4e:	400b      	ands	r3, r1
 8002f50:	61d3      	str	r3, [r2, #28]
 8002f52:	e7c5      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f54:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f58:	2104      	movs	r1, #4
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f60:	3903      	subs	r1, #3
 8002f62:	430a      	orrs	r2, r1
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002f66:	f7ff fcb7 	bl	80028d8 <HAL_GetTick>
 8002f6a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f6c:	4b46      	ldr	r3, [pc, #280]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	079b      	lsls	r3, r3, #30
 8002f72:	d406      	bmi.n	8002f82 <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f74:	f7ff fcb0 	bl	80028d8 <HAL_GetTick>
 8002f78:	1b40      	subs	r0, r0, r5
 8002f7a:	2802      	cmp	r0, #2
 8002f7c:	d9f6      	bls.n	8002f6c <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 8002f7e:	2003      	movs	r0, #3
 8002f80:	e071      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f82:	4941      	ldr	r1, [pc, #260]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002f84:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002f86:	22f8      	movs	r2, #248	; 0xf8
 8002f88:	4393      	bics	r3, r2
 8002f8a:	69a2      	ldr	r2, [r4, #24]
 8002f8c:	00d2      	lsls	r2, r2, #3
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	634b      	str	r3, [r1, #52]	; 0x34
 8002f92:	e7b9      	b.n	8002f08 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f94:	4b3c      	ldr	r3, [pc, #240]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f98:	2104      	movs	r1, #4
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa0:	3903      	subs	r1, #3
 8002fa2:	438a      	bics	r2, r1
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002fa6:	f7ff fc97 	bl	80028d8 <HAL_GetTick>
 8002faa:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fac:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	079b      	lsls	r3, r3, #30
 8002fb2:	d5a9      	bpl.n	8002f08 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fb4:	f7ff fc90 	bl	80028d8 <HAL_GetTick>
 8002fb8:	1b40      	subs	r0, r0, r5
 8002fba:	2802      	cmp	r0, #2
 8002fbc:	d9f6      	bls.n	8002fac <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	e051      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4a31      	ldr	r2, [pc, #196]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002fc4:	6813      	ldr	r3, [r2, #0]
 8002fc6:	4931      	ldr	r1, [pc, #196]	; (800308c <HAL_RCC_OscConfig+0x490>)
 8002fc8:	400b      	ands	r3, r1
 8002fca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002fcc:	f7ff fc84 	bl	80028d8 <HAL_GetTick>
 8002fd0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	019b      	lsls	r3, r3, #6
 8002fd8:	d506      	bpl.n	8002fe8 <HAL_RCC_OscConfig+0x3ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fda:	f7ff fc7d 	bl	80028d8 <HAL_GetTick>
 8002fde:	1b40      	subs	r0, r0, r5
 8002fe0:	2802      	cmp	r0, #2
 8002fe2:	d9f6      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x3d6>
            return HAL_TIMEOUT;
 8002fe4:	2003      	movs	r0, #3
 8002fe6:	e03e      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	210f      	movs	r1, #15
 8002fee:	438a      	bics	r2, r1
 8002ff0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4926      	ldr	r1, [pc, #152]	; (8003094 <HAL_RCC_OscConfig+0x498>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ffe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003000:	4301      	orrs	r1, r0
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	0452      	lsls	r2, r2, #17
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003010:	f7ff fc62 	bl	80028d8 <HAL_GetTick>
 8003014:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	019b      	lsls	r3, r3, #6
 800301c:	d406      	bmi.n	800302c <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301e:	f7ff fc5b 	bl	80028d8 <HAL_GetTick>
 8003022:	1b00      	subs	r0, r0, r4
 8003024:	2802      	cmp	r0, #2
 8003026:	d9f6      	bls.n	8003016 <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 8003028:	2003      	movs	r0, #3
 800302a:	e01c      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }

  return HAL_OK;
 800302c:	2000      	movs	r0, #0
 800302e:	e01a      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
 8003030:	2000      	movs	r0, #0
 8003032:	e018      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003034:	2b01      	cmp	r3, #1
 8003036:	d01e      	beq.n	8003076 <HAL_RCC_OscConfig+0x47a>
        pll_config  = RCC->CFGR;
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <HAL_RCC_OscConfig+0x48c>)
 800303a:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 800303c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	4013      	ands	r3, r2
 8003044:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003046:	4283      	cmp	r3, r0
 8003048:	d117      	bne.n	800307a <HAL_RCC_OscConfig+0x47e>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800304a:	230f      	movs	r3, #15
 800304c:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003050:	428b      	cmp	r3, r1
 8003052:	d114      	bne.n	800307e <HAL_RCC_OscConfig+0x482>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003054:	23f0      	movs	r3, #240	; 0xf0
 8003056:	039b      	lsls	r3, r3, #14
 8003058:	401a      	ands	r2, r3
 800305a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d110      	bne.n	8003082 <HAL_RCC_OscConfig+0x486>
  return HAL_OK;
 8003060:	2000      	movs	r0, #0
 8003062:	e000      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
    return HAL_ERROR;
 8003064:	2001      	movs	r0, #1
}
 8003066:	b002      	add	sp, #8
 8003068:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800306a:	2001      	movs	r0, #1
 800306c:	e7fb      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
        return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
 8003070:	e7f9      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
  return HAL_OK;
 8003072:	2000      	movs	r0, #0
 8003074:	e7f7      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
        return HAL_ERROR;
 8003076:	2001      	movs	r0, #1
 8003078:	e7f5      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
          return HAL_ERROR;
 800307a:	2001      	movs	r0, #1
 800307c:	e7f3      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
 800307e:	2001      	movs	r0, #1
 8003080:	e7f1      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
 8003082:	2001      	movs	r0, #1
 8003084:	e7ef      	b.n	8003066 <HAL_RCC_OscConfig+0x46a>
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	40021000 	.word	0x40021000
 800308c:	feffffff 	.word	0xfeffffff
 8003090:	efffffff 	.word	0xefffffff
 8003094:	ffc2ffff 	.word	0xffc2ffff

08003098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003098:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_RCC_GetSysClockFreq+0x44>)
 800309c:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800309e:	230c      	movs	r3, #12
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a6:	480e      	ldr	r0, [pc, #56]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80030a8:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030aa:	0c90      	lsrs	r0, r2, #18
 80030ac:	210f      	movs	r1, #15
 80030ae:	4008      	ands	r0, r1
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x4c>)
 80030b2:	5c1c      	ldrb	r4, [r3, r0]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030b4:	4809      	ldr	r0, [pc, #36]	; (80030dc <HAL_RCC_GetSysClockFreq+0x44>)
 80030b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80030b8:	4001      	ands	r1, r0
 80030ba:	185b      	adds	r3, r3, r1
 80030bc:	7c19      	ldrb	r1, [r3, #16]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030be:	03d3      	lsls	r3, r2, #15
 80030c0:	d504      	bpl.n	80030cc <HAL_RCC_GetSysClockFreq+0x34>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030c2:	4807      	ldr	r0, [pc, #28]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x48>)
 80030c4:	f7fd f82a 	bl	800011c <__udivsi3>
 80030c8:	4360      	muls	r0, r4
 80030ca:	e7ed      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030cc:	0163      	lsls	r3, r4, #5
 80030ce:	1b1b      	subs	r3, r3, r4
 80030d0:	0198      	lsls	r0, r3, #6
 80030d2:	1ac0      	subs	r0, r0, r3
 80030d4:	00c0      	lsls	r0, r0, #3
 80030d6:	1900      	adds	r0, r0, r4
 80030d8:	0200      	lsls	r0, r0, #8
 80030da:	e7e5      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x10>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	007a1200 	.word	0x007a1200
 80030e4:	0800836c 	.word	0x0800836c

080030e8 <HAL_RCC_ClockConfig>:
{
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	0004      	movs	r4, r0
 80030ec:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d100      	bne.n	80030f4 <HAL_RCC_ClockConfig+0xc>
 80030f2:	e07e      	b.n	80031f2 <HAL_RCC_ClockConfig+0x10a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_ClockConfig+0x11c>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2301      	movs	r3, #1
 80030fa:	4013      	ands	r3, r2
 80030fc:	428b      	cmp	r3, r1
 80030fe:	d20a      	bcs.n	8003116 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003100:	4940      	ldr	r1, [pc, #256]	; (8003204 <HAL_RCC_ClockConfig+0x11c>)
 8003102:	680b      	ldr	r3, [r1, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	4393      	bics	r3, r2
 8003108:	432b      	orrs	r3, r5
 800310a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310c:	680b      	ldr	r3, [r1, #0]
 800310e:	401a      	ands	r2, r3
 8003110:	42aa      	cmp	r2, r5
 8003112:	d000      	beq.n	8003116 <HAL_RCC_ClockConfig+0x2e>
 8003114:	e06f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	079a      	lsls	r2, r3, #30
 800311a:	d50e      	bpl.n	800313a <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	075b      	lsls	r3, r3, #29
 800311e:	d505      	bpl.n	800312c <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003120:	4a39      	ldr	r2, [pc, #228]	; (8003208 <HAL_RCC_ClockConfig+0x120>)
 8003122:	6851      	ldr	r1, [r2, #4]
 8003124:	23e0      	movs	r3, #224	; 0xe0
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	430b      	orrs	r3, r1
 800312a:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4a36      	ldr	r2, [pc, #216]	; (8003208 <HAL_RCC_ClockConfig+0x120>)
 800312e:	6853      	ldr	r3, [r2, #4]
 8003130:	21f0      	movs	r1, #240	; 0xf0
 8003132:	438b      	bics	r3, r1
 8003134:	68a1      	ldr	r1, [r4, #8]
 8003136:	430b      	orrs	r3, r1
 8003138:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	07db      	lsls	r3, r3, #31
 800313e:	d52d      	bpl.n	800319c <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003140:	6863      	ldr	r3, [r4, #4]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d01e      	beq.n	8003184 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003146:	2b02      	cmp	r3, #2
 8003148:	d022      	beq.n	8003190 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <HAL_RCC_ClockConfig+0x120>)
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	0792      	lsls	r2, r2, #30
 8003150:	d553      	bpl.n	80031fa <HAL_RCC_ClockConfig+0x112>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003152:	492d      	ldr	r1, [pc, #180]	; (8003208 <HAL_RCC_ClockConfig+0x120>)
 8003154:	684a      	ldr	r2, [r1, #4]
 8003156:	2003      	movs	r0, #3
 8003158:	4382      	bics	r2, r0
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800315e:	f7ff fbbb 	bl	80028d8 <HAL_GetTick>
 8003162:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_RCC_ClockConfig+0x120>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	220c      	movs	r2, #12
 800316a:	401a      	ands	r2, r3
 800316c:	6863      	ldr	r3, [r4, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d013      	beq.n	800319c <HAL_RCC_ClockConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7ff fbb0 	bl	80028d8 <HAL_GetTick>
 8003178:	1b80      	subs	r0, r0, r6
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCC_ClockConfig+0x124>)
 800317c:	4298      	cmp	r0, r3
 800317e:	d9f1      	bls.n	8003164 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8003180:	2003      	movs	r0, #3
 8003182:	e035      	b.n	80031f0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003184:	4a20      	ldr	r2, [pc, #128]	; (8003208 <HAL_RCC_ClockConfig+0x120>)
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	0392      	lsls	r2, r2, #14
 800318a:	d4e2      	bmi.n	8003152 <HAL_RCC_ClockConfig+0x6a>
        return HAL_ERROR;
 800318c:	2001      	movs	r0, #1
 800318e:	e02f      	b.n	80031f0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003190:	4a1d      	ldr	r2, [pc, #116]	; (8003208 <HAL_RCC_ClockConfig+0x120>)
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	0192      	lsls	r2, r2, #6
 8003196:	d4dc      	bmi.n	8003152 <HAL_RCC_ClockConfig+0x6a>
        return HAL_ERROR;
 8003198:	2001      	movs	r0, #1
 800319a:	e029      	b.n	80031f0 <HAL_RCC_ClockConfig+0x108>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_RCC_ClockConfig+0x11c>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	2301      	movs	r3, #1
 80031a2:	4013      	ands	r3, r2
 80031a4:	42ab      	cmp	r3, r5
 80031a6:	d909      	bls.n	80031bc <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a8:	4916      	ldr	r1, [pc, #88]	; (8003204 <HAL_RCC_ClockConfig+0x11c>)
 80031aa:	680b      	ldr	r3, [r1, #0]
 80031ac:	2201      	movs	r2, #1
 80031ae:	4393      	bics	r3, r2
 80031b0:	432b      	orrs	r3, r5
 80031b2:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b4:	680b      	ldr	r3, [r1, #0]
 80031b6:	401a      	ands	r2, r3
 80031b8:	42aa      	cmp	r2, r5
 80031ba:	d120      	bne.n	80031fe <HAL_RCC_ClockConfig+0x116>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	075b      	lsls	r3, r3, #29
 80031c0:	d506      	bpl.n	80031d0 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031c2:	4a11      	ldr	r2, [pc, #68]	; (8003208 <HAL_RCC_ClockConfig+0x120>)
 80031c4:	6853      	ldr	r3, [r2, #4]
 80031c6:	4912      	ldr	r1, [pc, #72]	; (8003210 <HAL_RCC_ClockConfig+0x128>)
 80031c8:	400b      	ands	r3, r1
 80031ca:	68e1      	ldr	r1, [r4, #12]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031d0:	f7ff ff62 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <HAL_RCC_ClockConfig+0x120>)
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	0912      	lsrs	r2, r2, #4
 80031da:	230f      	movs	r3, #15
 80031dc:	4013      	ands	r3, r2
 80031de:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <HAL_RCC_ClockConfig+0x12c>)
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	40d8      	lsrs	r0, r3
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_RCC_ClockConfig+0x130>)
 80031e6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80031e8:	2000      	movs	r0, #0
 80031ea:	f002 fe59 	bl	8005ea0 <HAL_InitTick>
  return HAL_OK;
 80031ee:	2000      	movs	r0, #0
}
 80031f0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80031f2:	2001      	movs	r0, #1
 80031f4:	e7fc      	b.n	80031f0 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
 80031f6:	2001      	movs	r0, #1
 80031f8:	e7fa      	b.n	80031f0 <HAL_RCC_ClockConfig+0x108>
        return HAL_ERROR;
 80031fa:	2001      	movs	r0, #1
 80031fc:	e7f8      	b.n	80031f0 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
 80031fe:	2001      	movs	r0, #1
 8003200:	e7f6      	b.n	80031f0 <HAL_RCC_ClockConfig+0x108>
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	40022000 	.word	0x40022000
 8003208:	40021000 	.word	0x40021000
 800320c:	00001388 	.word	0x00001388
 8003210:	fffff8ff 	.word	0xfffff8ff
 8003214:	08008354 	.word	0x08008354
 8003218:	20000000 	.word	0x20000000

0800321c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800321c:	4b01      	ldr	r3, [pc, #4]	; (8003224 <HAL_RCC_GetHCLKFreq+0x8>)
 800321e:	6818      	ldr	r0, [r3, #0]
}
 8003220:	4770      	bx	lr
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	20000000 	.word	0x20000000

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800322a:	f7ff fff7 	bl	800321c <HAL_RCC_GetHCLKFreq>
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	0a12      	lsrs	r2, r2, #8
 8003234:	2307      	movs	r3, #7
 8003236:	4013      	ands	r3, r2
 8003238:	4a02      	ldr	r2, [pc, #8]	; (8003244 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	40d8      	lsrs	r0, r3
}    
 800323e:	bd10      	pop	{r4, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	08008364 	.word	0x08008364

08003248 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003248:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800324a:	2307      	movs	r3, #7
 800324c:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_RCC_GetClockConfig+0x30>)
 8003250:	685c      	ldr	r4, [r3, #4]
 8003252:	2203      	movs	r2, #3
 8003254:	4022      	ands	r2, r4
 8003256:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003258:	685c      	ldr	r4, [r3, #4]
 800325a:	22f0      	movs	r2, #240	; 0xf0
 800325c:	4022      	ands	r2, r4
 800325e:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	22e0      	movs	r2, #224	; 0xe0
 8003264:	00d2      	lsls	r2, r2, #3
 8003266:	4013      	ands	r3, r2
 8003268:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCC_GetClockConfig+0x34>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	2301      	movs	r3, #1
 8003270:	4013      	ands	r3, r2
 8003272:	600b      	str	r3, [r1, #0]
}
 8003274:	bd10      	pop	{r4, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	40021000 	.word	0x40021000
 800327c:	40022000 	.word	0x40022000

08003280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003286:	6803      	ldr	r3, [r0, #0]
 8003288:	03db      	lsls	r3, r3, #15
 800328a:	d537      	bpl.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328c:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	d449      	bmi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4a3b      	ldr	r2, [pc, #236]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8003296:	69d1      	ldr	r1, [r2, #28]
 8003298:	2080      	movs	r0, #128	; 0x80
 800329a:	0540      	lsls	r0, r0, #21
 800329c:	4301      	orrs	r1, r0
 800329e:	61d1      	str	r1, [r2, #28]
 80032a0:	69d3      	ldr	r3, [r2, #28]
 80032a2:	4003      	ands	r3, r0
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80032a8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	4b37      	ldr	r3, [pc, #220]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	05db      	lsls	r3, r3, #23
 80032b0:	d53c      	bpl.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032b2:	4b34      	ldr	r3, [pc, #208]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	23c0      	movs	r3, #192	; 0xc0
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	0011      	movs	r1, r2
 80032bc:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032be:	421a      	tst	r2, r3
 80032c0:	d013      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80032c2:	6862      	ldr	r2, [r4, #4]
 80032c4:	4013      	ands	r3, r2
 80032c6:	428b      	cmp	r3, r1
 80032c8:	d00f      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ca:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80032cc:	6a18      	ldr	r0, [r3, #32]
 80032ce:	4a2f      	ldr	r2, [pc, #188]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80032d0:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032d2:	6a1e      	ldr	r6, [r3, #32]
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	0249      	lsls	r1, r1, #9
 80032d8:	4331      	orrs	r1, r6
 80032da:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032dc:	6a19      	ldr	r1, [r3, #32]
 80032de:	4e2c      	ldr	r6, [pc, #176]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80032e0:	4031      	ands	r1, r6
 80032e2:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032e6:	07c3      	lsls	r3, r0, #31
 80032e8:	d434      	bmi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ea:	4a26      	ldr	r2, [pc, #152]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80032ec:	6a13      	ldr	r3, [r2, #32]
 80032ee:	4927      	ldr	r1, [pc, #156]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80032f0:	400b      	ands	r3, r1
 80032f2:	6861      	ldr	r1, [r4, #4]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032f8:	2d01      	cmp	r5, #1
 80032fa:	d03a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	07db      	lsls	r3, r3, #31
 8003300:	d506      	bpl.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003302:	4a20      	ldr	r2, [pc, #128]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8003304:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003306:	2103      	movs	r1, #3
 8003308:	438b      	bics	r3, r1
 800330a:	68a1      	ldr	r1, [r4, #8]
 800330c:	430b      	orrs	r3, r1
 800330e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	069b      	lsls	r3, r3, #26
 8003314:	d532      	bpl.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003316:	4a1b      	ldr	r2, [pc, #108]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8003318:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800331a:	2110      	movs	r1, #16
 800331c:	438b      	bics	r3, r1
 800331e:	68e1      	ldr	r1, [r4, #12]
 8003320:	430b      	orrs	r3, r1
 8003322:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003324:	2000      	movs	r0, #0
 8003326:	e02a      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    FlagStatus       pwrclkchanged = RESET;
 8003328:	2500      	movs	r5, #0
 800332a:	e7be      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332c:	4a16      	ldr	r2, [pc, #88]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800332e:	6811      	ldr	r1, [r2, #0]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	430b      	orrs	r3, r1
 8003336:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003338:	f7ff face 	bl	80028d8 <HAL_GetTick>
 800333c:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	05db      	lsls	r3, r3, #23
 8003344:	d4b5      	bmi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003346:	f7ff fac7 	bl	80028d8 <HAL_GetTick>
 800334a:	1b80      	subs	r0, r0, r6
 800334c:	2864      	cmp	r0, #100	; 0x64
 800334e:	d9f6      	bls.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8003350:	2003      	movs	r0, #3
 8003352:	e014      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        tickstart = HAL_GetTick();
 8003354:	f7ff fac0 	bl	80028d8 <HAL_GetTick>
 8003358:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	079b      	lsls	r3, r3, #30
 8003360:	d4c3      	bmi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7ff fab9 	bl	80028d8 <HAL_GetTick>
 8003366:	1b80      	subs	r0, r0, r6
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800336a:	4298      	cmp	r0, r3
 800336c:	d9f5      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
 800336e:	2003      	movs	r0, #3
 8003370:	e005      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	69d3      	ldr	r3, [r2, #28]
 8003374:	4908      	ldr	r1, [pc, #32]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003376:	400b      	ands	r3, r1
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	e7bf      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 800337c:	2000      	movs	r0, #0
}
 800337e:	b002      	add	sp, #8
 8003380:	bd70      	pop	{r4, r5, r6, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	40021000 	.word	0x40021000
 8003388:	40007000 	.word	0x40007000
 800338c:	fffffcff 	.word	0xfffffcff
 8003390:	fffeffff 	.word	0xfffeffff
 8003394:	00001388 	.word	0x00001388
 8003398:	efffffff 	.word	0xefffffff

0800339c <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_SPI_IRQHandler>:
{
 80033a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a2:	b085      	sub	sp, #20
 80033a4:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80033a6:	6802      	ldr	r2, [r0, #0]
 80033a8:	6855      	ldr	r5, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80033aa:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80033ac:	0999      	lsrs	r1, r3, #6
 80033ae:	2001      	movs	r0, #1
 80033b0:	0006      	movs	r6, r0
 80033b2:	400e      	ands	r6, r1
 80033b4:	4208      	tst	r0, r1
 80033b6:	d103      	bne.n	80033c0 <HAL_SPI_IRQHandler+0x20>
 80033b8:	07d9      	lsls	r1, r3, #31
 80033ba:	d501      	bpl.n	80033c0 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80033bc:	0669      	lsls	r1, r5, #25
 80033be:	d46a      	bmi.n	8003496 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80033c0:	0799      	lsls	r1, r3, #30
 80033c2:	d501      	bpl.n	80033c8 <HAL_SPI_IRQHandler+0x28>
 80033c4:	0629      	lsls	r1, r5, #24
 80033c6:	d46a      	bmi.n	800349e <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033c8:	0959      	lsrs	r1, r3, #5
 80033ca:	2001      	movs	r0, #1
 80033cc:	0007      	movs	r7, r0
 80033ce:	400f      	ands	r7, r1
 80033d0:	4208      	tst	r0, r1
 80033d2:	d103      	bne.n	80033dc <HAL_SPI_IRQHandler+0x3c>
 80033d4:	2e00      	cmp	r6, #0
 80033d6:	d101      	bne.n	80033dc <HAL_SPI_IRQHandler+0x3c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80033d8:	05d9      	lsls	r1, r3, #23
 80033da:	d563      	bpl.n	80034a4 <HAL_SPI_IRQHandler+0x104>
 80033dc:	06a9      	lsls	r1, r5, #26
 80033de:	d561      	bpl.n	80034a4 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033e0:	2e00      	cmp	r6, #0
 80033e2:	d00e      	beq.n	8003402 <HAL_SPI_IRQHandler+0x62>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80033e4:	215d      	movs	r1, #93	; 0x5d
 80033e6:	5c61      	ldrb	r1, [r4, r1]
 80033e8:	2903      	cmp	r1, #3
 80033ea:	d05d      	beq.n	80034a8 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80033ec:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80033ee:	2004      	movs	r0, #4
 80033f0:	4301      	orrs	r1, r0
 80033f2:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033f4:	2100      	movs	r1, #0
 80033f6:	9100      	str	r1, [sp, #0]
 80033f8:	68d1      	ldr	r1, [r2, #12]
 80033fa:	9100      	str	r1, [sp, #0]
 80033fc:	6891      	ldr	r1, [r2, #8]
 80033fe:	9100      	str	r1, [sp, #0]
 8003400:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003402:	2f00      	cmp	r7, #0
 8003404:	d00c      	beq.n	8003420 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003406:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003408:	2001      	movs	r0, #1
 800340a:	4301      	orrs	r1, r0
 800340c:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800340e:	2100      	movs	r1, #0
 8003410:	9102      	str	r1, [sp, #8]
 8003412:	6891      	ldr	r1, [r2, #8]
 8003414:	9102      	str	r1, [sp, #8]
 8003416:	6811      	ldr	r1, [r2, #0]
 8003418:	303f      	adds	r0, #63	; 0x3f
 800341a:	4381      	bics	r1, r0
 800341c:	6011      	str	r1, [r2, #0]
 800341e:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003420:	05db      	lsls	r3, r3, #23
 8003422:	d509      	bpl.n	8003438 <HAL_SPI_IRQHandler+0x98>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003424:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003426:	2208      	movs	r2, #8
 8003428:	4313      	orrs	r3, r2
 800342a:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800342c:	2300      	movs	r3, #0
 800342e:	9303      	str	r3, [sp, #12]
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	9303      	str	r3, [sp, #12]
 8003436:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003438:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800343a:	2b00      	cmp	r3, #0
 800343c:	d032      	beq.n	80034a4 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800343e:	6822      	ldr	r2, [r4, #0]
 8003440:	6853      	ldr	r3, [r2, #4]
 8003442:	21e0      	movs	r1, #224	; 0xe0
 8003444:	438b      	bics	r3, r1
 8003446:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003448:	235d      	movs	r3, #93	; 0x5d
 800344a:	2201      	movs	r2, #1
 800344c:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800344e:	07ab      	lsls	r3, r5, #30
 8003450:	d032      	beq.n	80034b8 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	6853      	ldr	r3, [r2, #4]
 8003456:	39dd      	subs	r1, #221	; 0xdd
 8003458:	438b      	bics	r3, r1
 800345a:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800345c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003462:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <HAL_SPI_IRQHandler+0x120>)
 8003464:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003466:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003468:	f7ff fadd 	bl	8002a26 <HAL_DMA_Abort_IT>
 800346c:	2800      	cmp	r0, #0
 800346e:	d003      	beq.n	8003478 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003470:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	4313      	orrs	r3, r2
 8003476:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003478:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800347a:	2b00      	cmp	r3, #0
 800347c:	d012      	beq.n	80034a4 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800347e:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <HAL_SPI_IRQHandler+0x120>)
 8003480:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003482:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003484:	f7ff facf 	bl	8002a26 <HAL_DMA_Abort_IT>
 8003488:	2800      	cmp	r0, #0
 800348a:	d00b      	beq.n	80034a4 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800348c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800348e:	2240      	movs	r2, #64	; 0x40
 8003490:	4313      	orrs	r3, r2
 8003492:	6623      	str	r3, [r4, #96]	; 0x60
 8003494:	e006      	b.n	80034a4 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8003496:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003498:	0020      	movs	r0, r4
 800349a:	4798      	blx	r3
    return;
 800349c:	e002      	b.n	80034a4 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 800349e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80034a0:	0020      	movs	r0, r4
 80034a2:	4798      	blx	r3
}
 80034a4:	b005      	add	sp, #20
 80034a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a8:	2300      	movs	r3, #0
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	68d3      	ldr	r3, [r2, #12]
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	6893      	ldr	r3, [r2, #8]
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	9b01      	ldr	r3, [sp, #4]
        return;
 80034b6:	e7f5      	b.n	80034a4 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 80034b8:	0020      	movs	r0, r4
 80034ba:	f7ff ff6f 	bl	800339c <HAL_SPI_ErrorCallback>
    return;
 80034be:	e7f1      	b.n	80034a4 <HAL_SPI_IRQHandler+0x104>
 80034c0:	080034c5 	.word	0x080034c5

080034c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034c4:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	2246      	movs	r2, #70	; 0x46
 80034cc:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 80034ce:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80034d0:	f7ff ff64 	bl	800339c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034d4:	bd10      	pop	{r4, pc}
	...

080034d8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d8:	233d      	movs	r3, #61	; 0x3d
 80034da:	5cc3      	ldrb	r3, [r0, r3]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d122      	bne.n	8003526 <HAL_TIM_Base_Start_IT+0x4e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	333c      	adds	r3, #60	; 0x3c
 80034e2:	2202      	movs	r2, #2
 80034e4:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e6:	6802      	ldr	r2, [r0, #0]
 80034e8:	68d3      	ldr	r3, [r2, #12]
 80034ea:	2101      	movs	r1, #1
 80034ec:	430b      	orrs	r3, r1
 80034ee:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f0:	6803      	ldr	r3, [r0, #0]
 80034f2:	4a0f      	ldr	r2, [pc, #60]	; (8003530 <HAL_TIM_Base_Start_IT+0x58>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00b      	beq.n	8003510 <HAL_TIM_Base_Start_IT+0x38>
 80034f8:	4a0e      	ldr	r2, [pc, #56]	; (8003534 <HAL_TIM_Base_Start_IT+0x5c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d008      	beq.n	8003510 <HAL_TIM_Base_Start_IT+0x38>
 80034fe:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <HAL_TIM_Base_Start_IT+0x60>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d005      	beq.n	8003510 <HAL_TIM_Base_Start_IT+0x38>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	2101      	movs	r1, #1
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800350c:	2000      	movs	r0, #0
 800350e:	e00b      	b.n	8003528 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003510:	6899      	ldr	r1, [r3, #8]
 8003512:	2207      	movs	r2, #7
 8003514:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003516:	2a06      	cmp	r2, #6
 8003518:	d007      	beq.n	800352a <HAL_TIM_Base_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003522:	2000      	movs	r0, #0
 8003524:	e000      	b.n	8003528 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8003526:	2001      	movs	r0, #1
}
 8003528:	4770      	bx	lr
  return HAL_OK;
 800352a:	2000      	movs	r0, #0
 800352c:	e7fc      	b.n	8003528 <HAL_TIM_Base_Start_IT+0x50>
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	40012c00 	.word	0x40012c00
 8003534:	40000400 	.word	0x40000400
 8003538:	40014000 	.word	0x40014000

0800353c <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800353c:	6802      	ldr	r2, [r0, #0]
 800353e:	68d3      	ldr	r3, [r2, #12]
 8003540:	2101      	movs	r1, #1
 8003542:	438b      	bics	r3, r1
 8003544:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003546:	6803      	ldr	r3, [r0, #0]
 8003548:	6a19      	ldr	r1, [r3, #32]
 800354a:	4a08      	ldr	r2, [pc, #32]	; (800356c <HAL_TIM_Base_Stop_IT+0x30>)
 800354c:	4211      	tst	r1, r2
 800354e:	d107      	bne.n	8003560 <HAL_TIM_Base_Stop_IT+0x24>
 8003550:	6a19      	ldr	r1, [r3, #32]
 8003552:	4a07      	ldr	r2, [pc, #28]	; (8003570 <HAL_TIM_Base_Stop_IT+0x34>)
 8003554:	4211      	tst	r1, r2
 8003556:	d103      	bne.n	8003560 <HAL_TIM_Base_Stop_IT+0x24>
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	2101      	movs	r1, #1
 800355c:	438a      	bics	r2, r1
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003560:	233d      	movs	r3, #61	; 0x3d
 8003562:	2201      	movs	r2, #1
 8003564:	54c2      	strb	r2, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 8003566:	2000      	movs	r0, #0
 8003568:	4770      	bx	lr
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	00001111 	.word	0x00001111
 8003570:	00000444 	.word	0x00000444

08003574 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003574:	4770      	bx	lr

08003576 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003576:	4770      	bx	lr

08003578 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003578:	4770      	bx	lr

0800357a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800357a:	4770      	bx	lr

0800357c <HAL_TIM_IRQHandler>:
{
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8003580:	6803      	ldr	r3, [r0, #0]
 8003582:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003584:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003586:	07aa      	lsls	r2, r5, #30
 8003588:	d50e      	bpl.n	80035a8 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800358a:	07b2      	lsls	r2, r6, #30
 800358c:	d50c      	bpl.n	80035a8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800358e:	2203      	movs	r2, #3
 8003590:	4252      	negs	r2, r2
 8003592:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003594:	2301      	movs	r3, #1
 8003596:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003598:	6803      	ldr	r3, [r0, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	079b      	lsls	r3, r3, #30
 800359e:	d051      	beq.n	8003644 <HAL_TIM_IRQHandler+0xc8>
          HAL_TIM_IC_CaptureCallback(htim);
 80035a0:	f7ff ffe9 	bl	8003576 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a4:	2300      	movs	r3, #0
 80035a6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035a8:	076b      	lsls	r3, r5, #29
 80035aa:	d512      	bpl.n	80035d2 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035ac:	0773      	lsls	r3, r6, #29
 80035ae:	d510      	bpl.n	80035d2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	2205      	movs	r2, #5
 80035b4:	4252      	negs	r2, r2
 80035b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b8:	2302      	movs	r3, #2
 80035ba:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	23c0      	movs	r3, #192	; 0xc0
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	421a      	tst	r2, r3
 80035c6:	d043      	beq.n	8003650 <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 80035c8:	0020      	movs	r0, r4
 80035ca:	f7ff ffd4 	bl	8003576 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	2300      	movs	r3, #0
 80035d0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035d2:	072b      	lsls	r3, r5, #28
 80035d4:	d510      	bpl.n	80035f8 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035d6:	0733      	lsls	r3, r6, #28
 80035d8:	d50e      	bpl.n	80035f8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	2209      	movs	r2, #9
 80035de:	4252      	negs	r2, r2
 80035e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035e2:	2304      	movs	r3, #4
 80035e4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	079b      	lsls	r3, r3, #30
 80035ec:	d037      	beq.n	800365e <HAL_TIM_IRQHandler+0xe2>
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	0020      	movs	r0, r4
 80035f0:	f7ff ffc1 	bl	8003576 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f4:	2300      	movs	r3, #0
 80035f6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035f8:	06eb      	lsls	r3, r5, #27
 80035fa:	d512      	bpl.n	8003622 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035fc:	06f3      	lsls	r3, r6, #27
 80035fe:	d510      	bpl.n	8003622 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	2211      	movs	r2, #17
 8003604:	4252      	negs	r2, r2
 8003606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003608:	2308      	movs	r3, #8
 800360a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	23c0      	movs	r3, #192	; 0xc0
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	421a      	tst	r2, r3
 8003616:	d029      	beq.n	800366c <HAL_TIM_IRQHandler+0xf0>
        HAL_TIM_IC_CaptureCallback(htim);
 8003618:	0020      	movs	r0, r4
 800361a:	f7ff ffac 	bl	8003576 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361e:	2300      	movs	r3, #0
 8003620:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003622:	07eb      	lsls	r3, r5, #31
 8003624:	d501      	bpl.n	800362a <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003626:	07f3      	lsls	r3, r6, #31
 8003628:	d427      	bmi.n	800367a <HAL_TIM_IRQHandler+0xfe>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800362a:	062b      	lsls	r3, r5, #24
 800362c:	d501      	bpl.n	8003632 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800362e:	0633      	lsls	r3, r6, #24
 8003630:	d42b      	bmi.n	800368a <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003632:	066b      	lsls	r3, r5, #25
 8003634:	d501      	bpl.n	800363a <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003636:	0673      	lsls	r3, r6, #25
 8003638:	d42f      	bmi.n	800369a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800363a:	06ab      	lsls	r3, r5, #26
 800363c:	d501      	bpl.n	8003642 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800363e:	06b3      	lsls	r3, r6, #26
 8003640:	d433      	bmi.n	80036aa <HAL_TIM_IRQHandler+0x12e>
}
 8003642:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003644:	f7ff ff96 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	0020      	movs	r0, r4
 800364a:	f7ff ff95 	bl	8003578 <HAL_TIM_PWM_PulseFinishedCallback>
 800364e:	e7a9      	b.n	80035a4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003650:	0020      	movs	r0, r4
 8003652:	f7ff ff8f 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003656:	0020      	movs	r0, r4
 8003658:	f7ff ff8e 	bl	8003578 <HAL_TIM_PWM_PulseFinishedCallback>
 800365c:	e7b7      	b.n	80035ce <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365e:	0020      	movs	r0, r4
 8003660:	f7ff ff88 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003664:	0020      	movs	r0, r4
 8003666:	f7ff ff87 	bl	8003578 <HAL_TIM_PWM_PulseFinishedCallback>
 800366a:	e7c3      	b.n	80035f4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366c:	0020      	movs	r0, r4
 800366e:	f7ff ff81 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003672:	0020      	movs	r0, r4
 8003674:	f7ff ff80 	bl	8003578 <HAL_TIM_PWM_PulseFinishedCallback>
 8003678:	e7d1      	b.n	800361e <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	2202      	movs	r2, #2
 800367e:	4252      	negs	r2, r2
 8003680:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003682:	0020      	movs	r0, r4
 8003684:	f003 f8a4 	bl	80067d0 <HAL_TIM_PeriodElapsedCallback>
 8003688:	e7cf      	b.n	800362a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	2281      	movs	r2, #129	; 0x81
 800368e:	4252      	negs	r2, r2
 8003690:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003692:	0020      	movs	r0, r4
 8003694:	f000 f88d 	bl	80037b2 <HAL_TIMEx_BreakCallback>
 8003698:	e7cb      	b.n	8003632 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	2241      	movs	r2, #65	; 0x41
 800369e:	4252      	negs	r2, r2
 80036a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80036a2:	0020      	movs	r0, r4
 80036a4:	f7ff ff69 	bl	800357a <HAL_TIM_TriggerCallback>
 80036a8:	e7c7      	b.n	800363a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	2221      	movs	r2, #33	; 0x21
 80036ae:	4252      	negs	r2, r2
 80036b0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80036b2:	0020      	movs	r0, r4
 80036b4:	f000 f87c 	bl	80037b0 <HAL_TIMEx_CommutCallback>
}
 80036b8:	e7c3      	b.n	8003642 <HAL_TIM_IRQHandler+0xc6>
	...

080036bc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036bc:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036be:	4a1f      	ldr	r2, [pc, #124]	; (800373c <TIM_Base_SetConfig+0x80>)
 80036c0:	4290      	cmp	r0, r2
 80036c2:	d002      	beq.n	80036ca <TIM_Base_SetConfig+0xe>
 80036c4:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <TIM_Base_SetConfig+0x84>)
 80036c6:	4290      	cmp	r0, r2
 80036c8:	d103      	bne.n	80036d2 <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ca:	2270      	movs	r2, #112	; 0x70
 80036cc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80036ce:	684a      	ldr	r2, [r1, #4]
 80036d0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036d2:	4a1a      	ldr	r2, [pc, #104]	; (800373c <TIM_Base_SetConfig+0x80>)
 80036d4:	4290      	cmp	r0, r2
 80036d6:	d00e      	beq.n	80036f6 <TIM_Base_SetConfig+0x3a>
 80036d8:	4a19      	ldr	r2, [pc, #100]	; (8003740 <TIM_Base_SetConfig+0x84>)
 80036da:	4290      	cmp	r0, r2
 80036dc:	d00b      	beq.n	80036f6 <TIM_Base_SetConfig+0x3a>
 80036de:	4a19      	ldr	r2, [pc, #100]	; (8003744 <TIM_Base_SetConfig+0x88>)
 80036e0:	4290      	cmp	r0, r2
 80036e2:	d008      	beq.n	80036f6 <TIM_Base_SetConfig+0x3a>
 80036e4:	4a18      	ldr	r2, [pc, #96]	; (8003748 <TIM_Base_SetConfig+0x8c>)
 80036e6:	4290      	cmp	r0, r2
 80036e8:	d005      	beq.n	80036f6 <TIM_Base_SetConfig+0x3a>
 80036ea:	4a18      	ldr	r2, [pc, #96]	; (800374c <TIM_Base_SetConfig+0x90>)
 80036ec:	4290      	cmp	r0, r2
 80036ee:	d002      	beq.n	80036f6 <TIM_Base_SetConfig+0x3a>
 80036f0:	4a17      	ldr	r2, [pc, #92]	; (8003750 <TIM_Base_SetConfig+0x94>)
 80036f2:	4290      	cmp	r0, r2
 80036f4:	d103      	bne.n	80036fe <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f6:	4a17      	ldr	r2, [pc, #92]	; (8003754 <TIM_Base_SetConfig+0x98>)
 80036f8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036fa:	68ca      	ldr	r2, [r1, #12]
 80036fc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	4393      	bics	r3, r2
 8003702:	694a      	ldr	r2, [r1, #20]
 8003704:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003706:	688a      	ldr	r2, [r1, #8]
 8003708:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800370a:	680a      	ldr	r2, [r1, #0]
 800370c:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800370e:	4a0b      	ldr	r2, [pc, #44]	; (800373c <TIM_Base_SetConfig+0x80>)
 8003710:	4290      	cmp	r0, r2
 8003712:	d008      	beq.n	8003726 <TIM_Base_SetConfig+0x6a>
 8003714:	4a0c      	ldr	r2, [pc, #48]	; (8003748 <TIM_Base_SetConfig+0x8c>)
 8003716:	4290      	cmp	r0, r2
 8003718:	d005      	beq.n	8003726 <TIM_Base_SetConfig+0x6a>
 800371a:	4a0c      	ldr	r2, [pc, #48]	; (800374c <TIM_Base_SetConfig+0x90>)
 800371c:	4290      	cmp	r0, r2
 800371e:	d002      	beq.n	8003726 <TIM_Base_SetConfig+0x6a>
 8003720:	4a0b      	ldr	r2, [pc, #44]	; (8003750 <TIM_Base_SetConfig+0x94>)
 8003722:	4290      	cmp	r0, r2
 8003724:	d101      	bne.n	800372a <TIM_Base_SetConfig+0x6e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003726:	690a      	ldr	r2, [r1, #16]
 8003728:	6302      	str	r2, [r0, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800372a:	6802      	ldr	r2, [r0, #0]
 800372c:	2104      	movs	r1, #4
 800372e:	430a      	orrs	r2, r1
 8003730:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003732:	2201      	movs	r2, #1
 8003734:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 8003736:	6003      	str	r3, [r0, #0]
}
 8003738:	4770      	bx	lr
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	40012c00 	.word	0x40012c00
 8003740:	40000400 	.word	0x40000400
 8003744:	40002000 	.word	0x40002000
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800
 8003754:	fffffcff 	.word	0xfffffcff

08003758 <HAL_TIM_Base_Init>:
{
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800375c:	d026      	beq.n	80037ac <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800375e:	233d      	movs	r3, #61	; 0x3d
 8003760:	5cc3      	ldrb	r3, [r0, r3]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01c      	beq.n	80037a0 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8003766:	253d      	movs	r5, #61	; 0x3d
 8003768:	2302      	movs	r3, #2
 800376a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800376c:	0021      	movs	r1, r4
 800376e:	c901      	ldmia	r1!, {r0}
 8003770:	f7ff ffa4 	bl	80036bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003774:	2301      	movs	r3, #1
 8003776:	2246      	movs	r2, #70	; 0x46
 8003778:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377a:	3a08      	subs	r2, #8
 800377c:	54a3      	strb	r3, [r4, r2]
 800377e:	3201      	adds	r2, #1
 8003780:	54a3      	strb	r3, [r4, r2]
 8003782:	3201      	adds	r2, #1
 8003784:	54a3      	strb	r3, [r4, r2]
 8003786:	3201      	adds	r2, #1
 8003788:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378a:	3201      	adds	r2, #1
 800378c:	54a3      	strb	r3, [r4, r2]
 800378e:	3201      	adds	r2, #1
 8003790:	54a3      	strb	r3, [r4, r2]
 8003792:	3201      	adds	r2, #1
 8003794:	54a3      	strb	r3, [r4, r2]
 8003796:	3201      	adds	r2, #1
 8003798:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800379a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800379c:	2000      	movs	r0, #0
}
 800379e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80037a0:	333c      	adds	r3, #60	; 0x3c
 80037a2:	2200      	movs	r2, #0
 80037a4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80037a6:	f002 fb05 	bl	8005db4 <HAL_TIM_Base_MspInit>
 80037aa:	e7dc      	b.n	8003766 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80037ac:	2001      	movs	r0, #1
 80037ae:	e7f6      	b.n	800379e <HAL_TIM_Base_Init+0x46>

080037b0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b2:	4770      	bx	lr

080037b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037b4:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b6:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ba:	2201      	movs	r2, #1
 80037bc:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c0:	6801      	ldr	r1, [r0, #0]
 80037c2:	680b      	ldr	r3, [r1, #0]
 80037c4:	4d12      	ldr	r5, [pc, #72]	; (8003810 <UART_EndRxTransfer+0x5c>)
 80037c6:	402b      	ands	r3, r5
 80037c8:	600b      	str	r3, [r1, #0]
 80037ca:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d6:	6801      	ldr	r1, [r0, #0]
 80037d8:	688b      	ldr	r3, [r1, #8]
 80037da:	4393      	bics	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
 80037de:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d006      	beq.n	80037f6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	2220      	movs	r2, #32
 80037ec:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ee:	2300      	movs	r3, #0
 80037f0:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037f2:	6683      	str	r3, [r0, #104]	; 0x68
}
 80037f4:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fa:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fe:	6802      	ldr	r2, [r0, #0]
 8003800:	6813      	ldr	r3, [r2, #0]
 8003802:	2410      	movs	r4, #16
 8003804:	43a3      	bics	r3, r4
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	f381 8810 	msr	PRIMASK, r1
}
 800380c:	e7ec      	b.n	80037e8 <UART_EndRxTransfer+0x34>
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	fffffedf 	.word	0xfffffedf

08003814 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003814:	b530      	push	{r4, r5, lr}
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003816:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003818:	2b21      	cmp	r3, #33	; 0x21
 800381a:	d000      	beq.n	800381e <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800381c:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 800381e:	3331      	adds	r3, #49	; 0x31
 8003820:	5ac3      	ldrh	r3, [r0, r3]
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d117      	bne.n	8003858 <UART_TxISR_8BIT+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003828:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382c:	2201      	movs	r2, #1
 800382e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003832:	6801      	ldr	r1, [r0, #0]
 8003834:	680b      	ldr	r3, [r1, #0]
 8003836:	2580      	movs	r5, #128	; 0x80
 8003838:	43ab      	bics	r3, r5
 800383a:	600b      	str	r3, [r1, #0]
 800383c:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003840:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003844:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003848:	6802      	ldr	r2, [r0, #0]
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	2040      	movs	r0, #64	; 0x40
 800384e:	4303      	orrs	r3, r0
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	f381 8810 	msr	PRIMASK, r1
}
 8003856:	e7e1      	b.n	800381c <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003858:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	6802      	ldr	r2, [r0, #0]
 800385e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003860:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003862:	3301      	adds	r3, #1
 8003864:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8003866:	2252      	movs	r2, #82	; 0x52
 8003868:	5a83      	ldrh	r3, [r0, r2]
 800386a:	3b01      	subs	r3, #1
 800386c:	b29b      	uxth	r3, r3
 800386e:	5283      	strh	r3, [r0, r2]
}
 8003870:	e7d4      	b.n	800381c <UART_TxISR_8BIT+0x8>

08003872 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003872:	b530      	push	{r4, r5, lr}
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003874:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003876:	2b21      	cmp	r3, #33	; 0x21
 8003878:	d000      	beq.n	800387c <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800387a:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 800387c:	3331      	adds	r3, #49	; 0x31
 800387e:	5ac3      	ldrh	r3, [r0, r3]
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d117      	bne.n	80038b6 <UART_TxISR_16BIT+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003886:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388a:	2201      	movs	r2, #1
 800388c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003890:	6801      	ldr	r1, [r0, #0]
 8003892:	680b      	ldr	r3, [r1, #0]
 8003894:	2580      	movs	r5, #128	; 0x80
 8003896:	43ab      	bics	r3, r5
 8003898:	600b      	str	r3, [r1, #0]
 800389a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038a6:	6802      	ldr	r2, [r0, #0]
 80038a8:	6813      	ldr	r3, [r2, #0]
 80038aa:	2040      	movs	r0, #64	; 0x40
 80038ac:	4303      	orrs	r3, r0
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	f381 8810 	msr	PRIMASK, r1
}
 80038b4:	e7e1      	b.n	800387a <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80038b6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	05db      	lsls	r3, r3, #23
 80038bc:	0ddb      	lsrs	r3, r3, #23
 80038be:	6802      	ldr	r2, [r0, #0]
 80038c0:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80038c2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80038c4:	3302      	adds	r3, #2
 80038c6:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80038c8:	2252      	movs	r2, #82	; 0x52
 80038ca:	5a83      	ldrh	r3, [r0, r2]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	5283      	strh	r3, [r0, r2]
}
 80038d2:	e7d2      	b.n	800387a <UART_TxISR_16BIT+0x8>

080038d4 <HAL_UART_Transmit_IT>:
{
 80038d4:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80038d6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d131      	bne.n	8003940 <HAL_UART_Transmit_IT+0x6c>
    if ((pData == NULL) || (Size == 0U))
 80038dc:	2900      	cmp	r1, #0
 80038de:	d031      	beq.n	8003944 <HAL_UART_Transmit_IT+0x70>
 80038e0:	2a00      	cmp	r2, #0
 80038e2:	d031      	beq.n	8003948 <HAL_UART_Transmit_IT+0x74>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e4:	6883      	ldr	r3, [r0, #8]
 80038e6:	2480      	movs	r4, #128	; 0x80
 80038e8:	0164      	lsls	r4, r4, #5
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	d104      	bne.n	80038f8 <HAL_UART_Transmit_IT+0x24>
 80038ee:	6904      	ldr	r4, [r0, #16]
 80038f0:	2c00      	cmp	r4, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_UART_Transmit_IT+0x24>
      if ((((uint32_t)pData) & 1U) != 0U)
 80038f4:	07cc      	lsls	r4, r1, #31
 80038f6:	d429      	bmi.n	800394c <HAL_UART_Transmit_IT+0x78>
    huart->pTxBuffPtr  = pData;
 80038f8:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80038fa:	2150      	movs	r1, #80	; 0x50
 80038fc:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 80038fe:	3102      	adds	r1, #2
 8003900:	5242      	strh	r2, [r0, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	2284      	movs	r2, #132	; 0x84
 8003904:	2100      	movs	r1, #0
 8003906:	5081      	str	r1, [r0, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003908:	3a63      	subs	r2, #99	; 0x63
 800390a:	67c2      	str	r2, [r0, #124]	; 0x7c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	0152      	lsls	r2, r2, #5
 8003910:	4293      	cmp	r3, r2
 8003912:	d00f      	beq.n	8003934 <HAL_UART_Transmit_IT+0x60>
      huart->TxISR = UART_TxISR_8BIT;
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <HAL_UART_Transmit_IT+0x7c>)
 8003916:	66c3      	str	r3, [r0, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003918:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391c:	2301      	movs	r3, #1
 800391e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003922:	6802      	ldr	r2, [r0, #0]
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	2080      	movs	r0, #128	; 0x80
 8003928:	4303      	orrs	r3, r0
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8003930:	2000      	movs	r0, #0
 8003932:	e006      	b.n	8003942 <HAL_UART_Transmit_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003934:	6903      	ldr	r3, [r0, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ec      	bne.n	8003914 <HAL_UART_Transmit_IT+0x40>
      huart->TxISR = UART_TxISR_16BIT;
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_UART_Transmit_IT+0x80>)
 800393c:	66c3      	str	r3, [r0, #108]	; 0x6c
 800393e:	e7eb      	b.n	8003918 <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 8003940:	2002      	movs	r0, #2
}
 8003942:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8003944:	2001      	movs	r0, #1
 8003946:	e7fc      	b.n	8003942 <HAL_UART_Transmit_IT+0x6e>
 8003948:	2001      	movs	r0, #1
 800394a:	e7fa      	b.n	8003942 <HAL_UART_Transmit_IT+0x6e>
        return  HAL_ERROR;
 800394c:	2001      	movs	r0, #1
 800394e:	e7f8      	b.n	8003942 <HAL_UART_Transmit_IT+0x6e>
 8003950:	08003815 	.word	0x08003815
 8003954:	08003873 	.word	0x08003873

08003958 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003958:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395e:	2301      	movs	r3, #1
 8003960:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003964:	6802      	ldr	r2, [r0, #0]
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	2440      	movs	r4, #64	; 0x40
 800396a:	43a3      	bics	r3, r4
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003972:	2320      	movs	r3, #32
 8003974:	67c3      	str	r3, [r0, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800397a:	f002 fee3 	bl	8006744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800397e:	bd10      	pop	{r4, pc}

08003980 <HAL_UART_ErrorCallback>:
}
 8003980:	4770      	bx	lr

08003982 <UART_DMAAbortOnError>:
{
 8003982:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003984:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003986:	235a      	movs	r3, #90	; 0x5a
 8003988:	2200      	movs	r2, #0
 800398a:	52c2      	strh	r2, [r0, r3]
  HAL_UART_ErrorCallback(huart);
 800398c:	f7ff fff8 	bl	8003980 <HAL_UART_ErrorCallback>
}
 8003990:	bd10      	pop	{r4, pc}

08003992 <HAL_UART_AbortTransmitCpltCallback>:
}
 8003992:	4770      	bx	lr

08003994 <HAL_UART_AbortTransmit_IT>:
{
 8003994:	b510      	push	{r4, lr}
 8003996:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003998:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399c:	2301      	movs	r3, #1
 800399e:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039a2:	6802      	ldr	r2, [r0, #0]
 80039a4:	6813      	ldr	r3, [r2, #0]
 80039a6:	20c0      	movs	r0, #192	; 0xc0
 80039a8:	4383      	bics	r3, r0
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	f381 8810 	msr	PRIMASK, r1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	d523      	bpl.n	8003a00 <HAL_UART_AbortTransmit_IT+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039bc:	2301      	movs	r3, #1
 80039be:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039c2:	6822      	ldr	r2, [r4, #0]
 80039c4:	6893      	ldr	r3, [r2, #8]
 80039c6:	3840      	subs	r0, #64	; 0x40
 80039c8:	4383      	bics	r3, r0
 80039ca:	6093      	str	r3, [r2, #8]
 80039cc:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmatx != NULL)
 80039d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_UART_AbortTransmit_IT+0x58>
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80039d6:	4a10      	ldr	r2, [pc, #64]	; (8003a18 <HAL_UART_AbortTransmit_IT+0x84>)
 80039d8:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80039da:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80039dc:	f7ff f823 	bl	8002a26 <HAL_DMA_Abort_IT>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d016      	beq.n	8003a12 <HAL_UART_AbortTransmit_IT+0x7e>
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80039e4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80039e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039e8:	4798      	blx	r3
 80039ea:	e012      	b.n	8003a12 <HAL_UART_AbortTransmit_IT+0x7e>
      huart->TxXferCount = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	2252      	movs	r2, #82	; 0x52
 80039f0:	52a3      	strh	r3, [r4, r2]
      huart->TxISR = NULL;
 80039f2:	66e3      	str	r3, [r4, #108]	; 0x6c
      huart->gState = HAL_UART_STATE_READY;
 80039f4:	3320      	adds	r3, #32
 80039f6:	67e3      	str	r3, [r4, #124]	; 0x7c
      HAL_UART_AbortTransmitCpltCallback(huart);
 80039f8:	0020      	movs	r0, r4
 80039fa:	f7ff ffca 	bl	8003992 <HAL_UART_AbortTransmitCpltCallback>
 80039fe:	e008      	b.n	8003a12 <HAL_UART_AbortTransmit_IT+0x7e>
    huart->TxXferCount = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	2252      	movs	r2, #82	; 0x52
 8003a04:	52a3      	strh	r3, [r4, r2]
    huart->TxISR = NULL;
 8003a06:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_READY;
 8003a08:	3320      	adds	r3, #32
 8003a0a:	67e3      	str	r3, [r4, #124]	; 0x7c
    HAL_UART_AbortTransmitCpltCallback(huart);
 8003a0c:	0020      	movs	r0, r4
 8003a0e:	f7ff ffc0 	bl	8003992 <HAL_UART_AbortTransmitCpltCallback>
}
 8003a12:	2000      	movs	r0, #0
 8003a14:	bd10      	pop	{r4, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	08003a1d 	.word	0x08003a1d

08003a1c <UART_DMATxOnlyAbortCallback>:
{
 8003a1c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->TxXferCount = 0U;
 8003a20:	2352      	movs	r3, #82	; 0x52
 8003a22:	2200      	movs	r2, #0
 8003a24:	52c2      	strh	r2, [r0, r3]
  huart->gState = HAL_UART_STATE_READY;
 8003a26:	3b32      	subs	r3, #50	; 0x32
 8003a28:	67c3      	str	r3, [r0, #124]	; 0x7c
  HAL_UART_AbortTransmitCpltCallback(huart);
 8003a2a:	f7ff ffb2 	bl	8003992 <HAL_UART_AbortTransmitCpltCallback>
}
 8003a2e:	bd10      	pop	{r4, pc}

08003a30 <HAL_UART_AbortReceiveCpltCallback>:
}
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_UART_AbortReceive_IT>:
{
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a38:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a42:	6821      	ldr	r1, [r4, #0]
 8003a44:	680b      	ldr	r3, [r1, #0]
 8003a46:	4d2f      	ldr	r5, [pc, #188]	; (8003b04 <HAL_UART_AbortReceive_IT+0xd0>)
 8003a48:	402b      	ands	r3, r5
 8003a4a:	600b      	str	r3, [r1, #0]
 8003a4c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a50:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a54:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a58:	6821      	ldr	r1, [r4, #0]
 8003a5a:	688b      	ldr	r3, [r1, #8]
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	608b      	str	r3, [r1, #8]
 8003a60:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a64:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d01d      	beq.n	8003aa6 <HAL_UART_AbortReceive_IT+0x72>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	0652      	lsls	r2, r2, #25
 8003a70:	d539      	bpl.n	8003ae6 <HAL_UART_AbortReceive_IT+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a72:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a76:	2301      	movs	r3, #1
 8003a78:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7c:	6822      	ldr	r2, [r4, #0]
 8003a7e:	6893      	ldr	r3, [r2, #8]
 8003a80:	2040      	movs	r0, #64	; 0x40
 8003a82:	4383      	bics	r3, r0
 8003a84:	6093      	str	r3, [r2, #8]
 8003a86:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmarx != NULL)
 8003a8a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d016      	beq.n	8003abe <HAL_UART_AbortReceive_IT+0x8a>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003a90:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <HAL_UART_AbortReceive_IT+0xd4>)
 8003a92:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a94:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003a96:	f7fe ffc6 	bl	8002a26 <HAL_DMA_Abort_IT>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d030      	beq.n	8003b00 <HAL_UART_AbortReceive_IT+0xcc>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a9e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003aa0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003aa2:	4798      	blx	r3
 8003aa4:	e02c      	b.n	8003b00 <HAL_UART_AbortReceive_IT+0xcc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aaa:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	6813      	ldr	r3, [r2, #0]
 8003ab2:	2010      	movs	r0, #16
 8003ab4:	4383      	bics	r3, r0
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	f381 8810 	msr	PRIMASK, r1
}
 8003abc:	e7d5      	b.n	8003a6a <HAL_UART_AbortReceive_IT+0x36>
      huart->RxXferCount = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	225a      	movs	r2, #90	; 0x5a
 8003ac2:	52a3      	strh	r3, [r4, r2]
      huart->pRxBuffPtr = NULL;
 8003ac4:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003ac6:	6822      	ldr	r2, [r4, #0]
 8003ac8:	210f      	movs	r1, #15
 8003aca:	6211      	str	r1, [r2, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003acc:	6821      	ldr	r1, [r4, #0]
 8003ace:	698a      	ldr	r2, [r1, #24]
 8003ad0:	2008      	movs	r0, #8
 8003ad2:	4302      	orrs	r2, r0
 8003ad4:	618a      	str	r2, [r1, #24]
      huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	2120      	movs	r1, #32
 8003ada:	50a1      	str	r1, [r4, r2]
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003adc:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003ade:	0020      	movs	r0, r4
 8003ae0:	f7ff ffa6 	bl	8003a30 <HAL_UART_AbortReceiveCpltCallback>
 8003ae4:	e00c      	b.n	8003b00 <HAL_UART_AbortReceive_IT+0xcc>
    huart->RxXferCount = 0U;
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	215a      	movs	r1, #90	; 0x5a
 8003aea:	5262      	strh	r2, [r4, r1]
    huart->pRxBuffPtr = NULL;
 8003aec:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003aee:	394b      	subs	r1, #75	; 0x4b
 8003af0:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	3111      	adds	r1, #17
 8003af6:	50e1      	str	r1, [r4, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af8:	6622      	str	r2, [r4, #96]	; 0x60
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003afa:	0020      	movs	r0, r4
 8003afc:	f7ff ff98 	bl	8003a30 <HAL_UART_AbortReceiveCpltCallback>
}
 8003b00:	2000      	movs	r0, #0
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	fffffedf 	.word	0xfffffedf
 8003b08:	08003b0d 	.word	0x08003b0d

08003b0c <UART_DMARxOnlyAbortCallback>:
{
 8003b0c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003b10:	2200      	movs	r2, #0
 8003b12:	235a      	movs	r3, #90	; 0x5a
 8003b14:	52c2      	strh	r2, [r0, r3]
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003b16:	6803      	ldr	r3, [r0, #0]
 8003b18:	210f      	movs	r1, #15
 8003b1a:	6219      	str	r1, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b1c:	6801      	ldr	r1, [r0, #0]
 8003b1e:	698b      	ldr	r3, [r1, #24]
 8003b20:	2408      	movs	r4, #8
 8003b22:	4323      	orrs	r3, r4
 8003b24:	618b      	str	r3, [r1, #24]
  huart->RxState = HAL_UART_STATE_READY;
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	2120      	movs	r1, #32
 8003b2a:	50c1      	str	r1, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2c:	6602      	str	r2, [r0, #96]	; 0x60
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003b2e:	f7ff ff7f 	bl	8003a30 <HAL_UART_AbortReceiveCpltCallback>
}
 8003b32:	bd10      	pop	{r4, pc}

08003b34 <HAL_UARTEx_RxEventCallback>:
}
 8003b34:	4770      	bx	lr
	...

08003b38 <HAL_UART_IRQHandler>:
{
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b3c:	6802      	ldr	r2, [r0, #0]
 8003b3e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b40:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b42:	6896      	ldr	r6, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b44:	49ae      	ldr	r1, [pc, #696]	; (8003e00 <HAL_UART_IRQHandler+0x2c8>)
 8003b46:	001d      	movs	r5, r3
 8003b48:	400d      	ands	r5, r1
  if (errorflags == 0U)
 8003b4a:	420b      	tst	r3, r1
 8003b4c:	d103      	bne.n	8003b56 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b4e:	0699      	lsls	r1, r3, #26
 8003b50:	d501      	bpl.n	8003b56 <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b52:	0681      	lsls	r1, r0, #26
 8003b54:	d418      	bmi.n	8003b88 <HAL_UART_IRQHandler+0x50>
  if ((errorflags != 0U)
 8003b56:	2d00      	cmp	r5, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_UART_IRQHandler+0x32>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	000d      	movs	r5, r1
 8003b5e:	4035      	ands	r5, r6
 8003b60:	4231      	tst	r1, r6
 8003b62:	d117      	bne.n	8003b94 <HAL_UART_IRQHandler+0x5c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b64:	49a7      	ldr	r1, [pc, #668]	; (8003e04 <HAL_UART_IRQHandler+0x2cc>)
 8003b66:	4208      	tst	r0, r1
 8003b68:	d114      	bne.n	8003b94 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003b6c:	2901      	cmp	r1, #1
 8003b6e:	d100      	bne.n	8003b72 <HAL_UART_IRQHandler+0x3a>
 8003b70:	e093      	b.n	8003c9a <HAL_UART_IRQHandler+0x162>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b72:	061a      	lsls	r2, r3, #24
 8003b74:	d502      	bpl.n	8003b7c <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b76:	0602      	lsls	r2, r0, #24
 8003b78:	d500      	bpl.n	8003b7c <HAL_UART_IRQHandler+0x44>
 8003b7a:	e135      	b.n	8003de8 <HAL_UART_IRQHandler+0x2b0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b7c:	065b      	lsls	r3, r3, #25
 8003b7e:	d502      	bpl.n	8003b86 <HAL_UART_IRQHandler+0x4e>
 8003b80:	0643      	lsls	r3, r0, #25
 8003b82:	d500      	bpl.n	8003b86 <HAL_UART_IRQHandler+0x4e>
 8003b84:	e137      	b.n	8003df6 <HAL_UART_IRQHandler+0x2be>
}
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8003b88:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0fb      	beq.n	8003b86 <HAL_UART_IRQHandler+0x4e>
        huart->RxISR(huart);
 8003b8e:	0020      	movs	r0, r4
 8003b90:	4798      	blx	r3
      return;
 8003b92:	e7f8      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b94:	07d9      	lsls	r1, r3, #31
 8003b96:	d507      	bpl.n	8003ba8 <HAL_UART_IRQHandler+0x70>
 8003b98:	05c1      	lsls	r1, r0, #23
 8003b9a:	d505      	bpl.n	8003ba8 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b9c:	2601      	movs	r6, #1
 8003b9e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ba0:	2184      	movs	r1, #132	; 0x84
 8003ba2:	5862      	ldr	r2, [r4, r1]
 8003ba4:	4332      	orrs	r2, r6
 8003ba6:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ba8:	079a      	lsls	r2, r3, #30
 8003baa:	d509      	bpl.n	8003bc0 <HAL_UART_IRQHandler+0x88>
 8003bac:	2d00      	cmp	r5, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bb6:	3182      	adds	r1, #130	; 0x82
 8003bb8:	5862      	ldr	r2, [r4, r1]
 8003bba:	2604      	movs	r6, #4
 8003bbc:	4332      	orrs	r2, r6
 8003bbe:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bc0:	075a      	lsls	r2, r3, #29
 8003bc2:	d509      	bpl.n	8003bd8 <HAL_UART_IRQHandler+0xa0>
 8003bc4:	2d00      	cmp	r5, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bc8:	6822      	ldr	r2, [r4, #0]
 8003bca:	2104      	movs	r1, #4
 8003bcc:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bce:	3180      	adds	r1, #128	; 0x80
 8003bd0:	5862      	ldr	r2, [r4, r1]
 8003bd2:	2602      	movs	r6, #2
 8003bd4:	4332      	orrs	r2, r6
 8003bd6:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bd8:	071a      	lsls	r2, r3, #28
 8003bda:	d50a      	bpl.n	8003bf2 <HAL_UART_IRQHandler+0xba>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bdc:	0682      	lsls	r2, r0, #26
 8003bde:	d401      	bmi.n	8003be4 <HAL_UART_IRQHandler+0xac>
 8003be0:	2d00      	cmp	r5, #0
 8003be2:	d006      	beq.n	8003bf2 <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003be4:	6822      	ldr	r2, [r4, #0]
 8003be6:	2508      	movs	r5, #8
 8003be8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bea:	2184      	movs	r1, #132	; 0x84
 8003bec:	5862      	ldr	r2, [r4, r1]
 8003bee:	432a      	orrs	r2, r5
 8003bf0:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bf2:	051a      	lsls	r2, r3, #20
 8003bf4:	d50a      	bpl.n	8003c0c <HAL_UART_IRQHandler+0xd4>
 8003bf6:	0142      	lsls	r2, r0, #5
 8003bf8:	d508      	bpl.n	8003c0c <HAL_UART_IRQHandler+0xd4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bfa:	6822      	ldr	r2, [r4, #0]
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	0109      	lsls	r1, r1, #4
 8003c00:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c02:	2184      	movs	r1, #132	; 0x84
 8003c04:	5862      	ldr	r2, [r4, r1]
 8003c06:	2520      	movs	r5, #32
 8003c08:	432a      	orrs	r2, r5
 8003c0a:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c0c:	2284      	movs	r2, #132	; 0x84
 8003c0e:	58a2      	ldr	r2, [r4, r2]
 8003c10:	2a00      	cmp	r2, #0
 8003c12:	d0b8      	beq.n	8003b86 <HAL_UART_IRQHandler+0x4e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c14:	069b      	lsls	r3, r3, #26
 8003c16:	d506      	bpl.n	8003c26 <HAL_UART_IRQHandler+0xee>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c18:	0683      	lsls	r3, r0, #26
 8003c1a:	d504      	bpl.n	8003c26 <HAL_UART_IRQHandler+0xee>
        if (huart->RxISR != NULL)
 8003c1c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_UART_IRQHandler+0xee>
          huart->RxISR(huart);
 8003c22:	0020      	movs	r0, r4
 8003c24:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8003c26:	2384      	movs	r3, #132	; 0x84
 8003c28:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	065b      	lsls	r3, r3, #25
 8003c30:	d402      	bmi.n	8003c38 <HAL_UART_IRQHandler+0x100>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c32:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c34:	4213      	tst	r3, r2
 8003c36:	d029      	beq.n	8003c8c <HAL_UART_IRQHandler+0x154>
        UART_EndRxTransfer(huart);
 8003c38:	0020      	movs	r0, r4
 8003c3a:	f7ff fdbb 	bl	80037b4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	065b      	lsls	r3, r3, #25
 8003c44:	d51e      	bpl.n	8003c84 <HAL_UART_IRQHandler+0x14c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c46:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c50:	6822      	ldr	r2, [r4, #0]
 8003c52:	6893      	ldr	r3, [r2, #8]
 8003c54:	2040      	movs	r0, #64	; 0x40
 8003c56:	4383      	bics	r3, r0
 8003c58:	6093      	str	r3, [r2, #8]
 8003c5a:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003c5e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_UART_IRQHandler+0x144>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c64:	4a68      	ldr	r2, [pc, #416]	; (8003e08 <HAL_UART_IRQHandler+0x2d0>)
 8003c66:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c68:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003c6a:	f7fe fedc 	bl	8002a26 <HAL_DMA_Abort_IT>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d100      	bne.n	8003c74 <HAL_UART_IRQHandler+0x13c>
 8003c72:	e788      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c74:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003c76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c78:	4798      	blx	r3
 8003c7a:	e784      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
            HAL_UART_ErrorCallback(huart);
 8003c7c:	0020      	movs	r0, r4
 8003c7e:	f7ff fe7f 	bl	8003980 <HAL_UART_ErrorCallback>
 8003c82:	e780      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
          HAL_UART_ErrorCallback(huart);
 8003c84:	0020      	movs	r0, r4
 8003c86:	f7ff fe7b 	bl	8003980 <HAL_UART_ErrorCallback>
 8003c8a:	e77c      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
        HAL_UART_ErrorCallback(huart);
 8003c8c:	0020      	movs	r0, r4
 8003c8e:	f7ff fe77 	bl	8003980 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c92:	2384      	movs	r3, #132	; 0x84
 8003c94:	2200      	movs	r2, #0
 8003c96:	50e2      	str	r2, [r4, r3]
    return;
 8003c98:	e775      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c9a:	06d9      	lsls	r1, r3, #27
 8003c9c:	d400      	bmi.n	8003ca0 <HAL_UART_IRQHandler+0x168>
 8003c9e:	e768      	b.n	8003b72 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ca0:	06c1      	lsls	r1, r0, #27
 8003ca2:	d400      	bmi.n	8003ca6 <HAL_UART_IRQHandler+0x16e>
 8003ca4:	e765      	b.n	8003b72 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ca6:	2310      	movs	r3, #16
 8003ca8:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	065b      	lsls	r3, r3, #25
 8003cb0:	d55f      	bpl.n	8003d72 <HAL_UART_IRQHandler+0x23a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003cb4:	6813      	ldr	r3, [r2, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04a      	beq.n	8003d54 <HAL_UART_IRQHandler+0x21c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cbe:	2158      	movs	r1, #88	; 0x58
 8003cc0:	5a61      	ldrh	r1, [r4, r1]
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	d946      	bls.n	8003d54 <HAL_UART_IRQHandler+0x21c>
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc6:	215a      	movs	r1, #90	; 0x5a
 8003cc8:	5263      	strh	r3, [r4, r1]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cca:	6993      	ldr	r3, [r2, #24]
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d10b      	bne.n	8003ce8 <HAL_UART_IRQHandler+0x1b0>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cd4:	3356      	adds	r3, #86	; 0x56
 8003cd6:	5ae1      	ldrh	r1, [r4, r3]
 8003cd8:	3302      	adds	r3, #2
 8003cda:	5ae3      	ldrh	r3, [r4, r3]
 8003cdc:	1ac9      	subs	r1, r1, r3
 8003cde:	b289      	uxth	r1, r1
 8003ce0:	0020      	movs	r0, r4
 8003ce2:	f7ff ff27 	bl	8003b34 <HAL_UARTEx_RxEventCallback>
 8003ce6:	e74e      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cec:	2301      	movs	r3, #1
 8003cee:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf2:	6821      	ldr	r1, [r4, #0]
 8003cf4:	680a      	ldr	r2, [r1, #0]
 8003cf6:	4d45      	ldr	r5, [pc, #276]	; (8003e0c <HAL_UART_IRQHandler+0x2d4>)
 8003cf8:	402a      	ands	r2, r5
 8003cfa:	600a      	str	r2, [r1, #0]
 8003cfc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d00:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d04:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d08:	6821      	ldr	r1, [r4, #0]
 8003d0a:	688a      	ldr	r2, [r1, #8]
 8003d0c:	439a      	bics	r2, r3
 8003d0e:	608a      	str	r2, [r1, #8]
 8003d10:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d14:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d18:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1c:	6821      	ldr	r1, [r4, #0]
 8003d1e:	688a      	ldr	r2, [r1, #8]
 8003d20:	3542      	adds	r5, #66	; 0x42
 8003d22:	35ff      	adds	r5, #255	; 0xff
 8003d24:	43aa      	bics	r2, r5
 8003d26:	608a      	str	r2, [r1, #8]
 8003d28:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	2280      	movs	r2, #128	; 0x80
 8003d2e:	2120      	movs	r1, #32
 8003d30:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d32:	2200      	movs	r2, #0
 8003d34:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d36:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	6813      	ldr	r3, [r2, #0]
 8003d42:	2010      	movs	r0, #16
 8003d44:	4383      	bics	r3, r0
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d4c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003d4e:	f7fe fe48 	bl	80029e2 <HAL_DMA_Abort>
 8003d52:	e7bd      	b.n	8003cd0 <HAL_UART_IRQHandler+0x198>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003d54:	2158      	movs	r1, #88	; 0x58
 8003d56:	5a61      	ldrh	r1, [r4, r1]
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	d000      	beq.n	8003d5e <HAL_UART_IRQHandler+0x226>
 8003d5c:	e713      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003d5e:	6993      	ldr	r3, [r2, #24]
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d000      	beq.n	8003d66 <HAL_UART_IRQHandler+0x22e>
 8003d64:	e70f      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d66:	3b1e      	subs	r3, #30
 8003d68:	6663      	str	r3, [r4, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d6a:	0020      	movs	r0, r4
 8003d6c:	f7ff fee2 	bl	8003b34 <HAL_UARTEx_RxEventCallback>
      return;
 8003d70:	e709      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d72:	2358      	movs	r3, #88	; 0x58
 8003d74:	5ae1      	ldrh	r1, [r4, r3]
 8003d76:	3302      	adds	r3, #2
 8003d78:	5ae2      	ldrh	r2, [r4, r3]
 8003d7a:	1a89      	subs	r1, r1, r2
 8003d7c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003d7e:	5ae3      	ldrh	r3, [r4, r3]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d100      	bne.n	8003d88 <HAL_UART_IRQHandler+0x250>
 8003d86:	e6fe      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
          && (nb_rx_data > 0U))
 8003d88:	2900      	cmp	r1, #0
 8003d8a:	d100      	bne.n	8003d8e <HAL_UART_IRQHandler+0x256>
 8003d8c:	e6fb      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d8e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d92:	2301      	movs	r3, #1
 8003d94:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	6802      	ldr	r2, [r0, #0]
 8003d9c:	4e1c      	ldr	r6, [pc, #112]	; (8003e10 <HAL_UART_IRQHandler+0x2d8>)
 8003d9e:	4032      	ands	r2, r6
 8003da0:	6002      	str	r2, [r0, #0]
 8003da2:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dae:	6820      	ldr	r0, [r4, #0]
 8003db0:	6882      	ldr	r2, [r0, #8]
 8003db2:	439a      	bics	r2, r3
 8003db4:	6082      	str	r2, [r0, #8]
 8003db6:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8003dba:	2280      	movs	r2, #128	; 0x80
 8003dbc:	2020      	movs	r0, #32
 8003dbe:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8003dc4:	66a2      	str	r2, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dca:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dce:	6822      	ldr	r2, [r4, #0]
 8003dd0:	6813      	ldr	r3, [r2, #0]
 8003dd2:	2510      	movs	r5, #16
 8003dd4:	43ab      	bics	r3, r5
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003de0:	0020      	movs	r0, r4
 8003de2:	f7ff fea7 	bl	8003b34 <HAL_UARTEx_RxEventCallback>
      return;
 8003de6:	e6ce      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
    if (huart->TxISR != NULL)
 8003de8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d100      	bne.n	8003df0 <HAL_UART_IRQHandler+0x2b8>
 8003dee:	e6ca      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
      huart->TxISR(huart);
 8003df0:	0020      	movs	r0, r4
 8003df2:	4798      	blx	r3
    return;
 8003df4:	e6c7      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
    UART_EndTransmit_IT(huart);
 8003df6:	0020      	movs	r0, r4
 8003df8:	f7ff fdae 	bl	8003958 <UART_EndTransmit_IT>
    return;
 8003dfc:	e6c3      	b.n	8003b86 <HAL_UART_IRQHandler+0x4e>
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	0000080f 	.word	0x0000080f
 8003e04:	04000120 	.word	0x04000120
 8003e08:	08003983 	.word	0x08003983
 8003e0c:	fffffeff 	.word	0xfffffeff
 8003e10:	fffffedf 	.word	0xfffffedf

08003e14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e14:	b570      	push	{r4, r5, r6, lr}
  uint16_t uhMask = huart->Mask;
 8003e16:	235c      	movs	r3, #92	; 0x5c
 8003e18:	5ac3      	ldrh	r3, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	5882      	ldr	r2, [r0, r2]
 8003e1e:	2a22      	cmp	r2, #34	; 0x22
 8003e20:	d005      	beq.n	8003e2e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e22:	6802      	ldr	r2, [r0, #0]
 8003e24:	6993      	ldr	r3, [r2, #24]
 8003e26:	2108      	movs	r1, #8
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6193      	str	r3, [r2, #24]
  }
}
 8003e2c:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e2e:	6802      	ldr	r2, [r0, #0]
 8003e30:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4013      	ands	r3, r2
 8003e36:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003e38:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8003e3a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8003e40:	225a      	movs	r2, #90	; 0x5a
 8003e42:	5a83      	ldrh	r3, [r0, r2]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8003e4a:	5a83      	ldrh	r3, [r0, r2]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ec      	bne.n	8003e2c <UART_RxISR_8BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e52:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	3a59      	subs	r2, #89	; 0x59
 8003e58:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5c:	6801      	ldr	r1, [r0, #0]
 8003e5e:	680b      	ldr	r3, [r1, #0]
 8003e60:	4d21      	ldr	r5, [pc, #132]	; (8003ee8 <UART_RxISR_8BIT+0xd4>)
 8003e62:	402b      	ands	r3, r5
 8003e64:	600b      	str	r3, [r1, #0]
 8003e66:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e6a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e72:	6801      	ldr	r1, [r0, #0]
 8003e74:	688b      	ldr	r3, [r1, #8]
 8003e76:	4393      	bics	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
 8003e7a:	f384 8810 	msr	PRIMASK, r4
      huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	321f      	adds	r2, #31
 8003e82:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	6683      	str	r3, [r0, #104]	; 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e88:	6643      	str	r3, [r0, #100]	; 0x64
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e8a:	6803      	ldr	r3, [r0, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	d50b      	bpl.n	8003eaa <UART_RxISR_8BIT+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e92:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e96:	2301      	movs	r3, #1
 8003e98:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e9c:	6802      	ldr	r2, [r0, #0]
 8003e9e:	6813      	ldr	r3, [r2, #0]
 8003ea0:	4c12      	ldr	r4, [pc, #72]	; (8003eec <UART_RxISR_8BIT+0xd8>)
 8003ea2:	4023      	ands	r3, r4
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eaa:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d117      	bne.n	8003ee0 <UART_RxISR_8BIT+0xcc>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	6603      	str	r3, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ebe:	6801      	ldr	r1, [r0, #0]
 8003ec0:	680b      	ldr	r3, [r1, #0]
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
 8003ec8:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ecc:	6803      	ldr	r3, [r0, #0]
 8003ece:	69d9      	ldr	r1, [r3, #28]
 8003ed0:	420a      	tst	r2, r1
 8003ed2:	d000      	beq.n	8003ed6 <UART_RxISR_8BIT+0xc2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ed4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ed6:	2358      	movs	r3, #88	; 0x58
 8003ed8:	5ac1      	ldrh	r1, [r0, r3]
 8003eda:	f7ff fe2b 	bl	8003b34 <HAL_UARTEx_RxEventCallback>
 8003ede:	e7a5      	b.n	8003e2c <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8003ee0:	f002 fc44 	bl	800676c <HAL_UART_RxCpltCallback>
 8003ee4:	e7a2      	b.n	8003e2c <UART_RxISR_8BIT+0x18>
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	fffffedf 	.word	0xfffffedf
 8003eec:	fbffffff 	.word	0xfbffffff

08003ef0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ef0:	b570      	push	{r4, r5, r6, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ef2:	235c      	movs	r3, #92	; 0x5c
 8003ef4:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ef6:	3324      	adds	r3, #36	; 0x24
 8003ef8:	58c3      	ldr	r3, [r0, r3]
 8003efa:	2b22      	cmp	r3, #34	; 0x22
 8003efc:	d005      	beq.n	8003f0a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003efe:	6802      	ldr	r2, [r0, #0]
 8003f00:	6993      	ldr	r3, [r2, #24]
 8003f02:	2108      	movs	r1, #8
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6193      	str	r3, [r2, #24]
  }
}
 8003f08:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f0a:	6803      	ldr	r3, [r0, #0]
 8003f0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f0e:	4013      	ands	r3, r2
 8003f10:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003f12:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8003f14:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003f16:	3302      	adds	r3, #2
 8003f18:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8003f1a:	225a      	movs	r2, #90	; 0x5a
 8003f1c:	5a83      	ldrh	r3, [r0, r2]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8003f24:	5a83      	ldrh	r3, [r0, r2]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ed      	bne.n	8003f08 <UART_RxISR_16BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f30:	3a59      	subs	r2, #89	; 0x59
 8003f32:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f36:	6801      	ldr	r1, [r0, #0]
 8003f38:	680b      	ldr	r3, [r1, #0]
 8003f3a:	4d21      	ldr	r5, [pc, #132]	; (8003fc0 <UART_RxISR_16BIT+0xd0>)
 8003f3c:	402b      	ands	r3, r5
 8003f3e:	600b      	str	r3, [r1, #0]
 8003f40:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f44:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f48:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4c:	6801      	ldr	r1, [r0, #0]
 8003f4e:	688b      	ldr	r3, [r1, #8]
 8003f50:	4393      	bics	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]
 8003f54:	f384 8810 	msr	PRIMASK, r4
      huart->RxState = HAL_UART_STATE_READY;
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	321f      	adds	r2, #31
 8003f5c:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	6683      	str	r3, [r0, #104]	; 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f62:	6643      	str	r3, [r0, #100]	; 0x64
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f64:	6803      	ldr	r3, [r0, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	d50b      	bpl.n	8003f84 <UART_RxISR_16BIT+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f70:	2301      	movs	r3, #1
 8003f72:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f76:	6802      	ldr	r2, [r0, #0]
 8003f78:	6813      	ldr	r3, [r2, #0]
 8003f7a:	4c12      	ldr	r4, [pc, #72]	; (8003fc4 <UART_RxISR_16BIT+0xd4>)
 8003f7c:	4023      	ands	r3, r4
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f84:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d117      	bne.n	8003fba <UART_RxISR_16BIT+0xca>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	6603      	str	r3, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f92:	3301      	adds	r3, #1
 8003f94:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f98:	6801      	ldr	r1, [r0, #0]
 8003f9a:	680b      	ldr	r3, [r1, #0]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	4393      	bics	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
 8003fa2:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fa6:	6803      	ldr	r3, [r0, #0]
 8003fa8:	69d9      	ldr	r1, [r3, #28]
 8003faa:	420a      	tst	r2, r1
 8003fac:	d000      	beq.n	8003fb0 <UART_RxISR_16BIT+0xc0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fae:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fb0:	2358      	movs	r3, #88	; 0x58
 8003fb2:	5ac1      	ldrh	r1, [r0, r3]
 8003fb4:	f7ff fdbe 	bl	8003b34 <HAL_UARTEx_RxEventCallback>
 8003fb8:	e7a6      	b.n	8003f08 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8003fba:	f002 fbd7 	bl	800676c <HAL_UART_RxCpltCallback>
 8003fbe:	e7a3      	b.n	8003f08 <UART_RxISR_16BIT+0x18>
 8003fc0:	fffffedf 	.word	0xfffffedf
 8003fc4:	fbffffff 	.word	0xfbffffff

08003fc8 <UART_SetConfig>:
{
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fcc:	6883      	ldr	r3, [r0, #8]
 8003fce:	6902      	ldr	r2, [r0, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	6942      	ldr	r2, [r0, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	69c2      	ldr	r2, [r0, #28]
 8003fd8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fda:	6801      	ldr	r1, [r0, #0]
 8003fdc:	680a      	ldr	r2, [r1, #0]
 8003fde:	484f      	ldr	r0, [pc, #316]	; (800411c <UART_SetConfig+0x154>)
 8003fe0:	4002      	ands	r2, r0
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe6:	6822      	ldr	r2, [r4, #0]
 8003fe8:	6853      	ldr	r3, [r2, #4]
 8003fea:	494d      	ldr	r1, [pc, #308]	; (8004120 <UART_SetConfig+0x158>)
 8003fec:	400b      	ands	r3, r1
 8003fee:	68e1      	ldr	r1, [r4, #12]
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8003ff4:	6a22      	ldr	r2, [r4, #32]
 8003ff6:	69a3      	ldr	r3, [r4, #24]
 8003ff8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ffa:	6821      	ldr	r1, [r4, #0]
 8003ffc:	688b      	ldr	r3, [r1, #8]
 8003ffe:	4849      	ldr	r0, [pc, #292]	; (8004124 <UART_SetConfig+0x15c>)
 8004000:	4003      	ands	r3, r0
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	4a47      	ldr	r2, [pc, #284]	; (8004128 <UART_SetConfig+0x160>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d022      	beq.n	8004054 <UART_SetConfig+0x8c>
 800400e:	4a47      	ldr	r2, [pc, #284]	; (800412c <UART_SetConfig+0x164>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d030      	beq.n	8004076 <UART_SetConfig+0xae>
 8004014:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004016:	69e0      	ldr	r0, [r4, #28]
 8004018:	2280      	movs	r2, #128	; 0x80
 800401a:	0212      	lsls	r2, r2, #8
 800401c:	4290      	cmp	r0, r2
 800401e:	d034      	beq.n	800408a <UART_SetConfig+0xc2>
    switch (clocksource)
 8004020:	2b04      	cmp	r3, #4
 8004022:	d100      	bne.n	8004026 <UART_SetConfig+0x5e>
 8004024:	e072      	b.n	800410c <UART_SetConfig+0x144>
 8004026:	d860      	bhi.n	80040ea <UART_SetConfig+0x122>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d068      	beq.n	80040fe <UART_SetConfig+0x136>
 800402c:	2b02      	cmp	r3, #2
 800402e:	d15a      	bne.n	80040e6 <UART_SetConfig+0x11e>
 8004030:	483f      	ldr	r0, [pc, #252]	; (8004130 <UART_SetConfig+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004032:	6863      	ldr	r3, [r4, #4]
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	1818      	adds	r0, r3, r0
 8004038:	6861      	ldr	r1, [r4, #4]
 800403a:	f7fc f86f 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800403e:	0002      	movs	r2, r0
 8004040:	3a10      	subs	r2, #16
 8004042:	4b3c      	ldr	r3, [pc, #240]	; (8004134 <UART_SetConfig+0x16c>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d866      	bhi.n	8004116 <UART_SetConfig+0x14e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	0400      	lsls	r0, r0, #16
 800404c:	0c00      	lsrs	r0, r0, #16
 800404e:	60d8      	str	r0, [r3, #12]
 8004050:	2000      	movs	r0, #0
 8004052:	e050      	b.n	80040f6 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004054:	4b38      	ldr	r3, [pc, #224]	; (8004138 <UART_SetConfig+0x170>)
 8004056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004058:	2303      	movs	r3, #3
 800405a:	4013      	ands	r3, r2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d00c      	beq.n	800407a <UART_SetConfig+0xb2>
 8004060:	d805      	bhi.n	800406e <UART_SetConfig+0xa6>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <UART_SetConfig+0xb6>
 8004066:	2b01      	cmp	r3, #1
 8004068:	d10b      	bne.n	8004082 <UART_SetConfig+0xba>
 800406a:	3303      	adds	r3, #3
 800406c:	e7d3      	b.n	8004016 <UART_SetConfig+0x4e>
 800406e:	2b03      	cmp	r3, #3
 8004070:	d109      	bne.n	8004086 <UART_SetConfig+0xbe>
 8004072:	3b01      	subs	r3, #1
 8004074:	e7cf      	b.n	8004016 <UART_SetConfig+0x4e>
 8004076:	2300      	movs	r3, #0
 8004078:	e7cd      	b.n	8004016 <UART_SetConfig+0x4e>
 800407a:	2308      	movs	r3, #8
 800407c:	e7cb      	b.n	8004016 <UART_SetConfig+0x4e>
 800407e:	2300      	movs	r3, #0
 8004080:	e7c9      	b.n	8004016 <UART_SetConfig+0x4e>
 8004082:	2310      	movs	r3, #16
 8004084:	e7c7      	b.n	8004016 <UART_SetConfig+0x4e>
 8004086:	2310      	movs	r3, #16
 8004088:	e7c5      	b.n	8004016 <UART_SetConfig+0x4e>
    switch (clocksource)
 800408a:	2b04      	cmp	r3, #4
 800408c:	d028      	beq.n	80040e0 <UART_SetConfig+0x118>
 800408e:	d81d      	bhi.n	80040cc <UART_SetConfig+0x104>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01f      	beq.n	80040d4 <UART_SetConfig+0x10c>
 8004094:	2b02      	cmp	r3, #2
 8004096:	d117      	bne.n	80040c8 <UART_SetConfig+0x100>
        pclk = (uint32_t) HSI_VALUE;
 8004098:	4825      	ldr	r0, [pc, #148]	; (8004130 <UART_SetConfig+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800409a:	0040      	lsls	r0, r0, #1
 800409c:	6863      	ldr	r3, [r4, #4]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	18c0      	adds	r0, r0, r3
 80040a2:	6861      	ldr	r1, [r4, #4]
 80040a4:	f7fc f83a 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a8:	0002      	movs	r2, r0
 80040aa:	3a10      	subs	r2, #16
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <UART_SetConfig+0x16c>)
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d82f      	bhi.n	8004112 <UART_SetConfig+0x14a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b2:	b282      	uxth	r2, r0
 80040b4:	230f      	movs	r3, #15
 80040b6:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040b8:	0840      	lsrs	r0, r0, #1
 80040ba:	3b08      	subs	r3, #8
 80040bc:	4018      	ands	r0, r3
 80040be:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	60d8      	str	r0, [r3, #12]
 80040c4:	2000      	movs	r0, #0
 80040c6:	e016      	b.n	80040f6 <UART_SetConfig+0x12e>
    switch (clocksource)
 80040c8:	2001      	movs	r0, #1
 80040ca:	e014      	b.n	80040f6 <UART_SetConfig+0x12e>
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d0e4      	beq.n	800409a <UART_SetConfig+0xd2>
 80040d0:	2001      	movs	r0, #1
 80040d2:	e010      	b.n	80040f6 <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7ff f8a8 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80040d8:	2800      	cmp	r0, #0
 80040da:	d1de      	bne.n	800409a <UART_SetConfig+0xd2>
 80040dc:	2000      	movs	r0, #0
 80040de:	e00a      	b.n	80040f6 <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetSysClockFreq();
 80040e0:	f7fe ffda 	bl	8003098 <HAL_RCC_GetSysClockFreq>
        break;
 80040e4:	e7f8      	b.n	80040d8 <UART_SetConfig+0x110>
    switch (clocksource)
 80040e6:	2001      	movs	r0, #1
 80040e8:	e005      	b.n	80040f6 <UART_SetConfig+0x12e>
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d102      	bne.n	80040f4 <UART_SetConfig+0x12c>
        pclk = (uint32_t) LSE_VALUE;
 80040ee:	2080      	movs	r0, #128	; 0x80
 80040f0:	0200      	lsls	r0, r0, #8
 80040f2:	e79e      	b.n	8004032 <UART_SetConfig+0x6a>
    switch (clocksource)
 80040f4:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80040fa:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80040fc:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 80040fe:	f7ff f893 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004102:	2800      	cmp	r0, #0
 8004104:	d000      	beq.n	8004108 <UART_SetConfig+0x140>
 8004106:	e794      	b.n	8004032 <UART_SetConfig+0x6a>
 8004108:	2000      	movs	r0, #0
 800410a:	e7f4      	b.n	80040f6 <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetSysClockFreq();
 800410c:	f7fe ffc4 	bl	8003098 <HAL_RCC_GetSysClockFreq>
        break;
 8004110:	e7f7      	b.n	8004102 <UART_SetConfig+0x13a>
        ret = HAL_ERROR;
 8004112:	2001      	movs	r0, #1
 8004114:	e7ef      	b.n	80040f6 <UART_SetConfig+0x12e>
        ret = HAL_ERROR;
 8004116:	2001      	movs	r0, #1
 8004118:	e7ed      	b.n	80040f6 <UART_SetConfig+0x12e>
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	ffff69f3 	.word	0xffff69f3
 8004120:	ffffcfff 	.word	0xffffcfff
 8004124:	fffff4ff 	.word	0xfffff4ff
 8004128:	40013800 	.word	0x40013800
 800412c:	40004400 	.word	0x40004400
 8004130:	007a1200 	.word	0x007a1200
 8004134:	0000ffef 	.word	0x0000ffef
 8004138:	40021000 	.word	0x40021000

0800413c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800413c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800413e:	071b      	lsls	r3, r3, #28
 8004140:	d506      	bpl.n	8004150 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004142:	6802      	ldr	r2, [r0, #0]
 8004144:	6853      	ldr	r3, [r2, #4]
 8004146:	492c      	ldr	r1, [pc, #176]	; (80041f8 <UART_AdvFeatureConfig+0xbc>)
 8004148:	400b      	ands	r3, r1
 800414a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800414c:	430b      	orrs	r3, r1
 800414e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004150:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004152:	07db      	lsls	r3, r3, #31
 8004154:	d506      	bpl.n	8004164 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004156:	6802      	ldr	r2, [r0, #0]
 8004158:	6853      	ldr	r3, [r2, #4]
 800415a:	4928      	ldr	r1, [pc, #160]	; (80041fc <UART_AdvFeatureConfig+0xc0>)
 800415c:	400b      	ands	r3, r1
 800415e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004160:	430b      	orrs	r3, r1
 8004162:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004164:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004166:	079b      	lsls	r3, r3, #30
 8004168:	d506      	bpl.n	8004178 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800416a:	6802      	ldr	r2, [r0, #0]
 800416c:	6853      	ldr	r3, [r2, #4]
 800416e:	4924      	ldr	r1, [pc, #144]	; (8004200 <UART_AdvFeatureConfig+0xc4>)
 8004170:	400b      	ands	r3, r1
 8004172:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004174:	430b      	orrs	r3, r1
 8004176:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004178:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800417a:	075b      	lsls	r3, r3, #29
 800417c:	d506      	bpl.n	800418c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800417e:	6802      	ldr	r2, [r0, #0]
 8004180:	6853      	ldr	r3, [r2, #4]
 8004182:	4920      	ldr	r1, [pc, #128]	; (8004204 <UART_AdvFeatureConfig+0xc8>)
 8004184:	400b      	ands	r3, r1
 8004186:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004188:	430b      	orrs	r3, r1
 800418a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800418c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800418e:	06db      	lsls	r3, r3, #27
 8004190:	d506      	bpl.n	80041a0 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004192:	6802      	ldr	r2, [r0, #0]
 8004194:	6893      	ldr	r3, [r2, #8]
 8004196:	491c      	ldr	r1, [pc, #112]	; (8004208 <UART_AdvFeatureConfig+0xcc>)
 8004198:	400b      	ands	r3, r1
 800419a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800419c:	430b      	orrs	r3, r1
 800419e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041a2:	069b      	lsls	r3, r3, #26
 80041a4:	d506      	bpl.n	80041b4 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a6:	6802      	ldr	r2, [r0, #0]
 80041a8:	6893      	ldr	r3, [r2, #8]
 80041aa:	4918      	ldr	r1, [pc, #96]	; (800420c <UART_AdvFeatureConfig+0xd0>)
 80041ac:	400b      	ands	r3, r1
 80041ae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041b6:	065b      	lsls	r3, r3, #25
 80041b8:	d50b      	bpl.n	80041d2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041ba:	6802      	ldr	r2, [r0, #0]
 80041bc:	6853      	ldr	r3, [r2, #4]
 80041be:	4914      	ldr	r1, [pc, #80]	; (8004210 <UART_AdvFeatureConfig+0xd4>)
 80041c0:	400b      	ands	r3, r1
 80041c2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	035b      	lsls	r3, r3, #13
 80041cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041d4:	061b      	lsls	r3, r3, #24
 80041d6:	d506      	bpl.n	80041e6 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041d8:	6802      	ldr	r2, [r0, #0]
 80041da:	6853      	ldr	r3, [r2, #4]
 80041dc:	490d      	ldr	r1, [pc, #52]	; (8004214 <UART_AdvFeatureConfig+0xd8>)
 80041de:	400b      	ands	r3, r1
 80041e0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6053      	str	r3, [r2, #4]
}
 80041e6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e8:	6802      	ldr	r2, [r0, #0]
 80041ea:	6853      	ldr	r3, [r2, #4]
 80041ec:	490a      	ldr	r1, [pc, #40]	; (8004218 <UART_AdvFeatureConfig+0xdc>)
 80041ee:	400b      	ands	r3, r1
 80041f0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80041f2:	430b      	orrs	r3, r1
 80041f4:	6053      	str	r3, [r2, #4]
 80041f6:	e7ec      	b.n	80041d2 <UART_AdvFeatureConfig+0x96>
 80041f8:	ffff7fff 	.word	0xffff7fff
 80041fc:	fffdffff 	.word	0xfffdffff
 8004200:	fffeffff 	.word	0xfffeffff
 8004204:	fffbffff 	.word	0xfffbffff
 8004208:	ffffefff 	.word	0xffffefff
 800420c:	ffffdfff 	.word	0xffffdfff
 8004210:	ffefffff 	.word	0xffefffff
 8004214:	fff7ffff 	.word	0xfff7ffff
 8004218:	ff9fffff 	.word	0xff9fffff

0800421c <UART_WaitOnFlagUntilTimeout>:
{
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421e:	46ce      	mov	lr, r9
 8004220:	4647      	mov	r7, r8
 8004222:	b580      	push	{r7, lr}
 8004224:	0006      	movs	r6, r0
 8004226:	000d      	movs	r5, r1
 8004228:	0017      	movs	r7, r2
 800422a:	4699      	mov	r9, r3
 800422c:	9b08      	ldr	r3, [sp, #32]
 800422e:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004230:	6833      	ldr	r3, [r6, #0]
 8004232:	69dc      	ldr	r4, [r3, #28]
 8004234:	402c      	ands	r4, r5
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	4263      	negs	r3, r4
 800423a:	415c      	adcs	r4, r3
 800423c:	42bc      	cmp	r4, r7
 800423e:	d133      	bne.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8004240:	4643      	mov	r3, r8
 8004242:	3301      	adds	r3, #1
 8004244:	d0f4      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004246:	f7fe fb47 	bl	80028d8 <HAL_GetTick>
 800424a:	464b      	mov	r3, r9
 800424c:	1ac0      	subs	r0, r0, r3
 800424e:	4540      	cmp	r0, r8
 8004250:	d82f      	bhi.n	80042b2 <UART_WaitOnFlagUntilTimeout+0x96>
 8004252:	4643      	mov	r3, r8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d02e      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004258:	6833      	ldr	r3, [r6, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	0752      	lsls	r2, r2, #29
 800425e:	d5e7      	bpl.n	8004230 <UART_WaitOnFlagUntilTimeout+0x14>
 8004260:	2d80      	cmp	r5, #128	; 0x80
 8004262:	d0e5      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0x14>
 8004264:	2d40      	cmp	r5, #64	; 0x40
 8004266:	d0e3      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	0712      	lsls	r2, r2, #28
 800426c:	d410      	bmi.n	8004290 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	0512      	lsls	r2, r2, #20
 8004272:	d5dd      	bpl.n	8004230 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004274:	2280      	movs	r2, #128	; 0x80
 8004276:	0112      	lsls	r2, r2, #4
 8004278:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800427a:	0030      	movs	r0, r6
 800427c:	f7ff fa9a 	bl	80037b4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004280:	2384      	movs	r3, #132	; 0x84
 8004282:	2220      	movs	r2, #32
 8004284:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8004286:	3b0c      	subs	r3, #12
 8004288:	2200      	movs	r2, #0
 800428a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 800428c:	2003      	movs	r0, #3
 800428e:	e00c      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004290:	2408      	movs	r4, #8
 8004292:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8004294:	0030      	movs	r0, r6
 8004296:	f7ff fa8d 	bl	80037b4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800429a:	2384      	movs	r3, #132	; 0x84
 800429c:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 800429e:	3b0c      	subs	r3, #12
 80042a0:	2200      	movs	r2, #0
 80042a2:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 80042a4:	2001      	movs	r0, #1
 80042a6:	e000      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 80042a8:	2000      	movs	r0, #0
}
 80042aa:	bcc0      	pop	{r6, r7}
 80042ac:	46b9      	mov	r9, r7
 80042ae:	46b0      	mov	r8, r6
 80042b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80042b2:	2003      	movs	r0, #3
 80042b4:	e7f9      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0x8e>
 80042b6:	2003      	movs	r0, #3
 80042b8:	e7f7      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0x8e>
	...

080042bc <UART_CheckIdleState>:
{
 80042bc:	b530      	push	{r4, r5, lr}
 80042be:	b083      	sub	sp, #12
 80042c0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c2:	2384      	movs	r3, #132	; 0x84
 80042c4:	2200      	movs	r2, #0
 80042c6:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80042c8:	f7fe fb06 	bl	80028d8 <HAL_GetTick>
 80042cc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	071b      	lsls	r3, r3, #28
 80042d4:	d40f      	bmi.n	80042f6 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	075b      	lsls	r3, r3, #29
 80042dc:	d429      	bmi.n	8004332 <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 80042de:	2320      	movs	r3, #32
 80042e0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	2300      	movs	r3, #0
 80042e8:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ea:	6663      	str	r3, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80042ec:	3a08      	subs	r2, #8
 80042ee:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80042f0:	2000      	movs	r0, #0
}
 80042f2:	b003      	add	sp, #12
 80042f4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f6:	2180      	movs	r1, #128	; 0x80
 80042f8:	4b22      	ldr	r3, [pc, #136]	; (8004384 <UART_CheckIdleState+0xc8>)
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	0003      	movs	r3, r0
 80042fe:	2200      	movs	r2, #0
 8004300:	0389      	lsls	r1, r1, #14
 8004302:	0020      	movs	r0, r4
 8004304:	f7ff ff8a 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8004308:	2800      	cmp	r0, #0
 800430a:	d0e4      	beq.n	80042d6 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004310:	2301      	movs	r3, #1
 8004312:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	6813      	ldr	r3, [r2, #0]
 800431a:	2080      	movs	r0, #128	; 0x80
 800431c:	4383      	bics	r3, r0
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004324:	2320      	movs	r3, #32
 8004326:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8004328:	3358      	adds	r3, #88	; 0x58
 800432a:	2200      	movs	r2, #0
 800432c:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 800432e:	387d      	subs	r0, #125	; 0x7d
 8004330:	e7df      	b.n	80042f2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004332:	2180      	movs	r1, #128	; 0x80
 8004334:	4b13      	ldr	r3, [pc, #76]	; (8004384 <UART_CheckIdleState+0xc8>)
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	002b      	movs	r3, r5
 800433a:	2200      	movs	r2, #0
 800433c:	03c9      	lsls	r1, r1, #15
 800433e:	0020      	movs	r0, r4
 8004340:	f7ff ff6c 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8004344:	2800      	cmp	r0, #0
 8004346:	d0ca      	beq.n	80042de <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004348:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434c:	2201      	movs	r2, #1
 800434e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004352:	6821      	ldr	r1, [r4, #0]
 8004354:	680b      	ldr	r3, [r1, #0]
 8004356:	4d0c      	ldr	r5, [pc, #48]	; (8004388 <UART_CheckIdleState+0xcc>)
 8004358:	402b      	ands	r3, r5
 800435a:	600b      	str	r3, [r1, #0]
 800435c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004360:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004368:	6821      	ldr	r1, [r4, #0]
 800436a:	688b      	ldr	r3, [r1, #8]
 800436c:	4393      	bics	r3, r2
 800436e:	608b      	str	r3, [r1, #8]
 8004370:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	321f      	adds	r2, #31
 8004378:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 800437a:	3b08      	subs	r3, #8
 800437c:	2200      	movs	r2, #0
 800437e:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004380:	2003      	movs	r0, #3
 8004382:	e7b6      	b.n	80042f2 <UART_CheckIdleState+0x36>
 8004384:	01ffffff 	.word	0x01ffffff
 8004388:	fffffedf 	.word	0xfffffedf

0800438c <HAL_UART_Init>:
{
 800438c:	b510      	push	{r4, lr}
 800438e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004390:	d02e      	beq.n	80043f0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004392:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d021      	beq.n	80043dc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	2324      	movs	r3, #36	; 0x24
 800439a:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800439c:	6822      	ldr	r2, [r4, #0]
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	2101      	movs	r1, #1
 80043a2:	438b      	bics	r3, r1
 80043a4:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d11d      	bne.n	80043e8 <HAL_UART_Init+0x5c>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ac:	0020      	movs	r0, r4
 80043ae:	f7ff fe0b 	bl	8003fc8 <UART_SetConfig>
 80043b2:	2801      	cmp	r0, #1
 80043b4:	d011      	beq.n	80043da <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	6853      	ldr	r3, [r2, #4]
 80043ba:	490e      	ldr	r1, [pc, #56]	; (80043f4 <HAL_UART_Init+0x68>)
 80043bc:	400b      	ands	r3, r1
 80043be:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	6893      	ldr	r3, [r2, #8]
 80043c4:	2108      	movs	r1, #8
 80043c6:	438b      	bics	r3, r1
 80043c8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	3907      	subs	r1, #7
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80043d4:	0020      	movs	r0, r4
 80043d6:	f7ff ff71 	bl	80042bc <UART_CheckIdleState>
}
 80043da:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80043dc:	3378      	adds	r3, #120	; 0x78
 80043de:	2200      	movs	r2, #0
 80043e0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80043e2:	f001 fd07 	bl	8005df4 <HAL_UART_MspInit>
 80043e6:	e7d7      	b.n	8004398 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80043e8:	0020      	movs	r0, r4
 80043ea:	f7ff fea7 	bl	800413c <UART_AdvFeatureConfig>
 80043ee:	e7dd      	b.n	80043ac <HAL_UART_Init+0x20>
    return HAL_ERROR;
 80043f0:	2001      	movs	r0, #1
 80043f2:	e7f2      	b.n	80043da <HAL_UART_Init+0x4e>
 80043f4:	fffff7ff 	.word	0xfffff7ff

080043f8 <UART_Start_Receive_IT>:
{
 80043f8:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 80043fa:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 80043fc:	2358      	movs	r3, #88	; 0x58
 80043fe:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 8004400:	3302      	adds	r3, #2
 8004402:	52c2      	strh	r2, [r0, r3]
  huart->RxISR       = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8004408:	6883      	ldr	r3, [r0, #8]
 800440a:	2280      	movs	r2, #128	; 0x80
 800440c:	0152      	lsls	r2, r2, #5
 800440e:	4293      	cmp	r3, r2
 8004410:	d008      	beq.n	8004424 <UART_Start_Receive_IT+0x2c>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d115      	bne.n	8004442 <UART_Start_Receive_IT+0x4a>
 8004416:	6903      	ldr	r3, [r0, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10e      	bne.n	800443a <UART_Start_Receive_IT+0x42>
 800441c:	335c      	adds	r3, #92	; 0x5c
 800441e:	22ff      	movs	r2, #255	; 0xff
 8004420:	52c2      	strh	r2, [r0, r3]
 8004422:	e011      	b.n	8004448 <UART_Start_Receive_IT+0x50>
 8004424:	6903      	ldr	r3, [r0, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <UART_Start_Receive_IT+0x3a>
 800442a:	335c      	adds	r3, #92	; 0x5c
 800442c:	4a25      	ldr	r2, [pc, #148]	; (80044c4 <UART_Start_Receive_IT+0xcc>)
 800442e:	52c2      	strh	r2, [r0, r3]
 8004430:	e00a      	b.n	8004448 <UART_Start_Receive_IT+0x50>
 8004432:	235c      	movs	r3, #92	; 0x5c
 8004434:	22ff      	movs	r2, #255	; 0xff
 8004436:	52c2      	strh	r2, [r0, r3]
 8004438:	e006      	b.n	8004448 <UART_Start_Receive_IT+0x50>
 800443a:	235c      	movs	r3, #92	; 0x5c
 800443c:	227f      	movs	r2, #127	; 0x7f
 800443e:	52c2      	strh	r2, [r0, r3]
 8004440:	e002      	b.n	8004448 <UART_Start_Receive_IT+0x50>
 8004442:	235c      	movs	r3, #92	; 0x5c
 8004444:	2200      	movs	r2, #0
 8004446:	52c2      	strh	r2, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	2384      	movs	r3, #132	; 0x84
 800444a:	2200      	movs	r2, #0
 800444c:	50c2      	str	r2, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800444e:	3b04      	subs	r3, #4
 8004450:	3222      	adds	r2, #34	; 0x22
 8004452:	50c2      	str	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004454:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004458:	2101      	movs	r1, #1
 800445a:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	6802      	ldr	r2, [r0, #0]
 8004460:	6893      	ldr	r3, [r2, #8]
 8004462:	430b      	orrs	r3, r1
 8004464:	6093      	str	r3, [r2, #8]
 8004466:	f384 8810 	msr	PRIMASK, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	015b      	lsls	r3, r3, #5
 800446e:	6882      	ldr	r2, [r0, #8]
 8004470:	429a      	cmp	r2, r3
 8004472:	d013      	beq.n	800449c <UART_Start_Receive_IT+0xa4>
    huart->RxISR = UART_RxISR_8BIT;
 8004474:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <UART_Start_Receive_IT+0xd0>)
 8004476:	6683      	str	r3, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004478:	6903      	ldr	r3, [r0, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d014      	beq.n	80044a8 <UART_Start_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004482:	2301      	movs	r3, #1
 8004484:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004488:	6802      	ldr	r2, [r0, #0]
 800448a:	6810      	ldr	r0, [r2, #0]
 800448c:	3320      	adds	r3, #32
 800448e:	33ff      	adds	r3, #255	; 0xff
 8004490:	4303      	orrs	r3, r0
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	f381 8810 	msr	PRIMASK, r1
}
 8004498:	2000      	movs	r0, #0
 800449a:	bd10      	pop	{r4, pc}
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800449c:	6903      	ldr	r3, [r0, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e8      	bne.n	8004474 <UART_Start_Receive_IT+0x7c>
    huart->RxISR = UART_RxISR_16BIT;
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <UART_Start_Receive_IT+0xd4>)
 80044a4:	6683      	str	r3, [r0, #104]	; 0x68
 80044a6:	e7e7      	b.n	8004478 <UART_Start_Receive_IT+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ac:	2301      	movs	r3, #1
 80044ae:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80044b2:	6802      	ldr	r2, [r0, #0]
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	2020      	movs	r0, #32
 80044b8:	4303      	orrs	r3, r0
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	f381 8810 	msr	PRIMASK, r1
}
 80044c0:	e7ea      	b.n	8004498 <UART_Start_Receive_IT+0xa0>
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	000001ff 	.word	0x000001ff
 80044c8:	08003e15 	.word	0x08003e15
 80044cc:	08003ef1 	.word	0x08003ef1

080044d0 <HAL_UART_Receive_IT>:
{
 80044d0:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	58c3      	ldr	r3, [r0, r3]
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d123      	bne.n	8004522 <HAL_UART_Receive_IT+0x52>
    if ((pData == NULL) || (Size == 0U))
 80044da:	2900      	cmp	r1, #0
 80044dc:	d023      	beq.n	8004526 <HAL_UART_Receive_IT+0x56>
 80044de:	2a00      	cmp	r2, #0
 80044e0:	d023      	beq.n	800452a <HAL_UART_Receive_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e2:	2380      	movs	r3, #128	; 0x80
 80044e4:	015b      	lsls	r3, r3, #5
 80044e6:	6884      	ldr	r4, [r0, #8]
 80044e8:	429c      	cmp	r4, r3
 80044ea:	d104      	bne.n	80044f6 <HAL_UART_Receive_IT+0x26>
 80044ec:	6903      	ldr	r3, [r0, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Receive_IT+0x26>
      if ((((uint32_t)pData) & 1U) != 0U)
 80044f2:	07cb      	lsls	r3, r1, #31
 80044f4:	d41b      	bmi.n	800452e <HAL_UART_Receive_IT+0x5e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	2300      	movs	r3, #0
 80044f8:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044fa:	6803      	ldr	r3, [r0, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	d50c      	bpl.n	800451c <HAL_UART_Receive_IT+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004502:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004506:	2301      	movs	r3, #1
 8004508:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800450c:	6804      	ldr	r4, [r0, #0]
 800450e:	6826      	ldr	r6, [r4, #0]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	04db      	lsls	r3, r3, #19
 8004514:	4333      	orrs	r3, r6
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 800451c:	f7ff ff6c 	bl	80043f8 <UART_Start_Receive_IT>
 8004520:	e000      	b.n	8004524 <HAL_UART_Receive_IT+0x54>
    return HAL_BUSY;
 8004522:	2002      	movs	r0, #2
}
 8004524:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004526:	2001      	movs	r0, #1
 8004528:	e7fc      	b.n	8004524 <HAL_UART_Receive_IT+0x54>
 800452a:	2001      	movs	r0, #1
 800452c:	e7fa      	b.n	8004524 <HAL_UART_Receive_IT+0x54>
        return  HAL_ERROR;
 800452e:	2001      	movs	r0, #1
 8004530:	e7f8      	b.n	8004524 <HAL_UART_Receive_IT+0x54>
	...

08004534 <ADC_Init>:
#include <ADC.h>
void ADC_Init()
{
	RCC->APB2ENR |= RCC_APB2ENR_ADCEN;//Тактирование АЦП
 8004534:	4a15      	ldr	r2, [pc, #84]	; (800458c <ADC_Init+0x58>)
 8004536:	6991      	ldr	r1, [r2, #24]
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	430b      	orrs	r3, r1
 800453e:	6193      	str	r3, [r2, #24]

	GPIOA->MODER |= GPIO_MODER_MODER4;//Режим PA4 аналоговый вход
 8004540:	2290      	movs	r2, #144	; 0x90
 8004542:	05d2      	lsls	r2, r2, #23
 8004544:	6811      	ldr	r1, [r2, #0]
 8004546:	23c0      	movs	r3, #192	; 0xc0
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	430b      	orrs	r3, r1
 800454c:	6013      	str	r3, [r2, #0]

	ADC->CCR |= ADC_CCR_VREFEN;
 800454e:	4a10      	ldr	r2, [pc, #64]	; (8004590 <ADC_Init+0x5c>)
 8004550:	6811      	ldr	r1, [r2, #0]
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	03db      	lsls	r3, r3, #15
 8004556:	430b      	orrs	r3, r1
 8004558:	6013      	str	r3, [r2, #0]
    ADC1->CR |= ADC_CR_ADCAL; 				//Запуск калибровки АЦП
 800455a:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <ADC_Init+0x60>)
 800455c:	6891      	ldr	r1, [r2, #8]
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	061b      	lsls	r3, r3, #24
 8004562:	430b      	orrs	r3, r1
 8004564:	6093      	str	r3, [r2, #8]
    while ((ADC1->CR & ADC_CR_ADCAL)); 		//Ожидаем окончания калибровки
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <ADC_Init+0x60>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	dbfb      	blt.n	8004566 <ADC_Init+0x32>
    ADC1->SMPR |= 0b000<<ADC_SMPR_SMP_Pos; //Задаем длительность выборки
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <ADC_Init+0x60>)
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	615a      	str	r2, [r3, #20]
    ADC1->CR |= ADC_CR_ADEN;				//Включаем АЦП
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	2101      	movs	r1, #1
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
//    while (!(ADC1->ISR & ADC_ISR_ADRDY)); 	//ждем пока АЦП включиться
    ADC1->CHSELR = ADC_CHSELR_CHSEL4; 		//Задаем номер канала (выбран ADC4)
 800457c:	2210      	movs	r2, #16
 800457e:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1->CFGR1 &= ~ADC_CFGR1_RES; 			//устанавливаем разрешение 12 бит
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	3117      	adds	r1, #23
 8004584:	438a      	bics	r2, r1
 8004586:	60da      	str	r2, [r3, #12]
}
 8004588:	4770      	bx	lr
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	40021000 	.word	0x40021000
 8004590:	40012708 	.word	0x40012708
 8004594:	40012400 	.word	0x40012400

08004598 <ADC_Read>:
	}*/

}
uint16_t ADC_Read()
{
	if(ADC1->CR & ADC_CR_ADEN)
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <ADC_Read+0x24>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	07db      	lsls	r3, r3, #31
 800459e:	d504      	bpl.n	80045aa <ADC_Read+0x12>
	{
		ADC1->CR |= ADC_CR_ADSTART; //Запуск преобразований
 80045a0:	4a06      	ldr	r2, [pc, #24]	; (80045bc <ADC_Read+0x24>)
 80045a2:	6893      	ldr	r3, [r2, #8]
 80045a4:	2104      	movs	r1, #4
 80045a6:	430b      	orrs	r3, r1
 80045a8:	6093      	str	r3, [r2, #8]
	}
    while ((ADC1->ISR & ADC_ISR_EOC)==0)
 80045aa:	4b04      	ldr	r3, [pc, #16]	; (80045bc <ADC_Read+0x24>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	075b      	lsls	r3, r3, #29
 80045b0:	d5fb      	bpl.n	80045aa <ADC_Read+0x12>
    {

    }
    return ADC1->DR;              // возврат преоброазованного значения;
 80045b2:	4b02      	ldr	r3, [pc, #8]	; (80045bc <ADC_Read+0x24>)
 80045b4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80045b6:	b280      	uxth	r0, r0
}
 80045b8:	4770      	bx	lr
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	40012400 	.word	0x40012400

080045c0 <FlashUnlock>:
#include <FlashMemory.h>


void FlashUnlock()//функция разблокировки
{
    FLASH->KEYR = FkashKey1;
 80045c0:	4b02      	ldr	r3, [pc, #8]	; (80045cc <FlashUnlock+0xc>)
 80045c2:	4a03      	ldr	r2, [pc, #12]	; (80045d0 <FlashUnlock+0x10>)
 80045c4:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FkashKey2;
 80045c6:	4a03      	ldr	r2, [pc, #12]	; (80045d4 <FlashUnlock+0x14>)
 80045c8:	605a      	str	r2, [r3, #4]
}
 80045ca:	4770      	bx	lr
 80045cc:	40022000 	.word	0x40022000
 80045d0:	45670123 	.word	0x45670123
 80045d4:	cdef89ab 	.word	0xcdef89ab

080045d8 <FlashLock>:

void FlashLock()//функция блокировки
{
    FLASH->CR |= FLASH_CR_LOCK;
 80045d8:	4a02      	ldr	r2, [pc, #8]	; (80045e4 <FlashLock+0xc>)
 80045da:	6913      	ldr	r3, [r2, #16]
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	430b      	orrs	r3, r1
 80045e0:	6113      	str	r3, [r2, #16]
}
 80045e2:	4770      	bx	lr
 80045e4:	40022000 	.word	0x40022000

080045e8 <WriteToFleshMemory>:

void WriteToFleshMemory(uint32_t Adress, uint8_t *Data, uint32_t LengthData)
{
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	46ce      	mov	lr, r9
 80045ec:	4647      	mov	r7, r8
 80045ee:	b580      	push	{r7, lr}
 80045f0:	4680      	mov	r8, r0
 80045f2:	000f      	movs	r7, r1
 80045f4:	4691      	mov	r9, r2
	FlashUnlock();//Разблокируем
 80045f6:	f7ff ffe3 	bl	80045c0 <FlashUnlock>
	FLASH->CR |= FLASH_CR_PER;//Установим бит очистки
 80045fa:	4b1c      	ldr	r3, [pc, #112]	; (800466c <WriteToFleshMemory+0x84>)
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	2102      	movs	r1, #2
 8004600:	430a      	orrs	r2, r1
 8004602:	611a      	str	r2, [r3, #16]
	FLASH->AR = Adress;
 8004604:	4642      	mov	r2, r8
 8004606:	615a      	str	r2, [r3, #20]
	FLASH->CR|= FLASH_CR_STRT;//Старт очистки
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	313e      	adds	r1, #62	; 0x3e
 800460c:	430a      	orrs	r2, r1
 800460e:	611a      	str	r2, [r3, #16]
	while ((FLASH->SR & FLASH_SR_BSY));//Ожидание очистки
 8004610:	4b16      	ldr	r3, [pc, #88]	; (800466c <WriteToFleshMemory+0x84>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	07db      	lsls	r3, r3, #31
 8004616:	d4fb      	bmi.n	8004610 <WriteToFleshMemory+0x28>
    FLASH->CR &= ~FLASH_CR_PER;//Сбросим бит очистки
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <WriteToFleshMemory+0x84>)
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	2102      	movs	r1, #2
 800461e:	438a      	bics	r2, r1
 8004620:	611a      	str	r2, [r3, #16]

    FLASH->CR |= FLASH_CR_PG; //Разрешаем запись в память
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	3901      	subs	r1, #1
 8004626:	430a      	orrs	r2, r1
 8004628:	611a      	str	r2, [r3, #16]
    while ((FLASH->SR & FLASH_SR_BSY));//Ожидаем
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <WriteToFleshMemory+0x84>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	07db      	lsls	r3, r3, #31
 8004630:	d4fb      	bmi.n	800462a <WriteToFleshMemory+0x42>
    int j=0;
    for(int i=0; i<LengthData*2; i+=2)
 8004632:	2300      	movs	r3, #0
    int j=0;
 8004634:	2400      	movs	r4, #0
 8004636:	e009      	b.n	800464c <WriteToFleshMemory+0x64>
    {
    	*(__IO uint16_t*)(Adress+i) = (uint16_t)(Data[j]<<8 | Data[j+1]);
 8004638:	5d3e      	ldrb	r6, [r7, r4]
 800463a:	0236      	lsls	r6, r6, #8
 800463c:	193a      	adds	r2, r7, r4
 800463e:	7855      	ldrb	r5, [r2, #1]
 8004640:	4642      	mov	r2, r8
 8004642:	189a      	adds	r2, r3, r2
 8004644:	4335      	orrs	r5, r6
 8004646:	8015      	strh	r5, [r2, #0]
    	j++;
 8004648:	3401      	adds	r4, #1
    for(int i=0; i<LengthData*2; i+=2)
 800464a:	3302      	adds	r3, #2
 800464c:	464a      	mov	r2, r9
 800464e:	0052      	lsls	r2, r2, #1
 8004650:	429a      	cmp	r2, r3
 8004652:	d8f1      	bhi.n	8004638 <WriteToFleshMemory+0x50>
    }
    FLASH->SR |= FLASH_SR_EOP;//Запрещаем программирование
 8004654:	4a05      	ldr	r2, [pc, #20]	; (800466c <WriteToFleshMemory+0x84>)
 8004656:	68d3      	ldr	r3, [r2, #12]
 8004658:	2120      	movs	r1, #32
 800465a:	430b      	orrs	r3, r1
 800465c:	60d3      	str	r3, [r2, #12]
    FlashLock();//Заблокируем
 800465e:	f7ff ffbb 	bl	80045d8 <FlashLock>
}
 8004662:	bcc0      	pop	{r6, r7}
 8004664:	46b9      	mov	r9, r7
 8004666:	46b0      	mov	r8, r6
 8004668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	40022000 	.word	0x40022000

08004670 <ReadToFleshMemory>:

void ReadToFleshMemory(uint32_t Adress, uint8_t *Data, uint32_t LengthData)
{
 8004670:	b570      	push	{r4, r5, r6, lr}
	int j=0;
    for(int i=0; i<LengthData*2; i+=2)
 8004672:	2400      	movs	r4, #0
	int j=0;
 8004674:	2300      	movs	r3, #0
    for(int i=0; i<LengthData*2; i+=2)
 8004676:	0055      	lsls	r5, r2, #1
 8004678:	42a5      	cmp	r5, r4
 800467a:	d908      	bls.n	800468e <ReadToFleshMemory+0x1e>
    {
    	Data[j] = *(__IO uint16_t*)(Adress+i)>>8;
 800467c:	1826      	adds	r6, r4, r0
 800467e:	8835      	ldrh	r5, [r6, #0]
 8004680:	0a2d      	lsrs	r5, r5, #8
 8004682:	54cd      	strb	r5, [r1, r3]
    	Data[j+1] = *(__IO uint16_t*)(Adress+i);
 8004684:	8835      	ldrh	r5, [r6, #0]
 8004686:	3301      	adds	r3, #1
 8004688:	54cd      	strb	r5, [r1, r3]
    for(int i=0; i<LengthData*2; i+=2)
 800468a:	3402      	adds	r4, #2
 800468c:	e7f3      	b.n	8004676 <ReadToFleshMemory+0x6>
    	j++;
    }
}
 800468e:	bd70      	pop	{r4, r5, r6, pc}

08004690 <InitTIM3>:


void InitTIM3() //ИНИЦИАЛИЗАЦИЯ ТАЙМЕРА ДЛЯ измерений напряжения
{
	 // Включение тактирования TIM3
	    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8004690:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <InitTIM3+0x2c>)
 8004692:	69d3      	ldr	r3, [r2, #28]
 8004694:	2102      	movs	r1, #2
 8004696:	430b      	orrs	r3, r1
 8004698:	61d3      	str	r3, [r2, #28]
	    // Коэффициент предделителя таймера - 48 (частота тактирования - 10 КГц)
	    TIM3->PSC = 4800 - 1;
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <InitTIM3+0x30>)
 800469c:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <InitTIM3+0x34>)
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
	    // Значение регистра автоматической перезагрузки (длительность импульса - 1с)
	    TIM3->ARR = 10000-1;
 80046a0:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <InitTIM3+0x38>)
 80046a2:	62da      	str	r2, [r3, #44]	; 0x2c
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a4:	4a09      	ldr	r2, [pc, #36]	; (80046cc <InitTIM3+0x3c>)
 80046a6:	2180      	movs	r1, #128	; 0x80
 80046a8:	0249      	lsls	r1, r1, #9
 80046aa:	6011      	str	r1, [r2, #0]
	    // Обработчик прерываний от TIM3
	    NVIC_EnableIRQ(TIM3_IRQn);
	    // Разрешение прерывания от TIM3
	    TIM3->DIER |= TIM_DIER_UIE;
 80046ac:	68d9      	ldr	r1, [r3, #12]
 80046ae:	2001      	movs	r0, #1
 80046b0:	4301      	orrs	r1, r0
 80046b2:	60d9      	str	r1, [r3, #12]
	    // Включение TIM3
	    TIM3->CR1 |= TIM_CR1_CEN;
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4302      	orrs	r2, r0
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	4770      	bx	lr
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40000400 	.word	0x40000400
 80046c4:	000012bf 	.word	0x000012bf
 80046c8:	0000270f 	.word	0x0000270f
 80046cc:	e000e100 	.word	0xe000e100

080046d0 <InitTIM14>:
}

void InitTIM14()
{
	// Включение тактирования TIM14
	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <InitTIM14+0x30>)
 80046d2:	69d1      	ldr	r1, [r2, #28]
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	430b      	orrs	r3, r1
 80046da:	61d3      	str	r3, [r2, #28]
	TIM14->CR1 = 0; //СЧЕТЧИК ИСПОЛЬЗУЕТСЯ КАК ПОВЫШАЮЩИЙ and ВЫРАВНИВАНИЕ ПО КРАЯМ
 80046dc:	4b09      	ldr	r3, [pc, #36]	; (8004704 <InitTIM14+0x34>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]

	// Коэффициент предделителя таймера - 48 (частота тактирования - 1 MГц)
	TIM14->PSC = 48 - 1;
 80046e2:	322f      	adds	r2, #47	; 0x2f
 80046e4:	629a      	str	r2, [r3, #40]	; 0x28
	// Значение регистра автоматической перезагрузки (длительность импульса - 1 мс)
	TIM14->ARR = 1000;
 80046e6:	22fa      	movs	r2, #250	; 0xfa
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80046ec:	4a06      	ldr	r2, [pc, #24]	; (8004708 <InitTIM14+0x38>)
 80046ee:	2180      	movs	r1, #128	; 0x80
 80046f0:	0309      	lsls	r1, r1, #12
 80046f2:	6011      	str	r1, [r2, #0]
	// Обработчик прерываний от TIM14
	NVIC_EnableIRQ(TIM14_IRQn);
	// Утановить приоритет прерываний 1
//	NVIC_SetPriority(TIM17_IRQn, 14);
	// Разрешение прерывания от TIM17
	TIM14->DIER |= TIM_DIER_UIE;
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	2101      	movs	r1, #1
 80046f8:	430a      	orrs	r2, r1
 80046fa:	60da      	str	r2, [r3, #12]


}
 80046fc:	4770      	bx	lr
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	40021000 	.word	0x40021000
 8004704:	40002000 	.word	0x40002000
 8004708:	e000e100 	.word	0xe000e100

0800470c <InitTIM15>:

void InitTIM15()
{
	// Включение тактирования TIM14
	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 800470c:	4a0b      	ldr	r2, [pc, #44]	; (800473c <InitTIM15+0x30>)
 800470e:	6991      	ldr	r1, [r2, #24]
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	025b      	lsls	r3, r3, #9
 8004714:	430b      	orrs	r3, r1
 8004716:	6193      	str	r3, [r2, #24]
	TIM15->CR1 = 0; //СЧЕТЧИК ИСПОЛЬЗУЕТСЯ КАК ПОВЫШАЮЩИЙ and ВЫРАВНИВАНИЕ ПО КРАЯМ
 8004718:	4b09      	ldr	r3, [pc, #36]	; (8004740 <InitTIM15+0x34>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

	// Коэффициент предделителя таймера - 48 (частота тактирования - 1 kГц)
	TIM15->PSC = 480 - 1;
 800471e:	22e0      	movs	r2, #224	; 0xe0
 8004720:	32ff      	adds	r2, #255	; 0xff
 8004722:	629a      	str	r2, [r3, #40]	; 0x28
	// Значение регистра автоматической перезагрузки (длительность импульса - 500 мс)
	TIM15->ARR = 50000;
 8004724:	4a07      	ldr	r2, [pc, #28]	; (8004744 <InitTIM15+0x38>)
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c
 8004728:	4a07      	ldr	r2, [pc, #28]	; (8004748 <InitTIM15+0x3c>)
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	0349      	lsls	r1, r1, #13
 800472e:	6011      	str	r1, [r2, #0]
	// Обработчик прерываний от TIM15
	NVIC_EnableIRQ(TIM15_IRQn);

	// Разрешение прерывания от TIM15
	TIM15->DIER |= TIM_DIER_UIE;
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	2101      	movs	r1, #1
 8004734:	430a      	orrs	r2, r1
 8004736:	60da      	str	r2, [r3, #12]
}
 8004738:	4770      	bx	lr
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	40021000 	.word	0x40021000
 8004740:	40014000 	.word	0x40014000
 8004744:	0000c350 	.word	0x0000c350
 8004748:	e000e100 	.word	0xe000e100

0800474c <indicator_sgd4>:
//		*strn - указатель на строку, состоящую из 3 значащих символов, которая выводится на индик.
//		points - три первых бита отвечают за десятичные точки.
//	Возвращаемое значение: нет.
//-------------------------------------------------------------------------------------------------
void indicator_sgd4(SPI_TypeDef* spi_x, uint8_t leds, char *strn, uint8_t points)
{
 800474c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800474e:	b085      	sub	sp, #20
 8004750:	468c      	mov	ip, r1
	// Включение TIM17
	TIM17->CR1 &= ~TIM_CR1_CEN;
 8004752:	4d6a      	ldr	r5, [pc, #424]	; (80048fc <indicator_sgd4+0x1b0>)
 8004754:	682c      	ldr	r4, [r5, #0]
 8004756:	2601      	movs	r6, #1
 8004758:	43b4      	bics	r4, r6
 800475a:	602c      	str	r4, [r5, #0]
    // PB9 = 1
    GPIOB->ODR &= ~GPIO_ODR_9;
 800475c:	4d68      	ldr	r5, [pc, #416]	; (8004900 <indicator_sgd4+0x1b4>)
 800475e:	696c      	ldr	r4, [r5, #20]
 8004760:	4e68      	ldr	r6, [pc, #416]	; (8004904 <indicator_sgd4+0x1b8>)
 8004762:	4034      	ands	r4, r6
 8004764:	616c      	str	r4, [r5, #20]
	// Массив сегментов индикатора
	uint8_t digit[5];

	// Массив принятых символов
	uint8_t sym[] = {0, 0, 0, 0, 0};
 8004766:	4c68      	ldr	r4, [pc, #416]	; (8004908 <indicator_sgd4+0x1bc>)
 8004768:	6821      	ldr	r1, [r4, #0]
 800476a:	9100      	str	r1, [sp, #0]
 800476c:	7924      	ldrb	r4, [r4, #4]
 800476e:	4669      	mov	r1, sp
 8004770:	710c      	strb	r4, [r1, #4]

	// Номер элемента строки
	uint8_t ns = 0;

	// Количество элементов массива
	uint8_t nd = 0;
 8004772:	2100      	movs	r1, #0
	uint8_t ns = 0;
 8004774:	2400      	movs	r4, #0

	// Дешифратор символов
	while(ns < 4)
 8004776:	e006      	b.n	8004786 <indicator_sgd4+0x3a>
	{
		switch(*(strn + ns))
		{
			case'0': sym[ns] = 0b00111111; break;
 8004778:	253f      	movs	r5, #63	; 0x3f
 800477a:	466f      	mov	r7, sp
 800477c:	553d      	strb	r5, [r7, r4]

		}//end switch

		// Если последний сивол не равен символу окончания строоки -
		// инкремент номера элемента строки
		if(*(strn + ns) != '\0') ns++;
 800477e:	2e00      	cmp	r6, #0
 8004780:	d05c      	beq.n	800483c <indicator_sgd4+0xf0>
 8004782:	3401      	adds	r4, #1
 8004784:	b2e4      	uxtb	r4, r4
	while(ns < 4)
 8004786:	2c03      	cmp	r4, #3
 8004788:	d858      	bhi.n	800483c <indicator_sgd4+0xf0>
		switch(*(strn + ns))
 800478a:	5d16      	ldrb	r6, [r2, r4]
 800478c:	2e52      	cmp	r6, #82	; 0x52
 800478e:	d84f      	bhi.n	8004830 <indicator_sgd4+0xe4>
 8004790:	00b5      	lsls	r5, r6, #2
 8004792:	4f5e      	ldr	r7, [pc, #376]	; (800490c <indicator_sgd4+0x1c0>)
 8004794:	597d      	ldr	r5, [r7, r5]
 8004796:	46af      	mov	pc, r5
			case'1': sym[ns] = 0b00000110; break;
 8004798:	2506      	movs	r5, #6
 800479a:	466f      	mov	r7, sp
 800479c:	553d      	strb	r5, [r7, r4]
 800479e:	e7ee      	b.n	800477e <indicator_sgd4+0x32>
			case'2': sym[ns] = 0b01011011; break;
 80047a0:	255b      	movs	r5, #91	; 0x5b
 80047a2:	466f      	mov	r7, sp
 80047a4:	553d      	strb	r5, [r7, r4]
 80047a6:	e7ea      	b.n	800477e <indicator_sgd4+0x32>
			case'3': sym[ns] = 0b01001111; break;
 80047a8:	254f      	movs	r5, #79	; 0x4f
 80047aa:	466f      	mov	r7, sp
 80047ac:	553d      	strb	r5, [r7, r4]
 80047ae:	e7e6      	b.n	800477e <indicator_sgd4+0x32>
			case'4': sym[ns] = 0b01100110; break;
 80047b0:	2566      	movs	r5, #102	; 0x66
 80047b2:	466f      	mov	r7, sp
 80047b4:	553d      	strb	r5, [r7, r4]
 80047b6:	e7e2      	b.n	800477e <indicator_sgd4+0x32>
			case'5': sym[ns] = 0b01101101; break;
 80047b8:	256d      	movs	r5, #109	; 0x6d
 80047ba:	466f      	mov	r7, sp
 80047bc:	553d      	strb	r5, [r7, r4]
 80047be:	e7de      	b.n	800477e <indicator_sgd4+0x32>
			case'6': sym[ns] = 0b01111101; break;
 80047c0:	257d      	movs	r5, #125	; 0x7d
 80047c2:	466f      	mov	r7, sp
 80047c4:	553d      	strb	r5, [r7, r4]
 80047c6:	e7da      	b.n	800477e <indicator_sgd4+0x32>
			case'7': sym[ns] = 0b00000111; break;
 80047c8:	2507      	movs	r5, #7
 80047ca:	466f      	mov	r7, sp
 80047cc:	553d      	strb	r5, [r7, r4]
 80047ce:	e7d6      	b.n	800477e <indicator_sgd4+0x32>
			case'8': sym[ns] = 0b01111111; break;
 80047d0:	257f      	movs	r5, #127	; 0x7f
 80047d2:	466f      	mov	r7, sp
 80047d4:	553d      	strb	r5, [r7, r4]
 80047d6:	e7d2      	b.n	800477e <indicator_sgd4+0x32>
			case'9': sym[ns] = 0b01101111; break;
 80047d8:	256f      	movs	r5, #111	; 0x6f
 80047da:	466f      	mov	r7, sp
 80047dc:	553d      	strb	r5, [r7, r4]
 80047de:	e7ce      	b.n	800477e <indicator_sgd4+0x32>
			case' ': sym[ns] = 0b00000000; break;  // Пробел.
 80047e0:	2500      	movs	r5, #0
 80047e2:	466f      	mov	r7, sp
 80047e4:	553d      	strb	r5, [r7, r4]
 80047e6:	e7ca      	b.n	800477e <indicator_sgd4+0x32>
			case'E': sym[ns] = 0b01111001; break;
 80047e8:	2579      	movs	r5, #121	; 0x79
 80047ea:	466f      	mov	r7, sp
 80047ec:	553d      	strb	r5, [r7, r4]
 80047ee:	e7c6      	b.n	800477e <indicator_sgd4+0x32>
			case'-': sym[ns] = 0b01000000; break;
 80047f0:	2540      	movs	r5, #64	; 0x40
 80047f2:	466f      	mov	r7, sp
 80047f4:	553d      	strb	r5, [r7, r4]
 80047f6:	e7c2      	b.n	800477e <indicator_sgd4+0x32>
			case'P': sym[ns] = 0b00110111; break;
 80047f8:	2537      	movs	r5, #55	; 0x37
 80047fa:	466f      	mov	r7, sp
 80047fc:	553d      	strb	r5, [r7, r4]
 80047fe:	e7be      	b.n	800477e <indicator_sgd4+0x32>
			case'R': sym[ns] = 0b01110011; break;
 8004800:	2573      	movs	r5, #115	; 0x73
 8004802:	466f      	mov	r7, sp
 8004804:	553d      	strb	r5, [r7, r4]
 8004806:	e7ba      	b.n	800477e <indicator_sgd4+0x32>
			case'G': sym[ns] = 0b00110001; break;
 8004808:	2531      	movs	r5, #49	; 0x31
 800480a:	466f      	mov	r7, sp
 800480c:	553d      	strb	r5, [r7, r4]
 800480e:	e7b6      	b.n	800477e <indicator_sgd4+0x32>
			case'N': sym[ns] = 0b01110110; break;
 8004810:	2576      	movs	r5, #118	; 0x76
 8004812:	466f      	mov	r7, sp
 8004814:	553d      	strb	r5, [r7, r4]
 8004816:	e7b2      	b.n	800477e <indicator_sgd4+0x32>
			case'B': sym[ns] = 0b01111111; break;
 8004818:	257f      	movs	r5, #127	; 0x7f
 800481a:	466f      	mov	r7, sp
 800481c:	553d      	strb	r5, [r7, r4]
 800481e:	e7ae      	b.n	800477e <indicator_sgd4+0x32>
			case'C': sym[ns] = 0b00111001; break;
 8004820:	2539      	movs	r5, #57	; 0x39
 8004822:	466f      	mov	r7, sp
 8004824:	553d      	strb	r5, [r7, r4]
 8004826:	e7aa      	b.n	800477e <indicator_sgd4+0x32>
			case'H': sym[ns] = 0b01100110; break;
 8004828:	2566      	movs	r5, #102	; 0x66
 800482a:	466f      	mov	r7, sp
 800482c:	553d      	strb	r5, [r7, r4]
 800482e:	e7a6      	b.n	800477e <indicator_sgd4+0x32>
			default: sym[ns] = 0b01000011;
 8004830:	2543      	movs	r5, #67	; 0x43
 8004832:	466f      	mov	r7, sp
 8004834:	553d      	strb	r5, [r7, r4]
 8004836:	e7a2      	b.n	800477e <indicator_sgd4+0x32>
		switch(*(strn + ns))
 8004838:	0021      	movs	r1, r4
 800483a:	e7a0      	b.n	800477e <indicator_sgd4+0x32>
		// Иначе - выход из цикла
		else break;

	}//end while

	switch(nd)
 800483c:	2901      	cmp	r1, #1
 800483e:	d02d      	beq.n	800489c <indicator_sgd4+0x150>
 8004840:	2902      	cmp	r1, #2
 8004842:	d022      	beq.n	800488a <indicator_sgd4+0x13e>
 8004844:	2900      	cmp	r1, #0
 8004846:	d031      	beq.n	80048ac <indicator_sgd4+0x160>
	}//end switch


	// Заполнение массива сегментов индикатора
	// Индексы соответствуют индексам позиционных обозначений на схеме
	digit[1] = leds;
 8004848:	aa02      	add	r2, sp, #8
 800484a:	4661      	mov	r1, ip
 800484c:	7051      	strb	r1, [r2, #1]
	digit[4] = sym[0];
 800484e:	4669      	mov	r1, sp
 8004850:	780d      	ldrb	r5, [r1, #0]
 8004852:	7115      	strb	r5, [r2, #4]
	digit[3] = sym[1];
 8004854:	784c      	ldrb	r4, [r1, #1]
 8004856:	70d4      	strb	r4, [r2, #3]
	digit[2] = sym[2];
 8004858:	7889      	ldrb	r1, [r1, #2]
 800485a:	7091      	strb	r1, [r2, #2]

	// Добавление десятичных точек в соответствующие сегменты индикатора
	if(points & 0b100) digit[4] |= 0b10000000;
 800485c:	075a      	lsls	r2, r3, #29
 800485e:	d504      	bpl.n	800486a <indicator_sgd4+0x11e>
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	4252      	negs	r2, r2
 8004864:	4315      	orrs	r5, r2
 8004866:	aa02      	add	r2, sp, #8
 8004868:	7115      	strb	r5, [r2, #4]
	if(points & 0b010) digit[3] |= 0b10000000;
 800486a:	079a      	lsls	r2, r3, #30
 800486c:	d504      	bpl.n	8004878 <indicator_sgd4+0x12c>
 800486e:	2280      	movs	r2, #128	; 0x80
 8004870:	4252      	negs	r2, r2
 8004872:	4314      	orrs	r4, r2
 8004874:	aa02      	add	r2, sp, #8
 8004876:	70d4      	strb	r4, [r2, #3]
	if(points & 0b001) digit[2] |= 0b10000000;
 8004878:	07db      	lsls	r3, r3, #31
 800487a:	d504      	bpl.n	8004886 <indicator_sgd4+0x13a>
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	425b      	negs	r3, r3
 8004880:	4319      	orrs	r1, r3
 8004882:	ab02      	add	r3, sp, #8
 8004884:	7099      	strb	r1, [r3, #2]
	uint8_t ns = 0;
 8004886:	2201      	movs	r2, #1
 8004888:	e01e      	b.n	80048c8 <indicator_sgd4+0x17c>
			sym[2] = sym[1];
 800488a:	466a      	mov	r2, sp
 800488c:	7852      	ldrb	r2, [r2, #1]
 800488e:	4669      	mov	r1, sp
 8004890:	708a      	strb	r2, [r1, #2]
			sym[1] = sym[0];
 8004892:	780a      	ldrb	r2, [r1, #0]
 8004894:	704a      	strb	r2, [r1, #1]
			sym[0] = 0;
 8004896:	2200      	movs	r2, #0
 8004898:	700a      	strb	r2, [r1, #0]
		} break; //end case 2
 800489a:	e7d5      	b.n	8004848 <indicator_sgd4+0xfc>
			sym[2] = sym[0];
 800489c:	466a      	mov	r2, sp
 800489e:	7812      	ldrb	r2, [r2, #0]
 80048a0:	4669      	mov	r1, sp
 80048a2:	708a      	strb	r2, [r1, #2]
			sym[1] = 0;
 80048a4:	2200      	movs	r2, #0
 80048a6:	704a      	strb	r2, [r1, #1]
			sym[0] = 0;
 80048a8:	700a      	strb	r2, [r1, #0]
		} break; //end case 1
 80048aa:	e7cd      	b.n	8004848 <indicator_sgd4+0xfc>
			sym[2] = 0;
 80048ac:	2200      	movs	r2, #0
 80048ae:	4669      	mov	r1, sp
 80048b0:	708a      	strb	r2, [r1, #2]
			sym[1] = 0;
 80048b2:	704a      	strb	r2, [r1, #1]
			sym[0] = 0;
 80048b4:	700a      	strb	r2, [r1, #0]
		} break; //end case 1
 80048b6:	e7c7      	b.n	8004848 <indicator_sgd4+0xfc>

	// Передача данных в регистры
	for(uint8_t nn = 1; nn < 5; nn++)
	{
		// Передача в регистр данных элемента массива
		*(uint8_t *)&spi_x->DR = digit[nn];
 80048b8:	ab02      	add	r3, sp, #8
 80048ba:	5c9b      	ldrb	r3, [r3, r2]
 80048bc:	7303      	strb	r3, [r0, #12]

		// Ожидание освобождения буфера
		while((spi_x->SR & SPI_SR_TXE) == 0);
 80048be:	6883      	ldr	r3, [r0, #8]
 80048c0:	079b      	lsls	r3, r3, #30
 80048c2:	d5fc      	bpl.n	80048be <indicator_sgd4+0x172>
	for(uint8_t nn = 1; nn < 5; nn++)
 80048c4:	3201      	adds	r2, #1
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	2a04      	cmp	r2, #4
 80048ca:	d9f5      	bls.n	80048b8 <indicator_sgd4+0x16c>
	}//end for

	// Ожидание окончания передачи
	while((spi_x->SR & SPI_SR_BSY) > 0);
 80048cc:	6883      	ldr	r3, [r0, #8]
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	d4fc      	bmi.n	80048cc <indicator_sgd4+0x180>
   	//////////////////
	// Выключение TIM17
	//TIM17->CR1 &= ~TIM_CR1_CEN;

	// Значение регистра автоматической перезагрузки
	TIM17->ARR = 10; // 10мс
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <indicator_sgd4+0x1b0>)
 80048d4:	220a      	movs	r2, #10
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c

	// Обнуление счетчика
	TIM17->CNT = 0;
 80048d8:	2200      	movs	r2, #0
 80048da:	625a      	str	r2, [r3, #36]	; 0x24

	// Включение TIM17
	TIM17->CR1 |= TIM_CR1_CEN;
 80048dc:	6819      	ldr	r1, [r3, #0]
 80048de:	2001      	movs	r0, #1
 80048e0:	4301      	orrs	r1, r0
 80048e2:	6019      	str	r1, [r3, #0]

	// Разрешение прерывания от TIM17
    TIM17->DIER |= TIM_DIER_UIE;
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	4302      	orrs	r2, r0
 80048e8:	60da      	str	r2, [r3, #12]
   	//////////////////

    // PB9 = 1
    GPIOB->ODR |= GPIO_ODR_9;
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <indicator_sgd4+0x1b4>)
 80048ec:	6951      	ldr	r1, [r2, #20]
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	430b      	orrs	r3, r1
 80048f4:	6153      	str	r3, [r2, #20]

}//end indicator_sgd4()
 80048f6:	b005      	add	sp, #20
 80048f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	40014800 	.word	0x40014800
 8004900:	48000400 	.word	0x48000400
 8004904:	fffffdff 	.word	0xfffffdff
 8004908:	080084d8 	.word	0x080084d8
 800490c:	0800838c 	.word	0x0800838c

08004910 <MX_SPI1_Init>:
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 8004910:	b510      	push	{r4, lr}
	 // Включение тактирования PORTA
	    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004912:	4a2e      	ldr	r2, [pc, #184]	; (80049cc <MX_SPI1_Init+0xbc>)
 8004914:	6951      	ldr	r1, [r2, #20]
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	029b      	lsls	r3, r3, #10
 800491a:	430b      	orrs	r3, r1
 800491c:	6153      	str	r3, [r2, #20]
	    // Включение тактирования PORTB
	    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 800491e:	6953      	ldr	r3, [r2, #20]
 8004920:	2080      	movs	r0, #128	; 0x80
 8004922:	02c0      	lsls	r0, r0, #11
 8004924:	4303      	orrs	r3, r0
 8004926:	6153      	str	r3, [r2, #20]
	    // PA5 (SCK), PA7 (MOSI) - альтернативная функция
	    GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 8004928:	2390      	movs	r3, #144	; 0x90
 800492a:	05db      	lsls	r3, r3, #23
 800492c:	681c      	ldr	r4, [r3, #0]
 800492e:	2188      	movs	r1, #136	; 0x88
 8004930:	0209      	lsls	r1, r1, #8
 8004932:	4321      	orrs	r1, r4
 8004934:	6019      	str	r1, [r3, #0]
	    GPIOB->MODER |= GPIO_MODER_MODER9_0;
 8004936:	4926      	ldr	r1, [pc, #152]	; (80049d0 <MX_SPI1_Init+0xc0>)
 8004938:	680c      	ldr	r4, [r1, #0]
 800493a:	4320      	orrs	r0, r4
 800493c:	6008      	str	r0, [r1, #0]

	    // PA5, PA7 - двухтактные выходы
	    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_5 | GPIO_OTYPER_OT_7);
 800493e:	6858      	ldr	r0, [r3, #4]
 8004940:	24a0      	movs	r4, #160	; 0xa0
 8004942:	43a0      	bics	r0, r4
 8004944:	6058      	str	r0, [r3, #4]
	    // PB9 - двухтактный выход
	    GPIOB->OTYPER &= ~GPIO_OTYPER_OT_9;
 8004946:	6848      	ldr	r0, [r1, #4]
 8004948:	4c22      	ldr	r4, [pc, #136]	; (80049d4 <MX_SPI1_Init+0xc4>)
 800494a:	4020      	ands	r0, r4
 800494c:	6048      	str	r0, [r1, #4]
	    // PA5, PA7 - высокая скорость
	    GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR7;
 800494e:	689c      	ldr	r4, [r3, #8]
 8004950:	20cc      	movs	r0, #204	; 0xcc
 8004952:	0200      	lsls	r0, r0, #8
 8004954:	4320      	orrs	r0, r4
 8004956:	6098      	str	r0, [r3, #8]
	    // PB9 - высокая скорость
	    GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9;
 8004958:	688c      	ldr	r4, [r1, #8]
 800495a:	20c0      	movs	r0, #192	; 0xc0
 800495c:	0300      	lsls	r0, r0, #12
 800495e:	4320      	orrs	r0, r4
 8004960:	6088      	str	r0, [r1, #8]
	    // PA5, PA7 - альтернативная функция AF0
	    GPIOA->AFR[0] &= ~(0xF0000 | 0xF0000000);
 8004962:	6a19      	ldr	r1, [r3, #32]
 8004964:	481c      	ldr	r0, [pc, #112]	; (80049d8 <MX_SPI1_Init+0xc8>)
 8004966:	4001      	ands	r1, r0
 8004968:	6219      	str	r1, [r3, #32]
	    // Включение тактирования SPI1
	    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800496a:	6991      	ldr	r1, [r2, #24]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	015b      	lsls	r3, r3, #5
 8004970:	430b      	orrs	r3, r1
 8004972:	6193      	str	r3, [r2, #24]
	    // Скорость передачи: fPCLK/64  f
	    SPI1->CR1 |= SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0;
 8004974:	4b19      	ldr	r3, [pc, #100]	; (80049dc <MX_SPI1_Init+0xcc>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	2138      	movs	r1, #56	; 0x38
 800497a:	430a      	orrs	r2, r1
 800497c:	601a      	str	r2, [r3, #0]
	    // Однопроводный режим, мастер использует только вывод MOSI
	    SPI1->CR1 |= SPI_CR1_BIDIMODE;
 800497e:	6819      	ldr	r1, [r3, #0]
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	0212      	lsls	r2, r2, #8
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
	    // Данные только передаются в однопроводном режиме
	    SPI1->CR1 |= SPI_CR1_BIDIOE;
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	2280      	movs	r2, #128	; 0x80
 800498c:	01d2      	lsls	r2, r2, #7
 800498e:	430a      	orrs	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
	    // Работа в режиме ведущего
	    SPI1->CR1 |= SPI_CR1_MSTR;
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	2104      	movs	r1, #4
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]
	    //
	    SPI1->CR1 |= SPI_CR1_SSM;
 800499a:	6819      	ldr	r1, [r3, #0]
 800499c:	2280      	movs	r2, #128	; 0x80
 800499e:	0092      	lsls	r2, r2, #2
 80049a0:	430a      	orrs	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]
	    SPI1->CR1 |= SPI_CR1_SSI;
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	2280      	movs	r2, #128	; 0x80
 80049a8:	0052      	lsls	r2, r2, #1
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
	    // 8-битный формат
	    SPI1->CR2 &= ~SPI_CR2_DS;
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	490b      	ldr	r1, [pc, #44]	; (80049e0 <MX_SPI1_Init+0xd0>)
 80049b2:	400a      	ands	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
	    SPI1->CR2 |= SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0;
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	22e0      	movs	r2, #224	; 0xe0
 80049ba:	00d2      	lsls	r2, r2, #3
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
	    // Включение SPI2
	    SPI1->CR1 |= SPI_CR1_SPE;
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	2140      	movs	r1, #64	; 0x40
 80049c4:	430a      	orrs	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]
}
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	40021000 	.word	0x40021000
 80049d0:	48000400 	.word	0x48000400
 80049d4:	fffffdff 	.word	0xfffffdff
 80049d8:	0ff0ffff 	.word	0x0ff0ffff
 80049dc:	40013000 	.word	0x40013000
 80049e0:	fffff0ff 	.word	0xfffff0ff

080049e4 <MX_GPIO_Init>:
  }

}

static void MX_GPIO_Init(void)
{
 80049e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e6:	b085      	sub	sp, #20

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049e8:	4a44      	ldr	r2, [pc, #272]	; (8004afc <MX_GPIO_Init+0x118>)
 80049ea:	6951      	ldr	r1, [r2, #20]
 80049ec:	2080      	movs	r0, #128	; 0x80
 80049ee:	03c0      	lsls	r0, r0, #15
 80049f0:	4301      	orrs	r1, r0
 80049f2:	6151      	str	r1, [r2, #20]
 80049f4:	6953      	ldr	r3, [r2, #20]
 80049f6:	4003      	ands	r3, r0
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fc:	6951      	ldr	r1, [r2, #20]
 80049fe:	2080      	movs	r0, #128	; 0x80
 8004a00:	0280      	lsls	r0, r0, #10
 8004a02:	4301      	orrs	r1, r0
 8004a04:	6151      	str	r1, [r2, #20]
 8004a06:	6953      	ldr	r3, [r2, #20]
 8004a08:	4003      	ands	r3, r0
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a0e:	6953      	ldr	r3, [r2, #20]
 8004a10:	2080      	movs	r0, #128	; 0x80
 8004a12:	02c0      	lsls	r0, r0, #11
 8004a14:	4303      	orrs	r3, r0
 8004a16:	6153      	str	r3, [r2, #20]
 8004a18:	6953      	ldr	r3, [r2, #20]
 8004a1a:	4003      	ands	r3, r0
 8004a1c:	9302      	str	r3, [sp, #8]
 8004a1e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a20:	6951      	ldr	r1, [r2, #20]
 8004a22:	2480      	movs	r4, #128	; 0x80
 8004a24:	0324      	lsls	r4, r4, #12
 8004a26:	4321      	orrs	r1, r4
 8004a28:	6151      	str	r1, [r2, #20]
 8004a2a:	6953      	ldr	r3, [r2, #20]
 8004a2c:	4023      	ands	r3, r4
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	9b03      	ldr	r3, [sp, #12]

  //DE-RE:
  GPIOA->MODER |= GPIO_MODER_MODER0_0;
 8004a32:	2190      	movs	r1, #144	; 0x90
 8004a34:	05c9      	lsls	r1, r1, #23
 8004a36:	680b      	ldr	r3, [r1, #0]
 8004a38:	2401      	movs	r4, #1
 8004a3a:	4323      	orrs	r3, r4
 8004a3c:	600b      	str	r3, [r1, #0]
  GPIOA->OTYPER &= ~ GPIO_OTYPER_OT_0;
 8004a3e:	684b      	ldr	r3, [r1, #4]
 8004a40:	43a3      	bics	r3, r4
 8004a42:	604b      	str	r3, [r1, #4]
  GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0;
 8004a44:	688b      	ldr	r3, [r1, #8]
 8004a46:	2503      	movs	r5, #3
 8004a48:	432b      	orrs	r3, r5
 8004a4a:	608b      	str	r3, [r1, #8]

  //LED G:
  GPIOB->MODER |= 0b01<<GPIO_MODER_MODER10_Pos; //OUTPUT MODE
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <MX_GPIO_Init+0x11c>)
 8004a4e:	681e      	ldr	r6, [r3, #0]
 8004a50:	2580      	movs	r5, #128	; 0x80
 8004a52:	036d      	lsls	r5, r5, #13
 8004a54:	4335      	orrs	r5, r6
 8004a56:	601d      	str	r5, [r3, #0]
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT_10;//PUSH-PULL
 8004a58:	685d      	ldr	r5, [r3, #4]
 8004a5a:	4e2a      	ldr	r6, [pc, #168]	; (8004b04 <MX_GPIO_Init+0x120>)
 8004a5c:	4035      	ands	r5, r6
 8004a5e:	605d      	str	r5, [r3, #4]
  GPIOB->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR10_Pos;//HIGH SPEED
 8004a60:	689e      	ldr	r6, [r3, #8]
 8004a62:	25c0      	movs	r5, #192	; 0xc0
 8004a64:	03ad      	lsls	r5, r5, #14
 8004a66:	4335      	orrs	r5, r6
 8004a68:	609d      	str	r5, [r3, #8]
  GPIOB->PUPDR |= 0b10<<GPIO_PUPDR_PUPDR10_Pos; //PULL DOWN
 8004a6a:	68de      	ldr	r6, [r3, #12]
 8004a6c:	2580      	movs	r5, #128	; 0x80
 8004a6e:	03ad      	lsls	r5, r5, #14
 8004a70:	4335      	orrs	r5, r6
 8004a72:	60dd      	str	r5, [r3, #12]

  //TER:
  GPIOA->MODER |= 0b01<<GPIO_MODER_MODER12_Pos;//OUTPUT MODE
 8004a74:	680d      	ldr	r5, [r1, #0]
 8004a76:	2680      	movs	r6, #128	; 0x80
 8004a78:	0476      	lsls	r6, r6, #17
 8004a7a:	4335      	orrs	r5, r6
 8004a7c:	600d      	str	r5, [r1, #0]
  GPIOA->OTYPER &= ~ GPIO_OTYPER_OT_12;//OPEN-DRAIN
 8004a7e:	684d      	ldr	r5, [r1, #4]
 8004a80:	4f21      	ldr	r7, [pc, #132]	; (8004b08 <MX_GPIO_Init+0x124>)
 8004a82:	46bc      	mov	ip, r7
 8004a84:	403d      	ands	r5, r7
 8004a86:	604d      	str	r5, [r1, #4]
  GPIOA->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR12_Pos;//HIGH SPEED
 8004a88:	688f      	ldr	r7, [r1, #8]
 8004a8a:	25c0      	movs	r5, #192	; 0xc0
 8004a8c:	04ad      	lsls	r5, r5, #18
 8004a8e:	432f      	orrs	r7, r5
 8004a90:	608f      	str	r7, [r1, #8]

  //REL:
  GPIOB->MODER |= 0b01<<GPIO_MODER_MODER12_Pos;//OUTPUT MODE
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	430e      	orrs	r6, r1
 8004a96:	601e      	str	r6, [r3, #0]
  GPIOB->OTYPER &= ~ GPIO_OTYPER_OT_12;//OPEN-DRAIN
 8004a98:	6859      	ldr	r1, [r3, #4]
 8004a9a:	4666      	mov	r6, ip
 8004a9c:	4031      	ands	r1, r6
 8004a9e:	6059      	str	r1, [r3, #4]
  GPIOB->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR12_Pos;//HIGH SPEED
 8004aa0:	6899      	ldr	r1, [r3, #8]
 8004aa2:	430d      	orrs	r5, r1
 8004aa4:	609d      	str	r5, [r3, #8]

  /*EXTI PB2 и PB8*/
  GPIOB->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER8);
 8004aa6:	6819      	ldr	r1, [r3, #0]
 8004aa8:	4d18      	ldr	r5, [pc, #96]	; (8004b0c <MX_GPIO_Init+0x128>)
 8004aaa:	4029      	ands	r1, r5
 8004aac:	6019      	str	r1, [r3, #0]
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004aae:	6991      	ldr	r1, [r2, #24]
 8004ab0:	4321      	orrs	r1, r4
 8004ab2:	6191      	str	r1, [r2, #24]
  SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PB;
 8004ab4:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <MX_GPIO_Init+0x12c>)
 8004ab6:	6895      	ldr	r5, [r2, #8]
 8004ab8:	2180      	movs	r1, #128	; 0x80
 8004aba:	0049      	lsls	r1, r1, #1
 8004abc:	4329      	orrs	r1, r5
 8004abe:	6091      	str	r1, [r2, #8]
  SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI8_PB;
 8004ac0:	6911      	ldr	r1, [r2, #16]
 8004ac2:	430c      	orrs	r4, r1
 8004ac4:	6114      	str	r4, [r2, #16]
  EXTI->IMR = 0b100000100;// Настройка битов маски
 8004ac6:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <MX_GPIO_Init+0x130>)
 8004ac8:	2182      	movs	r1, #130	; 0x82
 8004aca:	0049      	lsls	r1, r1, #1
 8004acc:	6011      	str	r1, [r2, #0]
  EXTI->RTSR = 0b100000100;// Срабатывание по переднему фронту
 8004ace:	6091      	str	r1, [r2, #8]
  EXTI->FTSR = 0b100000100;// Срабатывание по заднему фронту
 8004ad0:	60d1      	str	r1, [r2, #12]
 8004ad2:	4a11      	ldr	r2, [pc, #68]	; (8004b18 <MX_GPIO_Init+0x134>)
 8004ad4:	39c4      	subs	r1, #196	; 0xc4
 8004ad6:	6011      	str	r1, [r2, #0]
 8004ad8:	3140      	adds	r1, #64	; 0x40
 8004ada:	6011      	str	r1, [r2, #0]
  // Разрешение прерываний
  NVIC_EnableIRQ(EXTI2_3_IRQn);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

  //RCLK
  GPIOB->MODER |= 0b01<<GPIO_MODER_MODER9_Pos;//OUTPUT MODE
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4310      	orrs	r0, r2
 8004ae0:	6018      	str	r0, [r3, #0]
  GPIOB->OTYPER |= GPIO_OTYPER_OT_9;//OPEN-DRAIN
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	2280      	movs	r2, #128	; 0x80
 8004ae6:	0092      	lsls	r2, r2, #2
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
  GPIOB->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEEDR9_Pos;//HIGH SPEED
 8004aec:	6899      	ldr	r1, [r3, #8]
 8004aee:	22c0      	movs	r2, #192	; 0xc0
 8004af0:	0312      	lsls	r2, r2, #12
 8004af2:	430a      	orrs	r2, r1
 8004af4:	609a      	str	r2, [r3, #8]
}
 8004af6:	b005      	add	sp, #20
 8004af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	40021000 	.word	0x40021000
 8004b00:	48000400 	.word	0x48000400
 8004b04:	fffffbff 	.word	0xfffffbff
 8004b08:	ffffefff 	.word	0xffffefff
 8004b0c:	fffcffcf 	.word	0xfffcffcf
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40010400 	.word	0x40010400
 8004b18:	e000e100 	.word	0xe000e100

08004b1c <Setting_Init>:
{
 8004b1c:	b510      	push	{r4, lr}
	  ReadToFleshMemory(0xFC00, DataSettingMemory, 8);//читаем из памяти основные настроки и потом записываем их в нужные переменные
 8004b1e:	4c24      	ldr	r4, [pc, #144]	; (8004bb0 <Setting_Init+0x94>)
 8004b20:	20fc      	movs	r0, #252	; 0xfc
 8004b22:	2208      	movs	r2, #8
 8004b24:	0021      	movs	r1, r4
 8004b26:	0200      	lsls	r0, r0, #8
 8004b28:	f7ff fda2 	bl	8004670 <ReadToFleshMemory>
	  GlobalAddress = DataSettingMemory[0];
 8004b2c:	7822      	ldrb	r2, [r4, #0]
 8004b2e:	7222      	strb	r2, [r4, #8]
	  Sensitivity = DataSettingMemory[1];
 8004b30:	7863      	ldrb	r3, [r4, #1]
 8004b32:	7263      	strb	r3, [r4, #9]
	  SerialNumber_0 = DataSettingMemory[4];
 8004b34:	7920      	ldrb	r0, [r4, #4]
 8004b36:	491f      	ldr	r1, [pc, #124]	; (8004bb4 <Setting_Init+0x98>)
 8004b38:	7008      	strb	r0, [r1, #0]
	  SerialNumber_1 = DataSettingMemory[5];
 8004b3a:	7960      	ldrb	r0, [r4, #5]
 8004b3c:	7048      	strb	r0, [r1, #1]
	  SerialNumber_2 = DataSettingMemory[6];
 8004b3e:	79a0      	ldrb	r0, [r4, #6]
 8004b40:	7088      	strb	r0, [r1, #2]
	  SerialNumber_3 = DataSettingMemory[7];
 8004b42:	79e0      	ldrb	r0, [r4, #7]
 8004b44:	70c8      	strb	r0, [r1, #3]
		if(GlobalAddress<1 || GlobalAddress>99)//на случай, если изначально в памяти не было записи
 8004b46:	3a01      	subs	r2, #1
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	2a62      	cmp	r2, #98	; 0x62
 8004b4c:	d902      	bls.n	8004b54 <Setting_Init+0x38>
			GlobalAddress=1;
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <Setting_Init+0x94>)
 8004b50:	2101      	movs	r1, #1
 8004b52:	7211      	strb	r1, [r2, #8]
		if(Sensitivity<1 || Sensitivity>3)
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d902      	bls.n	8004b62 <Setting_Init+0x46>
			Sensitivity=3;
 8004b5c:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <Setting_Init+0x94>)
 8004b5e:	2203      	movs	r2, #3
 8004b60:	725a      	strb	r2, [r3, #9]
			Resistor120=0;
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <Setting_Init+0x98>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	711a      	strb	r2, [r3, #4]
			ModeRele=0;
 8004b68:	715a      	strb	r2, [r3, #5]
	  usRegAnalog[6] = Sensitivity;
 8004b6a:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <Setting_Init+0x94>)
 8004b6c:	7a53      	ldrb	r3, [r2, #9]
 8004b6e:	8313      	strh	r3, [r2, #24]
	  usRegAnalog[11] = ExceedanceCounter;
 8004b70:	4911      	ldr	r1, [pc, #68]	; (8004bb8 <Setting_Init+0x9c>)
 8004b72:	8809      	ldrh	r1, [r1, #0]
 8004b74:	8451      	strh	r1, [r2, #34]	; 0x22
	  switch (Sensitivity)//Выбираем чувствительность
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d00f      	beq.n	8004b9a <Setting_Init+0x7e>
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d012      	beq.n	8004ba4 <Setting_Init+0x88>
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d007      	beq.n	8004b92 <Setting_Init+0x76>
		  R120_RESET;
 8004b82:	2290      	movs	r2, #144	; 0x90
 8004b84:	05d2      	lsls	r2, r2, #23
 8004b86:	6991      	ldr	r1, [r2, #24]
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	055b      	lsls	r3, r3, #21
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6193      	str	r3, [r2, #24]
}
 8004b90:	bd10      	pop	{r4, pc}
			TargetConcentration=NH;
 8004b92:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004b94:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <Setting_Init+0xa0>)
 8004b96:	801a      	strh	r2, [r3, #0]
		  }break;
 8004b98:	e7f3      	b.n	8004b82 <Setting_Init+0x66>
			TargetConcentration=CH;
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <Setting_Init+0x94>)
 8004b9c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <Setting_Init+0xa0>)
 8004ba0:	801a      	strh	r2, [r3, #0]
		  }break;
 8004ba2:	e7ee      	b.n	8004b82 <Setting_Init+0x66>
			TargetConcentration=VH;
 8004ba4:	4b02      	ldr	r3, [pc, #8]	; (8004bb0 <Setting_Init+0x94>)
 8004ba6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <Setting_Init+0xa0>)
 8004baa:	801a      	strh	r2, [r3, #0]
		  }break;
 8004bac:	e7e9      	b.n	8004b82 <Setting_Init+0x66>
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	2000000c 	.word	0x2000000c
 8004bb4:	20000178 	.word	0x20000178
 8004bb8:	200004d8 	.word	0x200004d8
 8004bbc:	20000372 	.word	0x20000372

08004bc0 <GasMeasurement>:
{
 8004bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc2:	46d6      	mov	lr, sl
 8004bc4:	464f      	mov	r7, r9
 8004bc6:	4646      	mov	r6, r8
 8004bc8:	b5c0      	push	{r6, r7, lr}
 8004bca:	b082      	sub	sp, #8
		SecondsCounter++; //Считаем одну секунду
 8004bcc:	4db8      	ldr	r5, [pc, #736]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004bce:	79ab      	ldrb	r3, [r5, #6]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	71ab      	strb	r3, [r5, #6]
		SecondsCounter15++;//Считаем одну секунду
 8004bd4:	79eb      	ldrb	r3, [r5, #7]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	71eb      	strb	r3, [r5, #7]
		VoltageInR2 = 3.3f * ADC_Read() / 4096.0f;//Переводим значение АЦП (12бит) в вольты
 8004bda:	f7ff fcdd 	bl	8004598 <ADC_Read>
 8004bde:	f7fc fa37 	bl	8001050 <__aeabi_i2f>
 8004be2:	49b4      	ldr	r1, [pc, #720]	; (8004eb4 <GasMeasurement+0x2f4>)
 8004be4:	f7fb ff1c 	bl	8000a20 <__aeabi_fmul>
 8004be8:	21e6      	movs	r1, #230	; 0xe6
 8004bea:	0589      	lsls	r1, r1, #22
 8004bec:	f7fb ff18 	bl	8000a20 <__aeabi_fmul>
 8004bf0:	1c04      	adds	r4, r0, #0
 8004bf2:	60a8      	str	r0, [r5, #8]
		if(VoltageInR2==0) //Не поступает сигнал с датчика
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f7fb fb67 	bl	80002c8 <__aeabi_fcmpeq>
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d003      	beq.n	8004c06 <GasMeasurement+0x46>
			StatusMode = 23;
 8004bfe:	4aae      	ldr	r2, [pc, #696]	; (8004eb8 <GasMeasurement+0x2f8>)
 8004c00:	232a      	movs	r3, #42	; 0x2a
 8004c02:	2117      	movs	r1, #23
 8004c04:	54d1      	strb	r1, [r2, r3]
		Ir2 = (double)VoltageInR2/(double)(R2*1000);//Вычисляем ток в цепи
 8004c06:	4eac      	ldr	r6, [pc, #688]	; (8004eb8 <GasMeasurement+0x2f8>)
 8004c08:	49ac      	ldr	r1, [pc, #688]	; (8004ebc <GasMeasurement+0x2fc>)
 8004c0a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004c0c:	f7fb ff08 	bl	8000a20 <__aeabi_fmul>
 8004c10:	1c01      	adds	r1, r0, #0
 8004c12:	1c20      	adds	r0, r4, #0
 8004c14:	f7fb fd3a 	bl	800068c <__aeabi_fdiv>
 8004c18:	4680      	mov	r8, r0
 8004c1a:	4da5      	ldr	r5, [pc, #660]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004c1c:	60e8      	str	r0, [r5, #12]
		Use = 5.0f - VoltageInR2 - Ir2*(double)(R1*1000);//вычиляем напряжение на чувств элементе
 8004c1e:	1c21      	adds	r1, r4, #0
 8004c20:	48a7      	ldr	r0, [pc, #668]	; (8004ec0 <GasMeasurement+0x300>)
 8004c22:	f7fc f817 	bl	8000c54 <__aeabi_fsub>
 8004c26:	f7fd fd4b 	bl	80026c0 <__aeabi_f2d>
 8004c2a:	9000      	str	r0, [sp, #0]
 8004c2c:	9101      	str	r1, [sp, #4]
 8004c2e:	49a3      	ldr	r1, [pc, #652]	; (8004ebc <GasMeasurement+0x2fc>)
 8004c30:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8004c32:	f7fb fef5 	bl	8000a20 <__aeabi_fmul>
 8004c36:	f7fd fd43 	bl	80026c0 <__aeabi_f2d>
 8004c3a:	0006      	movs	r6, r0
 8004c3c:	000f      	movs	r7, r1
 8004c3e:	4640      	mov	r0, r8
 8004c40:	f7fd fd3e 	bl	80026c0 <__aeabi_f2d>
 8004c44:	0032      	movs	r2, r6
 8004c46:	003b      	movs	r3, r7
 8004c48:	f7fc ff0c 	bl	8001a64 <__aeabi_dmul>
 8004c4c:	0002      	movs	r2, r0
 8004c4e:	000b      	movs	r3, r1
 8004c50:	9800      	ldr	r0, [sp, #0]
 8004c52:	9901      	ldr	r1, [sp, #4]
 8004c54:	f7fd f972 	bl	8001f3c <__aeabi_dsub>
 8004c58:	f7fd fd7a 	bl	8002750 <__aeabi_d2f>
 8004c5c:	1c04      	adds	r4, r0, #0
 8004c5e:	6128      	str	r0, [r5, #16]
		Rse = Use/(double)(Ir2*1000.f);//находим сопротивление чувствительного элемента в кОм
 8004c60:	4996      	ldr	r1, [pc, #600]	; (8004ebc <GasMeasurement+0x2fc>)
 8004c62:	4640      	mov	r0, r8
 8004c64:	f7fb fedc 	bl	8000a20 <__aeabi_fmul>
 8004c68:	1c01      	adds	r1, r0, #0
 8004c6a:	1c20      	adds	r0, r4, #0
 8004c6c:	f7fb fd0e 	bl	800068c <__aeabi_fdiv>
 8004c70:	1c04      	adds	r4, r0, #0
 8004c72:	6168      	str	r0, [r5, #20]
		if(SecondsCounter>0 && SecondsCounter<61)
 8004c74:	79ad      	ldrb	r5, [r5, #6]
 8004c76:	1e6b      	subs	r3, r5, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b3b      	cmp	r3, #59	; 0x3b
 8004c7c:	d805      	bhi.n	8004c8a <GasMeasurement+0xca>
			ArrayOfResistanceMeasurementsPerSecond[SecondsCounter-1] = (uint16_t)Rse;//запись текущего сопротивления в массив, для нахождения среднего за 60 сек
 8004c7e:	1e6e      	subs	r6, r5, #1
 8004c80:	f7fb fb50 	bl	8000324 <__aeabi_f2uiz>
 8004c84:	0076      	lsls	r6, r6, #1
 8004c86:	4b8f      	ldr	r3, [pc, #572]	; (8004ec4 <GasMeasurement+0x304>)
 8004c88:	5398      	strh	r0, [r3, r6]
		if(SecondsCounter15>0 && SecondsCounter15<16)
 8004c8a:	4b89      	ldr	r3, [pc, #548]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004c8c:	79de      	ldrb	r6, [r3, #7]
 8004c8e:	1e73      	subs	r3, r6, #1
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b0e      	cmp	r3, #14
 8004c94:	d806      	bhi.n	8004ca4 <GasMeasurement+0xe4>
			ArrayOfResistanceMeasurementsPerSecond15[SecondsCounter15-1] = (uint16_t)Rse;//запись текущего сопротивления в массив, для нахождения среднего за 15 сек
 8004c96:	1e77      	subs	r7, r6, #1
 8004c98:	1c20      	adds	r0, r4, #0
 8004c9a:	f7fb fb43 	bl	8000324 <__aeabi_f2uiz>
 8004c9e:	007f      	lsls	r7, r7, #1
 8004ca0:	4b89      	ldr	r3, [pc, #548]	; (8004ec8 <GasMeasurement+0x308>)
 8004ca2:	53d8      	strh	r0, [r3, r7]
		if(SecondsCounter15==15)//прошло 15 секунд
 8004ca4:	2e0f      	cmp	r6, #15
 8004ca6:	d043      	beq.n	8004d30 <GasMeasurement+0x170>
		if(SecondsCounter==60)//прошла минута
 8004ca8:	2d3c      	cmp	r5, #60	; 0x3c
 8004caa:	d044      	beq.n	8004d36 <GasMeasurement+0x176>
		if(R_average!=0)
 8004cac:	4b80      	ldr	r3, [pc, #512]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004cae:	8c1c      	ldrh	r4, [r3, #32]
 8004cb0:	2c00      	cmp	r4, #0
 8004cb2:	d008      	beq.n	8004cc6 <GasMeasurement+0x106>
			if(R15min>0)
 8004cb4:	8bdd      	ldrh	r5, [r3, #30]
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	d000      	beq.n	8004cbc <GasMeasurement+0xfc>
 8004cba:	e0b3      	b.n	8004e24 <GasMeasurement+0x264>
			if(R15sek>0)
 8004cbc:	4b7c      	ldr	r3, [pc, #496]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004cbe:	8b1c      	ldrh	r4, [r3, #24]
 8004cc0:	2c00      	cmp	r4, #0
 8004cc2:	d000      	beq.n	8004cc6 <GasMeasurement+0x106>
 8004cc4:	e106      	b.n	8004ed4 <GasMeasurement+0x314>
		if(S15sek>S15min)
 8004cc6:	4b7a      	ldr	r3, [pc, #488]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004cc8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004cca:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004ccc:	1c29      	adds	r1, r5, #0
 8004cce:	1c20      	adds	r0, r4, #0
 8004cd0:	f7fb fb14 	bl	80002fc <__aeabi_fcmpgt>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d100      	bne.n	8004cda <GasMeasurement+0x11a>
 8004cd8:	e145      	b.n	8004f66 <GasMeasurement+0x3a6>
			Signal = S15sek-S15min;
 8004cda:	1c29      	adds	r1, r5, #0
 8004cdc:	1c20      	adds	r0, r4, #0
 8004cde:	f7fb ffb9 	bl	8000c54 <__aeabi_fsub>
 8004ce2:	f7fb fb1f 	bl	8000324 <__aeabi_f2uiz>
 8004ce6:	4b72      	ldr	r3, [pc, #456]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004ce8:	8598      	strh	r0, [r3, #44]	; 0x2c
		S=Signal;
 8004cea:	4c71      	ldr	r4, [pc, #452]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004cec:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
 8004cee:	0030      	movs	r0, r6
 8004cf0:	f7fc f9f4 	bl	80010dc <__aeabi_ui2f>
 8004cf4:	6320      	str	r0, [r4, #48]	; 0x30
		usRegAnalog[2] = (uint16_t)(Signal);
 8004cf6:	4d70      	ldr	r5, [pc, #448]	; (8004eb8 <GasMeasurement+0x2f8>)
 8004cf8:	822e      	strh	r6, [r5, #16]
		usRegAnalog[3] = (uint16_t)(R_average);
 8004cfa:	8c23      	ldrh	r3, [r4, #32]
 8004cfc:	826b      	strh	r3, [r5, #18]
		usRegAnalog[4] = (uint16_t)(Rse);
 8004cfe:	6960      	ldr	r0, [r4, #20]
 8004d00:	f7fb fb10 	bl	8000324 <__aeabi_f2uiz>
 8004d04:	82a8      	strh	r0, [r5, #20]
}
 8004d06:	b002      	add	sp, #8
 8004d08:	bce0      	pop	{r5, r6, r7}
 8004d0a:	46ba      	mov	sl, r7
 8004d0c:	46b1      	mov	r9, r6
 8004d0e:	46a8      	mov	r8, r5
 8004d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
				Sum15sek+=ArrayOfResistanceMeasurementsPerSecond15[i];
 8004d12:	0059      	lsls	r1, r3, #1
 8004d14:	4a6c      	ldr	r2, [pc, #432]	; (8004ec8 <GasMeasurement+0x308>)
 8004d16:	5a8a      	ldrh	r2, [r1, r2]
 8004d18:	1880      	adds	r0, r0, r2
			for(int i=0; i<15; i++)
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	2b0e      	cmp	r3, #14
 8004d1e:	ddf8      	ble.n	8004d12 <GasMeasurement+0x152>
			R15sek = Sum15sek/15;//нашли бегущее среднее за 15 секунд
 8004d20:	210f      	movs	r1, #15
 8004d22:	f7fb f9fb 	bl	800011c <__udivsi3>
 8004d26:	4b62      	ldr	r3, [pc, #392]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004d28:	8318      	strh	r0, [r3, #24]
			SecondsCounter15=0;
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	71da      	strb	r2, [r3, #7]
 8004d2e:	e7bb      	b.n	8004ca8 <GasMeasurement+0xe8>
			for(int i=0; i<15; i++)
 8004d30:	2300      	movs	r3, #0
			uint32_t Sum15sek=0;
 8004d32:	2000      	movs	r0, #0
 8004d34:	e7f2      	b.n	8004d1c <GasMeasurement+0x15c>
			MinuteCounter++;//Считаем минуты для R0
 8004d36:	4b5e      	ldr	r3, [pc, #376]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004d38:	7e9f      	ldrb	r7, [r3, #26]
 8004d3a:	1c7c      	adds	r4, r7, #1
 8004d3c:	b2e4      	uxtb	r4, r4
 8004d3e:	769c      	strb	r4, [r3, #26]
			MinuteCounter15++;//Считаем минуты для R15
 8004d40:	7ede      	ldrb	r6, [r3, #27]
 8004d42:	1c75      	adds	r5, r6, #1
 8004d44:	b2ed      	uxtb	r5, r5
 8004d46:	76dd      	strb	r5, [r3, #27]
			for(int i=0; i<60; i++)
 8004d48:	2300      	movs	r3, #0
			uint32_t Sum=0;
 8004d4a:	2000      	movs	r0, #0
			for(int i=0; i<60; i++)
 8004d4c:	e004      	b.n	8004d58 <GasMeasurement+0x198>
				Sum+=ArrayOfResistanceMeasurementsPerSecond[i];
 8004d4e:	0059      	lsls	r1, r3, #1
 8004d50:	4a5c      	ldr	r2, [pc, #368]	; (8004ec4 <GasMeasurement+0x304>)
 8004d52:	5a8a      	ldrh	r2, [r1, r2]
 8004d54:	1880      	adds	r0, r0, r2
			for(int i=0; i<60; i++)
 8004d56:	3301      	adds	r3, #1
 8004d58:	2b3b      	cmp	r3, #59	; 0x3b
 8004d5a:	ddf8      	ble.n	8004d4e <GasMeasurement+0x18e>
			Srednee = Sum/60;
 8004d5c:	213c      	movs	r1, #60	; 0x3c
 8004d5e:	f7fb f9dd 	bl	800011c <__udivsi3>
			if(MinuteCounter>0 && MinuteCounter<61)
 8004d62:	2f3b      	cmp	r7, #59	; 0x3b
 8004d64:	d804      	bhi.n	8004d70 <GasMeasurement+0x1b0>
				ArrayOfResistanceMeasurementsPerMinute[MinuteCounter-1] = (uint8_t)Srednee;//записали среднее значение в массив за минуту измерений
 8004d66:	1e63      	subs	r3, r4, #1
 8004d68:	b2c2      	uxtb	r2, r0
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	4957      	ldr	r1, [pc, #348]	; (8004ecc <GasMeasurement+0x30c>)
 8004d6e:	525a      	strh	r2, [r3, r1]
			if(MinuteCounter15>0 && MinuteCounter15<16)
 8004d70:	2e0e      	cmp	r6, #14
 8004d72:	d804      	bhi.n	8004d7e <GasMeasurement+0x1be>
				ArrayOfResistanceMeasurementsPerMinute15[MinuteCounter15-1] = (uint8_t)Srednee;//записали среднее значение в массив за минуту измерений
 8004d74:	1e6b      	subs	r3, r5, #1
 8004d76:	b2c0      	uxtb	r0, r0
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4a55      	ldr	r2, [pc, #340]	; (8004ed0 <GasMeasurement+0x310>)
 8004d7c:	5298      	strh	r0, [r3, r2]
			SecondsCounter=0;
 8004d7e:	4b4c      	ldr	r3, [pc, #304]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	719a      	strb	r2, [r3, #6]
			if(Flag15min==0)
 8004d84:	7f1b      	ldrb	r3, [r3, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d105      	bne.n	8004d96 <GasMeasurement+0x1d6>
				R15min = ArrayOfResistanceMeasurementsPerMinute15[MinuteCounter15-1];//R15 будет равно последниму измеренному значению, пока не будет заполнен массив
 8004d8a:	1e6b      	subs	r3, r5, #1
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4a50      	ldr	r2, [pc, #320]	; (8004ed0 <GasMeasurement+0x310>)
 8004d90:	5a9a      	ldrh	r2, [r3, r2]
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004d94:	83da      	strh	r2, [r3, #30]
			if(MinuteCounter15==15)//когда прошло 15 минут
 8004d96:	2d0f      	cmp	r5, #15
 8004d98:	d018      	beq.n	8004dcc <GasMeasurement+0x20c>
			if(R_average<ArrayOfResistanceMeasurementsPerMinute[MinuteCounter-1] && FlagHourExpired!=1)//если текущее сопротивление выше, чем сопротивление среднее,
 8004d9a:	1e63      	subs	r3, r4, #1
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	4a4b      	ldr	r2, [pc, #300]	; (8004ecc <GasMeasurement+0x30c>)
 8004da0:	5a9b      	ldrh	r3, [r3, r2]
 8004da2:	4a43      	ldr	r2, [pc, #268]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004da4:	8c12      	ldrh	r2, [r2, #32]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d905      	bls.n	8004db6 <GasMeasurement+0x1f6>
 8004daa:	4941      	ldr	r1, [pc, #260]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004dac:	2222      	movs	r2, #34	; 0x22
 8004dae:	5c8a      	ldrb	r2, [r1, r2]
 8004db0:	2a01      	cmp	r2, #1
 8004db2:	d000      	beq.n	8004db6 <GasMeasurement+0x1f6>
				R_average = ArrayOfResistanceMeasurementsPerMinute[MinuteCounter-1];//записали среднее сопротивление
 8004db4:	840b      	strh	r3, [r1, #32]
			if((MinuteCounter==60) || (FlagHourExpired==1))//каждую минуту пишем
 8004db6:	2c3c      	cmp	r4, #60	; 0x3c
 8004db8:	d031      	beq.n	8004e1e <GasMeasurement+0x25e>
 8004dba:	4a3d      	ldr	r2, [pc, #244]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004dbc:	2322      	movs	r3, #34	; 0x22
 8004dbe:	5cd3      	ldrb	r3, [r2, r3]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d000      	beq.n	8004dc6 <GasMeasurement+0x206>
 8004dc4:	e772      	b.n	8004cac <GasMeasurement+0xec>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e018      	b.n	8004dfe <GasMeasurement+0x23e>
				for(int i=0; i<15; i++)
 8004dcc:	2300      	movs	r3, #0
				uint32_t Sum15min=0;
 8004dce:	2000      	movs	r0, #0
				for(int i=0; i<15; i++)
 8004dd0:	2b0e      	cmp	r3, #14
 8004dd2:	dc05      	bgt.n	8004de0 <GasMeasurement+0x220>
					Sum15min+=ArrayOfResistanceMeasurementsPerMinute15[i];
 8004dd4:	0059      	lsls	r1, r3, #1
 8004dd6:	4a3e      	ldr	r2, [pc, #248]	; (8004ed0 <GasMeasurement+0x310>)
 8004dd8:	5a8a      	ldrh	r2, [r1, r2]
 8004dda:	1880      	adds	r0, r0, r2
				for(int i=0; i<15; i++)
 8004ddc:	3301      	adds	r3, #1
 8004dde:	e7f7      	b.n	8004dd0 <GasMeasurement+0x210>
				R15min = Sum15min/15; //Бегущее среднее сопротивления за 15 минут
 8004de0:	210f      	movs	r1, #15
 8004de2:	f7fb f99b 	bl	800011c <__udivsi3>
 8004de6:	4b32      	ldr	r3, [pc, #200]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004de8:	83d8      	strh	r0, [r3, #30]
				MinuteCounter15=0;
 8004dea:	2200      	movs	r2, #0
 8004dec:	76da      	strb	r2, [r3, #27]
				Flag15min=1;//выставляется единыжды
 8004dee:	3201      	adds	r2, #1
 8004df0:	771a      	strb	r2, [r3, #28]
 8004df2:	e7d2      	b.n	8004d9a <GasMeasurement+0x1da>
					Sum2+=ArrayOfResistanceMeasurementsPerMinute[i];
 8004df4:	0059      	lsls	r1, r3, #1
 8004df6:	4a35      	ldr	r2, [pc, #212]	; (8004ecc <GasMeasurement+0x30c>)
 8004df8:	5a8a      	ldrh	r2, [r1, r2]
 8004dfa:	1880      	adds	r0, r0, r2
				for(int i=0; i<60; i++)
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	2b3b      	cmp	r3, #59	; 0x3b
 8004e00:	ddf8      	ble.n	8004df4 <GasMeasurement+0x234>
				R_average = Sum2/60;;//записали среднее сопротивление за час, и дальше вычисляем каждую минуту среднее сопроитвление
 8004e02:	213c      	movs	r1, #60	; 0x3c
 8004e04:	f7fb f98a 	bl	800011c <__udivsi3>
 8004e08:	4b29      	ldr	r3, [pc, #164]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004e0a:	8418      	strh	r0, [r3, #32]
				FlagHourExpired=1;//флаг выставляется, когда прошел час и пишется скользящее среднее
 8004e0c:	2222      	movs	r2, #34	; 0x22
 8004e0e:	2101      	movs	r1, #1
 8004e10:	5499      	strb	r1, [r3, r2]
				if(MinuteCounter==60)
 8004e12:	2c3c      	cmp	r4, #60	; 0x3c
 8004e14:	d000      	beq.n	8004e18 <GasMeasurement+0x258>
 8004e16:	e749      	b.n	8004cac <GasMeasurement+0xec>
					MinuteCounter=0;
 8004e18:	2200      	movs	r2, #0
 8004e1a:	769a      	strb	r2, [r3, #26]
 8004e1c:	e746      	b.n	8004cac <GasMeasurement+0xec>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2000      	movs	r0, #0
 8004e22:	e7ec      	b.n	8004dfe <GasMeasurement+0x23e>
				S15min = (-A*(B+C/(R15min))*logf(-(-D-F/R_average + (R_average - R15min)/(R_average * G))));//вычисляем концентацию для R15минут
 8004e24:	4e24      	ldr	r6, [pc, #144]	; (8004eb8 <GasMeasurement+0x2f8>)
 8004e26:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8004e28:	2280      	movs	r2, #128	; 0x80
 8004e2a:	0612      	lsls	r2, r2, #24
 8004e2c:	4694      	mov	ip, r2
 8004e2e:	4463      	add	r3, ip
 8004e30:	001f      	movs	r7, r3
 8004e32:	0028      	movs	r0, r5
 8004e34:	f7fc f90c 	bl	8001050 <__aeabi_i2f>
 8004e38:	1c01      	adds	r1, r0, #0
 8004e3a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8004e3c:	f7fb fc26 	bl	800068c <__aeabi_fdiv>
 8004e40:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8004e42:	f7fb fa87 	bl	8000354 <__aeabi_fadd>
 8004e46:	1c01      	adds	r1, r0, #0
 8004e48:	1c38      	adds	r0, r7, #0
 8004e4a:	f7fb fde9 	bl	8000a20 <__aeabi_fmul>
 8004e4e:	4680      	mov	r8, r0
 8004e50:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004e52:	2280      	movs	r2, #128	; 0x80
 8004e54:	0612      	lsls	r2, r2, #24
 8004e56:	4694      	mov	ip, r2
 8004e58:	4463      	add	r3, ip
 8004e5a:	4699      	mov	r9, r3
 8004e5c:	0020      	movs	r0, r4
 8004e5e:	f7fc f8f7 	bl	8001050 <__aeabi_i2f>
 8004e62:	1c07      	adds	r7, r0, #0
 8004e64:	1c01      	adds	r1, r0, #0
 8004e66:	6c70      	ldr	r0, [r6, #68]	; 0x44
 8004e68:	f7fb fc10 	bl	800068c <__aeabi_fdiv>
 8004e6c:	1c01      	adds	r1, r0, #0
 8004e6e:	4648      	mov	r0, r9
 8004e70:	f7fb fef0 	bl	8000c54 <__aeabi_fsub>
 8004e74:	4681      	mov	r9, r0
 8004e76:	1b64      	subs	r4, r4, r5
 8004e78:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004e7a:	1c38      	adds	r0, r7, #0
 8004e7c:	f7fb fdd0 	bl	8000a20 <__aeabi_fmul>
 8004e80:	1c05      	adds	r5, r0, #0
 8004e82:	0020      	movs	r0, r4
 8004e84:	f7fc f8e4 	bl	8001050 <__aeabi_i2f>
 8004e88:	1c29      	adds	r1, r5, #0
 8004e8a:	f7fb fbff 	bl	800068c <__aeabi_fdiv>
 8004e8e:	1c01      	adds	r1, r0, #0
 8004e90:	4648      	mov	r0, r9
 8004e92:	f7fb fa5f 	bl	8000354 <__aeabi_fadd>
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	469c      	mov	ip, r3
 8004e9c:	4460      	add	r0, ip
 8004e9e:	f003 f889 	bl	8007fb4 <logf>
 8004ea2:	1c01      	adds	r1, r0, #0
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	f7fb fdbb 	bl	8000a20 <__aeabi_fmul>
 8004eaa:	4b01      	ldr	r3, [pc, #4]	; (8004eb0 <GasMeasurement+0x2f0>)
 8004eac:	6258      	str	r0, [r3, #36]	; 0x24
 8004eae:	e705      	b.n	8004cbc <GasMeasurement+0xfc>
 8004eb0:	20000178 	.word	0x20000178
 8004eb4:	40533333 	.word	0x40533333
 8004eb8:	2000000c 	.word	0x2000000c
 8004ebc:	447a0000 	.word	0x447a0000
 8004ec0:	40a00000 	.word	0x40a00000
 8004ec4:	20000460 	.word	0x20000460
 8004ec8:	20000354 	.word	0x20000354
 8004ecc:	2000022c 	.word	0x2000022c
 8004ed0:	20000334 	.word	0x20000334
				S15sek = (-A*(B+C/(R15sek))*logf(-(-D-F/R_average + (R_average - R15sek)/(R_average * G))));//вычисляем концентацию для R15секунд
 8004ed4:	4d26      	ldr	r5, [pc, #152]	; (8004f70 <GasMeasurement+0x3b0>)
 8004ed6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004ed8:	2280      	movs	r2, #128	; 0x80
 8004eda:	0612      	lsls	r2, r2, #24
 8004edc:	4694      	mov	ip, r2
 8004ede:	4463      	add	r3, ip
 8004ee0:	001e      	movs	r6, r3
 8004ee2:	0020      	movs	r0, r4
 8004ee4:	f7fc f8b4 	bl	8001050 <__aeabi_i2f>
 8004ee8:	1c01      	adds	r1, r0, #0
 8004eea:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004eec:	f7fb fbce 	bl	800068c <__aeabi_fdiv>
 8004ef0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8004ef2:	f7fb fa2f 	bl	8000354 <__aeabi_fadd>
 8004ef6:	1c01      	adds	r1, r0, #0
 8004ef8:	1c30      	adds	r0, r6, #0
 8004efa:	f7fb fd91 	bl	8000a20 <__aeabi_fmul>
 8004efe:	4680      	mov	r8, r0
 8004f00:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004f02:	2280      	movs	r2, #128	; 0x80
 8004f04:	0612      	lsls	r2, r2, #24
 8004f06:	4694      	mov	ip, r2
 8004f08:	4463      	add	r3, ip
 8004f0a:	469a      	mov	sl, r3
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <GasMeasurement+0x3b4>)
 8004f0e:	4699      	mov	r9, r3
 8004f10:	8c1e      	ldrh	r6, [r3, #32]
 8004f12:	0030      	movs	r0, r6
 8004f14:	f7fc f89c 	bl	8001050 <__aeabi_i2f>
 8004f18:	1c07      	adds	r7, r0, #0
 8004f1a:	1c01      	adds	r1, r0, #0
 8004f1c:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8004f1e:	f7fb fbb5 	bl	800068c <__aeabi_fdiv>
 8004f22:	1c01      	adds	r1, r0, #0
 8004f24:	4650      	mov	r0, sl
 8004f26:	f7fb fe95 	bl	8000c54 <__aeabi_fsub>
 8004f2a:	4682      	mov	sl, r0
 8004f2c:	1b34      	subs	r4, r6, r4
 8004f2e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8004f30:	1c38      	adds	r0, r7, #0
 8004f32:	f7fb fd75 	bl	8000a20 <__aeabi_fmul>
 8004f36:	1c05      	adds	r5, r0, #0
 8004f38:	0020      	movs	r0, r4
 8004f3a:	f7fc f889 	bl	8001050 <__aeabi_i2f>
 8004f3e:	1c29      	adds	r1, r5, #0
 8004f40:	f7fb fba4 	bl	800068c <__aeabi_fdiv>
 8004f44:	1c01      	adds	r1, r0, #0
 8004f46:	4650      	mov	r0, sl
 8004f48:	f7fb fa04 	bl	8000354 <__aeabi_fadd>
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	469c      	mov	ip, r3
 8004f52:	4460      	add	r0, ip
 8004f54:	f003 f82e 	bl	8007fb4 <logf>
 8004f58:	1c01      	adds	r1, r0, #0
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f7fb fd60 	bl	8000a20 <__aeabi_fmul>
 8004f60:	464b      	mov	r3, r9
 8004f62:	6298      	str	r0, [r3, #40]	; 0x28
 8004f64:	e6af      	b.n	8004cc6 <GasMeasurement+0x106>
			Signal = 0;
 8004f66:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <GasMeasurement+0x3b4>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004f6c:	e6bd      	b.n	8004cea <GasMeasurement+0x12a>
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	2000000c 	.word	0x2000000c
 8004f74:	20000178 	.word	0x20000178

08004f78 <IWDG_Init>:
	IWDG->KR = 0xCCCC;//Запуск таймера IWDG
 8004f78:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <IWDG_Init+0x24>)
 8004f7a:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <IWDG_Init+0x28>)
 8004f7c:	601a      	str	r2, [r3, #0]
	IWDG->KR = 0x5555;//Разрешение доступа к таймеру
 8004f7e:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <IWDG_Init+0x2c>)
 8004f80:	601a      	str	r2, [r3, #0]
	IWDG->PR = 0b111;//Предделитель /256
 8004f82:	2207      	movs	r2, #7
 8004f84:	605a      	str	r2, [r3, #4]
	IWDG->RLR = 156*10;//Значение регистра перезагрузки (время сброса таймера ~1c)
 8004f86:	22c3      	movs	r2, #195	; 0xc3
 8004f88:	00d2      	lsls	r2, r2, #3
 8004f8a:	609a      	str	r2, [r3, #8]
	while(IWDG->SR);//Ожидание обновления регистров
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <IWDG_Init+0x24>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1fb      	bne.n	8004f8c <IWDG_Init+0x14>
	IWDG->KR = 0xAAAA;//Обновление значения счетчика
 8004f94:	4b01      	ldr	r3, [pc, #4]	; (8004f9c <IWDG_Init+0x24>)
 8004f96:	4a04      	ldr	r2, [pc, #16]	; (8004fa8 <IWDG_Init+0x30>)
 8004f98:	601a      	str	r2, [r3, #0]
}
 8004f9a:	4770      	bx	lr
 8004f9c:	40003000 	.word	0x40003000
 8004fa0:	0000cccc 	.word	0x0000cccc
 8004fa4:	00005555 	.word	0x00005555
 8004fa8:	0000aaaa 	.word	0x0000aaaa

08004fac <IWDG_Reset>:
	IWDG->KR = 0xAAAA;//сбрасываем сторожевой таймер
 8004fac:	4b01      	ldr	r3, [pc, #4]	; (8004fb4 <IWDG_Reset+0x8>)
 8004fae:	4a02      	ldr	r2, [pc, #8]	; (8004fb8 <IWDG_Reset+0xc>)
 8004fb0:	601a      	str	r2, [r3, #0]
}
 8004fb2:	4770      	bx	lr
 8004fb4:	40003000 	.word	0x40003000
 8004fb8:	0000aaaa 	.word	0x0000aaaa

08004fbc <ModeAlarm>:
{
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	46ce      	mov	lr, r9
 8004fc0:	4647      	mov	r7, r8
 8004fc2:	b580      	push	{r7, lr}
	ExceedanceCounter++;//Счетчик ошибок
 8004fc4:	4a83      	ldr	r2, [pc, #524]	; (80051d4 <ModeAlarm+0x218>)
 8004fc6:	8813      	ldrh	r3, [r2, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8013      	strh	r3, [r2, #0]
	usRegAnalog[11] = ExceedanceCounter;
 8004fce:	4a82      	ldr	r2, [pc, #520]	; (80051d8 <ModeAlarm+0x21c>)
 8004fd0:	8453      	strh	r3, [r2, #34]	; 0x22
	TIM15->CR1 |= TIM_CR1_CEN;//запуск таймера 15
 8004fd2:	4a82      	ldr	r2, [pc, #520]	; (80051dc <ModeAlarm+0x220>)
 8004fd4:	6813      	ldr	r3, [r2, #0]
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6013      	str	r3, [r2, #0]
	if(ModeRele==1)//Режим залипания реле
 8004fdc:	4b80      	ldr	r3, [pc, #512]	; (80051e0 <ModeAlarm+0x224>)
 8004fde:	795b      	ldrb	r3, [r3, #5]
 8004fe0:	4699      	mov	r9, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d003      	beq.n	8004fee <ModeAlarm+0x32>
	else if(ModeRele==0)
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d100      	bne.n	8004fec <ModeAlarm+0x30>
 8004fea:	e0b5      	b.n	8005158 <ModeAlarm+0x19c>
 8004fec:	e08d      	b.n	800510a <ModeAlarm+0x14e>
		GPIOB->BSRR |= GPIO_BSRR_BS_12;
 8004fee:	4a7d      	ldr	r2, [pc, #500]	; (80051e4 <ModeAlarm+0x228>)
 8004ff0:	6991      	ldr	r1, [r2, #24]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	015b      	lsls	r3, r3, #5
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	6193      	str	r3, [r2, #24]
		uint8_t FlagZalip=0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	4698      	mov	r8, r3
		while(S>(TargetConcentration-TargetConcentration*0.5) || (S<(TargetConcentration-TargetConcentration*0.1) && FlagZalip==0))
 8004ffe:	e01a      	b.n	8005036 <ModeAlarm+0x7a>
				indicator_sgd4(SPI1, 0x00, StringIndication, 0b000);
 8005000:	4a75      	ldr	r2, [pc, #468]	; (80051d8 <ModeAlarm+0x21c>)
 8005002:	2300      	movs	r3, #0
 8005004:	324c      	adds	r2, #76	; 0x4c
 8005006:	2100      	movs	r1, #0
 8005008:	4877      	ldr	r0, [pc, #476]	; (80051e8 <ModeAlarm+0x22c>)
 800500a:	f7ff fb9f 	bl	800474c <indicator_sgd4>
 800500e:	e059      	b.n	80050c4 <ModeAlarm+0x108>
			if((ShortPressKey_PB8==1 || ShortPressKey_PB2==1) && FlagZalip==0)
 8005010:	4643      	mov	r3, r8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <ModeAlarm+0x68>
				GPIOB->BSRR |= GPIO_BSRR_BR_12;//Выключаем реле
 8005016:	4a73      	ldr	r2, [pc, #460]	; (80051e4 <ModeAlarm+0x228>)
 8005018:	6991      	ldr	r1, [r2, #24]
 800501a:	2380      	movs	r3, #128	; 0x80
 800501c:	055b      	lsls	r3, r3, #21
 800501e:	430b      	orrs	r3, r1
 8005020:	6193      	str	r3, [r2, #24]
				FlagZalip=1;
 8005022:	46c8      	mov	r8, r9
			if(TimerFlagTIM3)
 8005024:	4a6e      	ldr	r2, [pc, #440]	; (80051e0 <ModeAlarm+0x224>)
 8005026:	2337      	movs	r3, #55	; 0x37
 8005028:	5cd3      	ldrb	r3, [r2, r3]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d154      	bne.n	80050d8 <ModeAlarm+0x11c>
			eMBPoll(); //Проверка сообщений по modBus
 800502e:	f001 fa7f 	bl	8006530 <eMBPoll>
			IWDG_Reset(); //Обновление сторожевого таймера (чтобы не выкинуло)
 8005032:	f7ff ffbb 	bl	8004fac <IWDG_Reset>
		while(S>(TargetConcentration-TargetConcentration*0.5) || (S<(TargetConcentration-TargetConcentration*0.1) && FlagZalip==0))
 8005036:	4b6a      	ldr	r3, [pc, #424]	; (80051e0 <ModeAlarm+0x224>)
 8005038:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800503a:	f7fd fb41 	bl	80026c0 <__aeabi_f2d>
 800503e:	0006      	movs	r6, r0
 8005040:	000f      	movs	r7, r1
 8005042:	4b6a      	ldr	r3, [pc, #424]	; (80051ec <ModeAlarm+0x230>)
 8005044:	8818      	ldrh	r0, [r3, #0]
 8005046:	f7fd fb0b 	bl	8002660 <__aeabi_i2d>
 800504a:	0004      	movs	r4, r0
 800504c:	000d      	movs	r5, r1
 800504e:	2200      	movs	r2, #0
 8005050:	4b67      	ldr	r3, [pc, #412]	; (80051f0 <ModeAlarm+0x234>)
 8005052:	f7fc fd07 	bl	8001a64 <__aeabi_dmul>
 8005056:	0002      	movs	r2, r0
 8005058:	000b      	movs	r3, r1
 800505a:	0020      	movs	r0, r4
 800505c:	0029      	movs	r1, r5
 800505e:	f7fc ff6d 	bl	8001f3c <__aeabi_dsub>
 8005062:	0002      	movs	r2, r0
 8005064:	000b      	movs	r3, r1
 8005066:	0030      	movs	r0, r6
 8005068:	0039      	movs	r1, r7
 800506a:	f7fb f90d 	bl	8000288 <__aeabi_dcmpgt>
 800506e:	2800      	cmp	r0, #0
 8005070:	d116      	bne.n	80050a0 <ModeAlarm+0xe4>
 8005072:	4a60      	ldr	r2, [pc, #384]	; (80051f4 <ModeAlarm+0x238>)
 8005074:	4b60      	ldr	r3, [pc, #384]	; (80051f8 <ModeAlarm+0x23c>)
 8005076:	0020      	movs	r0, r4
 8005078:	0029      	movs	r1, r5
 800507a:	f7fc fcf3 	bl	8001a64 <__aeabi_dmul>
 800507e:	0002      	movs	r2, r0
 8005080:	000b      	movs	r3, r1
 8005082:	0020      	movs	r0, r4
 8005084:	0029      	movs	r1, r5
 8005086:	f7fc ff59 	bl	8001f3c <__aeabi_dsub>
 800508a:	0002      	movs	r2, r0
 800508c:	000b      	movs	r3, r1
 800508e:	0030      	movs	r0, r6
 8005090:	0039      	movs	r1, r7
 8005092:	f7fb f8e5 	bl	8000260 <__aeabi_dcmplt>
 8005096:	2800      	cmp	r0, #0
 8005098:	d025      	beq.n	80050e6 <ModeAlarm+0x12a>
 800509a:	4643      	mov	r3, r8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d122      	bne.n	80050e6 <ModeAlarm+0x12a>
			usRegAnalog[1] = (uint16_t)18; //передается сообщение тревоги
 80050a0:	4b4d      	ldr	r3, [pc, #308]	; (80051d8 <ModeAlarm+0x21c>)
 80050a2:	2212      	movs	r2, #18
 80050a4:	81da      	strh	r2, [r3, #14]
			StatusMode = 18;
 80050a6:	2112      	movs	r1, #18
 80050a8:	3218      	adds	r2, #24
 80050aa:	5499      	strb	r1, [r3, r2]
			if(FlagMogan == 0)//моргание красым диодом
 80050ac:	4a4c      	ldr	r2, [pc, #304]	; (80051e0 <ModeAlarm+0x224>)
 80050ae:	2334      	movs	r3, #52	; 0x34
 80050b0:	5cd3      	ldrb	r3, [r2, r3]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1a4      	bne.n	8005000 <ModeAlarm+0x44>
				indicator_sgd4(SPI1, 0x00, StringIndication, 0b100);
 80050b6:	4a48      	ldr	r2, [pc, #288]	; (80051d8 <ModeAlarm+0x21c>)
 80050b8:	3304      	adds	r3, #4
 80050ba:	324c      	adds	r2, #76	; 0x4c
 80050bc:	2100      	movs	r1, #0
 80050be:	484a      	ldr	r0, [pc, #296]	; (80051e8 <ModeAlarm+0x22c>)
 80050c0:	f7ff fb44 	bl	800474c <indicator_sgd4>
			if((ShortPressKey_PB8==1 || ShortPressKey_PB2==1) && FlagZalip==0)
 80050c4:	4a46      	ldr	r2, [pc, #280]	; (80051e0 <ModeAlarm+0x224>)
 80050c6:	2335      	movs	r3, #53	; 0x35
 80050c8:	5cd3      	ldrb	r3, [r2, r3]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d0a0      	beq.n	8005010 <ModeAlarm+0x54>
 80050ce:	2336      	movs	r3, #54	; 0x36
 80050d0:	5cd3      	ldrb	r3, [r2, r3]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d1a6      	bne.n	8005024 <ModeAlarm+0x68>
 80050d6:	e79b      	b.n	8005010 <ModeAlarm+0x54>
				GasMeasurement();//продолжаем измерять
 80050d8:	f7ff fd72 	bl	8004bc0 <GasMeasurement>
				TimerFlagTIM3=0;
 80050dc:	4a40      	ldr	r2, [pc, #256]	; (80051e0 <ModeAlarm+0x224>)
 80050de:	2337      	movs	r3, #55	; 0x37
 80050e0:	2100      	movs	r1, #0
 80050e2:	54d1      	strb	r1, [r2, r3]
 80050e4:	e7a3      	b.n	800502e <ModeAlarm+0x72>
		if(ShortPressKey_PB8==1)
 80050e6:	4a3e      	ldr	r2, [pc, #248]	; (80051e0 <ModeAlarm+0x224>)
 80050e8:	2335      	movs	r3, #53	; 0x35
 80050ea:	5cd3      	ldrb	r3, [r2, r3]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d015      	beq.n	800511c <ModeAlarm+0x160>
		if(ShortPressKey_PB2==1)
 80050f0:	4a3b      	ldr	r2, [pc, #236]	; (80051e0 <ModeAlarm+0x224>)
 80050f2:	2336      	movs	r3, #54	; 0x36
 80050f4:	5cd3      	ldrb	r3, [r2, r3]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d014      	beq.n	8005124 <ModeAlarm+0x168>
		TimerCounterTIM14=0;
 80050fa:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <ModeAlarm+0x224>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	871a      	strh	r2, [r3, #56]	; 0x38
		TIM14->CR1 &= ~TIM_CR1_CEN;//Выключение таймер
 8005100:	4a3e      	ldr	r2, [pc, #248]	; (80051fc <ModeAlarm+0x240>)
 8005102:	6813      	ldr	r3, [r2, #0]
 8005104:	2101      	movs	r1, #1
 8005106:	438b      	bics	r3, r1
 8005108:	6013      	str	r3, [r2, #0]
	TIM15->CR1 &= ~TIM_CR1_CEN;//Выключение таймер
 800510a:	4a34      	ldr	r2, [pc, #208]	; (80051dc <ModeAlarm+0x220>)
 800510c:	6813      	ldr	r3, [r2, #0]
 800510e:	2101      	movs	r1, #1
 8005110:	438b      	bics	r3, r1
 8005112:	6013      	str	r3, [r2, #0]
}
 8005114:	bcc0      	pop	{r6, r7}
 8005116:	46b9      	mov	r9, r7
 8005118:	46b0      	mov	r8, r6
 800511a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ShortPressKey_PB8=0;
 800511c:	3334      	adds	r3, #52	; 0x34
 800511e:	2100      	movs	r1, #0
 8005120:	54d1      	strb	r1, [r2, r3]
 8005122:	e7e5      	b.n	80050f0 <ModeAlarm+0x134>
			ShortPressKey_PB2=0;
 8005124:	3335      	adds	r3, #53	; 0x35
 8005126:	2100      	movs	r1, #0
 8005128:	54d1      	strb	r1, [r2, r3]
 800512a:	e7e6      	b.n	80050fa <ModeAlarm+0x13e>
				indicator_sgd4(SPI1, 0x00, StringIndication, 0b000);
 800512c:	4a2a      	ldr	r2, [pc, #168]	; (80051d8 <ModeAlarm+0x21c>)
 800512e:	2300      	movs	r3, #0
 8005130:	324c      	adds	r2, #76	; 0x4c
 8005132:	2100      	movs	r1, #0
 8005134:	482c      	ldr	r0, [pc, #176]	; (80051e8 <ModeAlarm+0x22c>)
 8005136:	f7ff fb09 	bl	800474c <indicator_sgd4>
			eMBPoll(); //Проверка сообщений по modBus
 800513a:	f001 f9f9 	bl	8006530 <eMBPoll>
			GPIOB->BSRR |= GPIO_BSRR_BR_12;
 800513e:	4a29      	ldr	r2, [pc, #164]	; (80051e4 <ModeAlarm+0x228>)
 8005140:	6991      	ldr	r1, [r2, #24]
 8005142:	2380      	movs	r3, #128	; 0x80
 8005144:	055b      	lsls	r3, r3, #21
 8005146:	430b      	orrs	r3, r1
 8005148:	6193      	str	r3, [r2, #24]
			if(TimerFlagTIM3)
 800514a:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <ModeAlarm+0x224>)
 800514c:	2337      	movs	r3, #55	; 0x37
 800514e:	5cd3      	ldrb	r3, [r2, r3]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d132      	bne.n	80051ba <ModeAlarm+0x1fe>
			IWDG_Reset(); //Обновление сторожевого таймера (чтобы не выкинуло)
 8005154:	f7ff ff2a 	bl	8004fac <IWDG_Reset>
		while(S>(TargetConcentration-TargetConcentration*0.5))//крутимся, пока концентрация выше
 8005158:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <ModeAlarm+0x224>)
 800515a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800515c:	f7fd fab0 	bl	80026c0 <__aeabi_f2d>
 8005160:	0006      	movs	r6, r0
 8005162:	000f      	movs	r7, r1
 8005164:	4b21      	ldr	r3, [pc, #132]	; (80051ec <ModeAlarm+0x230>)
 8005166:	8818      	ldrh	r0, [r3, #0]
 8005168:	f7fd fa7a 	bl	8002660 <__aeabi_i2d>
 800516c:	0004      	movs	r4, r0
 800516e:	000d      	movs	r5, r1
 8005170:	2200      	movs	r2, #0
 8005172:	4b1f      	ldr	r3, [pc, #124]	; (80051f0 <ModeAlarm+0x234>)
 8005174:	f7fc fc76 	bl	8001a64 <__aeabi_dmul>
 8005178:	0002      	movs	r2, r0
 800517a:	000b      	movs	r3, r1
 800517c:	0020      	movs	r0, r4
 800517e:	0029      	movs	r1, r5
 8005180:	f7fc fedc 	bl	8001f3c <__aeabi_dsub>
 8005184:	0002      	movs	r2, r0
 8005186:	000b      	movs	r3, r1
 8005188:	0030      	movs	r0, r6
 800518a:	0039      	movs	r1, r7
 800518c:	f7fb f87c 	bl	8000288 <__aeabi_dcmpgt>
 8005190:	2800      	cmp	r0, #0
 8005192:	d019      	beq.n	80051c8 <ModeAlarm+0x20c>
			usRegAnalog[1] = (uint16_t)18; //передается сообщение тревоги
 8005194:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <ModeAlarm+0x21c>)
 8005196:	2212      	movs	r2, #18
 8005198:	81da      	strh	r2, [r3, #14]
			StatusMode = 18;
 800519a:	2112      	movs	r1, #18
 800519c:	3218      	adds	r2, #24
 800519e:	5499      	strb	r1, [r3, r2]
			if(FlagMogan == 0)
 80051a0:	4a0f      	ldr	r2, [pc, #60]	; (80051e0 <ModeAlarm+0x224>)
 80051a2:	2334      	movs	r3, #52	; 0x34
 80051a4:	5cd3      	ldrb	r3, [r2, r3]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1c0      	bne.n	800512c <ModeAlarm+0x170>
				indicator_sgd4(SPI1, 0x00, StringIndication, 0b100);
 80051aa:	4a0b      	ldr	r2, [pc, #44]	; (80051d8 <ModeAlarm+0x21c>)
 80051ac:	3304      	adds	r3, #4
 80051ae:	324c      	adds	r2, #76	; 0x4c
 80051b0:	2100      	movs	r1, #0
 80051b2:	480d      	ldr	r0, [pc, #52]	; (80051e8 <ModeAlarm+0x22c>)
 80051b4:	f7ff faca 	bl	800474c <indicator_sgd4>
 80051b8:	e7bf      	b.n	800513a <ModeAlarm+0x17e>
				GasMeasurement();//продолжаем измерять
 80051ba:	f7ff fd01 	bl	8004bc0 <GasMeasurement>
				TimerFlagTIM3=0;
 80051be:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <ModeAlarm+0x224>)
 80051c0:	2337      	movs	r3, #55	; 0x37
 80051c2:	2100      	movs	r1, #0
 80051c4:	54d1      	strb	r1, [r2, r3]
 80051c6:	e7c5      	b.n	8005154 <ModeAlarm+0x198>
		StatusMode = 13;//переходим в режим норма
 80051c8:	4a03      	ldr	r2, [pc, #12]	; (80051d8 <ModeAlarm+0x21c>)
 80051ca:	232a      	movs	r3, #42	; 0x2a
 80051cc:	210d      	movs	r1, #13
 80051ce:	54d1      	strb	r1, [r2, r3]
 80051d0:	e79b      	b.n	800510a <ModeAlarm+0x14e>
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	200004d8 	.word	0x200004d8
 80051d8:	2000000c 	.word	0x2000000c
 80051dc:	40014000 	.word	0x40014000
 80051e0:	20000178 	.word	0x20000178
 80051e4:	48000400 	.word	0x48000400
 80051e8:	40013000 	.word	0x40013000
 80051ec:	20000372 	.word	0x20000372
 80051f0:	3fe00000 	.word	0x3fe00000
 80051f4:	9999999a 	.word	0x9999999a
 80051f8:	3fb99999 	.word	0x3fb99999
 80051fc:	40002000 	.word	0x40002000

08005200 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //Обработчик прерываний EXTI
{
	EXTI_PRreg = EXTI->PR;
 8005200:	4a2e      	ldr	r2, [pc, #184]	; (80052bc <HAL_GPIO_EXTI_Callback+0xbc>)
 8005202:	6953      	ldr	r3, [r2, #20]
 8005204:	b29b      	uxth	r3, r3
 8005206:	492e      	ldr	r1, [pc, #184]	; (80052c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8005208:	800b      	strh	r3, [r1, #0]
	EXTI->PR |= 1;
 800520a:	6951      	ldr	r1, [r2, #20]
 800520c:	2001      	movs	r0, #1
 800520e:	4301      	orrs	r1, r0
 8005210:	6151      	str	r1, [r2, #20]
	if((EXTI_PRreg & EXTI_PR_PR2)>0)
 8005212:	075a      	lsls	r2, r3, #29
 8005214:	d50e      	bpl.n	8005234 <HAL_GPIO_EXTI_Callback+0x34>
	{
		EXTI_PRreg &= ~EXTI_PR_PR2;
 8005216:	2204      	movs	r2, #4
 8005218:	4393      	bics	r3, r2
 800521a:	4a29      	ldr	r2, [pc, #164]	; (80052c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 800521c:	8013      	strh	r3, [r2, #0]
		if(!ClickFlag_PB2)
 800521e:	4a29      	ldr	r2, [pc, #164]	; (80052c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005220:	233a      	movs	r3, #58	; 0x3a
 8005222:	5cd3      	ldrb	r3, [r2, r3]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d127      	bne.n	8005278 <HAL_GPIO_EXTI_Callback+0x78>
		{
			TimerCounterTIM14=0;
 8005228:	0013      	movs	r3, r2
 800522a:	2200      	movs	r2, #0
 800522c:	871a      	strh	r2, [r3, #56]	; 0x38
			ClickFlag_PB2=1;
 800522e:	323a      	adds	r2, #58	; 0x3a
 8005230:	2101      	movs	r1, #1
 8005232:	5499      	strb	r1, [r3, r2]
			}
			ClickFlag_PB2=0;
		}
	}

	if((EXTI_PRreg & EXTI_PR_PR8)>0)
 8005234:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	05da      	lsls	r2, r3, #23
 800523a:	d50b      	bpl.n	8005254 <HAL_GPIO_EXTI_Callback+0x54>
	{
		EXTI_PRreg &= ~EXTI_PR_PR8;
 800523c:	4a22      	ldr	r2, [pc, #136]	; (80052c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800523e:	4013      	ands	r3, r2
 8005240:	4a1f      	ldr	r2, [pc, #124]	; (80052c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8005242:	8013      	strh	r3, [r2, #0]
		if(!ClickFlag_PB8)
 8005244:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005246:	233b      	movs	r3, #59	; 0x3b
 8005248:	5cd3      	ldrb	r3, [r2, r3]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d122      	bne.n	8005294 <HAL_GPIO_EXTI_Callback+0x94>
		{
			TimerCounterTIM14=0;
			ClickFlag_PB8=1;
 800524e:	333b      	adds	r3, #59	; 0x3b
 8005250:	2101      	movs	r1, #1
 8005252:	54d1      	strb	r1, [r2, r3]
			}
			ClickFlag_PB8=0;
		}
	}

	TimerCounterTIM14=0;
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005256:	2200      	movs	r2, #0
 8005258:	871a      	strh	r2, [r3, #56]	; 0x38
	if(ClickFlag_PB2 || ClickFlag_PB8)
 800525a:	323a      	adds	r2, #58	; 0x3a
 800525c:	5c9b      	ldrb	r3, [r3, r2]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <HAL_GPIO_EXTI_Callback+0x6c>
 8005262:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005264:	333b      	adds	r3, #59	; 0x3b
 8005266:	5cd3      	ldrb	r3, [r2, r3]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d021      	beq.n	80052b0 <HAL_GPIO_EXTI_Callback+0xb0>
	{
		TIM14->CR1 |= TIM_CR1_CEN;//Включение таймер
 800526c:	4a17      	ldr	r2, [pc, #92]	; (80052cc <HAL_GPIO_EXTI_Callback+0xcc>)
 800526e:	6813      	ldr	r3, [r2, #0]
 8005270:	2101      	movs	r1, #1
 8005272:	430b      	orrs	r3, r1
 8005274:	6013      	str	r3, [r2, #0]
	}
	else
	{
		TIM14->CR1 &= ~TIM_CR1_CEN;//Включение таймер
	}
}
 8005276:	4770      	bx	lr
			if(TimerCounterTIM14<3000)
 8005278:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800527a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800527c:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 800527e:	429a      	cmp	r2, r3
 8005280:	d803      	bhi.n	800528a <HAL_GPIO_EXTI_Callback+0x8a>
				ShortPressKey_PB2=1;
 8005282:	4a10      	ldr	r2, [pc, #64]	; (80052c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005284:	2336      	movs	r3, #54	; 0x36
 8005286:	2101      	movs	r1, #1
 8005288:	54d1      	strb	r1, [r2, r3]
			ClickFlag_PB2=0;
 800528a:	4a0e      	ldr	r2, [pc, #56]	; (80052c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800528c:	233a      	movs	r3, #58	; 0x3a
 800528e:	2100      	movs	r1, #0
 8005290:	54d1      	strb	r1, [r2, r3]
 8005292:	e7cf      	b.n	8005234 <HAL_GPIO_EXTI_Callback+0x34>
			if(TimerCounterTIM14<3000)
 8005294:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005296:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8005298:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 800529a:	429a      	cmp	r2, r3
 800529c:	d803      	bhi.n	80052a6 <HAL_GPIO_EXTI_Callback+0xa6>
				ShortPressKey_PB8=1;
 800529e:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 80052a0:	2335      	movs	r3, #53	; 0x35
 80052a2:	2101      	movs	r1, #1
 80052a4:	54d1      	strb	r1, [r2, r3]
			ClickFlag_PB8=0;
 80052a6:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 80052a8:	233b      	movs	r3, #59	; 0x3b
 80052aa:	2100      	movs	r1, #0
 80052ac:	54d1      	strb	r1, [r2, r3]
 80052ae:	e7d1      	b.n	8005254 <HAL_GPIO_EXTI_Callback+0x54>
		TIM14->CR1 &= ~TIM_CR1_CEN;//Включение таймер
 80052b0:	4a06      	ldr	r2, [pc, #24]	; (80052cc <HAL_GPIO_EXTI_Callback+0xcc>)
 80052b2:	6813      	ldr	r3, [r2, #0]
 80052b4:	2101      	movs	r1, #1
 80052b6:	438b      	bics	r3, r1
 80052b8:	6013      	str	r3, [r2, #0]
}
 80052ba:	e7dc      	b.n	8005276 <HAL_GPIO_EXTI_Callback+0x76>
 80052bc:	40010400 	.word	0x40010400
 80052c0:	200002a4 	.word	0x200002a4
 80052c4:	20000178 	.word	0x20000178
 80052c8:	fffffeff 	.word	0xfffffeff
 80052cc:	40002000 	.word	0x40002000
 80052d0:	00000bb7 	.word	0x00000bb7

080052d4 <CheckingKeyTimings>:
void CheckingKeyTimings()
{
	if(TimerCounterTIM14==3000 && ClickFlag_PB8==1 && ClickFlag_PB2==0)
 80052d4:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <CheckingKeyTimings+0x6c>)
 80052d6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80052d8:	4a1a      	ldr	r2, [pc, #104]	; (8005344 <CheckingKeyTimings+0x70>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d006      	beq.n	80052ec <CheckingKeyTimings+0x18>
	{
		//ДЛИННОЕ НАЖАТИЕ
		LongPressKey_PB8=1;
	}
	else if(TimerCounterTIM14==3000 && ClickFlag_PB2==1 && ClickFlag_PB8==0)
 80052de:	4a19      	ldr	r2, [pc, #100]	; (8005344 <CheckingKeyTimings+0x70>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d011      	beq.n	8005308 <CheckingKeyTimings+0x34>
	{
		//ДЛИННОЕ НАЖАТИЕ
		LongPressKey_PB2=1;
	}
	else if(TimerCounterTIM14==3000 && ClickFlag_PB8==1 && ClickFlag_PB2==1)
 80052e4:	4a17      	ldr	r2, [pc, #92]	; (8005344 <CheckingKeyTimings+0x70>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01c      	beq.n	8005324 <CheckingKeyTimings+0x50>
	{
		LongDoublePressKey_PB2_PB8=1;
	}

}
 80052ea:	4770      	bx	lr
	if(TimerCounterTIM14==3000 && ClickFlag_PB8==1 && ClickFlag_PB2==0)
 80052ec:	4914      	ldr	r1, [pc, #80]	; (8005340 <CheckingKeyTimings+0x6c>)
 80052ee:	223b      	movs	r2, #59	; 0x3b
 80052f0:	5c8a      	ldrb	r2, [r1, r2]
 80052f2:	2a01      	cmp	r2, #1
 80052f4:	d1f3      	bne.n	80052de <CheckingKeyTimings+0xa>
 80052f6:	3239      	adds	r2, #57	; 0x39
 80052f8:	5c8a      	ldrb	r2, [r1, r2]
 80052fa:	2a00      	cmp	r2, #0
 80052fc:	d1ef      	bne.n	80052de <CheckingKeyTimings+0xa>
		LongPressKey_PB8=1;
 80052fe:	000a      	movs	r2, r1
 8005300:	233c      	movs	r3, #60	; 0x3c
 8005302:	2101      	movs	r1, #1
 8005304:	54d1      	strb	r1, [r2, r3]
 8005306:	e7f0      	b.n	80052ea <CheckingKeyTimings+0x16>
	else if(TimerCounterTIM14==3000 && ClickFlag_PB2==1 && ClickFlag_PB8==0)
 8005308:	490d      	ldr	r1, [pc, #52]	; (8005340 <CheckingKeyTimings+0x6c>)
 800530a:	223a      	movs	r2, #58	; 0x3a
 800530c:	5c8a      	ldrb	r2, [r1, r2]
 800530e:	2a01      	cmp	r2, #1
 8005310:	d1e8      	bne.n	80052e4 <CheckingKeyTimings+0x10>
 8005312:	323a      	adds	r2, #58	; 0x3a
 8005314:	5c8a      	ldrb	r2, [r1, r2]
 8005316:	2a00      	cmp	r2, #0
 8005318:	d1e4      	bne.n	80052e4 <CheckingKeyTimings+0x10>
		LongPressKey_PB2=1;
 800531a:	000a      	movs	r2, r1
 800531c:	233d      	movs	r3, #61	; 0x3d
 800531e:	2101      	movs	r1, #1
 8005320:	54d1      	strb	r1, [r2, r3]
 8005322:	e7e2      	b.n	80052ea <CheckingKeyTimings+0x16>
	else if(TimerCounterTIM14==3000 && ClickFlag_PB8==1 && ClickFlag_PB2==1)
 8005324:	4a06      	ldr	r2, [pc, #24]	; (8005340 <CheckingKeyTimings+0x6c>)
 8005326:	233b      	movs	r3, #59	; 0x3b
 8005328:	5cd3      	ldrb	r3, [r2, r3]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d1dd      	bne.n	80052ea <CheckingKeyTimings+0x16>
 800532e:	3339      	adds	r3, #57	; 0x39
 8005330:	5cd3      	ldrb	r3, [r2, r3]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d1d9      	bne.n	80052ea <CheckingKeyTimings+0x16>
		LongDoublePressKey_PB2_PB8=1;
 8005336:	333d      	adds	r3, #61	; 0x3d
 8005338:	2101      	movs	r1, #1
 800533a:	54d1      	strb	r1, [r2, r3]
}
 800533c:	e7d5      	b.n	80052ea <CheckingKeyTimings+0x16>
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	20000178 	.word	0x20000178
 8005344:	00000bb8 	.word	0x00000bb8

08005348 <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
 8005348:	b510      	push	{r4, lr}
  eMBErrorCode eStatus = MB_ENOERR;
  int iRegIndex;

  if ((usAddress >= REG_ADRESS_INPUT_START) &&
 800534a:	2962      	cmp	r1, #98	; 0x62
 800534c:	d913      	bls.n	8005376 <eMBRegInputCB+0x2e>
      (usAddress + usNRegs <= REG_ADRESS_INPUT_START + REG_INPUT_NUMBER_REGS))
 800534e:	1853      	adds	r3, r2, r1
  if ((usAddress >= REG_ADRESS_INPUT_START) &&
 8005350:	2b6f      	cmp	r3, #111	; 0x6f
 8005352:	dc10      	bgt.n	8005376 <eMBRegInputCB+0x2e>
  {
    iRegIndex = (int)(usAddress - usRegAdressInputStart);
 8005354:	3963      	subs	r1, #99	; 0x63

    while(usNRegs > 0)
 8005356:	2a00      	cmp	r2, #0
 8005358:	d00b      	beq.n	8005372 <eMBRegInputCB+0x2a>
    {
        *pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] >> 8);
 800535a:	004c      	lsls	r4, r1, #1
 800535c:	4b23      	ldr	r3, [pc, #140]	; (80053ec <eMBRegInputCB+0xa4>)
 800535e:	191b      	adds	r3, r3, r4
 8005360:	899b      	ldrh	r3, [r3, #12]
 8005362:	0a1c      	lsrs	r4, r3, #8
 8005364:	7004      	strb	r4, [r0, #0]
        *pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 8005366:	7043      	strb	r3, [r0, #1]

        iRegIndex++;
 8005368:	3101      	adds	r1, #1
        usNRegs--;
 800536a:	3a01      	subs	r2, #1
 800536c:	b292      	uxth	r2, r2
        *pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 800536e:	3002      	adds	r0, #2
 8005370:	e7f1      	b.n	8005356 <eMBRegInputCB+0xe>
  eMBErrorCode eStatus = MB_ENOERR;
 8005372:	2000      	movs	r0, #0
 8005374:	e015      	b.n	80053a2 <eMBRegInputCB+0x5a>
    }
  }
  else if(usAddress==3334)
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <eMBRegInputCB+0xa8>)
 8005378:	4299      	cmp	r1, r3
 800537a:	d00c      	beq.n	8005396 <eMBRegInputCB+0x4e>
	{
		*pucRegBuffer++ = (unsigned char)(ModeRele >> 8);
		*pucRegBuffer++ = (unsigned char)(ModeRele & 0xFF);
	}
  else if(usAddress==7778)
 800537c:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <eMBRegInputCB+0xac>)
 800537e:	4299      	cmp	r1, r3
 8005380:	d010      	beq.n	80053a4 <eMBRegInputCB+0x5c>
	{
		*pucRegBuffer++ = (unsigned char)(GlobalAddress >> 8);
		*pucRegBuffer++ = (unsigned char)(GlobalAddress & 0xFF);
	}
  else if(usAddress==121)
 8005382:	2979      	cmp	r1, #121	; 0x79
 8005384:	d015      	beq.n	80053b2 <eMBRegInputCB+0x6a>
  	{
		*pucRegBuffer++ = (unsigned char)(SerialNumber_0 >> 8);
		*pucRegBuffer++ = (unsigned char)(SerialNumber_0 & 0xFF);
  	}
  else if(usAddress==122)
 8005386:	297a      	cmp	r1, #122	; 0x7a
 8005388:	d01a      	beq.n	80053c0 <eMBRegInputCB+0x78>
  	{
		*pucRegBuffer++ = (unsigned char)(SerialNumber_1 >> 8);
		*pucRegBuffer++ = (unsigned char)(SerialNumber_1 & 0xFF);
  	}
  else if(usAddress==123)
 800538a:	297b      	cmp	r1, #123	; 0x7b
 800538c:	d01f      	beq.n	80053ce <eMBRegInputCB+0x86>
  	{
		*pucRegBuffer++ = (unsigned char)(SerialNumber_2 >> 8);
		*pucRegBuffer++ = (unsigned char)(SerialNumber_2 & 0xFF);
  	}
  else if(usAddress==124)
 800538e:	297c      	cmp	r1, #124	; 0x7c
 8005390:	d024      	beq.n	80053dc <eMBRegInputCB+0x94>
		*pucRegBuffer++ = (unsigned char)(SerialNumber_3 >> 8);
		*pucRegBuffer++ = (unsigned char)(SerialNumber_3 & 0xFF);
  	}
  else
  {
    eStatus = MB_ENOREG;
 8005392:	2001      	movs	r0, #1
 8005394:	e005      	b.n	80053a2 <eMBRegInputCB+0x5a>
		*pucRegBuffer++ = (unsigned char)(ModeRele >> 8);
 8005396:	2300      	movs	r3, #0
 8005398:	7003      	strb	r3, [r0, #0]
		*pucRegBuffer++ = (unsigned char)(ModeRele & 0xFF);
 800539a:	4b17      	ldr	r3, [pc, #92]	; (80053f8 <eMBRegInputCB+0xb0>)
 800539c:	795b      	ldrb	r3, [r3, #5]
 800539e:	7043      	strb	r3, [r0, #1]
  eMBErrorCode eStatus = MB_ENOERR;
 80053a0:	2000      	movs	r0, #0
  }

  return eStatus;
}
 80053a2:	bd10      	pop	{r4, pc}
		*pucRegBuffer++ = (unsigned char)(GlobalAddress >> 8);
 80053a4:	2300      	movs	r3, #0
 80053a6:	7003      	strb	r3, [r0, #0]
		*pucRegBuffer++ = (unsigned char)(GlobalAddress & 0xFF);
 80053a8:	4b10      	ldr	r3, [pc, #64]	; (80053ec <eMBRegInputCB+0xa4>)
 80053aa:	7a1b      	ldrb	r3, [r3, #8]
 80053ac:	7043      	strb	r3, [r0, #1]
  eMBErrorCode eStatus = MB_ENOERR;
 80053ae:	2000      	movs	r0, #0
 80053b0:	e7f7      	b.n	80053a2 <eMBRegInputCB+0x5a>
		*pucRegBuffer++ = (unsigned char)(SerialNumber_0 >> 8);
 80053b2:	2300      	movs	r3, #0
 80053b4:	7003      	strb	r3, [r0, #0]
		*pucRegBuffer++ = (unsigned char)(SerialNumber_0 & 0xFF);
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <eMBRegInputCB+0xb0>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	7043      	strb	r3, [r0, #1]
  eMBErrorCode eStatus = MB_ENOERR;
 80053bc:	2000      	movs	r0, #0
 80053be:	e7f0      	b.n	80053a2 <eMBRegInputCB+0x5a>
		*pucRegBuffer++ = (unsigned char)(SerialNumber_1 >> 8);
 80053c0:	2300      	movs	r3, #0
 80053c2:	7003      	strb	r3, [r0, #0]
		*pucRegBuffer++ = (unsigned char)(SerialNumber_1 & 0xFF);
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <eMBRegInputCB+0xb0>)
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	7043      	strb	r3, [r0, #1]
  eMBErrorCode eStatus = MB_ENOERR;
 80053ca:	2000      	movs	r0, #0
 80053cc:	e7e9      	b.n	80053a2 <eMBRegInputCB+0x5a>
		*pucRegBuffer++ = (unsigned char)(SerialNumber_2 >> 8);
 80053ce:	2300      	movs	r3, #0
 80053d0:	7003      	strb	r3, [r0, #0]
		*pucRegBuffer++ = (unsigned char)(SerialNumber_2 & 0xFF);
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <eMBRegInputCB+0xb0>)
 80053d4:	789b      	ldrb	r3, [r3, #2]
 80053d6:	7043      	strb	r3, [r0, #1]
  eMBErrorCode eStatus = MB_ENOERR;
 80053d8:	2000      	movs	r0, #0
 80053da:	e7e2      	b.n	80053a2 <eMBRegInputCB+0x5a>
		*pucRegBuffer++ = (unsigned char)(SerialNumber_3 >> 8);
 80053dc:	2300      	movs	r3, #0
 80053de:	7003      	strb	r3, [r0, #0]
		*pucRegBuffer++ = (unsigned char)(SerialNumber_3 & 0xFF);
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <eMBRegInputCB+0xb0>)
 80053e2:	78db      	ldrb	r3, [r3, #3]
 80053e4:	7043      	strb	r3, [r0, #1]
  eMBErrorCode eStatus = MB_ENOERR;
 80053e6:	2000      	movs	r0, #0
 80053e8:	e7db      	b.n	80053a2 <eMBRegInputCB+0x5a>
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	2000000c 	.word	0x2000000c
 80053f0:	00000d06 	.word	0x00000d06
 80053f4:	00001e62 	.word	0x00001e62
 80053f8:	20000178 	.word	0x20000178

080053fc <eMBRegHoldingCB>:


/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                             eMBRegisterMode eMode)
{
 80053fc:	b530      	push	{r4, r5, lr}
	eMBErrorCode eStatus = MB_ENOERR;
	int iRegIndex=0;
	if ((usAddress >= REG_ADRESS_INPUT_START) &&
 80053fe:	2962      	cmp	r1, #98	; 0x62
 8005400:	d931      	bls.n	8005466 <eMBRegHoldingCB+0x6a>
	      (usAddress + usNRegs <= REG_ADRESS_INPUT_START + REG_INPUT_NUMBER_REGS))
 8005402:	188c      	adds	r4, r1, r2
	if ((usAddress >= REG_ADRESS_INPUT_START) &&
 8005404:	2c6f      	cmp	r4, #111	; 0x6f
 8005406:	dc2e      	bgt.n	8005466 <eMBRegHoldingCB+0x6a>
	  {
		if(eMode==MB_REG_READ)
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <eMBRegHoldingCB+0x18>

				iRegIndex++;
				usNRegs--;
			}
		}
		else if(eMode==MB_REG_WRITE)
 800540c:	2b01      	cmp	r3, #1
 800540e:	d012      	beq.n	8005436 <eMBRegHoldingCB+0x3a>
	eMBErrorCode eStatus = MB_ENOERR;
 8005410:	2000      	movs	r0, #0
 8005412:	e044      	b.n	800549e <eMBRegHoldingCB+0xa2>
	int iRegIndex=0;
 8005414:	2400      	movs	r4, #0
			while(usNRegs > 0)
 8005416:	2a00      	cmp	r2, #0
 8005418:	d00b      	beq.n	8005432 <eMBRegHoldingCB+0x36>
				*pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] >> 8);
 800541a:	0065      	lsls	r5, r4, #1
 800541c:	4963      	ldr	r1, [pc, #396]	; (80055ac <eMBRegHoldingCB+0x1b0>)
 800541e:	1949      	adds	r1, r1, r5
 8005420:	8989      	ldrh	r1, [r1, #12]
 8005422:	0a0d      	lsrs	r5, r1, #8
 8005424:	7005      	strb	r5, [r0, #0]
				*pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 8005426:	7041      	strb	r1, [r0, #1]
				iRegIndex++;
 8005428:	3401      	adds	r4, #1
				usNRegs--;
 800542a:	3a01      	subs	r2, #1
 800542c:	b292      	uxth	r2, r2
				*pucRegBuffer++ = (unsigned char)(usRegAnalog[iRegIndex] & 0xFF);
 800542e:	3002      	adds	r0, #2
 8005430:	e7f1      	b.n	8005416 <eMBRegHoldingCB+0x1a>
	eMBErrorCode eStatus = MB_ENOERR;
 8005432:	0018      	movs	r0, r3
 8005434:	e033      	b.n	800549e <eMBRegHoldingCB+0xa2>
		{
			if(usAddress==105)
 8005436:	2969      	cmp	r1, #105	; 0x69
 8005438:	d001      	beq.n	800543e <eMBRegHoldingCB+0x42>
					eStatus = MB_EIO;
				}
			}
			else
			{
				eStatus = MB_EIO;
 800543a:	2005      	movs	r0, #5
 800543c:	e02f      	b.n	800549e <eMBRegHoldingCB+0xa2>
				uint16_t buf = pucRegBuffer[1] + 256*pucRegBuffer[0];
 800543e:	7843      	ldrb	r3, [r0, #1]
 8005440:	7802      	ldrb	r2, [r0, #0]
 8005442:	0212      	lsls	r2, r2, #8
 8005444:	189b      	adds	r3, r3, r2
 8005446:	b29b      	uxth	r3, r3
				if(buf>0 && buf<4)
 8005448:	1e5a      	subs	r2, r3, #1
 800544a:	b292      	uxth	r2, r2
 800544c:	2a02      	cmp	r2, #2
 800544e:	d900      	bls.n	8005452 <eMBRegHoldingCB+0x56>
 8005450:	e0a6      	b.n	80055a0 <eMBRegHoldingCB+0x1a4>
					Sensitivity = buf;
 8005452:	b2db      	uxtb	r3, r3
 8005454:	4a55      	ldr	r2, [pc, #340]	; (80055ac <eMBRegHoldingCB+0x1b0>)
 8005456:	7253      	strb	r3, [r2, #9]
					usRegAnalog[6] = Sensitivity;
 8005458:	8313      	strh	r3, [r2, #24]
					FlagChangeSetting=1;
 800545a:	4a55      	ldr	r2, [pc, #340]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 800545c:	233f      	movs	r3, #63	; 0x3f
 800545e:	3968      	subs	r1, #104	; 0x68
 8005460:	54d1      	strb	r1, [r2, r3]
	eMBErrorCode eStatus = MB_ENOERR;
 8005462:	2000      	movs	r0, #0
 8005464:	e01b      	b.n	800549e <eMBRegHoldingCB+0xa2>
			}

		}

	  }
	else if(usAddress==3334)
 8005466:	4a53      	ldr	r2, [pc, #332]	; (80055b4 <eMBRegHoldingCB+0x1b8>)
 8005468:	4291      	cmp	r1, r2
 800546a:	d00d      	beq.n	8005488 <eMBRegHoldingCB+0x8c>
			{
				eStatus = MB_EIO;
			}
		}
	}
	else if(usAddress==7778)
 800546c:	4a52      	ldr	r2, [pc, #328]	; (80055b8 <eMBRegHoldingCB+0x1bc>)
 800546e:	4291      	cmp	r1, r2
 8005470:	d024      	beq.n	80054bc <eMBRegHoldingCB+0xc0>
				eStatus = MB_EIO;
			}

		}
	}
	else if(usAddress==121)
 8005472:	2979      	cmp	r1, #121	; 0x79
 8005474:	d040      	beq.n	80054f8 <eMBRegHoldingCB+0xfc>
		{
			SerialNumber_0 = pucRegBuffer[1] + 256*pucRegBuffer[0];
			FlagChangeSetting=1;
		}
	}
	else if(usAddress==122)
 8005476:	297a      	cmp	r1, #122	; 0x7a
 8005478:	d053      	beq.n	8005522 <eMBRegHoldingCB+0x126>
		{
			SerialNumber_1 = pucRegBuffer[1] + 256*pucRegBuffer[0];
			FlagChangeSetting=1;
		}
	}
	else if(usAddress==123)
 800547a:	297b      	cmp	r1, #123	; 0x7b
 800547c:	d066      	beq.n	800554c <eMBRegHoldingCB+0x150>
		{
			SerialNumber_2 = pucRegBuffer[1] + 256*pucRegBuffer[0];
			FlagChangeSetting=1;
		}
	}
	else if(usAddress==124)
 800547e:	297c      	cmp	r1, #124	; 0x7c
 8005480:	d100      	bne.n	8005484 <eMBRegHoldingCB+0x88>
 8005482:	e078      	b.n	8005576 <eMBRegHoldingCB+0x17a>
			FlagChangeSetting=1;
		}
	}
	else
	{
		eStatus = MB_ENOREG;
 8005484:	2001      	movs	r0, #1
 8005486:	e00a      	b.n	800549e <eMBRegHoldingCB+0xa2>
		if(eMode==MB_REG_READ)
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <eMBRegHoldingCB+0x9c>
			*pucRegBuffer++ = (unsigned char)(ModeRele >> 8);
 800548c:	2200      	movs	r2, #0
 800548e:	7002      	strb	r2, [r0, #0]
			*pucRegBuffer++ = (unsigned char)(ModeRele & 0xFF);
 8005490:	4a47      	ldr	r2, [pc, #284]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 8005492:	7952      	ldrb	r2, [r2, #5]
 8005494:	7042      	strb	r2, [r0, #1]
 8005496:	3002      	adds	r0, #2
		if(eMode==MB_REG_WRITE)
 8005498:	2b01      	cmp	r3, #1
 800549a:	d001      	beq.n	80054a0 <eMBRegHoldingCB+0xa4>
	eMBErrorCode eStatus = MB_ENOERR;
 800549c:	2000      	movs	r0, #0
	}

  return eStatus;
}
 800549e:	bd30      	pop	{r4, r5, pc}
			uint16_t buf=pucRegBuffer[1] + 256*pucRegBuffer[0];
 80054a0:	7843      	ldrb	r3, [r0, #1]
 80054a2:	7802      	ldrb	r2, [r0, #0]
 80054a4:	0212      	lsls	r2, r2, #8
 80054a6:	189b      	adds	r3, r3, r2
 80054a8:	b29b      	uxth	r3, r3
			if(buf==0 || buf==1)
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d87a      	bhi.n	80055a4 <eMBRegHoldingCB+0x1a8>
				ModeRele = (uint8_t) buf;
 80054ae:	4a40      	ldr	r2, [pc, #256]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 80054b0:	7153      	strb	r3, [r2, #5]
				FlagChangeSetting=1;
 80054b2:	233f      	movs	r3, #63	; 0x3f
 80054b4:	2101      	movs	r1, #1
 80054b6:	54d1      	strb	r1, [r2, r3]
	eMBErrorCode eStatus = MB_ENOERR;
 80054b8:	2000      	movs	r0, #0
 80054ba:	e7f0      	b.n	800549e <eMBRegHoldingCB+0xa2>
		if(eMode==MB_REG_READ)
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d106      	bne.n	80054ce <eMBRegHoldingCB+0xd2>
			*pucRegBuffer++ = (unsigned char)(GlobalAddress >> 8);
 80054c0:	2200      	movs	r2, #0
 80054c2:	7002      	strb	r2, [r0, #0]
			*pucRegBuffer++ = (unsigned char)(GlobalAddress & 0xFF);
 80054c4:	4a39      	ldr	r2, [pc, #228]	; (80055ac <eMBRegHoldingCB+0x1b0>)
 80054c6:	7a12      	ldrb	r2, [r2, #8]
 80054c8:	7042      	strb	r2, [r0, #1]
	eMBErrorCode eStatus = MB_ENOERR;
 80054ca:	0018      	movs	r0, r3
 80054cc:	e7e7      	b.n	800549e <eMBRegHoldingCB+0xa2>
		else if(eMode==MB_REG_WRITE)
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d001      	beq.n	80054d6 <eMBRegHoldingCB+0xda>
	eMBErrorCode eStatus = MB_ENOERR;
 80054d2:	2000      	movs	r0, #0
 80054d4:	e7e3      	b.n	800549e <eMBRegHoldingCB+0xa2>
			uint16_t buf = pucRegBuffer[1] + 256*pucRegBuffer[0];
 80054d6:	7843      	ldrb	r3, [r0, #1]
 80054d8:	7802      	ldrb	r2, [r0, #0]
 80054da:	0212      	lsls	r2, r2, #8
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	b29b      	uxth	r3, r3
			if(buf>0 && buf<100)
 80054e0:	1e5a      	subs	r2, r3, #1
 80054e2:	b292      	uxth	r2, r2
 80054e4:	2a62      	cmp	r2, #98	; 0x62
 80054e6:	d85f      	bhi.n	80055a8 <eMBRegHoldingCB+0x1ac>
				GlobalAddress = (uint8_t)buf;
 80054e8:	4a30      	ldr	r2, [pc, #192]	; (80055ac <eMBRegHoldingCB+0x1b0>)
 80054ea:	7213      	strb	r3, [r2, #8]
				FlagChangeSetting=1;
 80054ec:	4a30      	ldr	r2, [pc, #192]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 80054ee:	233f      	movs	r3, #63	; 0x3f
 80054f0:	2101      	movs	r1, #1
 80054f2:	54d1      	strb	r1, [r2, r3]
	eMBErrorCode eStatus = MB_ENOERR;
 80054f4:	2000      	movs	r0, #0
 80054f6:	e7d2      	b.n	800549e <eMBRegHoldingCB+0xa2>
		if(eMode==MB_REG_READ)
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <eMBRegHoldingCB+0x10e>
			*pucRegBuffer++ = (unsigned char)(SerialNumber_0 >> 8);
 80054fc:	2200      	movs	r2, #0
 80054fe:	7002      	strb	r2, [r0, #0]
			*pucRegBuffer++ = (unsigned char)(SerialNumber_0 & 0xFF);
 8005500:	4a2b      	ldr	r2, [pc, #172]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 8005502:	7812      	ldrb	r2, [r2, #0]
 8005504:	7042      	strb	r2, [r0, #1]
	eMBErrorCode eStatus = MB_ENOERR;
 8005506:	0018      	movs	r0, r3
 8005508:	e7c9      	b.n	800549e <eMBRegHoldingCB+0xa2>
		else if(eMode==MB_REG_WRITE)
 800550a:	2b01      	cmp	r3, #1
 800550c:	d001      	beq.n	8005512 <eMBRegHoldingCB+0x116>
	eMBErrorCode eStatus = MB_ENOERR;
 800550e:	2000      	movs	r0, #0
 8005510:	e7c5      	b.n	800549e <eMBRegHoldingCB+0xa2>
			SerialNumber_0 = pucRegBuffer[1] + 256*pucRegBuffer[0];
 8005512:	7842      	ldrb	r2, [r0, #1]
 8005514:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 8005516:	701a      	strb	r2, [r3, #0]
			FlagChangeSetting=1;
 8005518:	223f      	movs	r2, #63	; 0x3f
 800551a:	2101      	movs	r1, #1
 800551c:	5499      	strb	r1, [r3, r2]
	eMBErrorCode eStatus = MB_ENOERR;
 800551e:	2000      	movs	r0, #0
 8005520:	e7bd      	b.n	800549e <eMBRegHoldingCB+0xa2>
		if(eMode==MB_REG_READ)
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <eMBRegHoldingCB+0x138>
			*pucRegBuffer++ = (unsigned char)(SerialNumber_1 >> 8);
 8005526:	2200      	movs	r2, #0
 8005528:	7002      	strb	r2, [r0, #0]
			*pucRegBuffer++ = (unsigned char)(SerialNumber_1 & 0xFF);
 800552a:	4a21      	ldr	r2, [pc, #132]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 800552c:	7852      	ldrb	r2, [r2, #1]
 800552e:	7042      	strb	r2, [r0, #1]
	eMBErrorCode eStatus = MB_ENOERR;
 8005530:	0018      	movs	r0, r3
 8005532:	e7b4      	b.n	800549e <eMBRegHoldingCB+0xa2>
		else if(eMode==MB_REG_WRITE)
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <eMBRegHoldingCB+0x140>
	eMBErrorCode eStatus = MB_ENOERR;
 8005538:	2000      	movs	r0, #0
 800553a:	e7b0      	b.n	800549e <eMBRegHoldingCB+0xa2>
			SerialNumber_1 = pucRegBuffer[1] + 256*pucRegBuffer[0];
 800553c:	7842      	ldrb	r2, [r0, #1]
 800553e:	4b1c      	ldr	r3, [pc, #112]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 8005540:	705a      	strb	r2, [r3, #1]
			FlagChangeSetting=1;
 8005542:	223f      	movs	r2, #63	; 0x3f
 8005544:	2101      	movs	r1, #1
 8005546:	5499      	strb	r1, [r3, r2]
	eMBErrorCode eStatus = MB_ENOERR;
 8005548:	2000      	movs	r0, #0
 800554a:	e7a8      	b.n	800549e <eMBRegHoldingCB+0xa2>
		if(eMode==MB_REG_READ)
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <eMBRegHoldingCB+0x162>
			*pucRegBuffer++ = (unsigned char)(SerialNumber_2 >> 8);
 8005550:	2200      	movs	r2, #0
 8005552:	7002      	strb	r2, [r0, #0]
			*pucRegBuffer++ = (unsigned char)(SerialNumber_2 & 0xFF);
 8005554:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 8005556:	7892      	ldrb	r2, [r2, #2]
 8005558:	7042      	strb	r2, [r0, #1]
	eMBErrorCode eStatus = MB_ENOERR;
 800555a:	0018      	movs	r0, r3
 800555c:	e79f      	b.n	800549e <eMBRegHoldingCB+0xa2>
		else if(eMode==MB_REG_WRITE)
 800555e:	2b01      	cmp	r3, #1
 8005560:	d001      	beq.n	8005566 <eMBRegHoldingCB+0x16a>
	eMBErrorCode eStatus = MB_ENOERR;
 8005562:	2000      	movs	r0, #0
 8005564:	e79b      	b.n	800549e <eMBRegHoldingCB+0xa2>
			SerialNumber_2 = pucRegBuffer[1] + 256*pucRegBuffer[0];
 8005566:	7842      	ldrb	r2, [r0, #1]
 8005568:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 800556a:	709a      	strb	r2, [r3, #2]
			FlagChangeSetting=1;
 800556c:	223f      	movs	r2, #63	; 0x3f
 800556e:	2101      	movs	r1, #1
 8005570:	5499      	strb	r1, [r3, r2]
	eMBErrorCode eStatus = MB_ENOERR;
 8005572:	2000      	movs	r0, #0
 8005574:	e793      	b.n	800549e <eMBRegHoldingCB+0xa2>
		if(eMode==MB_REG_READ)
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <eMBRegHoldingCB+0x18c>
			*pucRegBuffer++ = (unsigned char)(SerialNumber_3 >> 8);
 800557a:	2200      	movs	r2, #0
 800557c:	7002      	strb	r2, [r0, #0]
			*pucRegBuffer++ = (unsigned char)(SerialNumber_3 & 0xFF);
 800557e:	4a0c      	ldr	r2, [pc, #48]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 8005580:	78d2      	ldrb	r2, [r2, #3]
 8005582:	7042      	strb	r2, [r0, #1]
	eMBErrorCode eStatus = MB_ENOERR;
 8005584:	0018      	movs	r0, r3
 8005586:	e78a      	b.n	800549e <eMBRegHoldingCB+0xa2>
		else if(eMode==MB_REG_WRITE)
 8005588:	2b01      	cmp	r3, #1
 800558a:	d001      	beq.n	8005590 <eMBRegHoldingCB+0x194>
	eMBErrorCode eStatus = MB_ENOERR;
 800558c:	2000      	movs	r0, #0
 800558e:	e786      	b.n	800549e <eMBRegHoldingCB+0xa2>
			SerialNumber_3 = pucRegBuffer[1] + 256*pucRegBuffer[0];
 8005590:	7842      	ldrb	r2, [r0, #1]
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <eMBRegHoldingCB+0x1b4>)
 8005594:	70da      	strb	r2, [r3, #3]
			FlagChangeSetting=1;
 8005596:	223f      	movs	r2, #63	; 0x3f
 8005598:	2101      	movs	r1, #1
 800559a:	5499      	strb	r1, [r3, r2]
	eMBErrorCode eStatus = MB_ENOERR;
 800559c:	2000      	movs	r0, #0
 800559e:	e77e      	b.n	800549e <eMBRegHoldingCB+0xa2>
					eStatus = MB_EIO;
 80055a0:	2005      	movs	r0, #5
 80055a2:	e77c      	b.n	800549e <eMBRegHoldingCB+0xa2>
				eStatus = MB_EIO;
 80055a4:	2005      	movs	r0, #5
 80055a6:	e77a      	b.n	800549e <eMBRegHoldingCB+0xa2>
				eStatus = MB_EIO;
 80055a8:	2005      	movs	r0, #5
 80055aa:	e778      	b.n	800549e <eMBRegHoldingCB+0xa2>
 80055ac:	2000000c 	.word	0x2000000c
 80055b0:	20000178 	.word	0x20000178
 80055b4:	00000d06 	.word	0x00000d06
 80055b8:	00001e62 	.word	0x00001e62

080055bc <eMBRegCoilsCB>:
		eStatus = MB_ENOREG;
	}*/
	eStatus = MB_ENOREG;

  return eStatus;
}
 80055bc:	2001      	movs	r0, #1
 80055be:	4770      	bx	lr

080055c0 <eMBRegDiscreteCB>:
	{
		eStatus = MB_ENOREG;
	}*/
	eStatus = MB_ENOREG;
  return eStatus;
}
 80055c0:	2001      	movs	r0, #1
 80055c2:	4770      	bx	lr

080055c4 <IndicationSensitivity>:


void IndicationSensitivity(uint8_t Sensitivity, uint8_t led)
{
 80055c4:	b510      	push	{r4, lr}
 80055c6:	000b      	movs	r3, r1
	switch (Sensitivity)
 80055c8:	2802      	cmp	r0, #2
 80055ca:	d00a      	beq.n	80055e2 <IndicationSensitivity+0x1e>
 80055cc:	2803      	cmp	r0, #3
 80055ce:	d00e      	beq.n	80055ee <IndicationSensitivity+0x2a>
 80055d0:	2801      	cmp	r0, #1
 80055d2:	d000      	beq.n	80055d6 <IndicationSensitivity+0x12>
	case	3:
	{
		indicator_sgd4(SPI1, 0x00, " BH", led);
	}break;
	}
}
 80055d4:	bd10      	pop	{r4, pc}
		indicator_sgd4(SPI1, 0x00, " NH", led);
 80055d6:	4a09      	ldr	r2, [pc, #36]	; (80055fc <IndicationSensitivity+0x38>)
 80055d8:	2100      	movs	r1, #0
 80055da:	4809      	ldr	r0, [pc, #36]	; (8005600 <IndicationSensitivity+0x3c>)
 80055dc:	f7ff f8b6 	bl	800474c <indicator_sgd4>
	}break;
 80055e0:	e7f8      	b.n	80055d4 <IndicationSensitivity+0x10>
		indicator_sgd4(SPI1, 0x00, " CH", led);
 80055e2:	4a08      	ldr	r2, [pc, #32]	; (8005604 <IndicationSensitivity+0x40>)
 80055e4:	2100      	movs	r1, #0
 80055e6:	4806      	ldr	r0, [pc, #24]	; (8005600 <IndicationSensitivity+0x3c>)
 80055e8:	f7ff f8b0 	bl	800474c <indicator_sgd4>
	}break;
 80055ec:	e7f2      	b.n	80055d4 <IndicationSensitivity+0x10>
		indicator_sgd4(SPI1, 0x00, " BH", led);
 80055ee:	4a06      	ldr	r2, [pc, #24]	; (8005608 <IndicationSensitivity+0x44>)
 80055f0:	2100      	movs	r1, #0
 80055f2:	4803      	ldr	r0, [pc, #12]	; (8005600 <IndicationSensitivity+0x3c>)
 80055f4:	f7ff f8aa 	bl	800474c <indicator_sgd4>
}
 80055f8:	e7ec      	b.n	80055d4 <IndicationSensitivity+0x10>
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	08008830 	.word	0x08008830
 8005600:	40013000 	.word	0x40013000
 8005604:	08008834 	.word	0x08008834
 8005608:	08008838 	.word	0x08008838

0800560c <KeyPress>:
{
 800560c:	b510      	push	{r4, lr}
	if(TimerCounterTIM14>0)//таймер включается, когда нажаты кнопки
 800560e:	4bce      	ldr	r3, [pc, #824]	; (8005948 <KeyPress+0x33c>)
 8005610:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005612:	2b00      	cmp	r3, #0
 8005614:	d111      	bne.n	800563a <KeyPress+0x2e>
	if((LongPressKey_PB8))//Сработало длинное нажатие ЭТО ДЛЯ НАСТРОЙКИ АДРЕСА
 8005616:	4acc      	ldr	r2, [pc, #816]	; (8005948 <KeyPress+0x33c>)
 8005618:	233c      	movs	r3, #60	; 0x3c
 800561a:	5cd3      	ldrb	r3, [r2, r3]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10f      	bne.n	8005640 <KeyPress+0x34>
	if((LongPressKey_PB2))//Сработало длинное нажатие ЭТО ДЛЯ НАСТРОЙКИ ЧУВСТВИТЕЛЬНОСТИ
 8005620:	4ac9      	ldr	r2, [pc, #804]	; (8005948 <KeyPress+0x33c>)
 8005622:	233d      	movs	r3, #61	; 0x3d
 8005624:	5cd3      	ldrb	r3, [r2, r3]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d000      	beq.n	800562c <KeyPress+0x20>
 800562a:	e075      	b.n	8005718 <KeyPress+0x10c>
	if(LongDoublePressKey_PB2_PB8) //сработали обе кнопки в длинную ЭТО ДЛЯ НАСТРОЙКИ ЗАЛИПАНИЯ
 800562c:	4ac6      	ldr	r2, [pc, #792]	; (8005948 <KeyPress+0x33c>)
 800562e:	233e      	movs	r3, #62	; 0x3e
 8005630:	5cd3      	ldrb	r3, [r2, r3]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d000      	beq.n	8005638 <KeyPress+0x2c>
 8005636:	e0d3      	b.n	80057e0 <KeyPress+0x1d4>
}
 8005638:	bd10      	pop	{r4, pc}
		CheckingKeyTimings();//если кнопки нажаты, то смотрим длину нажатия
 800563a:	f7ff fe4b 	bl	80052d4 <CheckingKeyTimings>
 800563e:	e7ea      	b.n	8005616 <KeyPress+0xa>
	  TimerCounterTIM15=0;
 8005640:	0013      	movs	r3, r2
 8005642:	2200      	movs	r2, #0
 8005644:	2140      	movs	r1, #64	; 0x40
 8005646:	545a      	strb	r2, [r3, r1]
	  LongPressKey_PB8=0;
 8005648:	3904      	subs	r1, #4
 800564a:	545a      	strb	r2, [r3, r1]
	  indicator_sgd4(SPI1, 0x00, "PRG", 0b010);//Процесс индикации режима настройки
 800564c:	2302      	movs	r3, #2
 800564e:	4abf      	ldr	r2, [pc, #764]	; (800594c <KeyPress+0x340>)
 8005650:	2100      	movs	r1, #0
 8005652:	48bf      	ldr	r0, [pc, #764]	; (8005950 <KeyPress+0x344>)
 8005654:	f7ff f87a 	bl	800474c <indicator_sgd4>
	  HAL_Delay(1000);
 8005658:	20fa      	movs	r0, #250	; 0xfa
 800565a:	0080      	lsls	r0, r0, #2
 800565c:	f7fd f942 	bl	80028e4 <HAL_Delay>
	  TIM15->CR1 |= TIM_CR1_CEN;//запуск таймера 15
 8005660:	4abc      	ldr	r2, [pc, #752]	; (8005954 <KeyPress+0x348>)
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	2101      	movs	r1, #1
 8005666:	430b      	orrs	r3, r1
 8005668:	6013      	str	r3, [r2, #0]
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 800566a:	e015      	b.n	8005698 <KeyPress+0x8c>
			indicator_sgd4(SPI1, 0x00, StringIndication, 0b000);
 800566c:	4aba      	ldr	r2, [pc, #744]	; (8005958 <KeyPress+0x34c>)
 800566e:	2300      	movs	r3, #0
 8005670:	324c      	adds	r2, #76	; 0x4c
 8005672:	2100      	movs	r1, #0
 8005674:	48b6      	ldr	r0, [pc, #728]	; (8005950 <KeyPress+0x344>)
 8005676:	f7ff f869 	bl	800474c <indicator_sgd4>
 800567a:	e026      	b.n	80056ca <KeyPress+0xbe>
				GlobalAddress = 99;
 800567c:	4bb6      	ldr	r3, [pc, #728]	; (8005958 <KeyPress+0x34c>)
 800567e:	2263      	movs	r2, #99	; 0x63
 8005680:	721a      	strb	r2, [r3, #8]
			ShortPressKey_PB8=0;
 8005682:	4bb1      	ldr	r3, [pc, #708]	; (8005948 <KeyPress+0x33c>)
 8005684:	2200      	movs	r2, #0
 8005686:	2135      	movs	r1, #53	; 0x35
 8005688:	545a      	strb	r2, [r3, r1]
			TimerCounterTIM15=0;
 800568a:	310b      	adds	r1, #11
 800568c:	545a      	strb	r2, [r3, r1]
		if(ShortPressKey_PB2)//короткое нжатие
 800568e:	4aae      	ldr	r2, [pc, #696]	; (8005948 <KeyPress+0x33c>)
 8005690:	2336      	movs	r3, #54	; 0x36
 8005692:	5cd3      	ldrb	r3, [r2, r3]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d125      	bne.n	80056e4 <KeyPress+0xd8>
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8005698:	4aab      	ldr	r2, [pc, #684]	; (8005948 <KeyPress+0x33c>)
 800569a:	2340      	movs	r3, #64	; 0x40
 800569c:	5cd3      	ldrb	r3, [r2, r3]
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d832      	bhi.n	8005708 <KeyPress+0xfc>
		IWDG_Reset(); //Обновление сторожевого таймера
 80056a2:	f7ff fc83 	bl	8004fac <IWDG_Reset>
		sprintf(StringIndication, "%d", GlobalAddress);
 80056a6:	48ac      	ldr	r0, [pc, #688]	; (8005958 <KeyPress+0x34c>)
 80056a8:	7a02      	ldrb	r2, [r0, #8]
 80056aa:	304c      	adds	r0, #76	; 0x4c
 80056ac:	49ab      	ldr	r1, [pc, #684]	; (800595c <KeyPress+0x350>)
 80056ae:	f001 fdcd 	bl	800724c <siprintf>
		if(FlagMogan == 0)//моргаем светодиодом
 80056b2:	4aa5      	ldr	r2, [pc, #660]	; (8005948 <KeyPress+0x33c>)
 80056b4:	2334      	movs	r3, #52	; 0x34
 80056b6:	5cd3      	ldrb	r3, [r2, r3]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1d7      	bne.n	800566c <KeyPress+0x60>
			indicator_sgd4(SPI1, 0x00, StringIndication, 0b010);
 80056bc:	4aa6      	ldr	r2, [pc, #664]	; (8005958 <KeyPress+0x34c>)
 80056be:	3302      	adds	r3, #2
 80056c0:	324c      	adds	r2, #76	; 0x4c
 80056c2:	2100      	movs	r1, #0
 80056c4:	48a2      	ldr	r0, [pc, #648]	; (8005950 <KeyPress+0x344>)
 80056c6:	f7ff f841 	bl	800474c <indicator_sgd4>
		if(ShortPressKey_PB8)//короткое нжатие
 80056ca:	4a9f      	ldr	r2, [pc, #636]	; (8005948 <KeyPress+0x33c>)
 80056cc:	2335      	movs	r3, #53	; 0x35
 80056ce:	5cd3      	ldrb	r3, [r2, r3]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0dc      	beq.n	800568e <KeyPress+0x82>
			if(GlobalAddress<99)
 80056d4:	4ba0      	ldr	r3, [pc, #640]	; (8005958 <KeyPress+0x34c>)
 80056d6:	7a1b      	ldrb	r3, [r3, #8]
 80056d8:	2b62      	cmp	r3, #98	; 0x62
 80056da:	d8cf      	bhi.n	800567c <KeyPress+0x70>
				GlobalAddress++;
 80056dc:	3301      	adds	r3, #1
 80056de:	4a9e      	ldr	r2, [pc, #632]	; (8005958 <KeyPress+0x34c>)
 80056e0:	7213      	strb	r3, [r2, #8]
 80056e2:	e7ce      	b.n	8005682 <KeyPress+0x76>
			if(GlobalAddress>1)
 80056e4:	4b9c      	ldr	r3, [pc, #624]	; (8005958 <KeyPress+0x34c>)
 80056e6:	7a1b      	ldrb	r3, [r3, #8]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d909      	bls.n	8005700 <KeyPress+0xf4>
				GlobalAddress--;
 80056ec:	3b01      	subs	r3, #1
 80056ee:	4a9a      	ldr	r2, [pc, #616]	; (8005958 <KeyPress+0x34c>)
 80056f0:	7213      	strb	r3, [r2, #8]
			ShortPressKey_PB2=0;
 80056f2:	4b95      	ldr	r3, [pc, #596]	; (8005948 <KeyPress+0x33c>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	2136      	movs	r1, #54	; 0x36
 80056f8:	545a      	strb	r2, [r3, r1]
			TimerCounterTIM15=0;
 80056fa:	310a      	adds	r1, #10
 80056fc:	545a      	strb	r2, [r3, r1]
 80056fe:	e7cb      	b.n	8005698 <KeyPress+0x8c>
				GlobalAddress = 1;
 8005700:	4b95      	ldr	r3, [pc, #596]	; (8005958 <KeyPress+0x34c>)
 8005702:	2201      	movs	r2, #1
 8005704:	721a      	strb	r2, [r3, #8]
 8005706:	e7f4      	b.n	80056f2 <KeyPress+0xe6>
	  FlagChangeSetting=1;//выставляем флаг изменения настроек
 8005708:	2101      	movs	r1, #1
 800570a:	233f      	movs	r3, #63	; 0x3f
 800570c:	54d1      	strb	r1, [r2, r3]
	  TIM15->CR1 &= ~TIM_CR1_CEN;//выключаем таймер мигания
 800570e:	4a91      	ldr	r2, [pc, #580]	; (8005954 <KeyPress+0x348>)
 8005710:	6813      	ldr	r3, [r2, #0]
 8005712:	438b      	bics	r3, r1
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e783      	b.n	8005620 <KeyPress+0x14>
	  TimerCounterTIM15=0;
 8005718:	0013      	movs	r3, r2
 800571a:	2200      	movs	r2, #0
 800571c:	2140      	movs	r1, #64	; 0x40
 800571e:	545a      	strb	r2, [r3, r1]
	  LongPressKey_PB2=0;
 8005720:	3903      	subs	r1, #3
 8005722:	545a      	strb	r2, [r3, r1]
	  indicator_sgd4(SPI1, 0x00, "PRG", 0b010);//Процесс индикации режима настройки
 8005724:	2302      	movs	r3, #2
 8005726:	4a89      	ldr	r2, [pc, #548]	; (800594c <KeyPress+0x340>)
 8005728:	2100      	movs	r1, #0
 800572a:	4889      	ldr	r0, [pc, #548]	; (8005950 <KeyPress+0x344>)
 800572c:	f7ff f80e 	bl	800474c <indicator_sgd4>
	  HAL_Delay(1000);
 8005730:	20fa      	movs	r0, #250	; 0xfa
 8005732:	0080      	lsls	r0, r0, #2
 8005734:	f7fd f8d6 	bl	80028e4 <HAL_Delay>
	  TIM15->CR1 |= TIM_CR1_CEN;//запуск таймера 15
 8005738:	4a86      	ldr	r2, [pc, #536]	; (8005954 <KeyPress+0x348>)
 800573a:	6813      	ldr	r3, [r2, #0]
 800573c:	2101      	movs	r1, #1
 800573e:	430b      	orrs	r3, r1
 8005740:	6013      	str	r3, [r2, #0]
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8005742:	e023      	b.n	800578c <KeyPress+0x180>
			  IndicationSensitivity(Sensitivity, 0b000);
 8005744:	4b84      	ldr	r3, [pc, #528]	; (8005958 <KeyPress+0x34c>)
 8005746:	7a58      	ldrb	r0, [r3, #9]
 8005748:	2100      	movs	r1, #0
 800574a:	f7ff ff3b 	bl	80055c4 <IndicationSensitivity>
 800574e:	e02e      	b.n	80057ae <KeyPress+0x1a2>
				Sensitivity = 3;
 8005750:	4b81      	ldr	r3, [pc, #516]	; (8005958 <KeyPress+0x34c>)
 8005752:	2203      	movs	r2, #3
 8005754:	725a      	strb	r2, [r3, #9]
			TimerCounterTIM15=0;
 8005756:	4b7c      	ldr	r3, [pc, #496]	; (8005948 <KeyPress+0x33c>)
 8005758:	2200      	movs	r2, #0
 800575a:	2140      	movs	r1, #64	; 0x40
 800575c:	545a      	strb	r2, [r3, r1]
			ShortPressKey_PB8=0;
 800575e:	390b      	subs	r1, #11
 8005760:	545a      	strb	r2, [r3, r1]
		  if(ShortPressKey_PB2)//короткое нжатие
 8005762:	4a79      	ldr	r2, [pc, #484]	; (8005948 <KeyPress+0x33c>)
 8005764:	2336      	movs	r3, #54	; 0x36
 8005766:	5cd3      	ldrb	r3, [r2, r3]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <KeyPress+0x17a>
			if(Sensitivity>1)
 800576c:	4b7a      	ldr	r3, [pc, #488]	; (8005958 <KeyPress+0x34c>)
 800576e:	7a5b      	ldrb	r3, [r3, #9]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d929      	bls.n	80057c8 <KeyPress+0x1bc>
				Sensitivity--;
 8005774:	3b01      	subs	r3, #1
 8005776:	4a78      	ldr	r2, [pc, #480]	; (8005958 <KeyPress+0x34c>)
 8005778:	7253      	strb	r3, [r2, #9]
			TimerCounterTIM15=0;
 800577a:	4b73      	ldr	r3, [pc, #460]	; (8005948 <KeyPress+0x33c>)
 800577c:	2200      	movs	r2, #0
 800577e:	2140      	movs	r1, #64	; 0x40
 8005780:	545a      	strb	r2, [r3, r1]
			ShortPressKey_PB2=0;
 8005782:	390a      	subs	r1, #10
 8005784:	545a      	strb	r2, [r3, r1]
		  usRegAnalog[6]=Sensitivity;
 8005786:	4b74      	ldr	r3, [pc, #464]	; (8005958 <KeyPress+0x34c>)
 8005788:	7a5a      	ldrb	r2, [r3, #9]
 800578a:	831a      	strh	r2, [r3, #24]
	  while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 800578c:	4a6e      	ldr	r2, [pc, #440]	; (8005948 <KeyPress+0x33c>)
 800578e:	2340      	movs	r3, #64	; 0x40
 8005790:	5cd3      	ldrb	r3, [r2, r3]
 8005792:	2b06      	cmp	r3, #6
 8005794:	d81c      	bhi.n	80057d0 <KeyPress+0x1c4>
		  IWDG_Reset(); //Обновление сторожевого таймера
 8005796:	f7ff fc09 	bl	8004fac <IWDG_Reset>
		  if(FlagMogan == 0)//моргаем светодиодом
 800579a:	4a6b      	ldr	r2, [pc, #428]	; (8005948 <KeyPress+0x33c>)
 800579c:	2334      	movs	r3, #52	; 0x34
 800579e:	5cd3      	ldrb	r3, [r2, r3]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1cf      	bne.n	8005744 <KeyPress+0x138>
			  IndicationSensitivity(Sensitivity, 0b010);
 80057a4:	4b6c      	ldr	r3, [pc, #432]	; (8005958 <KeyPress+0x34c>)
 80057a6:	7a58      	ldrb	r0, [r3, #9]
 80057a8:	2102      	movs	r1, #2
 80057aa:	f7ff ff0b 	bl	80055c4 <IndicationSensitivity>
		  if(ShortPressKey_PB8)//короткое нжатие
 80057ae:	4a66      	ldr	r2, [pc, #408]	; (8005948 <KeyPress+0x33c>)
 80057b0:	2335      	movs	r3, #53	; 0x35
 80057b2:	5cd3      	ldrb	r3, [r2, r3]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0d4      	beq.n	8005762 <KeyPress+0x156>
			if(Sensitivity<3)
 80057b8:	4b67      	ldr	r3, [pc, #412]	; (8005958 <KeyPress+0x34c>)
 80057ba:	7a5b      	ldrb	r3, [r3, #9]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d8c7      	bhi.n	8005750 <KeyPress+0x144>
				Sensitivity++;
 80057c0:	3301      	adds	r3, #1
 80057c2:	4a65      	ldr	r2, [pc, #404]	; (8005958 <KeyPress+0x34c>)
 80057c4:	7253      	strb	r3, [r2, #9]
 80057c6:	e7c6      	b.n	8005756 <KeyPress+0x14a>
				Sensitivity = 1;
 80057c8:	4b63      	ldr	r3, [pc, #396]	; (8005958 <KeyPress+0x34c>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	725a      	strb	r2, [r3, #9]
 80057ce:	e7d4      	b.n	800577a <KeyPress+0x16e>
	  FlagChangeSetting=1;//выставляем флаг изменения настроек
 80057d0:	2101      	movs	r1, #1
 80057d2:	233f      	movs	r3, #63	; 0x3f
 80057d4:	54d1      	strb	r1, [r2, r3]
	  TIM15->CR1 &= ~TIM_CR1_CEN;//выключаем таймер мигания
 80057d6:	4a5f      	ldr	r2, [pc, #380]	; (8005954 <KeyPress+0x348>)
 80057d8:	6813      	ldr	r3, [r2, #0]
 80057da:	438b      	bics	r3, r1
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e725      	b.n	800562c <KeyPress+0x20>
		TimerCounterTIM15=0;
 80057e0:	0014      	movs	r4, r2
 80057e2:	2340      	movs	r3, #64	; 0x40
 80057e4:	2200      	movs	r2, #0
 80057e6:	54e2      	strb	r2, [r4, r3]
		indicator_sgd4(SPI1, 0x00, "PRG", 0b010);//Процесс индикации режима настройки
 80057e8:	3b3e      	subs	r3, #62	; 0x3e
 80057ea:	4a58      	ldr	r2, [pc, #352]	; (800594c <KeyPress+0x340>)
 80057ec:	2100      	movs	r1, #0
 80057ee:	4858      	ldr	r0, [pc, #352]	; (8005950 <KeyPress+0x344>)
 80057f0:	f7fe ffac 	bl	800474c <indicator_sgd4>
		HAL_Delay(2000);
 80057f4:	20fa      	movs	r0, #250	; 0xfa
 80057f6:	00c0      	lsls	r0, r0, #3
 80057f8:	f7fd f874 	bl	80028e4 <HAL_Delay>
		if(ClickFlag_PB2==1 && ClickFlag_PB8==1)//нажатие обеих кнопок три секунды
 80057fc:	233a      	movs	r3, #58	; 0x3a
 80057fe:	5ce3      	ldrb	r3, [r4, r3]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d005      	beq.n	8005810 <KeyPress+0x204>
			TIM15->CR1 |= TIM_CR1_CEN;//запуск таймера 15//запуск таймера 15
 8005804:	4a53      	ldr	r2, [pc, #332]	; (8005954 <KeyPress+0x348>)
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	2101      	movs	r1, #1
 800580a:	430b      	orrs	r3, r1
 800580c:	6013      	str	r3, [r2, #0]
			while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 800580e:	e066      	b.n	80058de <KeyPress+0x2d2>
		if(ClickFlag_PB2==1 && ClickFlag_PB8==1)//нажатие обеих кнопок три секунды
 8005810:	4a4d      	ldr	r2, [pc, #308]	; (8005948 <KeyPress+0x33c>)
 8005812:	333a      	adds	r3, #58	; 0x3a
 8005814:	5cd3      	ldrb	r3, [r2, r3]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d1f4      	bne.n	8005804 <KeyPress+0x1f8>
			indicator_sgd4(SPI1, 0x00, "RE3", 0b010);//Процесс индикации режима настройки
 800581a:	3301      	adds	r3, #1
 800581c:	4a50      	ldr	r2, [pc, #320]	; (8005960 <KeyPress+0x354>)
 800581e:	2100      	movs	r1, #0
 8005820:	484b      	ldr	r0, [pc, #300]	; (8005950 <KeyPress+0x344>)
 8005822:	f7fe ff93 	bl	800474c <indicator_sgd4>
			HAL_Delay(1000);
 8005826:	20fa      	movs	r0, #250	; 0xfa
 8005828:	0080      	lsls	r0, r0, #2
 800582a:	f7fd f85b 	bl	80028e4 <HAL_Delay>
			TIM15->CR1 |= TIM_CR1_CEN;//запуск таймера 15
 800582e:	4a49      	ldr	r2, [pc, #292]	; (8005954 <KeyPress+0x348>)
 8005830:	6813      	ldr	r3, [r2, #0]
 8005832:	2101      	movs	r1, #1
 8005834:	430b      	orrs	r3, r1
 8005836:	6013      	str	r3, [r2, #0]
			while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8005838:	e00c      	b.n	8005854 <KeyPress+0x248>
				  indicator_sgd4(SPI1, 0x00, StringIndication, 0b000);//Индикация текущей настройки релеЁ
 800583a:	4a47      	ldr	r2, [pc, #284]	; (8005958 <KeyPress+0x34c>)
 800583c:	2300      	movs	r3, #0
 800583e:	324c      	adds	r2, #76	; 0x4c
 8005840:	2100      	movs	r1, #0
 8005842:	4843      	ldr	r0, [pc, #268]	; (8005950 <KeyPress+0x344>)
 8005844:	f7fe ff82 	bl	800474c <indicator_sgd4>
 8005848:	e01e      	b.n	8005888 <KeyPress+0x27c>
			  if(ShortPressKey_PB2)//короткое нжатие
 800584a:	4a3f      	ldr	r2, [pc, #252]	; (8005948 <KeyPress+0x33c>)
 800584c:	2336      	movs	r3, #54	; 0x36
 800584e:	5cd3      	ldrb	r3, [r2, r3]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d127      	bne.n	80058a4 <KeyPress+0x298>
			while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 8005854:	4a3c      	ldr	r2, [pc, #240]	; (8005948 <KeyPress+0x33c>)
 8005856:	2340      	movs	r3, #64	; 0x40
 8005858:	5cd3      	ldrb	r3, [r2, r3]
 800585a:	2b06      	cmp	r3, #6
 800585c:	d900      	bls.n	8005860 <KeyPress+0x254>
 800585e:	e081      	b.n	8005964 <KeyPress+0x358>
			  IWDG_Reset(); //Обновление сторожевого таймера
 8005860:	f7ff fba4 	bl	8004fac <IWDG_Reset>
			  sprintf(StringIndication, "%d",  Resistor120);
 8005864:	4c38      	ldr	r4, [pc, #224]	; (8005948 <KeyPress+0x33c>)
 8005866:	7922      	ldrb	r2, [r4, #4]
 8005868:	483b      	ldr	r0, [pc, #236]	; (8005958 <KeyPress+0x34c>)
 800586a:	493c      	ldr	r1, [pc, #240]	; (800595c <KeyPress+0x350>)
 800586c:	304c      	adds	r0, #76	; 0x4c
 800586e:	f001 fced 	bl	800724c <siprintf>
			  if(FlagMogan == 0)
 8005872:	2334      	movs	r3, #52	; 0x34
 8005874:	5ce3      	ldrb	r3, [r4, r3]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1df      	bne.n	800583a <KeyPress+0x22e>
				  indicator_sgd4(SPI1, 0x00, StringIndication, 0b010);//Индикация текущей настройки релеЁ
 800587a:	4a37      	ldr	r2, [pc, #220]	; (8005958 <KeyPress+0x34c>)
 800587c:	3302      	adds	r3, #2
 800587e:	324c      	adds	r2, #76	; 0x4c
 8005880:	2100      	movs	r1, #0
 8005882:	4833      	ldr	r0, [pc, #204]	; (8005950 <KeyPress+0x344>)
 8005884:	f7fe ff62 	bl	800474c <indicator_sgd4>
			  if(ShortPressKey_PB8)//короткое нжатие
 8005888:	4a2f      	ldr	r2, [pc, #188]	; (8005948 <KeyPress+0x33c>)
 800588a:	2335      	movs	r3, #53	; 0x35
 800588c:	5cd3      	ldrb	r3, [r2, r3]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0db      	beq.n	800584a <KeyPress+0x23e>
				  Resistor120 = 120;
 8005892:	0013      	movs	r3, r2
 8005894:	2278      	movs	r2, #120	; 0x78
 8005896:	711a      	strb	r2, [r3, #4]
				  ShortPressKey_PB8=0;
 8005898:	2200      	movs	r2, #0
 800589a:	2135      	movs	r1, #53	; 0x35
 800589c:	545a      	strb	r2, [r3, r1]
				  TimerCounterTIM15=0;
 800589e:	310b      	adds	r1, #11
 80058a0:	545a      	strb	r2, [r3, r1]
 80058a2:	e7d2      	b.n	800584a <KeyPress+0x23e>
				  Resistor120 = 0;
 80058a4:	0013      	movs	r3, r2
 80058a6:	2200      	movs	r2, #0
 80058a8:	711a      	strb	r2, [r3, #4]
				  ShortPressKey_PB2=0;
 80058aa:	2136      	movs	r1, #54	; 0x36
 80058ac:	545a      	strb	r2, [r3, r1]
				  TimerCounterTIM15=0;
 80058ae:	310a      	adds	r1, #10
 80058b0:	545a      	strb	r2, [r3, r1]
 80058b2:	e7cf      	b.n	8005854 <KeyPress+0x248>
				  StringIndication[0] = '0';
 80058b4:	4b28      	ldr	r3, [pc, #160]	; (8005958 <KeyPress+0x34c>)
 80058b6:	2230      	movs	r2, #48	; 0x30
 80058b8:	214c      	movs	r1, #76	; 0x4c
 80058ba:	545a      	strb	r2, [r3, r1]
				  StringIndication[1] = '0';
 80058bc:	334c      	adds	r3, #76	; 0x4c
 80058be:	705a      	strb	r2, [r3, #1]
				  StringIndication[2] = '0';
 80058c0:	709a      	strb	r2, [r3, #2]
 80058c2:	e01e      	b.n	8005902 <KeyPress+0x2f6>
				  indicator_sgd4(SPI1, 0x00, StringIndication, 0b000);//Индикация текущей настройки релеЁ
 80058c4:	4a24      	ldr	r2, [pc, #144]	; (8005958 <KeyPress+0x34c>)
 80058c6:	2300      	movs	r3, #0
 80058c8:	324c      	adds	r2, #76	; 0x4c
 80058ca:	2100      	movs	r1, #0
 80058cc:	4820      	ldr	r0, [pc, #128]	; (8005950 <KeyPress+0x344>)
 80058ce:	f7fe ff3d 	bl	800474c <indicator_sgd4>
 80058d2:	e022      	b.n	800591a <KeyPress+0x30e>
			  if(ShortPressKey_PB2)//короткое нжатие
 80058d4:	4a1c      	ldr	r2, [pc, #112]	; (8005948 <KeyPress+0x33c>)
 80058d6:	2336      	movs	r3, #54	; 0x36
 80058d8:	5cd3      	ldrb	r3, [r2, r3]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d12b      	bne.n	8005936 <KeyPress+0x32a>
			while(TimerCounterTIM15<=6) //Если таймер больше 3 сек, то заканчиваем настройку
 80058de:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <KeyPress+0x33c>)
 80058e0:	2340      	movs	r3, #64	; 0x40
 80058e2:	5cd3      	ldrb	r3, [r2, r3]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d83d      	bhi.n	8005964 <KeyPress+0x358>
			  IWDG_Reset(); //Обновление сторожевого таймера
 80058e8:	f7ff fb60 	bl	8004fac <IWDG_Reset>
			  if(ModeRele)
 80058ec:	4b16      	ldr	r3, [pc, #88]	; (8005948 <KeyPress+0x33c>)
 80058ee:	795b      	ldrb	r3, [r3, #5]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0df      	beq.n	80058b4 <KeyPress+0x2a8>
				  StringIndication[0] = '1';
 80058f4:	4b18      	ldr	r3, [pc, #96]	; (8005958 <KeyPress+0x34c>)
 80058f6:	2231      	movs	r2, #49	; 0x31
 80058f8:	214c      	movs	r1, #76	; 0x4c
 80058fa:	545a      	strb	r2, [r3, r1]
				  StringIndication[1] = '1';
 80058fc:	334c      	adds	r3, #76	; 0x4c
 80058fe:	705a      	strb	r2, [r3, #1]
				  StringIndication[2] = '1';
 8005900:	709a      	strb	r2, [r3, #2]
			  if(FlagMogan == 0)
 8005902:	4a11      	ldr	r2, [pc, #68]	; (8005948 <KeyPress+0x33c>)
 8005904:	2334      	movs	r3, #52	; 0x34
 8005906:	5cd3      	ldrb	r3, [r2, r3]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1db      	bne.n	80058c4 <KeyPress+0x2b8>
				  indicator_sgd4(SPI1, 0x00, StringIndication, 0b010);//Индикация текущей настройки релеЁ
 800590c:	4a12      	ldr	r2, [pc, #72]	; (8005958 <KeyPress+0x34c>)
 800590e:	3302      	adds	r3, #2
 8005910:	324c      	adds	r2, #76	; 0x4c
 8005912:	2100      	movs	r1, #0
 8005914:	480e      	ldr	r0, [pc, #56]	; (8005950 <KeyPress+0x344>)
 8005916:	f7fe ff19 	bl	800474c <indicator_sgd4>
			  if(ShortPressKey_PB8)//короткое нжатие
 800591a:	4a0b      	ldr	r2, [pc, #44]	; (8005948 <KeyPress+0x33c>)
 800591c:	2335      	movs	r3, #53	; 0x35
 800591e:	5cd3      	ldrb	r3, [r2, r3]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0d7      	beq.n	80058d4 <KeyPress+0x2c8>
				  ModeRele = 1;
 8005924:	0013      	movs	r3, r2
 8005926:	2201      	movs	r2, #1
 8005928:	715a      	strb	r2, [r3, #5]
				  ShortPressKey_PB8=0;
 800592a:	2200      	movs	r2, #0
 800592c:	2135      	movs	r1, #53	; 0x35
 800592e:	545a      	strb	r2, [r3, r1]
				  TimerCounterTIM15=0;
 8005930:	310b      	adds	r1, #11
 8005932:	545a      	strb	r2, [r3, r1]
 8005934:	e7ce      	b.n	80058d4 <KeyPress+0x2c8>
				  ModeRele = 0;
 8005936:	0013      	movs	r3, r2
 8005938:	2200      	movs	r2, #0
 800593a:	715a      	strb	r2, [r3, #5]
				  ShortPressKey_PB2=0;
 800593c:	2136      	movs	r1, #54	; 0x36
 800593e:	545a      	strb	r2, [r3, r1]
				  TimerCounterTIM15=0;
 8005940:	310a      	adds	r1, #10
 8005942:	545a      	strb	r2, [r3, r1]
 8005944:	e7cb      	b.n	80058de <KeyPress+0x2d2>
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	20000178 	.word	0x20000178
 800594c:	0800883c 	.word	0x0800883c
 8005950:	40013000 	.word	0x40013000
 8005954:	40014000 	.word	0x40014000
 8005958:	2000000c 	.word	0x2000000c
 800595c:	08008840 	.word	0x08008840
 8005960:	08008844 	.word	0x08008844
		TIM15->CR1 &= ~TIM_CR1_CEN;
 8005964:	4905      	ldr	r1, [pc, #20]	; (800597c <KeyPress+0x370>)
 8005966:	680b      	ldr	r3, [r1, #0]
 8005968:	2201      	movs	r2, #1
 800596a:	4393      	bics	r3, r2
 800596c:	600b      	str	r3, [r1, #0]
		FlagChangeSetting=1;//выставляем флаг изменения настроек
 800596e:	4b04      	ldr	r3, [pc, #16]	; (8005980 <KeyPress+0x374>)
 8005970:	213f      	movs	r1, #63	; 0x3f
 8005972:	545a      	strb	r2, [r3, r1]
		LongDoublePressKey_PB2_PB8=0;
 8005974:	323d      	adds	r2, #61	; 0x3d
 8005976:	2100      	movs	r1, #0
 8005978:	5499      	strb	r1, [r3, r2]
}
 800597a:	e65d      	b.n	8005638 <KeyPress+0x2c>
 800597c:	40014000 	.word	0x40014000
 8005980:	20000178 	.word	0x20000178

08005984 <_Error_Handler>:

void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8005984:	e7fe      	b.n	8005984 <_Error_Handler>
	...

08005988 <MX_USART1_UART_Init>:
{
 8005988:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800598a:	480d      	ldr	r0, [pc, #52]	; (80059c0 <MX_USART1_UART_Init+0x38>)
 800598c:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <MX_USART1_UART_Init+0x3c>)
 800598e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8005990:	2396      	movs	r3, #150	; 0x96
 8005992:	019b      	lsls	r3, r3, #6
 8005994:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005996:	2300      	movs	r3, #0
 8005998:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800599a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800599c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800599e:	220c      	movs	r2, #12
 80059a0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059a2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80059a4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059a6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059a8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80059aa:	f7fe fcef 	bl	800438c <HAL_UART_Init>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d100      	bne.n	80059b4 <MX_USART1_UART_Init+0x2c>
}
 80059b2:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 80059b4:	21e5      	movs	r1, #229	; 0xe5
 80059b6:	0089      	lsls	r1, r1, #2
 80059b8:	4803      	ldr	r0, [pc, #12]	; (80059c8 <MX_USART1_UART_Init+0x40>)
 80059ba:	f7ff ffe3 	bl	8005984 <_Error_Handler>
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	200002ac 	.word	0x200002ac
 80059c4:	40013800 	.word	0x40013800
 80059c8:	08008848 	.word	0x08008848

080059cc <MX_USART2_UART_Init>:
{
 80059cc:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80059ce:	480c      	ldr	r0, [pc, #48]	; (8005a00 <MX_USART2_UART_Init+0x34>)
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <MX_USART2_UART_Init+0x38>)
 80059d2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = BaudRateModBusRTU;
 80059d4:	2396      	movs	r3, #150	; 0x96
 80059d6:	019b      	lsls	r3, r3, #6
 80059d8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059da:	2300      	movs	r3, #0
 80059dc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80059de:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80059e0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80059e2:	220c      	movs	r2, #12
 80059e4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059e6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80059e8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059ea:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059ec:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80059ee:	f7fe fccd 	bl	800438c <HAL_UART_Init>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d100      	bne.n	80059f8 <MX_USART2_UART_Init+0x2c>
}
 80059f6:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 80059f8:	4903      	ldr	r1, [pc, #12]	; (8005a08 <MX_USART2_UART_Init+0x3c>)
 80059fa:	4804      	ldr	r0, [pc, #16]	; (8005a0c <MX_USART2_UART_Init+0x40>)
 80059fc:	f7ff ffc2 	bl	8005984 <_Error_Handler>
 8005a00:	200003d8 	.word	0x200003d8
 8005a04:	40004400 	.word	0x40004400
 8005a08:	000003a9 	.word	0x000003a9
 8005a0c:	08008848 	.word	0x08008848

08005a10 <MX_TIM16_Init>:
{
 8005a10:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8005a12:	480a      	ldr	r0, [pc, #40]	; (8005a3c <MX_TIM16_Init+0x2c>)
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <MX_TIM16_Init+0x30>)
 8005a16:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 47;
 8005a18:	232f      	movs	r3, #47	; 0x2f
 8005a1a:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 50;
 8005a20:	2232      	movs	r2, #50	; 0x32
 8005a22:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a24:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8005a26:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a28:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005a2a:	f7fd fe95 	bl	8003758 <HAL_TIM_Base_Init>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d100      	bne.n	8005a34 <MX_TIM16_Init+0x24>
}
 8005a32:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8005a34:	4903      	ldr	r1, [pc, #12]	; (8005a44 <MX_TIM16_Init+0x34>)
 8005a36:	4804      	ldr	r0, [pc, #16]	; (8005a48 <MX_TIM16_Init+0x38>)
 8005a38:	f7ff ffa4 	bl	8005984 <_Error_Handler>
 8005a3c:	200004dc 	.word	0x200004dc
 8005a40:	40014400 	.word	0x40014400
 8005a44:	0000037f 	.word	0x0000037f
 8005a48:	08008848 	.word	0x08008848

08005a4c <SystemClock_Config>:
{
 8005a4c:	b500      	push	{lr}
 8005a4e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a50:	2302      	movs	r3, #2
 8005a52:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a54:	2201      	movs	r2, #1
 8005a56:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8005a58:	320f      	adds	r2, #15
 8005a5a:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a5c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8005a62:	22a0      	movs	r2, #160	; 0xa0
 8005a64:	0392      	lsls	r2, r2, #14
 8005a66:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8005a68:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a6a:	a808      	add	r0, sp, #32
 8005a6c:	f7fd f8c6 	bl	8002bfc <HAL_RCC_OscConfig>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d128      	bne.n	8005ac6 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a74:	2307      	movs	r3, #7
 8005a76:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a78:	3b05      	subs	r3, #5
 8005a7a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a80:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005a82:	2101      	movs	r1, #1
 8005a84:	a804      	add	r0, sp, #16
 8005a86:	f7fd fb2f 	bl	80030e8 <HAL_RCC_ClockConfig>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d11f      	bne.n	8005ace <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005a92:	2300      	movs	r3, #0
 8005a94:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a96:	4668      	mov	r0, sp
 8005a98:	f7fd fbf2 	bl	8003280 <HAL_RCCEx_PeriphCLKConfig>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d11a      	bne.n	8005ad6 <SystemClock_Config+0x8a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005aa0:	f7fd fbbc 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8005aa4:	21fa      	movs	r1, #250	; 0xfa
 8005aa6:	0089      	lsls	r1, r1, #2
 8005aa8:	f7fa fb38 	bl	800011c <__udivsi3>
 8005aac:	f7fc ff68 	bl	8002980 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005ab0:	2004      	movs	r0, #4
 8005ab2:	f7fc ff81 	bl	80029b8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2100      	movs	r1, #0
 8005abc:	4240      	negs	r0, r0
 8005abe:	f7fc ff23 	bl	8002908 <HAL_NVIC_SetPriority>
}
 8005ac2:	b015      	add	sp, #84	; 0x54
 8005ac4:	bd00      	pop	{pc}
    _Error_Handler(__FILE__, __LINE__);
 8005ac6:	4906      	ldr	r1, [pc, #24]	; (8005ae0 <SystemClock_Config+0x94>)
 8005ac8:	4806      	ldr	r0, [pc, #24]	; (8005ae4 <SystemClock_Config+0x98>)
 8005aca:	f7ff ff5b 	bl	8005984 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005ace:	4906      	ldr	r1, [pc, #24]	; (8005ae8 <SystemClock_Config+0x9c>)
 8005ad0:	4804      	ldr	r0, [pc, #16]	; (8005ae4 <SystemClock_Config+0x98>)
 8005ad2:	f7ff ff57 	bl	8005984 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005ad6:	4905      	ldr	r1, [pc, #20]	; (8005aec <SystemClock_Config+0xa0>)
 8005ad8:	4802      	ldr	r0, [pc, #8]	; (8005ae4 <SystemClock_Config+0x98>)
 8005ada:	f7ff ff53 	bl	8005984 <_Error_Handler>
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	00000326 	.word	0x00000326
 8005ae4:	08008848 	.word	0x08008848
 8005ae8:	00000333 	.word	0x00000333
 8005aec:	0000033a 	.word	0x0000033a

08005af0 <main>:
{
 8005af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005af2:	b083      	sub	sp, #12
  HAL_Init();
 8005af4:	f7fc fed4 	bl	80028a0 <HAL_Init>
  SystemClock_Config();
 8005af8:	f7ff ffa8 	bl	8005a4c <SystemClock_Config>
  MX_GPIO_Init();
 8005afc:	f7fe ff72 	bl	80049e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005b00:	f7fe ff06 	bl	8004910 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8005b04:	f7ff ff40 	bl	8005988 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005b08:	f7ff ff60 	bl	80059cc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8005b0c:	f7ff ff80 	bl	8005a10 <MX_TIM16_Init>
  InitTIM14();
 8005b10:	f7fe fdde 	bl	80046d0 <InitTIM14>
  InitTIM15();
 8005b14:	f7fe fdfa 	bl	800470c <InitTIM15>
  InitTIM3();
 8005b18:	f7fe fdba 	bl	8004690 <InitTIM3>
  ADC_Init();//инициализация ацп
 8005b1c:	f7fe fd0a 	bl	8004534 <ADC_Init>
  Setting_Init();
 8005b20:	f7fe fffc 	bl	8004b1c <Setting_Init>
  MT_PORT_SetTimerModule(&htim16);
 8005b24:	4884      	ldr	r0, [pc, #528]	; (8005d38 <main+0x248>)
 8005b26:	f000 fd8b 	bl	8006640 <MT_PORT_SetTimerModule>
  MT_PORT_SetUartModule(&huart2);
 8005b2a:	4884      	ldr	r0, [pc, #528]	; (8005d3c <main+0x24c>)
 8005b2c:	f000 fd8e 	bl	800664c <MT_PORT_SetUartModule>
  IWDG_Init();
 8005b30:	f7ff fa22 	bl	8004f78 <IWDG_Init>
  while(SecondsCounter<30 && MinuteCounter<1) //1.5 минуты прогреваем
 8005b34:	e00d      	b.n	8005b52 <main+0x62>
		  indicator_sgd4(SPI1, 0x00, StringIndication, 0b000);
 8005b36:	4a82      	ldr	r2, [pc, #520]	; (8005d40 <main+0x250>)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	324c      	adds	r2, #76	; 0x4c
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	4881      	ldr	r0, [pc, #516]	; (8005d44 <main+0x254>)
 8005b40:	f7fe fe04 	bl	800474c <indicator_sgd4>
	  if(TimerFlagTIM3)//каждую секунду меряем
 8005b44:	4a80      	ldr	r2, [pc, #512]	; (8005d48 <main+0x258>)
 8005b46:	2337      	movs	r3, #55	; 0x37
 8005b48:	5cd3      	ldrb	r3, [r2, r3]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d113      	bne.n	8005b76 <main+0x86>
	  IWDG_Reset(); //Обновление сторожевого таймера
 8005b4e:	f7ff fa2d 	bl	8004fac <IWDG_Reset>
  while(SecondsCounter<30 && MinuteCounter<1) //1.5 минуты прогреваем
 8005b52:	4b7d      	ldr	r3, [pc, #500]	; (8005d48 <main+0x258>)
 8005b54:	799b      	ldrb	r3, [r3, #6]
 8005b56:	2b1d      	cmp	r3, #29
 8005b58:	d814      	bhi.n	8005b84 <main+0x94>
 8005b5a:	4a7b      	ldr	r2, [pc, #492]	; (8005d48 <main+0x258>)
 8005b5c:	7e92      	ldrb	r2, [r2, #26]
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	d110      	bne.n	8005b84 <main+0x94>
	  if(SecondsCounter%2 == 0)
 8005b62:	07db      	lsls	r3, r3, #31
 8005b64:	d4e7      	bmi.n	8005b36 <main+0x46>
		  indicator_sgd4(SPI1, 0x00, StringIndication, 0b010);
 8005b66:	4a76      	ldr	r2, [pc, #472]	; (8005d40 <main+0x250>)
 8005b68:	2302      	movs	r3, #2
 8005b6a:	324c      	adds	r2, #76	; 0x4c
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4875      	ldr	r0, [pc, #468]	; (8005d44 <main+0x254>)
 8005b70:	f7fe fdec 	bl	800474c <indicator_sgd4>
 8005b74:	e7e6      	b.n	8005b44 <main+0x54>
		  GasMeasurement();
 8005b76:	f7ff f823 	bl	8004bc0 <GasMeasurement>
		  TimerFlagTIM3=0;
 8005b7a:	4a73      	ldr	r2, [pc, #460]	; (8005d48 <main+0x258>)
 8005b7c:	2337      	movs	r3, #55	; 0x37
 8005b7e:	2100      	movs	r1, #0
 8005b80:	54d1      	strb	r1, [r2, r3]
 8005b82:	e7e4      	b.n	8005b4e <main+0x5e>
R_average = Rse; //берем как среднее текущее значение сопротивления
 8005b84:	4c70      	ldr	r4, [pc, #448]	; (8005d48 <main+0x258>)
 8005b86:	6960      	ldr	r0, [r4, #20]
 8005b88:	f7fa fbcc 	bl	8000324 <__aeabi_f2uiz>
 8005b8c:	8420      	strh	r0, [r4, #32]
 8005b8e:	e09d      	b.n	8005ccc <main+0x1dc>
		  DataSettingMemory[0] = GlobalAddress;
 8005b90:	496b      	ldr	r1, [pc, #428]	; (8005d40 <main+0x250>)
 8005b92:	7a0b      	ldrb	r3, [r1, #8]
 8005b94:	700b      	strb	r3, [r1, #0]
		  DataSettingMemory[1] = Sensitivity;
 8005b96:	7a4b      	ldrb	r3, [r1, #9]
 8005b98:	704b      	strb	r3, [r1, #1]
		  DataSettingMemory[2] = ModeRele;
 8005b9a:	0014      	movs	r4, r2
 8005b9c:	7952      	ldrb	r2, [r2, #5]
 8005b9e:	708a      	strb	r2, [r1, #2]
		  DataSettingMemory[3] = Resistor120;
 8005ba0:	7922      	ldrb	r2, [r4, #4]
 8005ba2:	70ca      	strb	r2, [r1, #3]
		  DataSettingMemory[4] = SerialNumber_0;
 8005ba4:	7822      	ldrb	r2, [r4, #0]
 8005ba6:	710a      	strb	r2, [r1, #4]
		  DataSettingMemory[5] = SerialNumber_1;
 8005ba8:	7862      	ldrb	r2, [r4, #1]
 8005baa:	714a      	strb	r2, [r1, #5]
		  DataSettingMemory[6] = SerialNumber_2;
 8005bac:	78a2      	ldrb	r2, [r4, #2]
 8005bae:	718a      	strb	r2, [r1, #6]
		  DataSettingMemory[7] = SerialNumber_3;
 8005bb0:	78e2      	ldrb	r2, [r4, #3]
 8005bb2:	71ca      	strb	r2, [r1, #7]
		  usRegAnalog[6] = Sensitivity;
 8005bb4:	830b      	strh	r3, [r1, #24]
		  WriteToFleshMemory(0xFC00, DataSettingMemory, 12);//то записываем изменения в память
 8005bb6:	20fc      	movs	r0, #252	; 0xfc
 8005bb8:	220c      	movs	r2, #12
 8005bba:	0200      	lsls	r0, r0, #8
 8005bbc:	f7fe fd14 	bl	80045e8 <WriteToFleshMemory>
		  if(Resistor120==120)//включаем резистор 120 Ом
 8005bc0:	7923      	ldrb	r3, [r4, #4]
 8005bc2:	2b78      	cmp	r3, #120	; 0x78
 8005bc4:	d009      	beq.n	8005bda <main+0xea>
		  else if(Resistor120==0)
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10e      	bne.n	8005be8 <main+0xf8>
			  R120_RESET;
 8005bca:	2290      	movs	r2, #144	; 0x90
 8005bcc:	05d2      	lsls	r2, r2, #23
 8005bce:	6991      	ldr	r1, [r2, #24]
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	055b      	lsls	r3, r3, #21
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	6193      	str	r3, [r2, #24]
 8005bd8:	e006      	b.n	8005be8 <main+0xf8>
			  R120_SET;
 8005bda:	2290      	movs	r2, #144	; 0x90
 8005bdc:	05d2      	lsls	r2, r2, #23
 8005bde:	6991      	ldr	r1, [r2, #24]
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	015b      	lsls	r3, r3, #5
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6193      	str	r3, [r2, #24]
		  switch (Sensitivity)//Выбираем чувствительность
 8005be8:	4b55      	ldr	r3, [pc, #340]	; (8005d40 <main+0x250>)
 8005bea:	7a5b      	ldrb	r3, [r3, #9]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d00d      	beq.n	8005c0c <main+0x11c>
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d010      	beq.n	8005c16 <main+0x126>
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d004      	beq.n	8005c02 <main+0x112>
		  FlagChangeSetting=0;
 8005bf8:	4a53      	ldr	r2, [pc, #332]	; (8005d48 <main+0x258>)
 8005bfa:	233f      	movs	r3, #63	; 0x3f
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	54d1      	strb	r1, [r2, r3]
 8005c00:	e06a      	b.n	8005cd8 <main+0x1e8>
				TargetConcentration=NH;
 8005c02:	4b4f      	ldr	r3, [pc, #316]	; (8005d40 <main+0x250>)
 8005c04:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8005c06:	4b51      	ldr	r3, [pc, #324]	; (8005d4c <main+0x25c>)
 8005c08:	801a      	strh	r2, [r3, #0]
			  }break;
 8005c0a:	e7f5      	b.n	8005bf8 <main+0x108>
				TargetConcentration=CH;
 8005c0c:	4b4c      	ldr	r3, [pc, #304]	; (8005d40 <main+0x250>)
 8005c0e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005c10:	4b4e      	ldr	r3, [pc, #312]	; (8005d4c <main+0x25c>)
 8005c12:	801a      	strh	r2, [r3, #0]
			  }break;
 8005c14:	e7f0      	b.n	8005bf8 <main+0x108>
				TargetConcentration=VH;
 8005c16:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <main+0x250>)
 8005c18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005c1a:	4b4c      	ldr	r3, [pc, #304]	; (8005d4c <main+0x25c>)
 8005c1c:	801a      	strh	r2, [r3, #0]
			  }break;
 8005c1e:	e7eb      	b.n	8005bf8 <main+0x108>
				eMBDisable();
 8005c20:	f000 fc6e 	bl	8006500 <eMBDisable>
				eMBInit(MB_RTU, (UCHAR)GlobalAddress, 0, BaudRateModBusRTU, MB_PAR_NONE); //начальные настройки modBus
 8005c24:	2396      	movs	r3, #150	; 0x96
 8005c26:	4c46      	ldr	r4, [pc, #280]	; (8005d40 <main+0x250>)
 8005c28:	7a21      	ldrb	r1, [r4, #8]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	9200      	str	r2, [sp, #0]
 8005c2e:	019b      	lsls	r3, r3, #6
 8005c30:	2000      	movs	r0, #0
 8005c32:	f000 fc03 	bl	800643c <eMBInit>
				eMBEnable();
 8005c36:	f000 fc4f 	bl	80064d8 <eMBEnable>
				GlobalAddressFlesh = GlobalAddress;
 8005c3a:	7a21      	ldrb	r1, [r4, #8]
 8005c3c:	4a42      	ldr	r2, [pc, #264]	; (8005d48 <main+0x258>)
 8005c3e:	2341      	movs	r3, #65	; 0x41
 8005c40:	54d1      	strb	r1, [r2, r3]
		  GasMeasurement();//Измерение и расчет концентрации
 8005c42:	f7fe ffbd 	bl	8004bc0 <GasMeasurement>
		  ServiceMessage[7] = GlobalAddress;
 8005c46:	4d3e      	ldr	r5, [pc, #248]	; (8005d40 <main+0x250>)
 8005c48:	002c      	movs	r4, r5
 8005c4a:	3450      	adds	r4, #80	; 0x50
 8005c4c:	7a2b      	ldrb	r3, [r5, #8]
 8005c4e:	71e3      	strb	r3, [r4, #7]
		  ServiceMessage[10] = ((uint8_t)S)>>8;
 8005c50:	4e3d      	ldr	r6, [pc, #244]	; (8005d48 <main+0x258>)
 8005c52:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8005c54:	f7fa fb66 	bl	8000324 <__aeabi_f2uiz>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	72a3      	strb	r3, [r4, #10]
		  ServiceMessage[11] = ((uint8_t)S);
 8005c5c:	72e0      	strb	r0, [r4, #11]
		  ServiceMessage[14] = Rse;
 8005c5e:	6970      	ldr	r0, [r6, #20]
 8005c60:	f7fa fb60 	bl	8000324 <__aeabi_f2uiz>
 8005c64:	73a0      	strb	r0, [r4, #14]
		  ServiceMessage[17] = R_average;
 8005c66:	8c33      	ldrh	r3, [r6, #32]
 8005c68:	7463      	strb	r3, [r4, #17]
		  HAL_UART_Transmit_IT(&huart1, ServiceMessage, 20);//Отправка посылки в сервесный uart
 8005c6a:	2214      	movs	r2, #20
 8005c6c:	0021      	movs	r1, r4
 8005c6e:	4838      	ldr	r0, [pc, #224]	; (8005d50 <main+0x260>)
 8005c70:	f7fd fe30 	bl	80038d4 <HAL_UART_Transmit_IT>
		  if(StatusMode==13)
 8005c74:	232a      	movs	r3, #42	; 0x2a
 8005c76:	5ceb      	ldrb	r3, [r5, r3]
 8005c78:	2b0d      	cmp	r3, #13
 8005c7a:	d03e      	beq.n	8005cfa <main+0x20a>
		  else if(StatusMode==23)
 8005c7c:	2b17      	cmp	r3, #23
 8005c7e:	d04b      	beq.n	8005d18 <main+0x228>
		  TimerFlagTIM3=0;
 8005c80:	4a31      	ldr	r2, [pc, #196]	; (8005d48 <main+0x258>)
 8005c82:	2337      	movs	r3, #55	; 0x37
 8005c84:	2100      	movs	r1, #0
 8005c86:	54d1      	strb	r1, [r2, r3]
	  if(S>(TargetConcentration+TargetConcentration*0.1))//если концентрация превысила заданное значение на 10%
 8005c88:	4b2f      	ldr	r3, [pc, #188]	; (8005d48 <main+0x258>)
 8005c8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c8c:	f7fc fd18 	bl	80026c0 <__aeabi_f2d>
 8005c90:	0006      	movs	r6, r0
 8005c92:	000f      	movs	r7, r1
 8005c94:	4b2d      	ldr	r3, [pc, #180]	; (8005d4c <main+0x25c>)
 8005c96:	8818      	ldrh	r0, [r3, #0]
 8005c98:	f7fc fce2 	bl	8002660 <__aeabi_i2d>
 8005c9c:	0004      	movs	r4, r0
 8005c9e:	000d      	movs	r5, r1
 8005ca0:	4a2c      	ldr	r2, [pc, #176]	; (8005d54 <main+0x264>)
 8005ca2:	4b2d      	ldr	r3, [pc, #180]	; (8005d58 <main+0x268>)
 8005ca4:	f7fb fede 	bl	8001a64 <__aeabi_dmul>
 8005ca8:	0002      	movs	r2, r0
 8005caa:	000b      	movs	r3, r1
 8005cac:	0020      	movs	r0, r4
 8005cae:	0029      	movs	r1, r5
 8005cb0:	f7fb fa50 	bl	8001154 <__aeabi_dadd>
 8005cb4:	0002      	movs	r2, r0
 8005cb6:	000b      	movs	r3, r1
 8005cb8:	0030      	movs	r0, r6
 8005cba:	0039      	movs	r1, r7
 8005cbc:	f7fa fae4 	bl	8000288 <__aeabi_dcmpgt>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d001      	beq.n	8005cc8 <main+0x1d8>
		  ModeAlarm();
 8005cc4:	f7ff f97a 	bl	8004fbc <ModeAlarm>
	  IWDG_Reset(); //Обновление сторожевого таймера
 8005cc8:	f7ff f970 	bl	8004fac <IWDG_Reset>
	  if(FlagChangeSetting)//Если сработал флаг изменения настроек датчика
 8005ccc:	4a1e      	ldr	r2, [pc, #120]	; (8005d48 <main+0x258>)
 8005cce:	233f      	movs	r3, #63	; 0x3f
 8005cd0:	5cd3      	ldrb	r3, [r2, r3]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d000      	beq.n	8005cd8 <main+0x1e8>
 8005cd6:	e75b      	b.n	8005b90 <main+0xa0>
	  KeyPress(); //Обработка нажатий клавиш
 8005cd8:	f7ff fc98 	bl	800560c <KeyPress>
	  eMBPoll(); //Проверка сообщений по modBus
 8005cdc:	f000 fc28 	bl	8006530 <eMBPoll>
	  if(TimerFlagTIM3)//каждую секунду
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <main+0x258>)
 8005ce2:	2337      	movs	r3, #55	; 0x37
 8005ce4:	5cd3      	ldrb	r3, [r2, r3]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0ce      	beq.n	8005c88 <main+0x198>
			if(GlobalAddress != GlobalAddressFlesh)//если изменен адрес устройства, то проводится переинициализация
 8005cea:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <main+0x250>)
 8005cec:	7a1a      	ldrb	r2, [r3, #8]
 8005cee:	4916      	ldr	r1, [pc, #88]	; (8005d48 <main+0x258>)
 8005cf0:	2341      	movs	r3, #65	; 0x41
 8005cf2:	5ccb      	ldrb	r3, [r1, r3]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d0a4      	beq.n	8005c42 <main+0x152>
 8005cf8:	e792      	b.n	8005c20 <main+0x130>
			  usRegAnalog[1] = (uint16_t)13; //передается сообщение
 8005cfa:	4c11      	ldr	r4, [pc, #68]	; (8005d40 <main+0x250>)
 8005cfc:	81e3      	strh	r3, [r4, #14]
			  sprintf(StringIndication, "%d", GlobalAddress);
 8005cfe:	7a22      	ldrb	r2, [r4, #8]
 8005d00:	344c      	adds	r4, #76	; 0x4c
 8005d02:	4916      	ldr	r1, [pc, #88]	; (8005d5c <main+0x26c>)
 8005d04:	0020      	movs	r0, r4
 8005d06:	f001 faa1 	bl	800724c <siprintf>
			  indicator_sgd4(SPI1, 0x00, StringIndication, 0b010);
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	0022      	movs	r2, r4
 8005d0e:	2100      	movs	r1, #0
 8005d10:	480c      	ldr	r0, [pc, #48]	; (8005d44 <main+0x254>)
 8005d12:	f7fe fd1b 	bl	800474c <indicator_sgd4>
 8005d16:	e7b3      	b.n	8005c80 <main+0x190>
			  usRegAnalog[1] = (uint16_t)23; //передается сообщение
 8005d18:	4c09      	ldr	r4, [pc, #36]	; (8005d40 <main+0x250>)
 8005d1a:	81e3      	strh	r3, [r4, #14]
			  sprintf(StringIndication, "%d", GlobalAddress);
 8005d1c:	7a22      	ldrb	r2, [r4, #8]
 8005d1e:	344c      	adds	r4, #76	; 0x4c
 8005d20:	490e      	ldr	r1, [pc, #56]	; (8005d5c <main+0x26c>)
 8005d22:	0020      	movs	r0, r4
 8005d24:	f001 fa92 	bl	800724c <siprintf>
			  indicator_sgd4(SPI1, 0x00, StringIndication, 0b110);
 8005d28:	2306      	movs	r3, #6
 8005d2a:	0022      	movs	r2, r4
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4805      	ldr	r0, [pc, #20]	; (8005d44 <main+0x254>)
 8005d30:	f7fe fd0c 	bl	800474c <indicator_sgd4>
 8005d34:	e7a4      	b.n	8005c80 <main+0x190>
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	200004dc 	.word	0x200004dc
 8005d3c:	200003d8 	.word	0x200003d8
 8005d40:	2000000c 	.word	0x2000000c
 8005d44:	40013000 	.word	0x40013000
 8005d48:	20000178 	.word	0x20000178
 8005d4c:	20000372 	.word	0x20000372
 8005d50:	200002ac 	.word	0x200002ac
 8005d54:	9999999a 	.word	0x9999999a
 8005d58:	3fb99999 	.word	0x3fb99999
 8005d5c:	08008840 	.word	0x08008840

08005d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d60:	b500      	push	{lr}
 8005d62:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d64:	4a12      	ldr	r2, [pc, #72]	; (8005db0 <HAL_MspInit+0x50>)
 8005d66:	6991      	ldr	r1, [r2, #24]
 8005d68:	2301      	movs	r3, #1
 8005d6a:	4319      	orrs	r1, r3
 8005d6c:	6191      	str	r1, [r2, #24]
 8005d6e:	6992      	ldr	r2, [r2, #24]
 8005d70:	4013      	ands	r3, r2
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005d76:	2005      	movs	r0, #5
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4240      	negs	r0, r0
 8005d7e:	f7fc fdc3 	bl	8002908 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005d82:	2002      	movs	r0, #2
 8005d84:	2200      	movs	r2, #0
 8005d86:	2100      	movs	r1, #0
 8005d88:	4240      	negs	r0, r0
 8005d8a:	f7fc fdbd 	bl	8002908 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005d8e:	2001      	movs	r0, #1
 8005d90:	2200      	movs	r2, #0
 8005d92:	2100      	movs	r1, #0
 8005d94:	4240      	negs	r0, r0
 8005d96:	f7fc fdb7 	bl	8002908 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	2004      	movs	r0, #4
 8005da0:	f7fc fdb2 	bl	8002908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005da4:	2004      	movs	r0, #4
 8005da6:	f7fc fddf 	bl	8002968 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005daa:	b003      	add	sp, #12
 8005dac:	bd00      	pop	{pc}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	40021000 	.word	0x40021000

08005db4 <HAL_TIM_Base_MspInit>:
//  }
//
//}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005db4:	b500      	push	{lr}
 8005db6:	b083      	sub	sp, #12

  if(htim_base->Instance==TIM16)
 8005db8:	6802      	ldr	r2, [r0, #0]
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <HAL_TIM_Base_MspInit+0x38>)
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d001      	beq.n	8005dc4 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005dc0:	b003      	add	sp, #12
 8005dc2:	bd00      	pop	{pc}
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005dc4:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <HAL_TIM_Base_MspInit+0x3c>)
 8005dc6:	6991      	ldr	r1, [r2, #24]
 8005dc8:	2080      	movs	r0, #128	; 0x80
 8005dca:	0280      	lsls	r0, r0, #10
 8005dcc:	4301      	orrs	r1, r0
 8005dce:	6191      	str	r1, [r2, #24]
 8005dd0:	6993      	ldr	r3, [r2, #24]
 8005dd2:	4003      	ands	r3, r0
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2100      	movs	r1, #0
 8005ddc:	2015      	movs	r0, #21
 8005dde:	f7fc fd93 	bl	8002908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005de2:	2015      	movs	r0, #21
 8005de4:	f7fc fdc0 	bl	8002968 <HAL_NVIC_EnableIRQ>
}
 8005de8:	e7ea      	b.n	8005dc0 <HAL_TIM_Base_MspInit+0xc>
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40021000 	.word	0x40021000

08005df4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005df4:	b500      	push	{lr}
 8005df6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8005df8:	6803      	ldr	r3, [r0, #0]
 8005dfa:	4a25      	ldr	r2, [pc, #148]	; (8005e90 <HAL_UART_MspInit+0x9c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_UART_MspInit+0x16>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8005e00:	4a24      	ldr	r2, [pc, #144]	; (8005e94 <HAL_UART_MspInit+0xa0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d022      	beq.n	8005e4c <HAL_UART_MspInit+0x58>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005e06:	b009      	add	sp, #36	; 0x24
 8005e08:	bd00      	pop	{pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e0a:	4a23      	ldr	r2, [pc, #140]	; (8005e98 <HAL_UART_MspInit+0xa4>)
 8005e0c:	6991      	ldr	r1, [r2, #24]
 8005e0e:	2080      	movs	r0, #128	; 0x80
 8005e10:	01c0      	lsls	r0, r0, #7
 8005e12:	4301      	orrs	r1, r0
 8005e14:	6191      	str	r1, [r2, #24]
 8005e16:	6993      	ldr	r3, [r2, #24]
 8005e18:	4003      	ands	r3, r0
 8005e1a:	9301      	str	r3, [sp, #4]
 8005e1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e1e:	23c0      	movs	r3, #192	; 0xc0
 8005e20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e22:	3bbe      	subs	r3, #190	; 0xbe
 8005e24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e26:	3b01      	subs	r3, #1
 8005e28:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e2a:	3302      	adds	r3, #2
 8005e2c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e32:	a903      	add	r1, sp, #12
 8005e34:	4819      	ldr	r0, [pc, #100]	; (8005e9c <HAL_UART_MspInit+0xa8>)
 8005e36:	f7fc fe1b 	bl	8002a70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	201b      	movs	r0, #27
 8005e40:	f7fc fd62 	bl	8002908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005e44:	201b      	movs	r0, #27
 8005e46:	f7fc fd8f 	bl	8002968 <HAL_NVIC_EnableIRQ>
 8005e4a:	e7dc      	b.n	8005e06 <HAL_UART_MspInit+0x12>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e4c:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <HAL_UART_MspInit+0xa4>)
 8005e4e:	69d1      	ldr	r1, [r2, #28]
 8005e50:	2080      	movs	r0, #128	; 0x80
 8005e52:	0280      	lsls	r0, r0, #10
 8005e54:	4301      	orrs	r1, r0
 8005e56:	61d1      	str	r1, [r2, #28]
 8005e58:	69d3      	ldr	r3, [r2, #28]
 8005e5a:	4003      	ands	r3, r0
 8005e5c:	9302      	str	r3, [sp, #8]
 8005e5e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e60:	230c      	movs	r3, #12
 8005e62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e64:	3b0a      	subs	r3, #10
 8005e66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005e70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e72:	2090      	movs	r0, #144	; 0x90
 8005e74:	a903      	add	r1, sp, #12
 8005e76:	05c0      	lsls	r0, r0, #23
 8005e78:	f7fc fdfa 	bl	8002a70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2100      	movs	r1, #0
 8005e80:	201c      	movs	r0, #28
 8005e82:	f7fc fd41 	bl	8002908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e86:	201c      	movs	r0, #28
 8005e88:	f7fc fd6e 	bl	8002968 <HAL_NVIC_EnableIRQ>
}
 8005e8c:	e7bb      	b.n	8005e06 <HAL_UART_MspInit+0x12>
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	40013800 	.word	0x40013800
 8005e94:	40004400 	.word	0x40004400
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	48000400 	.word	0x48000400

08005ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ea0:	b500      	push	{lr}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2011      	movs	r0, #17
 8005eaa:	f7fc fd2d 	bl	8002908 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 8005eae:	2011      	movs	r0, #17
 8005eb0:	f7fc fd5a 	bl	8002968 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005eb4:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <HAL_InitTick+0x64>)
 8005eb6:	69d1      	ldr	r1, [r2, #28]
 8005eb8:	2310      	movs	r3, #16
 8005eba:	4319      	orrs	r1, r3
 8005ebc:	61d1      	str	r1, [r2, #28]
 8005ebe:	69d2      	ldr	r2, [r2, #28]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005ec6:	a901      	add	r1, sp, #4
 8005ec8:	a802      	add	r0, sp, #8
 8005eca:	f7fd f9bd 	bl	8003248 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005ece:	f7fd f9ab 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005ed2:	490d      	ldr	r1, [pc, #52]	; (8005f08 <HAL_InitTick+0x68>)
 8005ed4:	f7fa f922 	bl	800011c <__udivsi3>
 8005ed8:	1e43      	subs	r3, r0, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005eda:	480c      	ldr	r0, [pc, #48]	; (8005f0c <HAL_InitTick+0x6c>)
 8005edc:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <HAL_InitTick+0x70>)
 8005ede:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8005ee0:	4a0c      	ldr	r2, [pc, #48]	; (8005f14 <HAL_InitTick+0x74>)
 8005ee2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005ee4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eea:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005eec:	f7fd fc34 	bl	8003758 <HAL_TIM_Base_Init>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_InitTick+0x5a>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005ef4:	2001      	movs	r0, #1
}
 8005ef6:	b007      	add	sp, #28
 8005ef8:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8005efa:	4804      	ldr	r0, [pc, #16]	; (8005f0c <HAL_InitTick+0x6c>)
 8005efc:	f7fd faec 	bl	80034d8 <HAL_TIM_Base_Start_IT>
 8005f00:	e7f9      	b.n	8005ef6 <HAL_InitTick+0x56>
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	40021000 	.word	0x40021000
 8005f08:	000f4240 	.word	0x000f4240
 8005f0c:	20000524 	.word	0x20000524
 8005f10:	40001000 	.word	0x40001000
 8005f14:	000003e7 	.word	0x000003e7

08005f18 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005f18:	4770      	bx	lr

08005f1a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f1a:	e7fe      	b.n	8005f1a <HardFault_Handler>

08005f1c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005f1c:	4770      	bx	lr

08005f1e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f1e:	4770      	bx	lr

08005f20 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005f20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 8005f22:	f7fc fd5a 	bl	80029da <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f26:	bd10      	pop	{r4, pc}

08005f28 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005f28:	4770      	bx	lr
	...

08005f2c <TIM6_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt.
*/
void TIM6_IRQHandler(void)
{
 8005f2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005f2e:	4802      	ldr	r0, [pc, #8]	; (8005f38 <TIM6_IRQHandler+0xc>)
 8005f30:	f7fd fb24 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	20000524 	.word	0x20000524

08005f3c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
	if (READ_BIT(TIM3->SR, TIM_SR_UIF))
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <TIM3_IRQHandler+0x1c>)
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	07db      	lsls	r3, r3, #31
 8005f42:	d504      	bpl.n	8005f4e <TIM3_IRQHandler+0x12>
	{
		CLEAR_BIT(TIM3->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 8005f44:	4a04      	ldr	r2, [pc, #16]	; (8005f58 <TIM3_IRQHandler+0x1c>)
 8005f46:	6913      	ldr	r3, [r2, #16]
 8005f48:	2101      	movs	r1, #1
 8005f4a:	438b      	bics	r3, r1
 8005f4c:	6113      	str	r3, [r2, #16]
	}
	TimerFlagTIM3=1;
 8005f4e:	4b03      	ldr	r3, [pc, #12]	; (8005f5c <TIM3_IRQHandler+0x20>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	701a      	strb	r2, [r3, #0]
}
 8005f54:	4770      	bx	lr
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	200001af 	.word	0x200001af

08005f60 <TIM14_IRQHandler>:

void TIM14_IRQHandler(void)
{
	if (READ_BIT(TIM14->SR, TIM_SR_UIF))
 8005f60:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <TIM14_IRQHandler+0x1c>)
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	07db      	lsls	r3, r3, #31
 8005f66:	d504      	bpl.n	8005f72 <TIM14_IRQHandler+0x12>
	{
		CLEAR_BIT(TIM14->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 8005f68:	4a04      	ldr	r2, [pc, #16]	; (8005f7c <TIM14_IRQHandler+0x1c>)
 8005f6a:	6913      	ldr	r3, [r2, #16]
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	438b      	bics	r3, r1
 8005f70:	6113      	str	r3, [r2, #16]
	}
//	CallbackTIM14();
	TimerCounterTIM14++;
 8005f72:	4a03      	ldr	r2, [pc, #12]	; (8005f80 <TIM14_IRQHandler+0x20>)
 8005f74:	8813      	ldrh	r3, [r2, #0]
 8005f76:	3301      	adds	r3, #1
 8005f78:	8013      	strh	r3, [r2, #0]

}
 8005f7a:	4770      	bx	lr
 8005f7c:	40002000 	.word	0x40002000
 8005f80:	200001b0 	.word	0x200001b0

08005f84 <TIM16_IRQHandler>:

void TIM16_IRQHandler(void)
{
 8005f84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005f86:	4802      	ldr	r0, [pc, #8]	; (8005f90 <TIM16_IRQHandler+0xc>)
 8005f88:	f7fd faf8 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005f8c:	bd10      	pop	{r4, pc}
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	200004dc 	.word	0x200004dc

08005f94 <TIM17_IRQHandler>:

void TIM17_IRQHandler(void)
{
	if (READ_BIT(TIM17->SR, TIM_SR_UIF))
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <TIM17_IRQHandler+0x20>)
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	07db      	lsls	r3, r3, #31
 8005f9a:	d504      	bpl.n	8005fa6 <TIM17_IRQHandler+0x12>
	{
		CLEAR_BIT(TIM17->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 8005f9c:	4a05      	ldr	r2, [pc, #20]	; (8005fb4 <TIM17_IRQHandler+0x20>)
 8005f9e:	6913      	ldr	r3, [r2, #16]
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	438b      	bics	r3, r1
 8005fa4:	6113      	str	r3, [r2, #16]
	}
    // PB9 = 0
    GPIOB->ODR &= ~GPIO_ODR_9;
 8005fa6:	4a04      	ldr	r2, [pc, #16]	; (8005fb8 <TIM17_IRQHandler+0x24>)
 8005fa8:	6953      	ldr	r3, [r2, #20]
 8005faa:	4904      	ldr	r1, [pc, #16]	; (8005fbc <TIM17_IRQHandler+0x28>)
 8005fac:	400b      	ands	r3, r1
 8005fae:	6153      	str	r3, [r2, #20]
}
 8005fb0:	4770      	bx	lr
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	40014800 	.word	0x40014800
 8005fb8:	48000400 	.word	0x48000400
 8005fbc:	fffffdff 	.word	0xfffffdff

08005fc0 <TIM15_IRQHandler>:

void TIM15_IRQHandler(void)
{
	if (READ_BIT(TIM15->SR, TIM_SR_UIF))
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <TIM15_IRQHandler+0x34>)
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	07db      	lsls	r3, r3, #31
 8005fc6:	d504      	bpl.n	8005fd2 <TIM15_IRQHandler+0x12>
	{
		CLEAR_BIT(TIM15->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 8005fc8:	4a0a      	ldr	r2, [pc, #40]	; (8005ff4 <TIM15_IRQHandler+0x34>)
 8005fca:	6913      	ldr	r3, [r2, #16]
 8005fcc:	2101      	movs	r1, #1
 8005fce:	438b      	bics	r3, r1
 8005fd0:	6113      	str	r3, [r2, #16]
	}
	TimerCounterTIM15++;
 8005fd2:	4a09      	ldr	r2, [pc, #36]	; (8005ff8 <TIM15_IRQHandler+0x38>)
 8005fd4:	7813      	ldrb	r3, [r2, #0]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	7013      	strb	r3, [r2, #0]
	if(FlagMogan == 0)
 8005fda:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <TIM15_IRQHandler+0x3c>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d103      	bne.n	8005fea <TIM15_IRQHandler+0x2a>
	{
		FlagMogan=1;
 8005fe2:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <TIM15_IRQHandler+0x3c>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	701a      	strb	r2, [r3, #0]
	else
	{
		FlagMogan=0;
	}

}
 8005fe8:	4770      	bx	lr
		FlagMogan=0;
 8005fea:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <TIM15_IRQHandler+0x3c>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
}
 8005ff0:	e7fa      	b.n	8005fe8 <TIM15_IRQHandler+0x28>
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	40014000 	.word	0x40014000
 8005ff8:	200001b8 	.word	0x200001b8
 8005ffc:	200001ac 	.word	0x200001ac

08006000 <SPI1_IRQHandler>:
/**
* @brief This function handles SPI1 global interrupt.
*/
void SPI1_IRQHandler(void)
{
 8006000:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006002:	4802      	ldr	r0, [pc, #8]	; (800600c <SPI1_IRQHandler+0xc>)
 8006004:	f7fd f9cc 	bl	80033a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006008:	bd10      	pop	{r4, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	20000374 	.word	0x20000374

08006010 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8006010:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006012:	4802      	ldr	r0, [pc, #8]	; (800601c <USART1_IRQHandler+0xc>)
 8006014:	f7fd fd90 	bl	8003b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006018:	bd10      	pop	{r4, pc}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	200002ac 	.word	0x200002ac

08006020 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8006020:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006022:	4802      	ldr	r0, [pc, #8]	; (800602c <USART2_IRQHandler+0xc>)
 8006024:	f7fd fd88 	bl	8003b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006028:	bd10      	pop	{r4, pc}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	200003d8 	.word	0x200003d8

08006030 <EXTI2_3_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI2_3_IRQHandler (void) //Прерывания от PB2
{
 8006030:	b510      	push	{r4, lr}
	if((EXTI->PR & EXTI_PR_PR2) > 0)
 8006032:	4b04      	ldr	r3, [pc, #16]	; (8006044 <EXTI2_3_IRQHandler+0x14>)
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	075b      	lsls	r3, r3, #29
 8006038:	d400      	bmi.n	800603c <EXTI2_3_IRQHandler+0xc>
	{
		HAL_GPIO_EXTI_Callback(GPIO_PIN_2);
	}
}
 800603a:	bd10      	pop	{r4, pc}
		HAL_GPIO_EXTI_Callback(GPIO_PIN_2);
 800603c:	2004      	movs	r0, #4
 800603e:	f7ff f8df 	bl	8005200 <HAL_GPIO_EXTI_Callback>
}
 8006042:	e7fa      	b.n	800603a <EXTI2_3_IRQHandler+0xa>
 8006044:	40010400 	.word	0x40010400

08006048 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler (void) //Прерывания от PB8
{
 8006048:	b510      	push	{r4, lr}
	if((EXTI->PR & EXTI_PR_PR8) > 0)
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <EXTI4_15_IRQHandler+0x18>)
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	05db      	lsls	r3, r3, #23
 8006050:	d400      	bmi.n	8006054 <EXTI4_15_IRQHandler+0xc>
	{
		HAL_GPIO_EXTI_Callback(GPIO_PIN_8);
	}

}
 8006052:	bd10      	pop	{r4, pc}
		HAL_GPIO_EXTI_Callback(GPIO_PIN_8);
 8006054:	2080      	movs	r0, #128	; 0x80
 8006056:	0040      	lsls	r0, r0, #1
 8006058:	f7ff f8d2 	bl	8005200 <HAL_GPIO_EXTI_Callback>
}
 800605c:	e7f9      	b.n	8006052 <EXTI4_15_IRQHandler+0xa>
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	40010400 	.word	0x40010400

08006064 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	0003      	movs	r3, r0
 8006068:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800606a:	880a      	ldrh	r2, [r1, #0]
 800606c:	2a05      	cmp	r2, #5
 800606e:	d001      	beq.n	8006074 <eMBFuncReadCoils+0x10>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006070:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8006072:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8006074:	7842      	ldrb	r2, [r0, #1]
 8006076:	0212      	lsls	r2, r2, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8006078:	7881      	ldrb	r1, [r0, #2]
 800607a:	4311      	orrs	r1, r2
        usRegAddress++;
 800607c:	3101      	adds	r1, #1
 800607e:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8006080:	78c2      	ldrb	r2, [r0, #3]
 8006082:	0212      	lsls	r2, r2, #8
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8006084:	7900      	ldrb	r0, [r0, #4]
 8006086:	4302      	orrs	r2, r0
        if( ( usCoilCount >= 1 ) &&
 8006088:	1e50      	subs	r0, r2, #1
 800608a:	b280      	uxth	r0, r0
 800608c:	4d12      	ldr	r5, [pc, #72]	; (80060d8 <eMBFuncReadCoils+0x74>)
 800608e:	42a8      	cmp	r0, r5
 8006090:	d820      	bhi.n	80060d4 <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 8006092:	2000      	movs	r0, #0
 8006094:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8006096:	3001      	adds	r0, #1
 8006098:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 800609a:	8820      	ldrh	r0, [r4, #0]
 800609c:	3001      	adds	r0, #1
 800609e:	8020      	strh	r0, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 80060a0:	0750      	lsls	r0, r2, #29
 80060a2:	d011      	beq.n	80060c8 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80060a4:	08d5      	lsrs	r5, r2, #3
 80060a6:	b2ed      	uxtb	r5, r5
 80060a8:	3501      	adds	r5, #1
 80060aa:	b2ed      	uxtb	r5, r5
            *pucFrameCur++ = ucNBytes;
 80060ac:	1c98      	adds	r0, r3, #2
 80060ae:	705d      	strb	r5, [r3, #1]
            *usLen += 1;
 80060b0:	8823      	ldrh	r3, [r4, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80060b6:	2300      	movs	r3, #0
 80060b8:	f7ff fa80 	bl	80055bc <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80060bc:	2800      	cmp	r0, #0
 80060be:	d106      	bne.n	80060ce <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 80060c0:	8823      	ldrh	r3, [r4, #0]
 80060c2:	195d      	adds	r5, r3, r5
 80060c4:	8025      	strh	r5, [r4, #0]
 80060c6:	e7d4      	b.n	8006072 <eMBFuncReadCoils+0xe>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80060c8:	08d5      	lsrs	r5, r2, #3
 80060ca:	b2ed      	uxtb	r5, r5
 80060cc:	e7ee      	b.n	80060ac <eMBFuncReadCoils+0x48>
                eStatus = prveMBError2Exception( eRegStatus );
 80060ce:	f000 f9a9 	bl	8006424 <prveMBError2Exception>
 80060d2:	e7ce      	b.n	8006072 <eMBFuncReadCoils+0xe>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80060d4:	2003      	movs	r0, #3
 80060d6:	e7cc      	b.n	8006072 <eMBFuncReadCoils+0xe>
 80060d8:	000007ce 	.word	0x000007ce

080060dc <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80060dc:	b500      	push	{lr}
 80060de:	b083      	sub	sp, #12
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80060e0:	880b      	ldrh	r3, [r1, #0]
 80060e2:	2b05      	cmp	r3, #5
 80060e4:	d002      	beq.n	80060ec <eMBFuncWriteCoil+0x10>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80060e6:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80060e8:	b003      	add	sp, #12
 80060ea:	bd00      	pop	{pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80060ec:	7843      	ldrb	r3, [r0, #1]
 80060ee:	021b      	lsls	r3, r3, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80060f0:	7881      	ldrb	r1, [r0, #2]
 80060f2:	4319      	orrs	r1, r3
        usRegAddress++;
 80060f4:	3101      	adds	r1, #1
 80060f6:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80060f8:	7903      	ldrb	r3, [r0, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d119      	bne.n	8006132 <eMBFuncWriteCoil+0x56>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80060fe:	78c2      	ldrb	r2, [r0, #3]
 8006100:	1e53      	subs	r3, r2, #1
 8006102:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8006104:	2bfd      	cmp	r3, #253	; 0xfd
 8006106:	d916      	bls.n	8006136 <eMBFuncWriteCoil+0x5a>
            ucBuf[1] = 0;
 8006108:	ab01      	add	r3, sp, #4
 800610a:	2000      	movs	r0, #0
 800610c:	7058      	strb	r0, [r3, #1]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800610e:	2aff      	cmp	r2, #255	; 0xff
 8006110:	d00c      	beq.n	800612c <eMBFuncWriteCoil+0x50>
                ucBuf[0] = 0;
 8006112:	ab01      	add	r3, sp, #4
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8006118:	2301      	movs	r3, #1
 800611a:	2201      	movs	r2, #1
 800611c:	a801      	add	r0, sp, #4
 800611e:	f7ff fa4d 	bl	80055bc <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8006122:	2800      	cmp	r0, #0
 8006124:	d0e0      	beq.n	80060e8 <eMBFuncWriteCoil+0xc>
                eStatus = prveMBError2Exception( eRegStatus );
 8006126:	f000 f97d 	bl	8006424 <prveMBError2Exception>
 800612a:	e7dd      	b.n	80060e8 <eMBFuncWriteCoil+0xc>
                ucBuf[0] = 1;
 800612c:	3afe      	subs	r2, #254	; 0xfe
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e7f2      	b.n	8006118 <eMBFuncWriteCoil+0x3c>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006132:	2003      	movs	r0, #3
 8006134:	e7d8      	b.n	80060e8 <eMBFuncWriteCoil+0xc>
 8006136:	2003      	movs	r0, #3
 8006138:	e7d6      	b.n	80060e8 <eMBFuncWriteCoil+0xc>

0800613a <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613c:	000c      	movs	r4, r1
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800613e:	880b      	ldrh	r3, [r1, #0]
 8006140:	2b05      	cmp	r3, #5
 8006142:	d929      	bls.n	8006198 <eMBFuncWriteMultipleCoils+0x5e>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8006144:	7841      	ldrb	r1, [r0, #1]
 8006146:	0209      	lsls	r1, r1, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8006148:	7883      	ldrb	r3, [r0, #2]
 800614a:	430b      	orrs	r3, r1
        usRegAddress++;
 800614c:	3301      	adds	r3, #1
 800614e:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8006150:	78c2      	ldrb	r2, [r0, #3]
 8006152:	0212      	lsls	r2, r2, #8
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8006154:	7903      	ldrb	r3, [r0, #4]
 8006156:	431a      	orrs	r2, r3

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8006158:	7946      	ldrb	r6, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 800615a:	075b      	lsls	r3, r3, #29
 800615c:	d00d      	beq.n	800617a <eMBFuncWriteMultipleCoils+0x40>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 800615e:	08d3      	lsrs	r3, r2, #3
 8006160:	b2db      	uxtb	r3, r3
 8006162:	3301      	adds	r3, #1
 8006164:	b2db      	uxtb	r3, r3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8006166:	1e55      	subs	r5, r2, #1
 8006168:	b2ad      	uxth	r5, r5
 800616a:	27f6      	movs	r7, #246	; 0xf6
 800616c:	00ff      	lsls	r7, r7, #3
 800616e:	42bd      	cmp	r5, r7
 8006170:	d214      	bcs.n	800619c <eMBFuncWriteMultipleCoils+0x62>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8006172:	42b3      	cmp	r3, r6
 8006174:	d004      	beq.n	8006180 <eMBFuncWriteMultipleCoils+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006176:	2003      	movs	r0, #3
 8006178:	e00f      	b.n	800619a <eMBFuncWriteMultipleCoils+0x60>
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 800617a:	08d3      	lsrs	r3, r2, #3
 800617c:	b2db      	uxtb	r3, r3
 800617e:	e7f2      	b.n	8006166 <eMBFuncWriteMultipleCoils+0x2c>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8006180:	3006      	adds	r0, #6
 8006182:	2301      	movs	r3, #1
 8006184:	f7ff fa1a 	bl	80055bc <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8006188:	2800      	cmp	r0, #0
 800618a:	d102      	bne.n	8006192 <eMBFuncWriteMultipleCoils+0x58>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800618c:	2305      	movs	r3, #5
 800618e:	8023      	strh	r3, [r4, #0]
 8006190:	e003      	b.n	800619a <eMBFuncWriteMultipleCoils+0x60>
                eStatus = prveMBError2Exception( eRegStatus );
 8006192:	f000 f947 	bl	8006424 <prveMBError2Exception>
 8006196:	e000      	b.n	800619a <eMBFuncWriteMultipleCoils+0x60>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006198:	2003      	movs	r0, #3
    }
    return eStatus;
}
 800619a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800619c:	2003      	movs	r0, #3
 800619e:	e7fc      	b.n	800619a <eMBFuncWriteMultipleCoils+0x60>

080061a0 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	0003      	movs	r3, r0
 80061a4:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80061a6:	880a      	ldrh	r2, [r1, #0]
 80061a8:	2a05      	cmp	r2, #5
 80061aa:	d001      	beq.n	80061b0 <eMBFuncReadDiscreteInputs+0x10>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80061ac:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80061b0:	7842      	ldrb	r2, [r0, #1]
 80061b2:	0212      	lsls	r2, r2, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80061b4:	7881      	ldrb	r1, [r0, #2]
 80061b6:	4311      	orrs	r1, r2
        usRegAddress++;
 80061b8:	3101      	adds	r1, #1
 80061ba:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80061bc:	78c2      	ldrb	r2, [r0, #3]
 80061be:	0212      	lsls	r2, r2, #8
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80061c0:	7900      	ldrb	r0, [r0, #4]
 80061c2:	4302      	orrs	r2, r0
        if( ( usDiscreteCnt >= 1 ) &&
 80061c4:	1e50      	subs	r0, r2, #1
 80061c6:	b280      	uxth	r0, r0
 80061c8:	4d12      	ldr	r5, [pc, #72]	; (8006214 <eMBFuncReadDiscreteInputs+0x74>)
 80061ca:	42a8      	cmp	r0, r5
 80061cc:	d81f      	bhi.n	800620e <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 80061ce:	2000      	movs	r0, #0
 80061d0:	8020      	strh	r0, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 80061d2:	3002      	adds	r0, #2
 80061d4:	7018      	strb	r0, [r3, #0]
            *usLen += 1;
 80061d6:	8820      	ldrh	r0, [r4, #0]
 80061d8:	3001      	adds	r0, #1
 80061da:	8020      	strh	r0, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80061dc:	0750      	lsls	r0, r2, #29
 80061de:	d010      	beq.n	8006202 <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80061e0:	08d5      	lsrs	r5, r2, #3
 80061e2:	b2ed      	uxtb	r5, r5
 80061e4:	3501      	adds	r5, #1
 80061e6:	b2ed      	uxtb	r5, r5
            *pucFrameCur++ = ucNBytes;
 80061e8:	1c98      	adds	r0, r3, #2
 80061ea:	705d      	strb	r5, [r3, #1]
            *usLen += 1;
 80061ec:	8823      	ldrh	r3, [r4, #0]
 80061ee:	3301      	adds	r3, #1
 80061f0:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80061f2:	f7ff f9e5 	bl	80055c0 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d106      	bne.n	8006208 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 80061fa:	8823      	ldrh	r3, [r4, #0]
 80061fc:	195d      	adds	r5, r3, r5
 80061fe:	8025      	strh	r5, [r4, #0]
 8006200:	e7d5      	b.n	80061ae <eMBFuncReadDiscreteInputs+0xe>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8006202:	08d5      	lsrs	r5, r2, #3
 8006204:	b2ed      	uxtb	r5, r5
 8006206:	e7ef      	b.n	80061e8 <eMBFuncReadDiscreteInputs+0x48>
                eStatus = prveMBError2Exception( eRegStatus );
 8006208:	f000 f90c 	bl	8006424 <prveMBError2Exception>
 800620c:	e7cf      	b.n	80061ae <eMBFuncReadDiscreteInputs+0xe>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800620e:	2003      	movs	r0, #3
 8006210:	e7cd      	b.n	80061ae <eMBFuncReadDiscreteInputs+0xe>
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	000007ce 	.word	0x000007ce

08006218 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8006218:	b510      	push	{r4, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800621a:	880b      	ldrh	r3, [r1, #0]
 800621c:	2b05      	cmp	r3, #5
 800621e:	d001      	beq.n	8006224 <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006220:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8006222:	bd10      	pop	{r4, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8006224:	7843      	ldrb	r3, [r0, #1]
 8006226:	021b      	lsls	r3, r3, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8006228:	7881      	ldrb	r1, [r0, #2]
 800622a:	4319      	orrs	r1, r3
        usRegAddress++;
 800622c:	3101      	adds	r1, #1
 800622e:	b289      	uxth	r1, r1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8006230:	3003      	adds	r0, #3
 8006232:	2301      	movs	r3, #1
 8006234:	2201      	movs	r2, #1
 8006236:	f7ff f8e1 	bl	80053fc <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 800623a:	2800      	cmp	r0, #0
 800623c:	d0f1      	beq.n	8006222 <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 800623e:	f000 f8f1 	bl	8006424 <prveMBError2Exception>
 8006242:	e7ee      	b.n	8006222 <eMBFuncWriteHoldingRegister+0xa>

08006244 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	000c      	movs	r4, r1
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8006248:	880b      	ldrh	r3, [r1, #0]
 800624a:	2b05      	cmp	r3, #5
 800624c:	d920      	bls.n	8006290 <eMBFuncWriteMultipleHoldingRegister+0x4c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800624e:	7841      	ldrb	r1, [r0, #1]
 8006250:	0209      	lsls	r1, r1, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8006252:	7883      	ldrb	r3, [r0, #2]
 8006254:	430b      	orrs	r3, r1
        usRegAddress++;
 8006256:	3301      	adds	r3, #1
 8006258:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 800625a:	78c3      	ldrb	r3, [r0, #3]
 800625c:	021b      	lsls	r3, r3, #8
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 800625e:	7902      	ldrb	r2, [r0, #4]
 8006260:	431a      	orrs	r2, r3

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8006262:	7945      	ldrb	r5, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 8006264:	1e53      	subs	r3, r2, #1
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b77      	cmp	r3, #119	; 0x77
 800626a:	d813      	bhi.n	8006294 <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 800626c:	0053      	lsls	r3, r2, #1
 800626e:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8006270:	42ab      	cmp	r3, r5
 8006272:	d001      	beq.n	8006278 <eMBFuncWriteMultipleHoldingRegister+0x34>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006274:	2003      	movs	r0, #3
 8006276:	e00c      	b.n	8006292 <eMBFuncWriteMultipleHoldingRegister+0x4e>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8006278:	3006      	adds	r0, #6
 800627a:	2301      	movs	r3, #1
 800627c:	f7ff f8be 	bl	80053fc <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8006280:	2800      	cmp	r0, #0
 8006282:	d102      	bne.n	800628a <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8006284:	2305      	movs	r3, #5
 8006286:	8023      	strh	r3, [r4, #0]
 8006288:	e003      	b.n	8006292 <eMBFuncWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
 800628a:	f000 f8cb 	bl	8006424 <prveMBError2Exception>
 800628e:	e000      	b.n	8006292 <eMBFuncWriteMultipleHoldingRegister+0x4e>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006290:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8006292:	bd70      	pop	{r4, r5, r6, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006294:	2003      	movs	r0, #3
 8006296:	e7fc      	b.n	8006292 <eMBFuncWriteMultipleHoldingRegister+0x4e>

08006298 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800629c:	880b      	ldrh	r3, [r1, #0]
 800629e:	2b05      	cmp	r3, #5
 80062a0:	d001      	beq.n	80062a6 <eMBFuncReadHoldingRegister+0xe>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80062a2:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80062a4:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80062a6:	7841      	ldrb	r1, [r0, #1]
 80062a8:	0209      	lsls	r1, r1, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80062aa:	7883      	ldrb	r3, [r0, #2]
 80062ac:	430b      	orrs	r3, r1
        usRegAddress++;
 80062ae:	3301      	adds	r3, #1
 80062b0:	b299      	uxth	r1, r3
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80062b2:	7902      	ldrb	r2, [r0, #4]
 80062b4:	0015      	movs	r5, r2
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80062b6:	1e53      	subs	r3, r2, #1
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b7c      	cmp	r3, #124	; 0x7c
 80062bc:	d901      	bls.n	80062c2 <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80062be:	2003      	movs	r0, #3
 80062c0:	e7f0      	b.n	80062a4 <eMBFuncReadHoldingRegister+0xc>
            *usLen = MB_PDU_FUNC_OFF;
 80062c2:	2300      	movs	r3, #0
 80062c4:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80062c6:	3303      	adds	r3, #3
 80062c8:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80062ca:	8823      	ldrh	r3, [r4, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80062d0:	1c86      	adds	r6, r0, #2
 80062d2:	0052      	lsls	r2, r2, #1
 80062d4:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 80062d6:	8823      	ldrh	r3, [r4, #0]
 80062d8:	3301      	adds	r3, #1
 80062da:	8023      	strh	r3, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80062dc:	2300      	movs	r3, #0
 80062de:	002a      	movs	r2, r5
 80062e0:	0030      	movs	r0, r6
 80062e2:	f7ff f88b 	bl	80053fc <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d104      	bne.n	80062f4 <eMBFuncReadHoldingRegister+0x5c>
                *usLen += usRegCount * 2;
 80062ea:	006d      	lsls	r5, r5, #1
 80062ec:	8823      	ldrh	r3, [r4, #0]
 80062ee:	195d      	adds	r5, r3, r5
 80062f0:	8025      	strh	r5, [r4, #0]
 80062f2:	e7d7      	b.n	80062a4 <eMBFuncReadHoldingRegister+0xc>
                eStatus = prveMBError2Exception( eRegStatus );
 80062f4:	f000 f896 	bl	8006424 <prveMBError2Exception>
 80062f8:	e7d4      	b.n	80062a4 <eMBFuncReadHoldingRegister+0xc>

080062fa <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80062fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fc:	0004      	movs	r4, r0
 80062fe:	000d      	movs	r5, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8006300:	880b      	ldrh	r3, [r1, #0]
 8006302:	2b09      	cmp	r3, #9
 8006304:	d946      	bls.n	8006394 <eMBFuncReadWriteMultipleHoldingRegister+0x9a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8006306:	7843      	ldrb	r3, [r0, #1]
 8006308:	021b      	lsls	r3, r3, #8
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800630a:	7881      	ldrb	r1, [r0, #2]
 800630c:	4319      	orrs	r1, r3
        usRegReadAddress++;
 800630e:	3101      	adds	r1, #1
 8006310:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8006312:	78c7      	ldrb	r7, [r0, #3]
 8006314:	023f      	lsls	r7, r7, #8
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8006316:	7903      	ldrb	r3, [r0, #4]
 8006318:	431f      	orrs	r7, r3

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800631a:	7943      	ldrb	r3, [r0, #5]
 800631c:	021b      	lsls	r3, r3, #8
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800631e:	7981      	ldrb	r1, [r0, #6]
 8006320:	4319      	orrs	r1, r3
        usRegWriteAddress++;
 8006322:	3101      	adds	r1, #1
 8006324:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8006326:	79c3      	ldrb	r3, [r0, #7]
 8006328:	021b      	lsls	r3, r3, #8
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800632a:	7a02      	ldrb	r2, [r0, #8]
 800632c:	431a      	orrs	r2, r3

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800632e:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8006330:	1e7b      	subs	r3, r7, #1
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b7c      	cmp	r3, #124	; 0x7c
 8006336:	d82f      	bhi.n	8006398 <eMBFuncReadWriteMultipleHoldingRegister+0x9e>
 8006338:	2a00      	cmp	r2, #0
 800633a:	d02f      	beq.n	800639c <eMBFuncReadWriteMultipleHoldingRegister+0xa2>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800633c:	2a79      	cmp	r2, #121	; 0x79
 800633e:	d82f      	bhi.n	80063a0 <eMBFuncReadWriteMultipleHoldingRegister+0xa6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8006340:	0053      	lsls	r3, r2, #1
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8006342:	4283      	cmp	r3, r0
 8006344:	d001      	beq.n	800634a <eMBFuncReadWriteMultipleHoldingRegister+0x50>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006346:	2003      	movs	r0, #3
 8006348:	e025      	b.n	8006396 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 800634a:	2301      	movs	r3, #1
 800634c:	0020      	movs	r0, r4
 800634e:	300a      	adds	r0, #10
 8006350:	f7ff f854 	bl	80053fc <eMBRegHoldingCB>
            if( eRegStatus == MB_ENOERR )
 8006354:	2800      	cmp	r0, #0
 8006356:	d004      	beq.n	8006362 <eMBFuncReadWriteMultipleHoldingRegister+0x68>
            if( eRegStatus != MB_ENOERR )
 8006358:	2800      	cmp	r0, #0
 800635a:	d01c      	beq.n	8006396 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
                eStatus = prveMBError2Exception( eRegStatus );
 800635c:	f000 f862 	bl	8006424 <prveMBError2Exception>
 8006360:	e019      	b.n	8006396 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
                *usLen = MB_PDU_FUNC_OFF;
 8006362:	2300      	movs	r3, #0
 8006364:	802b      	strh	r3, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8006366:	3317      	adds	r3, #23
 8006368:	7023      	strb	r3, [r4, #0]
                *usLen += 1;
 800636a:	882b      	ldrh	r3, [r5, #0]
 800636c:	3301      	adds	r3, #1
 800636e:	802b      	strh	r3, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8006370:	1ca0      	adds	r0, r4, #2
 8006372:	007b      	lsls	r3, r7, #1
 8006374:	7063      	strb	r3, [r4, #1]
                *usLen += 1;
 8006376:	882b      	ldrh	r3, [r5, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	802b      	strh	r3, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 800637c:	2300      	movs	r3, #0
 800637e:	003a      	movs	r2, r7
 8006380:	0031      	movs	r1, r6
 8006382:	f7ff f83b 	bl	80053fc <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8006386:	2800      	cmp	r0, #0
 8006388:	d1e6      	bne.n	8006358 <eMBFuncReadWriteMultipleHoldingRegister+0x5e>
                    *usLen += 2 * usRegReadCount;
 800638a:	007f      	lsls	r7, r7, #1
 800638c:	882b      	ldrh	r3, [r5, #0]
 800638e:	19df      	adds	r7, r3, r7
 8006390:	802f      	strh	r7, [r5, #0]
 8006392:	e7e1      	b.n	8006358 <eMBFuncReadWriteMultipleHoldingRegister+0x5e>
    eMBException    eStatus = MB_EX_NONE;
 8006394:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 8006396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006398:	2003      	movs	r0, #3
 800639a:	e7fc      	b.n	8006396 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 800639c:	2003      	movs	r0, #3
 800639e:	e7fa      	b.n	8006396 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 80063a0:	2003      	movs	r0, #3
 80063a2:	e7f8      	b.n	8006396 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>

080063a4 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	000c      	movs	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80063a8:	880b      	ldrh	r3, [r1, #0]
 80063aa:	2b05      	cmp	r3, #5
 80063ac:	d001      	beq.n	80063b2 <eMBFuncReadInputRegister+0xe>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80063ae:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80063b0:	bd70      	pop	{r4, r5, r6, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80063b2:	7843      	ldrb	r3, [r0, #1]
 80063b4:	021b      	lsls	r3, r3, #8
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80063b6:	7881      	ldrb	r1, [r0, #2]
 80063b8:	4319      	orrs	r1, r3
        usRegAddress++;
 80063ba:	3101      	adds	r1, #1
 80063bc:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80063be:	78c5      	ldrb	r5, [r0, #3]
 80063c0:	022d      	lsls	r5, r5, #8
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80063c2:	7903      	ldrb	r3, [r0, #4]
 80063c4:	431d      	orrs	r5, r3
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80063c6:	1e6b      	subs	r3, r5, #1
 80063c8:	b29b      	uxth	r3, r3
        if( ( usRegCount >= 1 )
 80063ca:	2b7b      	cmp	r3, #123	; 0x7b
 80063cc:	d901      	bls.n	80063d2 <eMBFuncReadInputRegister+0x2e>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80063ce:	2003      	movs	r0, #3
 80063d0:	e7ee      	b.n	80063b0 <eMBFuncReadInputRegister+0xc>
            *usLen = MB_PDU_FUNC_OFF;
 80063d2:	2300      	movs	r3, #0
 80063d4:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80063d6:	3304      	adds	r3, #4
 80063d8:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80063da:	8823      	ldrh	r3, [r4, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80063e0:	1c86      	adds	r6, r0, #2
 80063e2:	006b      	lsls	r3, r5, #1
 80063e4:	7043      	strb	r3, [r0, #1]
            *usLen += 1;
 80063e6:	8823      	ldrh	r3, [r4, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80063ec:	002a      	movs	r2, r5
 80063ee:	0030      	movs	r0, r6
 80063f0:	f7fe ffaa 	bl	8005348 <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d104      	bne.n	8006402 <eMBFuncReadInputRegister+0x5e>
                *usLen += usRegCount * 2;
 80063f8:	006d      	lsls	r5, r5, #1
 80063fa:	8823      	ldrh	r3, [r4, #0]
 80063fc:	195d      	adds	r5, r3, r5
 80063fe:	8025      	strh	r5, [r4, #0]
 8006400:	e7d6      	b.n	80063b0 <eMBFuncReadInputRegister+0xc>
                eStatus = prveMBError2Exception( eRegStatus );
 8006402:	f000 f80f 	bl	8006424 <prveMBError2Exception>
 8006406:	e7d3      	b.n	80063b0 <eMBFuncReadInputRegister+0xc>

08006408 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	000d      	movs	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800640c:	3001      	adds	r0, #1
 800640e:	4904      	ldr	r1, [pc, #16]	; (8006420 <eMBFuncReportSlaveID+0x18>)
 8006410:	8c0c      	ldrh	r4, [r1, #32]
 8006412:	0022      	movs	r2, r4
 8006414:	f000 fc26 	bl	8006c64 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8006418:	3401      	adds	r4, #1
 800641a:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 800641c:	2000      	movs	r0, #0
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	200001bc 	.word	0x200001bc

08006424 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8006424:	2801      	cmp	r0, #1
 8006426:	d005      	beq.n	8006434 <prveMBError2Exception+0x10>
 8006428:	2807      	cmp	r0, #7
 800642a:	d005      	beq.n	8006438 <prveMBError2Exception+0x14>
 800642c:	2800      	cmp	r0, #0
 800642e:	d000      	beq.n	8006432 <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8006430:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 8006432:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8006434:	2002      	movs	r0, #2
 8006436:	e7fc      	b.n	8006432 <prveMBError2Exception+0xe>
            eStatus = MB_EX_SLAVE_BUSY;
 8006438:	2006      	movs	r0, #6
 800643a:	e7fa      	b.n	8006432 <prveMBError2Exception+0xe>

0800643c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	0005      	movs	r5, r0
 8006440:	0008      	movs	r0, r1
 8006442:	0011      	movs	r1, r2
 8006444:	001a      	movs	r2, r3
 8006446:	ac04      	add	r4, sp, #16
 8006448:	7823      	ldrb	r3, [r4, #0]
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 800644a:	1e44      	subs	r4, r0, #1
 800644c:	b2e4      	uxtb	r4, r4
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 800644e:	2cf6      	cmp	r4, #246	; 0xf6
 8006450:	d824      	bhi.n	800649c <eMBInit+0x60>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8006452:	4c15      	ldr	r4, [pc, #84]	; (80064a8 <eMBInit+0x6c>)
 8006454:	7020      	strb	r0, [r4, #0]

        switch ( eMode )
 8006456:	2d00      	cmp	r5, #0
 8006458:	d001      	beq.n	800645e <eMBInit+0x22>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 800645a:	2402      	movs	r4, #2
 800645c:	e01f      	b.n	800649e <eMBInit+0x62>
            pvMBFrameStartCur = eMBRTUStart;
 800645e:	4d13      	ldr	r5, [pc, #76]	; (80064ac <eMBInit+0x70>)
 8006460:	6065      	str	r5, [r4, #4]
            pvMBFrameStopCur = eMBRTUStop;
 8006462:	4d13      	ldr	r5, [pc, #76]	; (80064b0 <eMBInit+0x74>)
 8006464:	60a5      	str	r5, [r4, #8]
            peMBFrameSendCur = eMBRTUSend;
 8006466:	4d13      	ldr	r5, [pc, #76]	; (80064b4 <eMBInit+0x78>)
 8006468:	60e5      	str	r5, [r4, #12]
            peMBFrameReceiveCur = eMBRTUReceive;
 800646a:	4d13      	ldr	r5, [pc, #76]	; (80064b8 <eMBInit+0x7c>)
 800646c:	6125      	str	r5, [r4, #16]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 800646e:	2500      	movs	r5, #0
 8006470:	6165      	str	r5, [r4, #20]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8006472:	4c12      	ldr	r4, [pc, #72]	; (80064bc <eMBInit+0x80>)
 8006474:	4d12      	ldr	r5, [pc, #72]	; (80064c0 <eMBInit+0x84>)
 8006476:	6025      	str	r5, [r4, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8006478:	4c12      	ldr	r4, [pc, #72]	; (80064c4 <eMBInit+0x88>)
 800647a:	4d13      	ldr	r5, [pc, #76]	; (80064c8 <eMBInit+0x8c>)
 800647c:	6025      	str	r5, [r4, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 800647e:	4c13      	ldr	r4, [pc, #76]	; (80064cc <eMBInit+0x90>)
 8006480:	4d13      	ldr	r5, [pc, #76]	; (80064d0 <eMBInit+0x94>)
 8006482:	6025      	str	r5, [r4, #0]
            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8006484:	f000 f9e0 	bl	8006848 <eMBRTUInit>
 8006488:	1e04      	subs	r4, r0, #0
        }

        if( eStatus == MB_ENOERR )
 800648a:	d108      	bne.n	800649e <eMBInit+0x62>
        {
            if( !xMBPortEventInit(  ) )
 800648c:	f000 f8e4 	bl	8006658 <xMBPortEventInit>
 8006490:	2800      	cmp	r0, #0
 8006492:	d006      	beq.n	80064a2 <eMBInit+0x66>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <eMBInit+0x98>)
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e000      	b.n	800649e <eMBInit+0x62>
        eStatus = MB_EINVAL;
 800649c:	2402      	movs	r4, #2
            }
        }
    }
    return eStatus;
}
 800649e:	0020      	movs	r0, r4
 80064a0:	bd70      	pop	{r4, r5, r6, pc}
                eStatus = MB_EPORTERR;
 80064a2:	2403      	movs	r4, #3
 80064a4:	e7fb      	b.n	800649e <eMBInit+0x62>
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	200001e0 	.word	0x200001e0
 80064ac:	08006899 	.word	0x08006899
 80064b0:	080068bd 	.word	0x080068bd
 80064b4:	08006949 	.word	0x08006949
 80064b8:	080068d5 	.word	0x080068d5
 80064bc:	20000574 	.word	0x20000574
 80064c0:	080069b9 	.word	0x080069b9
 80064c4:	2000056c 	.word	0x2000056c
 80064c8:	08006a69 	.word	0x08006a69
 80064cc:	20000570 	.word	0x20000570
 80064d0:	08006af1 	.word	0x08006af1
 80064d4:	20000070 	.word	0x20000070

080064d8 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80064d8:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 80064da:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <eMBEnable+0x20>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d001      	beq.n	80064e6 <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80064e2:	2006      	movs	r0, #6
    }
    return eStatus;
}
 80064e4:	bd10      	pop	{r4, pc}
        pvMBFrameStartCur(  );
 80064e6:	4b05      	ldr	r3, [pc, #20]	; (80064fc <eMBEnable+0x24>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80064ec:	4b02      	ldr	r3, [pc, #8]	; (80064f8 <eMBEnable+0x20>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80064f2:	2000      	movs	r0, #0
 80064f4:	e7f6      	b.n	80064e4 <eMBEnable+0xc>
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	20000070 	.word	0x20000070
 80064fc:	200001e0 	.word	0x200001e0

08006500 <eMBDisable>:

eMBErrorCode
eMBDisable( void )
{
 8006500:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus;

    if( eMBState == STATE_ENABLED )
 8006502:	4b09      	ldr	r3, [pc, #36]	; (8006528 <eMBDisable+0x28>)
 8006504:	781c      	ldrb	r4, [r3, #0]
 8006506:	2c00      	cmp	r4, #0
 8006508:	d107      	bne.n	800651a <eMBDisable+0x1a>
    {
        pvMBFrameStopCur(  );
 800650a:	4b08      	ldr	r3, [pc, #32]	; (800652c <eMBDisable+0x2c>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	4798      	blx	r3
        eMBState = STATE_DISABLED;
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <eMBDisable+0x28>)
 8006512:	2201      	movs	r2, #1
 8006514:	701a      	strb	r2, [r3, #0]
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
 8006516:	0020      	movs	r0, r4
 8006518:	bd10      	pop	{r4, pc}
    else if( eMBState == STATE_DISABLED )
 800651a:	2c01      	cmp	r4, #1
 800651c:	d001      	beq.n	8006522 <eMBDisable+0x22>
        eStatus = MB_EILLSTATE;
 800651e:	2406      	movs	r4, #6
 8006520:	e7f9      	b.n	8006516 <eMBDisable+0x16>
        eStatus = MB_ENOERR;
 8006522:	2400      	movs	r4, #0
 8006524:	e7f7      	b.n	8006516 <eMBDisable+0x16>
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	20000070 	.word	0x20000070
 800652c:	200001e0 	.word	0x200001e0

08006530 <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
 8006530:	b530      	push	{r4, r5, lr}
 8006532:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8006534:	4b36      	ldr	r3, [pc, #216]	; (8006610 <eMBPoll+0xe0>)
 8006536:	781c      	ldrb	r4, [r3, #0]
 8006538:	2c00      	cmp	r4, #0
 800653a:	d162      	bne.n	8006602 <eMBPoll+0xd2>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800653c:	466b      	mov	r3, sp
 800653e:	1dd8      	adds	r0, r3, #7
 8006540:	f000 f89a 	bl	8006678 <xMBPortEventGet>
 8006544:	2801      	cmp	r0, #1
 8006546:	d002      	beq.n	800654e <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 8006548:	0020      	movs	r0, r4
 800654a:	b003      	add	sp, #12
 800654c:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 800654e:	466b      	mov	r3, sp
 8006550:	3307      	adds	r3, #7
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d00b      	beq.n	8006570 <eMBPoll+0x40>
 8006558:	2b02      	cmp	r3, #2
 800655a:	d1f5      	bne.n	8006548 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800655c:	4b2d      	ldr	r3, [pc, #180]	; (8006614 <eMBPoll+0xe4>)
 800655e:	69d8      	ldr	r0, [r3, #28]
 8006560:	7805      	ldrb	r5, [r0, #0]
 8006562:	2221      	movs	r2, #33	; 0x21
 8006564:	549d      	strb	r5, [r3, r2]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8006566:	3201      	adds	r2, #1
 8006568:	2101      	movs	r1, #1
 800656a:	5499      	strb	r1, [r3, r2]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800656c:	2300      	movs	r3, #0
 800656e:	e018      	b.n	80065a2 <eMBPoll+0x72>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8006570:	4b28      	ldr	r3, [pc, #160]	; (8006614 <eMBPoll+0xe4>)
 8006572:	001a      	movs	r2, r3
 8006574:	3218      	adds	r2, #24
 8006576:	0019      	movs	r1, r3
 8006578:	311c      	adds	r1, #28
 800657a:	0018      	movs	r0, r3
 800657c:	3020      	adds	r0, #32
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	4798      	blx	r3
 8006582:	1e05      	subs	r5, r0, #0
            if( eStatus == MB_ENOERR )
 8006584:	d1e0      	bne.n	8006548 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8006586:	4b23      	ldr	r3, [pc, #140]	; (8006614 <eMBPoll+0xe4>)
 8006588:	2220      	movs	r2, #32
 800658a:	5c9a      	ldrb	r2, [r3, r2]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d001      	beq.n	8006596 <eMBPoll+0x66>
 8006592:	2a00      	cmp	r2, #0
 8006594:	d137      	bne.n	8006606 <eMBPoll+0xd6>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8006596:	2002      	movs	r0, #2
 8006598:	f000 f866 	bl	8006668 <xMBPortEventPost>
    return MB_ENOERR;
 800659c:	002c      	movs	r4, r5
 800659e:	e7d3      	b.n	8006548 <eMBPoll+0x18>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80065a0:	3301      	adds	r3, #1
 80065a2:	2b0f      	cmp	r3, #15
 80065a4:	dc0f      	bgt.n	80065c6 <eMBPoll+0x96>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80065a6:	00da      	lsls	r2, r3, #3
 80065a8:	491b      	ldr	r1, [pc, #108]	; (8006618 <eMBPoll+0xe8>)
 80065aa:	5c52      	ldrb	r2, [r2, r1]
 80065ac:	2a00      	cmp	r2, #0
 80065ae:	d00a      	beq.n	80065c6 <eMBPoll+0x96>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80065b0:	4295      	cmp	r5, r2
 80065b2:	d1f5      	bne.n	80065a0 <eMBPoll+0x70>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	18cb      	adds	r3, r1, r3
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4d16      	ldr	r5, [pc, #88]	; (8006614 <eMBPoll+0xe4>)
 80065bc:	0029      	movs	r1, r5
 80065be:	3118      	adds	r1, #24
 80065c0:	4798      	blx	r3
 80065c2:	2322      	movs	r3, #34	; 0x22
 80065c4:	54e8      	strb	r0, [r5, r3]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80065c6:	4a13      	ldr	r2, [pc, #76]	; (8006614 <eMBPoll+0xe4>)
 80065c8:	2320      	movs	r3, #32
 80065ca:	5cd3      	ldrb	r3, [r2, r3]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01c      	beq.n	800660a <eMBPoll+0xda>
                if( eException != MB_EX_NONE )
 80065d0:	2322      	movs	r3, #34	; 0x22
 80065d2:	5cd2      	ldrb	r2, [r2, r3]
 80065d4:	2a00      	cmp	r2, #0
 80065d6:	d00d      	beq.n	80065f4 <eMBPoll+0xc4>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80065d8:	4b0e      	ldr	r3, [pc, #56]	; (8006614 <eMBPoll+0xe4>)
 80065da:	2121      	movs	r1, #33	; 0x21
 80065dc:	5c58      	ldrb	r0, [r3, r1]
 80065de:	3920      	subs	r1, #32
 80065e0:	8319      	strh	r1, [r3, #24]
 80065e2:	3981      	subs	r1, #129	; 0x81
 80065e4:	4301      	orrs	r1, r0
 80065e6:	69d8      	ldr	r0, [r3, #28]
 80065e8:	7001      	strb	r1, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 80065ea:	69d8      	ldr	r0, [r3, #28]
 80065ec:	8b19      	ldrh	r1, [r3, #24]
 80065ee:	1c4d      	adds	r5, r1, #1
 80065f0:	831d      	strh	r5, [r3, #24]
 80065f2:	5442      	strb	r2, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 80065f4:	4b07      	ldr	r3, [pc, #28]	; (8006614 <eMBPoll+0xe4>)
 80065f6:	8b1a      	ldrh	r2, [r3, #24]
 80065f8:	69d9      	ldr	r1, [r3, #28]
 80065fa:	7818      	ldrb	r0, [r3, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	4798      	blx	r3
 8006600:	e7a2      	b.n	8006548 <eMBPoll+0x18>
        return MB_EILLSTATE;
 8006602:	2406      	movs	r4, #6
 8006604:	e7a0      	b.n	8006548 <eMBPoll+0x18>
    return MB_ENOERR;
 8006606:	0004      	movs	r4, r0
 8006608:	e79e      	b.n	8006548 <eMBPoll+0x18>
 800660a:	001c      	movs	r4, r3
 800660c:	e79c      	b.n	8006548 <eMBPoll+0x18>
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	20000070 	.word	0x20000070
 8006614:	200001e0 	.word	0x200001e0
 8006618:	20000074 	.word	0x20000074

0800661c <EnterCriticalSection>:
  __ASM volatile ("cpsid i" : : : "memory");
 800661c:	b672      	cpsid	i

/*----------------------------------------------------------------------------*/
void EnterCriticalSection()
{
  __disable_irq();
  lockCounter++;
 800661e:	4a02      	ldr	r2, [pc, #8]	; (8006628 <EnterCriticalSection+0xc>)
 8006620:	6813      	ldr	r3, [r2, #0]
 8006622:	3301      	adds	r3, #1
 8006624:	6013      	str	r3, [r2, #0]
}
 8006626:	4770      	bx	lr
 8006628:	20000204 	.word	0x20000204

0800662c <ExitCriticalSection>:


/*----------------------------------------------------------------------------*/
void ExitCriticalSection()
{
  lockCounter--;
 800662c:	4a03      	ldr	r2, [pc, #12]	; (800663c <ExitCriticalSection+0x10>)
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	3b01      	subs	r3, #1
 8006632:	6013      	str	r3, [r2, #0]

  if (lockCounter == 0)
 8006634:	2b00      	cmp	r3, #0
 8006636:	d100      	bne.n	800663a <ExitCriticalSection+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8006638:	b662      	cpsie	i
  {
    __enable_irq();
  }
}
 800663a:	4770      	bx	lr
 800663c:	20000204 	.word	0x20000204

08006640 <MT_PORT_SetTimerModule>:


/*----------------------------------------------------------------------------*/\
void MT_PORT_SetTimerModule(TIM_HandleTypeDef* timer)
{
  modbusTimer = timer;
 8006640:	4b01      	ldr	r3, [pc, #4]	; (8006648 <MT_PORT_SetTimerModule+0x8>)
 8006642:	6018      	str	r0, [r3, #0]
}
 8006644:	4770      	bx	lr
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	20000584 	.word	0x20000584

0800664c <MT_PORT_SetUartModule>:


/*----------------------------------------------------------------------------*/\
void MT_PORT_SetUartModule(UART_HandleTypeDef* uart)
{
  modbusUart = uart;
 800664c:	4b01      	ldr	r3, [pc, #4]	; (8006654 <MT_PORT_SetUartModule+0x8>)
 800664e:	6018      	str	r0, [r3, #0]
}
 8006650:	4770      	bx	lr
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	20000580 	.word	0x20000580

08006658 <xMBPortEventInit>:
/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBPortEventInit(void)
{
  xEventInQueue = FALSE;
 8006658:	4b02      	ldr	r3, [pc, #8]	; (8006664 <xMBPortEventInit+0xc>)
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
  return TRUE;
}
 800665e:	2001      	movs	r0, #1
 8006660:	4770      	bx	lr
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	20000208 	.word	0x20000208

08006668 <xMBPortEventPost>:


/*----------------------------------------------------------------------------*/
BOOL xMBPortEventPost(eMBEventType eEvent)
{
  xEventInQueue = TRUE;
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <xMBPortEventPost+0xc>)
 800666a:	2201      	movs	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
  eQueuedEvent = eEvent;
 800666e:	7058      	strb	r0, [r3, #1]
  return TRUE;
}
 8006670:	2001      	movs	r0, #1
 8006672:	4770      	bx	lr
 8006674:	20000208 	.word	0x20000208

08006678 <xMBPortEventGet>:



/*----------------------------------------------------------------------------*/
BOOL xMBPortEventGet(eMBEventType * eEvent)
{
 8006678:	0003      	movs	r3, r0
  BOOL xEventHappened = FALSE;

  if( xEventInQueue )
 800667a:	4a05      	ldr	r2, [pc, #20]	; (8006690 <xMBPortEventGet+0x18>)
 800667c:	7810      	ldrb	r0, [r2, #0]
 800667e:	2800      	cmp	r0, #0
 8006680:	d004      	beq.n	800668c <xMBPortEventGet+0x14>
  {
    *eEvent = eQueuedEvent;
 8006682:	7851      	ldrb	r1, [r2, #1]
 8006684:	7019      	strb	r1, [r3, #0]
    xEventInQueue = FALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	7013      	strb	r3, [r2, #0]
    xEventHappened = TRUE;
 800668a:	2001      	movs	r0, #1
  }

  return xEventHappened;
}
 800668c:	4770      	bx	lr
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	20000208 	.word	0x20000208

08006694 <prvvUARTTxReadyISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTTxReadyISR(void)
{
 8006694:	b510      	push	{r4, lr}
  pxMBFrameCBTransmitterEmpty();
 8006696:	4b02      	ldr	r3, [pc, #8]	; (80066a0 <prvvUARTTxReadyISR+0xc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4798      	blx	r3
}
 800669c:	bd10      	pop	{r4, pc}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	2000056c 	.word	0x2000056c

080066a4 <prvvUARTRxISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTRxISR(void)
{
 80066a4:	b510      	push	{r4, lr}
  pxMBFrameCBByteReceived();
 80066a6:	4b02      	ldr	r3, [pc, #8]	; (80066b0 <prvvUARTRxISR+0xc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4798      	blx	r3
}
 80066ac:	bd10      	pop	{r4, pc}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	20000574 	.word	0x20000574

080066b4 <vMBPortSerialEnable>:
{
 80066b4:	b510      	push	{r4, lr}
 80066b6:	000c      	movs	r4, r1
  if (xRxEnable == FALSE)
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d10b      	bne.n	80066d4 <vMBPortSerialEnable+0x20>
    HAL_UART_AbortReceive_IT(modbusUart);
 80066bc:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <vMBPortSerialEnable+0x40>)
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	f7fd f9b8 	bl	8003a34 <HAL_UART_AbortReceive_IT>
  if (xTxEnable == FALSE)
 80066c4:	2c00      	cmp	r4, #0
 80066c6:	d00c      	beq.n	80066e2 <vMBPortSerialEnable+0x2e>
    if (modbusUart->gState == HAL_UART_STATE_READY)
 80066c8:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <vMBPortSerialEnable+0x40>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d00c      	beq.n	80066ec <vMBPortSerialEnable+0x38>
}
 80066d2:	bd10      	pop	{r4, pc}
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 80066d4:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <vMBPortSerialEnable+0x40>)
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	2201      	movs	r2, #1
 80066da:	4907      	ldr	r1, [pc, #28]	; (80066f8 <vMBPortSerialEnable+0x44>)
 80066dc:	f7fd fef8 	bl	80044d0 <HAL_UART_Receive_IT>
 80066e0:	e7f0      	b.n	80066c4 <vMBPortSerialEnable+0x10>
    HAL_UART_AbortTransmit_IT(modbusUart);
 80066e2:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <vMBPortSerialEnable+0x40>)
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f7fd f955 	bl	8003994 <HAL_UART_AbortTransmit_IT>
 80066ea:	e7f2      	b.n	80066d2 <vMBPortSerialEnable+0x1e>
      prvvUARTTxReadyISR();
 80066ec:	f7ff ffd2 	bl	8006694 <prvvUARTTxReadyISR>
}
 80066f0:	e7ef      	b.n	80066d2 <vMBPortSerialEnable+0x1e>
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	20000580 	.word	0x20000580
 80066f8:	2000020a 	.word	0x2000020a

080066fc <xMBPortSerialInit>:
}
 80066fc:	2001      	movs	r0, #1
 80066fe:	4770      	bx	lr

08006700 <xMBPortSerialPutByte>:
{
 8006700:	b510      	push	{r4, lr}
  txByte = ucByte;
 8006702:	4906      	ldr	r1, [pc, #24]	; (800671c <xMBPortSerialPutByte+0x1c>)
 8006704:	7048      	strb	r0, [r1, #1]
  GPIOA->BSRR = GPIO_BSRR_BS_0;
 8006706:	2390      	movs	r3, #144	; 0x90
 8006708:	05db      	lsls	r3, r3, #23
 800670a:	2201      	movs	r2, #1
 800670c:	619a      	str	r2, [r3, #24]
  HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 800670e:	3101      	adds	r1, #1
 8006710:	4b03      	ldr	r3, [pc, #12]	; (8006720 <xMBPortSerialPutByte+0x20>)
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	f7fd f8de 	bl	80038d4 <HAL_UART_Transmit_IT>
}
 8006718:	2001      	movs	r0, #1
 800671a:	bd10      	pop	{r4, pc}
 800671c:	2000020a 	.word	0x2000020a
 8006720:	20000580 	.word	0x20000580

08006724 <xMBPortSerialGetByte>:
{
 8006724:	b510      	push	{r4, lr}
  *pucByte = rxByte;
 8006726:	4905      	ldr	r1, [pc, #20]	; (800673c <xMBPortSerialGetByte+0x18>)
 8006728:	780b      	ldrb	r3, [r1, #0]
 800672a:	7003      	strb	r3, [r0, #0]
  HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 800672c:	4b04      	ldr	r3, [pc, #16]	; (8006740 <xMBPortSerialGetByte+0x1c>)
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	2201      	movs	r2, #1
 8006732:	f7fd fecd 	bl	80044d0 <HAL_UART_Receive_IT>
}
 8006736:	2001      	movs	r0, #1
 8006738:	bd10      	pop	{r4, pc}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	2000020a 	.word	0x2000020a
 8006740:	20000580 	.word	0x20000580

08006744 <HAL_UART_TxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006744:	b510      	push	{r4, lr}
  if (huart->Instance == modbusUart->Instance)
 8006746:	6802      	ldr	r2, [r0, #0]
 8006748:	4b07      	ldr	r3, [pc, #28]	; (8006768 <HAL_UART_TxCpltCallback+0x24>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d000      	beq.n	8006754 <HAL_UART_TxCpltCallback+0x10>
  {
	GPIOA->BSRR |= GPIO_BSRR_BR_0;
    prvvUARTTxReadyISR();

  }
}
 8006752:	bd10      	pop	{r4, pc}
	GPIOA->BSRR |= GPIO_BSRR_BR_0;
 8006754:	2290      	movs	r2, #144	; 0x90
 8006756:	05d2      	lsls	r2, r2, #23
 8006758:	6991      	ldr	r1, [r2, #24]
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	025b      	lsls	r3, r3, #9
 800675e:	430b      	orrs	r3, r1
 8006760:	6193      	str	r3, [r2, #24]
    prvvUARTTxReadyISR();
 8006762:	f7ff ff97 	bl	8006694 <prvvUARTTxReadyISR>
}
 8006766:	e7f4      	b.n	8006752 <HAL_UART_TxCpltCallback+0xe>
 8006768:	20000580 	.word	0x20000580

0800676c <HAL_UART_RxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800676c:	b510      	push	{r4, lr}
  if (huart->Instance == modbusUart->Instance)
 800676e:	6802      	ldr	r2, [r0, #0]
 8006770:	4b04      	ldr	r3, [pc, #16]	; (8006784 <HAL_UART_RxCpltCallback+0x18>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d000      	beq.n	800677c <HAL_UART_RxCpltCallback+0x10>
  {
    prvvUARTRxISR();

  }
}
 800677a:	bd10      	pop	{r4, pc}
    prvvUARTRxISR();
 800677c:	f7ff ff92 	bl	80066a4 <prvvUARTRxISR>
}
 8006780:	e7fb      	b.n	800677a <HAL_UART_RxCpltCallback+0xe>
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	20000580 	.word	0x20000580

08006788 <prvvTIMERExpiredISR>:



/* --------------------------------------------------------------------------*/
static void prvvTIMERExpiredISR(void)
{
 8006788:	b510      	push	{r4, lr}
    (void)pxMBPortCBTimerExpired();
 800678a:	4b02      	ldr	r3, [pc, #8]	; (8006794 <prvvTIMERExpiredISR+0xc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4798      	blx	r3
}
 8006790:	bd10      	pop	{r4, pc}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	20000570 	.word	0x20000570

08006798 <xMBPortTimersInit>:
  timerPeriod = usTim1Timerout50us;
 8006798:	4b01      	ldr	r3, [pc, #4]	; (80067a0 <xMBPortTimersInit+0x8>)
 800679a:	8018      	strh	r0, [r3, #0]
}
 800679c:	2001      	movs	r0, #1
 800679e:	4770      	bx	lr
 80067a0:	2000020c 	.word	0x2000020c

080067a4 <vMBPortTimersEnable>:
{
 80067a4:	b510      	push	{r4, lr}
  timerCounter = 0;
 80067a6:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <vMBPortTimersEnable+0x14>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	805a      	strh	r2, [r3, #2]
  HAL_TIM_Base_Start_IT(modbusTimer);
 80067ac:	4b03      	ldr	r3, [pc, #12]	; (80067bc <vMBPortTimersEnable+0x18>)
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	f7fc fe92 	bl	80034d8 <HAL_TIM_Base_Start_IT>
}
 80067b4:	bd10      	pop	{r4, pc}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	2000020c 	.word	0x2000020c
 80067bc:	20000584 	.word	0x20000584

080067c0 <vMBPortTimersDisable>:
{
 80067c0:	b510      	push	{r4, lr}
  HAL_TIM_Base_Stop_IT(modbusTimer);
 80067c2:	4b02      	ldr	r3, [pc, #8]	; (80067cc <vMBPortTimersDisable+0xc>)
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	f7fc feb9 	bl	800353c <HAL_TIM_Base_Stop_IT>
}
 80067ca:	bd10      	pop	{r4, pc}
 80067cc:	20000584 	.word	0x20000584

080067d0 <HAL_TIM_PeriodElapsedCallback>:



/* --------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067d0:	b510      	push	{r4, lr}
 80067d2:	0004      	movs	r4, r0
  if (htim->Instance == modbusTimer->Instance)
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6802      	ldr	r2, [r0, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d004      	beq.n	80067ea <HAL_TIM_PeriodElapsedCallback+0x1a>
    if (timerCounter == timerPeriod)
    {
      prvvTIMERExpiredISR();
    }
  }
  if (htim->Instance == TIM6) {
 80067e0:	6822      	ldr	r2, [r4, #0]
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d00b      	beq.n	8006800 <HAL_TIM_PeriodElapsedCallback+0x30>
    HAL_IncTick();
  }
}
 80067e8:	bd10      	pop	{r4, pc}
    timerCounter++;
 80067ea:	4a09      	ldr	r2, [pc, #36]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80067ec:	8853      	ldrh	r3, [r2, #2]
 80067ee:	3301      	adds	r3, #1
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	8053      	strh	r3, [r2, #2]
    if (timerCounter == timerPeriod)
 80067f4:	8812      	ldrh	r2, [r2, #0]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d1f2      	bne.n	80067e0 <HAL_TIM_PeriodElapsedCallback+0x10>
      prvvTIMERExpiredISR();
 80067fa:	f7ff ffc5 	bl	8006788 <prvvTIMERExpiredISR>
 80067fe:	e7ef      	b.n	80067e0 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8006800:	f7fc f85e 	bl	80028c0 <HAL_IncTick>
}
 8006804:	e7f0      	b.n	80067e8 <HAL_TIM_PeriodElapsedCallback+0x18>
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	20000584 	.word	0x20000584
 800680c:	40001000 	.word	0x40001000
 8006810:	2000020c 	.word	0x2000020c

08006814 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8006814:	b530      	push	{r4, r5, lr}
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 8006816:	24ff      	movs	r4, #255	; 0xff
    UCHAR           ucCRCHi = 0xFF;
 8006818:	25ff      	movs	r5, #255	; 0xff
    int             iIndex;

    while( usLen-- )
 800681a:	1e4a      	subs	r2, r1, #1
 800681c:	b292      	uxth	r2, r2
 800681e:	2900      	cmp	r1, #0
 8006820:	d009      	beq.n	8006836 <usMBCRC16+0x22>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8006822:	7803      	ldrb	r3, [r0, #0]
 8006824:	4063      	eors	r3, r4
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8006826:	4906      	ldr	r1, [pc, #24]	; (8006840 <usMBCRC16+0x2c>)
 8006828:	5ccc      	ldrb	r4, [r1, r3]
 800682a:	406c      	eors	r4, r5
        ucCRCHi = aucCRCLo[iIndex];
 800682c:	4905      	ldr	r1, [pc, #20]	; (8006844 <usMBCRC16+0x30>)
 800682e:	5ccd      	ldrb	r5, [r1, r3]
    while( usLen-- )
 8006830:	0011      	movs	r1, r2
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8006832:	3001      	adds	r0, #1
 8006834:	e7f1      	b.n	800681a <usMBCRC16+0x6>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8006836:	0228      	lsls	r0, r5, #8
 8006838:	4320      	orrs	r0, r4
 800683a:	b280      	uxth	r0, r0
}
 800683c:	bd30      	pop	{r4, r5, pc}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	080085e0 	.word	0x080085e0
 8006844:	080084e0 	.word	0x080084e0

08006848 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	000d      	movs	r5, r1
 800684c:	0014      	movs	r4, r2
 800684e:	001e      	movs	r6, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8006850:	f7ff fee4 	bl	800661c <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8006854:	0033      	movs	r3, r6
 8006856:	2208      	movs	r2, #8
 8006858:	0021      	movs	r1, r4
 800685a:	0028      	movs	r0, r5
 800685c:	f7ff ff4e 	bl	80066fc <xMBPortSerialInit>
 8006860:	2801      	cmp	r0, #1
 8006862:	d004      	beq.n	800686e <eMBRTUInit+0x26>
    {
        eStatus = MB_EPORTERR;
 8006864:	2403      	movs	r4, #3
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8006866:	f7ff fee1 	bl	800662c <ExitCriticalSection>

    return eStatus;
}
 800686a:	0020      	movs	r0, r4
 800686c:	bd70      	pop	{r4, r5, r6, pc}
        if( ulBaudRate > 19200 )
 800686e:	2396      	movs	r3, #150	; 0x96
 8006870:	01db      	lsls	r3, r3, #7
 8006872:	429c      	cmp	r4, r3
 8006874:	d80a      	bhi.n	800688c <eMBRTUInit+0x44>
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8006876:	0061      	lsls	r1, r4, #1
 8006878:	4806      	ldr	r0, [pc, #24]	; (8006894 <eMBRTUInit+0x4c>)
 800687a:	f7f9 fc4f 	bl	800011c <__udivsi3>
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 800687e:	b280      	uxth	r0, r0
 8006880:	f7ff ff8a 	bl	8006798 <xMBPortTimersInit>
 8006884:	2801      	cmp	r0, #1
 8006886:	d003      	beq.n	8006890 <eMBRTUInit+0x48>
            eStatus = MB_EPORTERR;
 8006888:	2403      	movs	r4, #3
 800688a:	e7ec      	b.n	8006866 <eMBRTUInit+0x1e>
            usTimerT35_50us = 35;       /* 1800us. */
 800688c:	2023      	movs	r0, #35	; 0x23
 800688e:	e7f6      	b.n	800687e <eMBRTUInit+0x36>
    eMBErrorCode    eStatus = MB_ENOERR;
 8006890:	2400      	movs	r4, #0
 8006892:	e7e8      	b.n	8006866 <eMBRTUInit+0x1e>
 8006894:	00177fa0 	.word	0x00177fa0

08006898 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8006898:	b510      	push	{r4, lr}
    ENTER_CRITICAL_SECTION(  );
 800689a:	f7ff febf 	bl	800661c <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800689e:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <eMBRTUStart+0x20>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 80068a4:	2100      	movs	r1, #0
 80068a6:	2001      	movs	r0, #1
 80068a8:	f7ff ff04 	bl	80066b4 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 80068ac:	f7ff ff7a 	bl	80067a4 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 80068b0:	f7ff febc 	bl	800662c <ExitCriticalSection>
}
 80068b4:	bd10      	pop	{r4, pc}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	20000210 	.word	0x20000210

080068bc <eMBRTUStop>:

void
eMBRTUStop( void )
{
 80068bc:	b510      	push	{r4, lr}
    ENTER_CRITICAL_SECTION(  );
 80068be:	f7ff fead 	bl	800661c <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 80068c2:	2100      	movs	r1, #0
 80068c4:	2000      	movs	r0, #0
 80068c6:	f7ff fef5 	bl	80066b4 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 80068ca:	f7ff ff79 	bl	80067c0 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 80068ce:	f7ff fead 	bl	800662c <ExitCriticalSection>
}
 80068d2:	bd10      	pop	{r4, pc}

080068d4 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	0005      	movs	r5, r0
 80068d8:	000e      	movs	r6, r1
 80068da:	0014      	movs	r4, r2
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 80068dc:	f7ff fe9e 	bl	800661c <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80068e0:	4b14      	ldr	r3, [pc, #80]	; (8006934 <eMBRTUReceive+0x60>)
 80068e2:	885b      	ldrh	r3, [r3, #2]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2bff      	cmp	r3, #255	; 0xff
 80068e8:	d809      	bhi.n	80068fe <eMBRTUReceive+0x2a>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80068ea:	4b12      	ldr	r3, [pc, #72]	; (8006934 <eMBRTUReceive+0x60>)
 80068ec:	885b      	ldrh	r3, [r3, #2]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d80a      	bhi.n	800690a <eMBRTUReceive+0x36>
        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
    }
    else
    {
        eStatus = MB_EIO;
 80068f4:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 80068f6:	f7ff fe99 	bl	800662c <ExitCriticalSection>
    return eStatus;
}
 80068fa:	0020      	movs	r0, r4
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80068fe:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <eMBRTUReceive+0x64>)
 8006900:	4a0e      	ldr	r2, [pc, #56]	; (800693c <eMBRTUReceive+0x68>)
 8006902:	219b      	movs	r1, #155	; 0x9b
 8006904:	480e      	ldr	r0, [pc, #56]	; (8006940 <eMBRTUReceive+0x6c>)
 8006906:	f000 f95b 	bl	8006bc0 <__assert_func>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <eMBRTUReceive+0x60>)
 800690c:	8859      	ldrh	r1, [r3, #2]
 800690e:	b289      	uxth	r1, r1
 8006910:	480c      	ldr	r0, [pc, #48]	; (8006944 <eMBRTUReceive+0x70>)
 8006912:	f7ff ff7f 	bl	8006814 <usMBCRC16>
 8006916:	2800      	cmp	r0, #0
 8006918:	d10a      	bne.n	8006930 <eMBRTUReceive+0x5c>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <eMBRTUReceive+0x70>)
 800691c:	781a      	ldrb	r2, [r3, #0]
 800691e:	702a      	strb	r2, [r5, #0]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8006920:	4a04      	ldr	r2, [pc, #16]	; (8006934 <eMBRTUReceive+0x60>)
 8006922:	8852      	ldrh	r2, [r2, #2]
 8006924:	3a03      	subs	r2, #3
 8006926:	8022      	strh	r2, [r4, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8006928:	3301      	adds	r3, #1
 800692a:	6033      	str	r3, [r6, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800692c:	2400      	movs	r4, #0
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800692e:	e7e2      	b.n	80068f6 <eMBRTUReceive+0x22>
        eStatus = MB_EIO;
 8006930:	2405      	movs	r4, #5
 8006932:	e7e0      	b.n	80068f6 <eMBRTUReceive+0x22>
 8006934:	20000210 	.word	0x20000210
 8006938:	08008858 	.word	0x08008858
 800693c:	080086e0 	.word	0x080086e0
 8006940:	08008880 	.word	0x08008880
 8006944:	20000588 	.word	0x20000588

08006948 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	0006      	movs	r6, r0
 800694c:	000c      	movs	r4, r1
 800694e:	0015      	movs	r5, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8006950:	f7ff fe64 	bl	800661c <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8006954:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <eMBRTUSend+0x68>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d004      	beq.n	8006966 <eMBRTUSend+0x1e>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
 800695c:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION(  );
 800695e:	f7ff fe65 	bl	800662c <ExitCriticalSection>
    return eStatus;
}
 8006962:	0020      	movs	r0, r4
 8006964:	bd70      	pop	{r4, r5, r6, pc}
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8006966:	1e60      	subs	r0, r4, #1
 8006968:	4c11      	ldr	r4, [pc, #68]	; (80069b0 <eMBRTUSend+0x68>)
 800696a:	6060      	str	r0, [r4, #4]
        usSndBufferCount = 1;
 800696c:	8123      	strh	r3, [r4, #8]
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800696e:	7006      	strb	r6, [r0, #0]
        usSndBufferCount += usLength;
 8006970:	8922      	ldrh	r2, [r4, #8]
 8006972:	1955      	adds	r5, r2, r5
 8006974:	b2ad      	uxth	r5, r5
 8006976:	8125      	strh	r5, [r4, #8]
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8006978:	8921      	ldrh	r1, [r4, #8]
 800697a:	b289      	uxth	r1, r1
 800697c:	f7ff ff4a 	bl	8006814 <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8006980:	8923      	ldrh	r3, [r4, #8]
 8006982:	b299      	uxth	r1, r3
 8006984:	3301      	adds	r3, #1
 8006986:	b29b      	uxth	r3, r3
 8006988:	8123      	strh	r3, [r4, #8]
 800698a:	b2c3      	uxtb	r3, r0
 800698c:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <eMBRTUSend+0x6c>)
 800698e:	5453      	strb	r3, [r2, r1]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8006990:	8923      	ldrh	r3, [r4, #8]
 8006992:	b299      	uxth	r1, r3
 8006994:	3301      	adds	r3, #1
 8006996:	b29b      	uxth	r3, r3
 8006998:	8123      	strh	r3, [r4, #8]
 800699a:	0a00      	lsrs	r0, r0, #8
 800699c:	b2c0      	uxtb	r0, r0
 800699e:	5450      	strb	r0, [r2, r1]
        eSndState = STATE_TX_XMIT;
 80069a0:	2301      	movs	r3, #1
 80069a2:	72a3      	strb	r3, [r4, #10]
        vMBPortSerialEnable( FALSE, TRUE );
 80069a4:	2101      	movs	r1, #1
 80069a6:	2000      	movs	r0, #0
 80069a8:	f7ff fe84 	bl	80066b4 <vMBPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 80069ac:	2400      	movs	r4, #0
 80069ae:	e7d6      	b.n	800695e <eMBRTUSend+0x16>
 80069b0:	20000210 	.word	0x20000210
 80069b4:	20000588 	.word	0x20000588

080069b8 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 80069b8:	b500      	push	{lr}
 80069ba:	b083      	sub	sp, #12
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 80069bc:	4b25      	ldr	r3, [pc, #148]	; (8006a54 <xMBRTUReceiveFSM+0x9c>)
 80069be:	7a9b      	ldrb	r3, [r3, #10]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d11f      	bne.n	8006a04 <xMBRTUReceiveFSM+0x4c>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80069c4:	466b      	mov	r3, sp
 80069c6:	1dd8      	adds	r0, r3, #7
 80069c8:	f7ff feac 	bl	8006724 <xMBPortSerialGetByte>

    switch ( eRcvState )
 80069cc:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <xMBRTUReceiveFSM+0x9c>)
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	b2d3      	uxtb	r3, r2
 80069d2:	2a02      	cmp	r2, #2
 80069d4:	d027      	beq.n	8006a26 <xMBRTUReceiveFSM+0x6e>
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d81b      	bhi.n	8006a12 <xMBRTUReceiveFSM+0x5a>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01e      	beq.n	8006a1c <xMBRTUReceiveFSM+0x64>
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d11e      	bne.n	8006a20 <xMBRTUReceiveFSM+0x68>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80069e2:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <xMBRTUReceiveFSM+0x9c>)
 80069e4:	2300      	movs	r3, #0
 80069e6:	8053      	strh	r3, [r2, #2]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80069e8:	8853      	ldrh	r3, [r2, #2]
 80069ea:	b299      	uxth	r1, r3
 80069ec:	3301      	adds	r3, #1
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8053      	strh	r3, [r2, #2]
 80069f2:	466b      	mov	r3, sp
 80069f4:	79d8      	ldrb	r0, [r3, #7]
 80069f6:	4b18      	ldr	r3, [pc, #96]	; (8006a58 <xMBRTUReceiveFSM+0xa0>)
 80069f8:	5458      	strb	r0, [r3, r1]
        eRcvState = STATE_RX_RCV;
 80069fa:	2302      	movs	r3, #2
 80069fc:	7013      	strb	r3, [r2, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 80069fe:	f7ff fed1 	bl	80067a4 <vMBPortTimersEnable>
        break;
 8006a02:	e00d      	b.n	8006a20 <xMBRTUReceiveFSM+0x68>
    assert( eSndState == STATE_TX_IDLE );
 8006a04:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <xMBRTUReceiveFSM+0xa4>)
 8006a06:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <xMBRTUReceiveFSM+0xa8>)
 8006a08:	3210      	adds	r2, #16
 8006a0a:	21e4      	movs	r1, #228	; 0xe4
 8006a0c:	4815      	ldr	r0, [pc, #84]	; (8006a64 <xMBRTUReceiveFSM+0xac>)
 8006a0e:	f000 f8d7 	bl	8006bc0 <__assert_func>
    switch ( eRcvState )
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d104      	bne.n	8006a20 <xMBRTUReceiveFSM+0x68>
        vMBPortTimersEnable(  );
 8006a16:	f7ff fec5 	bl	80067a4 <vMBPortTimersEnable>
        break;
 8006a1a:	e001      	b.n	8006a20 <xMBRTUReceiveFSM+0x68>
        vMBPortTimersEnable(  );
 8006a1c:	f7ff fec2 	bl	80067a4 <vMBPortTimersEnable>
        }
        vMBPortTimersEnable(  );
        break;
    }
    return xTaskNeedSwitch;
}
 8006a20:	2000      	movs	r0, #0
 8006a22:	b003      	add	sp, #12
 8006a24:	bd00      	pop	{pc}
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8006a26:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <xMBRTUReceiveFSM+0x9c>)
 8006a28:	885b      	ldrh	r3, [r3, #2]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2bff      	cmp	r3, #255	; 0xff
 8006a2e:	d80c      	bhi.n	8006a4a <xMBRTUReceiveFSM+0x92>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8006a30:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <xMBRTUReceiveFSM+0x9c>)
 8006a32:	8853      	ldrh	r3, [r2, #2]
 8006a34:	b299      	uxth	r1, r3
 8006a36:	3301      	adds	r3, #1
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	8053      	strh	r3, [r2, #2]
 8006a3c:	466b      	mov	r3, sp
 8006a3e:	79da      	ldrb	r2, [r3, #7]
 8006a40:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <xMBRTUReceiveFSM+0xa0>)
 8006a42:	545a      	strb	r2, [r3, r1]
        vMBPortTimersEnable(  );
 8006a44:	f7ff feae 	bl	80067a4 <vMBPortTimersEnable>
        break;
 8006a48:	e7ea      	b.n	8006a20 <xMBRTUReceiveFSM+0x68>
            eRcvState = STATE_RX_ERROR;
 8006a4a:	4b02      	ldr	r3, [pc, #8]	; (8006a54 <xMBRTUReceiveFSM+0x9c>)
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e7f8      	b.n	8006a44 <xMBRTUReceiveFSM+0x8c>
 8006a52:	46c0      	nop			; (mov r8, r8)
 8006a54:	20000210 	.word	0x20000210
 8006a58:	20000588 	.word	0x20000588
 8006a5c:	080086e0 	.word	0x080086e0
 8006a60:	08008898 	.word	0x08008898
 8006a64:	08008880 	.word	0x08008880

08006a68 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8006a68:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 8006a6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ae0 <xMBRTUTransmitFSM+0x78>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d109      	bne.n	8006a86 <xMBRTUTransmitFSM+0x1e>

    switch ( eSndState )
 8006a72:	4b1b      	ldr	r3, [pc, #108]	; (8006ae0 <xMBRTUTransmitFSM+0x78>)
 8006a74:	7a9b      	ldrb	r3, [r3, #10]
 8006a76:	b2dc      	uxtb	r4, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00c      	beq.n	8006a96 <xMBRTUTransmitFSM+0x2e>
 8006a7c:	2c01      	cmp	r4, #1
 8006a7e:	d00f      	beq.n	8006aa0 <xMBRTUTransmitFSM+0x38>
 8006a80:	2400      	movs	r4, #0
        }
        break;
    }

    return xNeedPoll;
}
 8006a82:	0020      	movs	r0, r4
 8006a84:	bd10      	pop	{r4, pc}
    assert( eRcvState == STATE_RX_IDLE );
 8006a86:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <xMBRTUTransmitFSM+0x7c>)
 8006a88:	2120      	movs	r1, #32
 8006a8a:	4b17      	ldr	r3, [pc, #92]	; (8006ae8 <xMBRTUTransmitFSM+0x80>)
 8006a8c:	3224      	adds	r2, #36	; 0x24
 8006a8e:	31ff      	adds	r1, #255	; 0xff
 8006a90:	4816      	ldr	r0, [pc, #88]	; (8006aec <xMBRTUTransmitFSM+0x84>)
 8006a92:	f000 f895 	bl	8006bc0 <__assert_func>
        vMBPortSerialEnable( TRUE, FALSE );
 8006a96:	2100      	movs	r1, #0
 8006a98:	2001      	movs	r0, #1
 8006a9a:	f7ff fe0b 	bl	80066b4 <vMBPortSerialEnable>
        break;
 8006a9e:	e7f0      	b.n	8006a82 <xMBRTUTransmitFSM+0x1a>
        if( usSndBufferCount != 0 )
 8006aa0:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <xMBRTUTransmitFSM+0x78>)
 8006aa2:	891b      	ldrh	r3, [r3, #8]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00e      	beq.n	8006ac8 <xMBRTUTransmitFSM+0x60>
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8006aaa:	4c0d      	ldr	r4, [pc, #52]	; (8006ae0 <xMBRTUTransmitFSM+0x78>)
 8006aac:	6863      	ldr	r3, [r4, #4]
 8006aae:	7818      	ldrb	r0, [r3, #0]
 8006ab0:	b2c0      	uxtb	r0, r0
 8006ab2:	f7ff fe25 	bl	8006700 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8006ab6:	6863      	ldr	r3, [r4, #4]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	6063      	str	r3, [r4, #4]
            usSndBufferCount--;
 8006abc:	8923      	ldrh	r3, [r4, #8]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	8123      	strh	r3, [r4, #8]
    BOOL            xNeedPoll = FALSE;
 8006ac4:	2400      	movs	r4, #0
 8006ac6:	e7dc      	b.n	8006a82 <xMBRTUTransmitFSM+0x1a>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8006ac8:	2003      	movs	r0, #3
 8006aca:	f7ff fdcd 	bl	8006668 <xMBPortEventPost>
 8006ace:	0004      	movs	r4, r0
            vMBPortSerialEnable( TRUE, FALSE );
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	2001      	movs	r0, #1
 8006ad4:	f7ff fdee 	bl	80066b4 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8006ad8:	4b01      	ldr	r3, [pc, #4]	; (8006ae0 <xMBRTUTransmitFSM+0x78>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	729a      	strb	r2, [r3, #10]
 8006ade:	e7d0      	b.n	8006a82 <xMBRTUTransmitFSM+0x1a>
 8006ae0:	20000210 	.word	0x20000210
 8006ae4:	080086e0 	.word	0x080086e0
 8006ae8:	080088b4 	.word	0x080088b4
 8006aec:	08008880 	.word	0x08008880

08006af0 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8006af0:	b510      	push	{r4, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 8006af2:	4b1a      	ldr	r3, [pc, #104]	; (8006b5c <xMBRTUTimerT35Expired+0x6c>)
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	b2d3      	uxtb	r3, r2
 8006af8:	2a02      	cmp	r2, #2
 8006afa:	d017      	beq.n	8006b2c <xMBRTUTimerT35Expired+0x3c>
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d022      	beq.n	8006b46 <xMBRTUTimerT35Expired+0x56>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00e      	beq.n	8006b22 <xMBRTUTimerT35Expired+0x32>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8006b04:	4b15      	ldr	r3, [pc, #84]	; (8006b5c <xMBRTUTimerT35Expired+0x6c>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	b2dc      	uxtb	r4, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01c      	beq.n	8006b48 <xMBRTUTimerT35Expired+0x58>
 8006b0e:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <xMBRTUTimerT35Expired+0x6c>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d01f      	beq.n	8006b56 <xMBRTUTimerT35Expired+0x66>
 8006b16:	4b11      	ldr	r3, [pc, #68]	; (8006b5c <xMBRTUTimerT35Expired+0x6c>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d10b      	bne.n	8006b36 <xMBRTUTimerT35Expired+0x46>
    BOOL            xNeedPoll = FALSE;
 8006b1e:	2400      	movs	r4, #0
 8006b20:	e012      	b.n	8006b48 <xMBRTUTimerT35Expired+0x58>
        xNeedPoll = xMBPortEventPost( EV_READY );
 8006b22:	2000      	movs	r0, #0
 8006b24:	f7ff fda0 	bl	8006668 <xMBPortEventPost>
 8006b28:	0004      	movs	r4, r0
        break;
 8006b2a:	e00d      	b.n	8006b48 <xMBRTUTimerT35Expired+0x58>
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	f7ff fd9b 	bl	8006668 <xMBPortEventPost>
 8006b32:	0004      	movs	r4, r0
        break;
 8006b34:	e008      	b.n	8006b48 <xMBRTUTimerT35Expired+0x58>
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8006b36:	4a0a      	ldr	r2, [pc, #40]	; (8006b60 <xMBRTUTimerT35Expired+0x70>)
 8006b38:	21ac      	movs	r1, #172	; 0xac
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <xMBRTUTimerT35Expired+0x74>)
 8006b3c:	3238      	adds	r2, #56	; 0x38
 8006b3e:	0049      	lsls	r1, r1, #1
 8006b40:	4809      	ldr	r0, [pc, #36]	; (8006b68 <xMBRTUTimerT35Expired+0x78>)
 8006b42:	f000 f83d 	bl	8006bc0 <__assert_func>
    switch ( eRcvState )
 8006b46:	2400      	movs	r4, #0
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8006b48:	f7ff fe3a 	bl	80067c0 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8006b4c:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <xMBRTUTimerT35Expired+0x6c>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
}
 8006b52:	0020      	movs	r0, r4
 8006b54:	bd10      	pop	{r4, pc}
    BOOL            xNeedPoll = FALSE;
 8006b56:	2400      	movs	r4, #0
 8006b58:	e7f6      	b.n	8006b48 <xMBRTUTimerT35Expired+0x58>
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	20000210 	.word	0x20000210
 8006b60:	080086e0 	.word	0x080086e0
 8006b64:	080088d0 	.word	0x080088d0
 8006b68:	08008880 	.word	0x08008880

08006b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006b6c:	480d      	ldr	r0, [pc, #52]	; (8006ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006b6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/  bl  SystemInit
 8006b70:	f7fb fe94 	bl	800289c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b74:	480c      	ldr	r0, [pc, #48]	; (8006ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006b76:	490d      	ldr	r1, [pc, #52]	; (8006bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8006b78:	4a0d      	ldr	r2, [pc, #52]	; (8006bb0 <LoopForever+0xe>)
  movs r3, #0
 8006b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b7c:	e002      	b.n	8006b84 <LoopCopyDataInit>

08006b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b82:	3304      	adds	r3, #4

08006b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b88:	d3f9      	bcc.n	8006b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b8a:	4a0a      	ldr	r2, [pc, #40]	; (8006bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006b8c:	4c0a      	ldr	r4, [pc, #40]	; (8006bb8 <LoopForever+0x16>)
  movs r3, #0
 8006b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b90:	e001      	b.n	8006b96 <LoopFillZerobss>

08006b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b94:	3204      	adds	r2, #4

08006b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b98:	d3fb      	bcc.n	8006b92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006b9a:	f000 f83f 	bl	8006c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006b9e:	f7fe ffa7 	bl	8005af0 <main>

08006ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8006ba2:	e7fe      	b.n	8006ba2 <LoopForever>
  ldr   r0, =_estack
 8006ba4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006bac:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8006bb0:	08008a10 	.word	0x08008a10
  ldr r2, =_sbss
 8006bb4:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8006bb8:	20000698 	.word	0x20000698

08006bbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006bbc:	e7fe      	b.n	8006bbc <ADC1_IRQHandler>
	...

08006bc0 <__assert_func>:
 8006bc0:	b530      	push	{r4, r5, lr}
 8006bc2:	0014      	movs	r4, r2
 8006bc4:	001a      	movs	r2, r3
 8006bc6:	4b09      	ldr	r3, [pc, #36]	; (8006bec <__assert_func+0x2c>)
 8006bc8:	0005      	movs	r5, r0
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	b085      	sub	sp, #20
 8006bce:	68d8      	ldr	r0, [r3, #12]
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <__assert_func+0x30>)
 8006bd2:	2c00      	cmp	r4, #0
 8006bd4:	d101      	bne.n	8006bda <__assert_func+0x1a>
 8006bd6:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <__assert_func+0x34>)
 8006bd8:	001c      	movs	r4, r3
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	9100      	str	r1, [sp, #0]
 8006bde:	002b      	movs	r3, r5
 8006be0:	4905      	ldr	r1, [pc, #20]	; (8006bf8 <__assert_func+0x38>)
 8006be2:	9402      	str	r4, [sp, #8]
 8006be4:	f000 f80a 	bl	8006bfc <fiprintf>
 8006be8:	f000 fc1e 	bl	8007428 <abort>
 8006bec:	200000f4 	.word	0x200000f4
 8006bf0:	08008933 	.word	0x08008933
 8006bf4:	0800896e 	.word	0x0800896e
 8006bf8:	08008940 	.word	0x08008940

08006bfc <fiprintf>:
 8006bfc:	b40e      	push	{r1, r2, r3}
 8006bfe:	b503      	push	{r0, r1, lr}
 8006c00:	0001      	movs	r1, r0
 8006c02:	ab03      	add	r3, sp, #12
 8006c04:	4804      	ldr	r0, [pc, #16]	; (8006c18 <fiprintf+0x1c>)
 8006c06:	cb04      	ldmia	r3!, {r2}
 8006c08:	6800      	ldr	r0, [r0, #0]
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	f000 f862 	bl	8006cd4 <_vfiprintf_r>
 8006c10:	b002      	add	sp, #8
 8006c12:	bc08      	pop	{r3}
 8006c14:	b003      	add	sp, #12
 8006c16:	4718      	bx	r3
 8006c18:	200000f4 	.word	0x200000f4

08006c1c <__libc_init_array>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	2600      	movs	r6, #0
 8006c20:	4d0c      	ldr	r5, [pc, #48]	; (8006c54 <__libc_init_array+0x38>)
 8006c22:	4c0d      	ldr	r4, [pc, #52]	; (8006c58 <__libc_init_array+0x3c>)
 8006c24:	1b64      	subs	r4, r4, r5
 8006c26:	10a4      	asrs	r4, r4, #2
 8006c28:	42a6      	cmp	r6, r4
 8006c2a:	d109      	bne.n	8006c40 <__libc_init_array+0x24>
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	f001 fb85 	bl	800833c <_init>
 8006c32:	4d0a      	ldr	r5, [pc, #40]	; (8006c5c <__libc_init_array+0x40>)
 8006c34:	4c0a      	ldr	r4, [pc, #40]	; (8006c60 <__libc_init_array+0x44>)
 8006c36:	1b64      	subs	r4, r4, r5
 8006c38:	10a4      	asrs	r4, r4, #2
 8006c3a:	42a6      	cmp	r6, r4
 8006c3c:	d105      	bne.n	8006c4a <__libc_init_array+0x2e>
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}
 8006c40:	00b3      	lsls	r3, r6, #2
 8006c42:	58eb      	ldr	r3, [r5, r3]
 8006c44:	4798      	blx	r3
 8006c46:	3601      	adds	r6, #1
 8006c48:	e7ee      	b.n	8006c28 <__libc_init_array+0xc>
 8006c4a:	00b3      	lsls	r3, r6, #2
 8006c4c:	58eb      	ldr	r3, [r5, r3]
 8006c4e:	4798      	blx	r3
 8006c50:	3601      	adds	r6, #1
 8006c52:	e7f2      	b.n	8006c3a <__libc_init_array+0x1e>
 8006c54:	08008a08 	.word	0x08008a08
 8006c58:	08008a08 	.word	0x08008a08
 8006c5c:	08008a08 	.word	0x08008a08
 8006c60:	08008a0c 	.word	0x08008a0c

08006c64 <memcpy>:
 8006c64:	2300      	movs	r3, #0
 8006c66:	b510      	push	{r4, lr}
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d100      	bne.n	8006c6e <memcpy+0xa>
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	5ccc      	ldrb	r4, [r1, r3]
 8006c70:	54c4      	strb	r4, [r0, r3]
 8006c72:	3301      	adds	r3, #1
 8006c74:	e7f8      	b.n	8006c68 <memcpy+0x4>

08006c76 <memset>:
 8006c76:	0003      	movs	r3, r0
 8006c78:	1882      	adds	r2, r0, r2
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d100      	bne.n	8006c80 <memset+0xa>
 8006c7e:	4770      	bx	lr
 8006c80:	7019      	strb	r1, [r3, #0]
 8006c82:	3301      	adds	r3, #1
 8006c84:	e7f9      	b.n	8006c7a <memset+0x4>

08006c86 <__sfputc_r>:
 8006c86:	6893      	ldr	r3, [r2, #8]
 8006c88:	b510      	push	{r4, lr}
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	6093      	str	r3, [r2, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	da04      	bge.n	8006c9c <__sfputc_r+0x16>
 8006c92:	6994      	ldr	r4, [r2, #24]
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	db07      	blt.n	8006ca8 <__sfputc_r+0x22>
 8006c98:	290a      	cmp	r1, #10
 8006c9a:	d005      	beq.n	8006ca8 <__sfputc_r+0x22>
 8006c9c:	6813      	ldr	r3, [r2, #0]
 8006c9e:	1c58      	adds	r0, r3, #1
 8006ca0:	6010      	str	r0, [r2, #0]
 8006ca2:	7019      	strb	r1, [r3, #0]
 8006ca4:	0008      	movs	r0, r1
 8006ca6:	bd10      	pop	{r4, pc}
 8006ca8:	f000 faf0 	bl	800728c <__swbuf_r>
 8006cac:	0001      	movs	r1, r0
 8006cae:	e7f9      	b.n	8006ca4 <__sfputc_r+0x1e>

08006cb0 <__sfputs_r>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	0006      	movs	r6, r0
 8006cb4:	000f      	movs	r7, r1
 8006cb6:	0014      	movs	r4, r2
 8006cb8:	18d5      	adds	r5, r2, r3
 8006cba:	42ac      	cmp	r4, r5
 8006cbc:	d101      	bne.n	8006cc2 <__sfputs_r+0x12>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	e007      	b.n	8006cd2 <__sfputs_r+0x22>
 8006cc2:	7821      	ldrb	r1, [r4, #0]
 8006cc4:	003a      	movs	r2, r7
 8006cc6:	0030      	movs	r0, r6
 8006cc8:	f7ff ffdd 	bl	8006c86 <__sfputc_r>
 8006ccc:	3401      	adds	r4, #1
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	d1f3      	bne.n	8006cba <__sfputs_r+0xa>
 8006cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006cd4 <_vfiprintf_r>:
 8006cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd6:	b0a1      	sub	sp, #132	; 0x84
 8006cd8:	0006      	movs	r6, r0
 8006cda:	000c      	movs	r4, r1
 8006cdc:	001f      	movs	r7, r3
 8006cde:	9203      	str	r2, [sp, #12]
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d004      	beq.n	8006cee <_vfiprintf_r+0x1a>
 8006ce4:	6983      	ldr	r3, [r0, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <_vfiprintf_r+0x1a>
 8006cea:	f000 fcd3 	bl	8007694 <__sinit>
 8006cee:	4b8e      	ldr	r3, [pc, #568]	; (8006f28 <_vfiprintf_r+0x254>)
 8006cf0:	429c      	cmp	r4, r3
 8006cf2:	d11c      	bne.n	8006d2e <_vfiprintf_r+0x5a>
 8006cf4:	6874      	ldr	r4, [r6, #4]
 8006cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cf8:	07db      	lsls	r3, r3, #31
 8006cfa:	d405      	bmi.n	8006d08 <_vfiprintf_r+0x34>
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	059b      	lsls	r3, r3, #22
 8006d00:	d402      	bmi.n	8006d08 <_vfiprintf_r+0x34>
 8006d02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d04:	f000 fd67 	bl	80077d6 <__retarget_lock_acquire_recursive>
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	071b      	lsls	r3, r3, #28
 8006d0c:	d502      	bpl.n	8006d14 <_vfiprintf_r+0x40>
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d11d      	bne.n	8006d50 <_vfiprintf_r+0x7c>
 8006d14:	0021      	movs	r1, r4
 8006d16:	0030      	movs	r0, r6
 8006d18:	f000 fb0e 	bl	8007338 <__swsetup_r>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d017      	beq.n	8006d50 <_vfiprintf_r+0x7c>
 8006d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d22:	07db      	lsls	r3, r3, #31
 8006d24:	d50d      	bpl.n	8006d42 <_vfiprintf_r+0x6e>
 8006d26:	2001      	movs	r0, #1
 8006d28:	4240      	negs	r0, r0
 8006d2a:	b021      	add	sp, #132	; 0x84
 8006d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2e:	4b7f      	ldr	r3, [pc, #508]	; (8006f2c <_vfiprintf_r+0x258>)
 8006d30:	429c      	cmp	r4, r3
 8006d32:	d101      	bne.n	8006d38 <_vfiprintf_r+0x64>
 8006d34:	68b4      	ldr	r4, [r6, #8]
 8006d36:	e7de      	b.n	8006cf6 <_vfiprintf_r+0x22>
 8006d38:	4b7d      	ldr	r3, [pc, #500]	; (8006f30 <_vfiprintf_r+0x25c>)
 8006d3a:	429c      	cmp	r4, r3
 8006d3c:	d1db      	bne.n	8006cf6 <_vfiprintf_r+0x22>
 8006d3e:	68f4      	ldr	r4, [r6, #12]
 8006d40:	e7d9      	b.n	8006cf6 <_vfiprintf_r+0x22>
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	059b      	lsls	r3, r3, #22
 8006d46:	d4ee      	bmi.n	8006d26 <_vfiprintf_r+0x52>
 8006d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d4a:	f000 fd45 	bl	80077d8 <__retarget_lock_release_recursive>
 8006d4e:	e7ea      	b.n	8006d26 <_vfiprintf_r+0x52>
 8006d50:	2300      	movs	r3, #0
 8006d52:	ad08      	add	r5, sp, #32
 8006d54:	616b      	str	r3, [r5, #20]
 8006d56:	3320      	adds	r3, #32
 8006d58:	766b      	strb	r3, [r5, #25]
 8006d5a:	3310      	adds	r3, #16
 8006d5c:	76ab      	strb	r3, [r5, #26]
 8006d5e:	9707      	str	r7, [sp, #28]
 8006d60:	9f03      	ldr	r7, [sp, #12]
 8006d62:	783b      	ldrb	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <_vfiprintf_r+0x98>
 8006d68:	2b25      	cmp	r3, #37	; 0x25
 8006d6a:	d14e      	bne.n	8006e0a <_vfiprintf_r+0x136>
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	1afb      	subs	r3, r7, r3
 8006d70:	9305      	str	r3, [sp, #20]
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	429f      	cmp	r7, r3
 8006d76:	d00d      	beq.n	8006d94 <_vfiprintf_r+0xc0>
 8006d78:	9b05      	ldr	r3, [sp, #20]
 8006d7a:	0021      	movs	r1, r4
 8006d7c:	0030      	movs	r0, r6
 8006d7e:	9a03      	ldr	r2, [sp, #12]
 8006d80:	f7ff ff96 	bl	8006cb0 <__sfputs_r>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d100      	bne.n	8006d8a <_vfiprintf_r+0xb6>
 8006d88:	e0b5      	b.n	8006ef6 <_vfiprintf_r+0x222>
 8006d8a:	696a      	ldr	r2, [r5, #20]
 8006d8c:	9b05      	ldr	r3, [sp, #20]
 8006d8e:	4694      	mov	ip, r2
 8006d90:	4463      	add	r3, ip
 8006d92:	616b      	str	r3, [r5, #20]
 8006d94:	783b      	ldrb	r3, [r7, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d100      	bne.n	8006d9c <_vfiprintf_r+0xc8>
 8006d9a:	e0ac      	b.n	8006ef6 <_vfiprintf_r+0x222>
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	1c7b      	adds	r3, r7, #1
 8006da0:	9303      	str	r3, [sp, #12]
 8006da2:	2300      	movs	r3, #0
 8006da4:	4252      	negs	r2, r2
 8006da6:	606a      	str	r2, [r5, #4]
 8006da8:	a904      	add	r1, sp, #16
 8006daa:	3254      	adds	r2, #84	; 0x54
 8006dac:	1852      	adds	r2, r2, r1
 8006dae:	602b      	str	r3, [r5, #0]
 8006db0:	60eb      	str	r3, [r5, #12]
 8006db2:	60ab      	str	r3, [r5, #8]
 8006db4:	7013      	strb	r3, [r2, #0]
 8006db6:	65ab      	str	r3, [r5, #88]	; 0x58
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	2205      	movs	r2, #5
 8006dbc:	7819      	ldrb	r1, [r3, #0]
 8006dbe:	485d      	ldr	r0, [pc, #372]	; (8006f34 <_vfiprintf_r+0x260>)
 8006dc0:	f000 fd78 	bl	80078b4 <memchr>
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	1c5f      	adds	r7, r3, #1
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d120      	bne.n	8006e0e <_vfiprintf_r+0x13a>
 8006dcc:	682a      	ldr	r2, [r5, #0]
 8006dce:	06d3      	lsls	r3, r2, #27
 8006dd0:	d504      	bpl.n	8006ddc <_vfiprintf_r+0x108>
 8006dd2:	2353      	movs	r3, #83	; 0x53
 8006dd4:	a904      	add	r1, sp, #16
 8006dd6:	185b      	adds	r3, r3, r1
 8006dd8:	2120      	movs	r1, #32
 8006dda:	7019      	strb	r1, [r3, #0]
 8006ddc:	0713      	lsls	r3, r2, #28
 8006dde:	d504      	bpl.n	8006dea <_vfiprintf_r+0x116>
 8006de0:	2353      	movs	r3, #83	; 0x53
 8006de2:	a904      	add	r1, sp, #16
 8006de4:	185b      	adds	r3, r3, r1
 8006de6:	212b      	movs	r1, #43	; 0x2b
 8006de8:	7019      	strb	r1, [r3, #0]
 8006dea:	9b03      	ldr	r3, [sp, #12]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b2a      	cmp	r3, #42	; 0x2a
 8006df0:	d016      	beq.n	8006e20 <_vfiprintf_r+0x14c>
 8006df2:	2100      	movs	r1, #0
 8006df4:	68eb      	ldr	r3, [r5, #12]
 8006df6:	9f03      	ldr	r7, [sp, #12]
 8006df8:	783a      	ldrb	r2, [r7, #0]
 8006dfa:	1c78      	adds	r0, r7, #1
 8006dfc:	3a30      	subs	r2, #48	; 0x30
 8006dfe:	4684      	mov	ip, r0
 8006e00:	2a09      	cmp	r2, #9
 8006e02:	d94f      	bls.n	8006ea4 <_vfiprintf_r+0x1d0>
 8006e04:	2900      	cmp	r1, #0
 8006e06:	d111      	bne.n	8006e2c <_vfiprintf_r+0x158>
 8006e08:	e017      	b.n	8006e3a <_vfiprintf_r+0x166>
 8006e0a:	3701      	adds	r7, #1
 8006e0c:	e7a9      	b.n	8006d62 <_vfiprintf_r+0x8e>
 8006e0e:	4b49      	ldr	r3, [pc, #292]	; (8006f34 <_vfiprintf_r+0x260>)
 8006e10:	682a      	ldr	r2, [r5, #0]
 8006e12:	1ac0      	subs	r0, r0, r3
 8006e14:	2301      	movs	r3, #1
 8006e16:	4083      	lsls	r3, r0
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	602b      	str	r3, [r5, #0]
 8006e1c:	9703      	str	r7, [sp, #12]
 8006e1e:	e7cb      	b.n	8006db8 <_vfiprintf_r+0xe4>
 8006e20:	9b07      	ldr	r3, [sp, #28]
 8006e22:	1d19      	adds	r1, r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	9107      	str	r1, [sp, #28]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	db01      	blt.n	8006e30 <_vfiprintf_r+0x15c>
 8006e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e2e:	e004      	b.n	8006e3a <_vfiprintf_r+0x166>
 8006e30:	425b      	negs	r3, r3
 8006e32:	60eb      	str	r3, [r5, #12]
 8006e34:	2302      	movs	r3, #2
 8006e36:	4313      	orrs	r3, r2
 8006e38:	602b      	str	r3, [r5, #0]
 8006e3a:	783b      	ldrb	r3, [r7, #0]
 8006e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e3e:	d10a      	bne.n	8006e56 <_vfiprintf_r+0x182>
 8006e40:	787b      	ldrb	r3, [r7, #1]
 8006e42:	2b2a      	cmp	r3, #42	; 0x2a
 8006e44:	d137      	bne.n	8006eb6 <_vfiprintf_r+0x1e2>
 8006e46:	9b07      	ldr	r3, [sp, #28]
 8006e48:	3702      	adds	r7, #2
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	9207      	str	r2, [sp, #28]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	db2d      	blt.n	8006eb0 <_vfiprintf_r+0x1dc>
 8006e54:	9309      	str	r3, [sp, #36]	; 0x24
 8006e56:	2203      	movs	r2, #3
 8006e58:	7839      	ldrb	r1, [r7, #0]
 8006e5a:	4837      	ldr	r0, [pc, #220]	; (8006f38 <_vfiprintf_r+0x264>)
 8006e5c:	f000 fd2a 	bl	80078b4 <memchr>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d007      	beq.n	8006e74 <_vfiprintf_r+0x1a0>
 8006e64:	4b34      	ldr	r3, [pc, #208]	; (8006f38 <_vfiprintf_r+0x264>)
 8006e66:	682a      	ldr	r2, [r5, #0]
 8006e68:	1ac0      	subs	r0, r0, r3
 8006e6a:	2340      	movs	r3, #64	; 0x40
 8006e6c:	4083      	lsls	r3, r0
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	3701      	adds	r7, #1
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	7839      	ldrb	r1, [r7, #0]
 8006e76:	1c7b      	adds	r3, r7, #1
 8006e78:	2206      	movs	r2, #6
 8006e7a:	4830      	ldr	r0, [pc, #192]	; (8006f3c <_vfiprintf_r+0x268>)
 8006e7c:	9303      	str	r3, [sp, #12]
 8006e7e:	7629      	strb	r1, [r5, #24]
 8006e80:	f000 fd18 	bl	80078b4 <memchr>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d045      	beq.n	8006f14 <_vfiprintf_r+0x240>
 8006e88:	4b2d      	ldr	r3, [pc, #180]	; (8006f40 <_vfiprintf_r+0x26c>)
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d127      	bne.n	8006ede <_vfiprintf_r+0x20a>
 8006e8e:	2207      	movs	r2, #7
 8006e90:	9b07      	ldr	r3, [sp, #28]
 8006e92:	3307      	adds	r3, #7
 8006e94:	4393      	bics	r3, r2
 8006e96:	3308      	adds	r3, #8
 8006e98:	9307      	str	r3, [sp, #28]
 8006e9a:	696b      	ldr	r3, [r5, #20]
 8006e9c:	9a04      	ldr	r2, [sp, #16]
 8006e9e:	189b      	adds	r3, r3, r2
 8006ea0:	616b      	str	r3, [r5, #20]
 8006ea2:	e75d      	b.n	8006d60 <_vfiprintf_r+0x8c>
 8006ea4:	210a      	movs	r1, #10
 8006ea6:	434b      	muls	r3, r1
 8006ea8:	4667      	mov	r7, ip
 8006eaa:	189b      	adds	r3, r3, r2
 8006eac:	3909      	subs	r1, #9
 8006eae:	e7a3      	b.n	8006df8 <_vfiprintf_r+0x124>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	425b      	negs	r3, r3
 8006eb4:	e7ce      	b.n	8006e54 <_vfiprintf_r+0x180>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	001a      	movs	r2, r3
 8006eba:	3701      	adds	r7, #1
 8006ebc:	606b      	str	r3, [r5, #4]
 8006ebe:	7839      	ldrb	r1, [r7, #0]
 8006ec0:	1c78      	adds	r0, r7, #1
 8006ec2:	3930      	subs	r1, #48	; 0x30
 8006ec4:	4684      	mov	ip, r0
 8006ec6:	2909      	cmp	r1, #9
 8006ec8:	d903      	bls.n	8006ed2 <_vfiprintf_r+0x1fe>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0c3      	beq.n	8006e56 <_vfiprintf_r+0x182>
 8006ece:	9209      	str	r2, [sp, #36]	; 0x24
 8006ed0:	e7c1      	b.n	8006e56 <_vfiprintf_r+0x182>
 8006ed2:	230a      	movs	r3, #10
 8006ed4:	435a      	muls	r2, r3
 8006ed6:	4667      	mov	r7, ip
 8006ed8:	1852      	adds	r2, r2, r1
 8006eda:	3b09      	subs	r3, #9
 8006edc:	e7ef      	b.n	8006ebe <_vfiprintf_r+0x1ea>
 8006ede:	ab07      	add	r3, sp, #28
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	0022      	movs	r2, r4
 8006ee4:	0029      	movs	r1, r5
 8006ee6:	0030      	movs	r0, r6
 8006ee8:	4b16      	ldr	r3, [pc, #88]	; (8006f44 <_vfiprintf_r+0x270>)
 8006eea:	e000      	b.n	8006eee <_vfiprintf_r+0x21a>
 8006eec:	bf00      	nop
 8006eee:	9004      	str	r0, [sp, #16]
 8006ef0:	9b04      	ldr	r3, [sp, #16]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	d1d1      	bne.n	8006e9a <_vfiprintf_r+0x1c6>
 8006ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ef8:	07db      	lsls	r3, r3, #31
 8006efa:	d405      	bmi.n	8006f08 <_vfiprintf_r+0x234>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	059b      	lsls	r3, r3, #22
 8006f00:	d402      	bmi.n	8006f08 <_vfiprintf_r+0x234>
 8006f02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f04:	f000 fc68 	bl	80077d8 <__retarget_lock_release_recursive>
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	065b      	lsls	r3, r3, #25
 8006f0c:	d500      	bpl.n	8006f10 <_vfiprintf_r+0x23c>
 8006f0e:	e70a      	b.n	8006d26 <_vfiprintf_r+0x52>
 8006f10:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006f12:	e70a      	b.n	8006d2a <_vfiprintf_r+0x56>
 8006f14:	ab07      	add	r3, sp, #28
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	0022      	movs	r2, r4
 8006f1a:	0029      	movs	r1, r5
 8006f1c:	0030      	movs	r0, r6
 8006f1e:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <_vfiprintf_r+0x270>)
 8006f20:	f000 f882 	bl	8007028 <_printf_i>
 8006f24:	e7e3      	b.n	8006eee <_vfiprintf_r+0x21a>
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	080089c8 	.word	0x080089c8
 8006f2c:	080089e8 	.word	0x080089e8
 8006f30:	080089a8 	.word	0x080089a8
 8006f34:	08008974 	.word	0x08008974
 8006f38:	0800897a 	.word	0x0800897a
 8006f3c:	0800897e 	.word	0x0800897e
 8006f40:	00000000 	.word	0x00000000
 8006f44:	08006cb1 	.word	0x08006cb1

08006f48 <_printf_common>:
 8006f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f4a:	0015      	movs	r5, r2
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	688a      	ldr	r2, [r1, #8]
 8006f50:	690b      	ldr	r3, [r1, #16]
 8006f52:	000c      	movs	r4, r1
 8006f54:	9000      	str	r0, [sp, #0]
 8006f56:	4293      	cmp	r3, r2
 8006f58:	da00      	bge.n	8006f5c <_printf_common+0x14>
 8006f5a:	0013      	movs	r3, r2
 8006f5c:	0022      	movs	r2, r4
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	3243      	adds	r2, #67	; 0x43
 8006f62:	7812      	ldrb	r2, [r2, #0]
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	d001      	beq.n	8006f6c <_printf_common+0x24>
 8006f68:	3301      	adds	r3, #1
 8006f6a:	602b      	str	r3, [r5, #0]
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	069b      	lsls	r3, r3, #26
 8006f70:	d502      	bpl.n	8006f78 <_printf_common+0x30>
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	3302      	adds	r3, #2
 8006f76:	602b      	str	r3, [r5, #0]
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	2306      	movs	r3, #6
 8006f7c:	0017      	movs	r7, r2
 8006f7e:	401f      	ands	r7, r3
 8006f80:	421a      	tst	r2, r3
 8006f82:	d027      	beq.n	8006fd4 <_printf_common+0x8c>
 8006f84:	0023      	movs	r3, r4
 8006f86:	3343      	adds	r3, #67	; 0x43
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	1e5a      	subs	r2, r3, #1
 8006f8c:	4193      	sbcs	r3, r2
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	0692      	lsls	r2, r2, #26
 8006f92:	d430      	bmi.n	8006ff6 <_printf_common+0xae>
 8006f94:	0022      	movs	r2, r4
 8006f96:	9901      	ldr	r1, [sp, #4]
 8006f98:	9800      	ldr	r0, [sp, #0]
 8006f9a:	9e08      	ldr	r6, [sp, #32]
 8006f9c:	3243      	adds	r2, #67	; 0x43
 8006f9e:	47b0      	blx	r6
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d025      	beq.n	8006ff0 <_printf_common+0xa8>
 8006fa4:	2306      	movs	r3, #6
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	682a      	ldr	r2, [r5, #0]
 8006faa:	68e1      	ldr	r1, [r4, #12]
 8006fac:	2500      	movs	r5, #0
 8006fae:	4003      	ands	r3, r0
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d103      	bne.n	8006fbc <_printf_common+0x74>
 8006fb4:	1a8d      	subs	r5, r1, r2
 8006fb6:	43eb      	mvns	r3, r5
 8006fb8:	17db      	asrs	r3, r3, #31
 8006fba:	401d      	ands	r5, r3
 8006fbc:	68a3      	ldr	r3, [r4, #8]
 8006fbe:	6922      	ldr	r2, [r4, #16]
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	dd01      	ble.n	8006fc8 <_printf_common+0x80>
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	18ed      	adds	r5, r5, r3
 8006fc8:	2700      	movs	r7, #0
 8006fca:	42bd      	cmp	r5, r7
 8006fcc:	d120      	bne.n	8007010 <_printf_common+0xc8>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	e010      	b.n	8006ff4 <_printf_common+0xac>
 8006fd2:	3701      	adds	r7, #1
 8006fd4:	68e3      	ldr	r3, [r4, #12]
 8006fd6:	682a      	ldr	r2, [r5, #0]
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	42bb      	cmp	r3, r7
 8006fdc:	ddd2      	ble.n	8006f84 <_printf_common+0x3c>
 8006fde:	0022      	movs	r2, r4
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	9901      	ldr	r1, [sp, #4]
 8006fe4:	9800      	ldr	r0, [sp, #0]
 8006fe6:	9e08      	ldr	r6, [sp, #32]
 8006fe8:	3219      	adds	r2, #25
 8006fea:	47b0      	blx	r6
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d1f0      	bne.n	8006fd2 <_printf_common+0x8a>
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	4240      	negs	r0, r0
 8006ff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ff6:	2030      	movs	r0, #48	; 0x30
 8006ff8:	18e1      	adds	r1, r4, r3
 8006ffa:	3143      	adds	r1, #67	; 0x43
 8006ffc:	7008      	strb	r0, [r1, #0]
 8006ffe:	0021      	movs	r1, r4
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	3145      	adds	r1, #69	; 0x45
 8007004:	7809      	ldrb	r1, [r1, #0]
 8007006:	18a2      	adds	r2, r4, r2
 8007008:	3243      	adds	r2, #67	; 0x43
 800700a:	3302      	adds	r3, #2
 800700c:	7011      	strb	r1, [r2, #0]
 800700e:	e7c1      	b.n	8006f94 <_printf_common+0x4c>
 8007010:	0022      	movs	r2, r4
 8007012:	2301      	movs	r3, #1
 8007014:	9901      	ldr	r1, [sp, #4]
 8007016:	9800      	ldr	r0, [sp, #0]
 8007018:	9e08      	ldr	r6, [sp, #32]
 800701a:	321a      	adds	r2, #26
 800701c:	47b0      	blx	r6
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	d0e6      	beq.n	8006ff0 <_printf_common+0xa8>
 8007022:	3701      	adds	r7, #1
 8007024:	e7d1      	b.n	8006fca <_printf_common+0x82>
	...

08007028 <_printf_i>:
 8007028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800702a:	b08b      	sub	sp, #44	; 0x2c
 800702c:	9206      	str	r2, [sp, #24]
 800702e:	000a      	movs	r2, r1
 8007030:	3243      	adds	r2, #67	; 0x43
 8007032:	9307      	str	r3, [sp, #28]
 8007034:	9005      	str	r0, [sp, #20]
 8007036:	9204      	str	r2, [sp, #16]
 8007038:	7e0a      	ldrb	r2, [r1, #24]
 800703a:	000c      	movs	r4, r1
 800703c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800703e:	2a78      	cmp	r2, #120	; 0x78
 8007040:	d806      	bhi.n	8007050 <_printf_i+0x28>
 8007042:	2a62      	cmp	r2, #98	; 0x62
 8007044:	d808      	bhi.n	8007058 <_printf_i+0x30>
 8007046:	2a00      	cmp	r2, #0
 8007048:	d100      	bne.n	800704c <_printf_i+0x24>
 800704a:	e0c0      	b.n	80071ce <_printf_i+0x1a6>
 800704c:	2a58      	cmp	r2, #88	; 0x58
 800704e:	d052      	beq.n	80070f6 <_printf_i+0xce>
 8007050:	0026      	movs	r6, r4
 8007052:	3642      	adds	r6, #66	; 0x42
 8007054:	7032      	strb	r2, [r6, #0]
 8007056:	e022      	b.n	800709e <_printf_i+0x76>
 8007058:	0010      	movs	r0, r2
 800705a:	3863      	subs	r0, #99	; 0x63
 800705c:	2815      	cmp	r0, #21
 800705e:	d8f7      	bhi.n	8007050 <_printf_i+0x28>
 8007060:	f7f9 f852 	bl	8000108 <__gnu_thumb1_case_shi>
 8007064:	001f0016 	.word	0x001f0016
 8007068:	fff6fff6 	.word	0xfff6fff6
 800706c:	fff6fff6 	.word	0xfff6fff6
 8007070:	fff6001f 	.word	0xfff6001f
 8007074:	fff6fff6 	.word	0xfff6fff6
 8007078:	00a8fff6 	.word	0x00a8fff6
 800707c:	009a0036 	.word	0x009a0036
 8007080:	fff6fff6 	.word	0xfff6fff6
 8007084:	fff600b9 	.word	0xfff600b9
 8007088:	fff60036 	.word	0xfff60036
 800708c:	009efff6 	.word	0x009efff6
 8007090:	0026      	movs	r6, r4
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	3642      	adds	r6, #66	; 0x42
 8007096:	1d11      	adds	r1, r2, #4
 8007098:	6019      	str	r1, [r3, #0]
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	7033      	strb	r3, [r6, #0]
 800709e:	2301      	movs	r3, #1
 80070a0:	e0a7      	b.n	80071f2 <_printf_i+0x1ca>
 80070a2:	6808      	ldr	r0, [r1, #0]
 80070a4:	6819      	ldr	r1, [r3, #0]
 80070a6:	1d0a      	adds	r2, r1, #4
 80070a8:	0605      	lsls	r5, r0, #24
 80070aa:	d50b      	bpl.n	80070c4 <_printf_i+0x9c>
 80070ac:	680d      	ldr	r5, [r1, #0]
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	2d00      	cmp	r5, #0
 80070b2:	da03      	bge.n	80070bc <_printf_i+0x94>
 80070b4:	232d      	movs	r3, #45	; 0x2d
 80070b6:	9a04      	ldr	r2, [sp, #16]
 80070b8:	426d      	negs	r5, r5
 80070ba:	7013      	strb	r3, [r2, #0]
 80070bc:	4b61      	ldr	r3, [pc, #388]	; (8007244 <_printf_i+0x21c>)
 80070be:	270a      	movs	r7, #10
 80070c0:	9303      	str	r3, [sp, #12]
 80070c2:	e032      	b.n	800712a <_printf_i+0x102>
 80070c4:	680d      	ldr	r5, [r1, #0]
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	0641      	lsls	r1, r0, #25
 80070ca:	d5f1      	bpl.n	80070b0 <_printf_i+0x88>
 80070cc:	b22d      	sxth	r5, r5
 80070ce:	e7ef      	b.n	80070b0 <_printf_i+0x88>
 80070d0:	680d      	ldr	r5, [r1, #0]
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	1d08      	adds	r0, r1, #4
 80070d6:	6018      	str	r0, [r3, #0]
 80070d8:	062e      	lsls	r6, r5, #24
 80070da:	d501      	bpl.n	80070e0 <_printf_i+0xb8>
 80070dc:	680d      	ldr	r5, [r1, #0]
 80070de:	e003      	b.n	80070e8 <_printf_i+0xc0>
 80070e0:	066d      	lsls	r5, r5, #25
 80070e2:	d5fb      	bpl.n	80070dc <_printf_i+0xb4>
 80070e4:	680d      	ldr	r5, [r1, #0]
 80070e6:	b2ad      	uxth	r5, r5
 80070e8:	4b56      	ldr	r3, [pc, #344]	; (8007244 <_printf_i+0x21c>)
 80070ea:	270a      	movs	r7, #10
 80070ec:	9303      	str	r3, [sp, #12]
 80070ee:	2a6f      	cmp	r2, #111	; 0x6f
 80070f0:	d117      	bne.n	8007122 <_printf_i+0xfa>
 80070f2:	2708      	movs	r7, #8
 80070f4:	e015      	b.n	8007122 <_printf_i+0xfa>
 80070f6:	3145      	adds	r1, #69	; 0x45
 80070f8:	700a      	strb	r2, [r1, #0]
 80070fa:	4a52      	ldr	r2, [pc, #328]	; (8007244 <_printf_i+0x21c>)
 80070fc:	9203      	str	r2, [sp, #12]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	6821      	ldr	r1, [r4, #0]
 8007102:	ca20      	ldmia	r2!, {r5}
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	0608      	lsls	r0, r1, #24
 8007108:	d550      	bpl.n	80071ac <_printf_i+0x184>
 800710a:	07cb      	lsls	r3, r1, #31
 800710c:	d502      	bpl.n	8007114 <_printf_i+0xec>
 800710e:	2320      	movs	r3, #32
 8007110:	4319      	orrs	r1, r3
 8007112:	6021      	str	r1, [r4, #0]
 8007114:	2710      	movs	r7, #16
 8007116:	2d00      	cmp	r5, #0
 8007118:	d103      	bne.n	8007122 <_printf_i+0xfa>
 800711a:	2320      	movs	r3, #32
 800711c:	6822      	ldr	r2, [r4, #0]
 800711e:	439a      	bics	r2, r3
 8007120:	6022      	str	r2, [r4, #0]
 8007122:	0023      	movs	r3, r4
 8007124:	2200      	movs	r2, #0
 8007126:	3343      	adds	r3, #67	; 0x43
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	6863      	ldr	r3, [r4, #4]
 800712c:	60a3      	str	r3, [r4, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	db03      	blt.n	800713a <_printf_i+0x112>
 8007132:	2204      	movs	r2, #4
 8007134:	6821      	ldr	r1, [r4, #0]
 8007136:	4391      	bics	r1, r2
 8007138:	6021      	str	r1, [r4, #0]
 800713a:	2d00      	cmp	r5, #0
 800713c:	d102      	bne.n	8007144 <_printf_i+0x11c>
 800713e:	9e04      	ldr	r6, [sp, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00c      	beq.n	800715e <_printf_i+0x136>
 8007144:	9e04      	ldr	r6, [sp, #16]
 8007146:	0028      	movs	r0, r5
 8007148:	0039      	movs	r1, r7
 800714a:	f7f9 f86d 	bl	8000228 <__aeabi_uidivmod>
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	3e01      	subs	r6, #1
 8007152:	5c5b      	ldrb	r3, [r3, r1]
 8007154:	7033      	strb	r3, [r6, #0]
 8007156:	002b      	movs	r3, r5
 8007158:	0005      	movs	r5, r0
 800715a:	429f      	cmp	r7, r3
 800715c:	d9f3      	bls.n	8007146 <_printf_i+0x11e>
 800715e:	2f08      	cmp	r7, #8
 8007160:	d109      	bne.n	8007176 <_printf_i+0x14e>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	07db      	lsls	r3, r3, #31
 8007166:	d506      	bpl.n	8007176 <_printf_i+0x14e>
 8007168:	6863      	ldr	r3, [r4, #4]
 800716a:	6922      	ldr	r2, [r4, #16]
 800716c:	4293      	cmp	r3, r2
 800716e:	dc02      	bgt.n	8007176 <_printf_i+0x14e>
 8007170:	2330      	movs	r3, #48	; 0x30
 8007172:	3e01      	subs	r6, #1
 8007174:	7033      	strb	r3, [r6, #0]
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	1b9b      	subs	r3, r3, r6
 800717a:	6123      	str	r3, [r4, #16]
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	0021      	movs	r1, r4
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	9805      	ldr	r0, [sp, #20]
 8007184:	9b06      	ldr	r3, [sp, #24]
 8007186:	aa09      	add	r2, sp, #36	; 0x24
 8007188:	f7ff fede 	bl	8006f48 <_printf_common>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d135      	bne.n	80071fc <_printf_i+0x1d4>
 8007190:	2001      	movs	r0, #1
 8007192:	4240      	negs	r0, r0
 8007194:	b00b      	add	sp, #44	; 0x2c
 8007196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007198:	2220      	movs	r2, #32
 800719a:	6809      	ldr	r1, [r1, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	6022      	str	r2, [r4, #0]
 80071a0:	0022      	movs	r2, r4
 80071a2:	2178      	movs	r1, #120	; 0x78
 80071a4:	3245      	adds	r2, #69	; 0x45
 80071a6:	7011      	strb	r1, [r2, #0]
 80071a8:	4a27      	ldr	r2, [pc, #156]	; (8007248 <_printf_i+0x220>)
 80071aa:	e7a7      	b.n	80070fc <_printf_i+0xd4>
 80071ac:	0648      	lsls	r0, r1, #25
 80071ae:	d5ac      	bpl.n	800710a <_printf_i+0xe2>
 80071b0:	b2ad      	uxth	r5, r5
 80071b2:	e7aa      	b.n	800710a <_printf_i+0xe2>
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	680d      	ldr	r5, [r1, #0]
 80071b8:	1d10      	adds	r0, r2, #4
 80071ba:	6949      	ldr	r1, [r1, #20]
 80071bc:	6018      	str	r0, [r3, #0]
 80071be:	6813      	ldr	r3, [r2, #0]
 80071c0:	062e      	lsls	r6, r5, #24
 80071c2:	d501      	bpl.n	80071c8 <_printf_i+0x1a0>
 80071c4:	6019      	str	r1, [r3, #0]
 80071c6:	e002      	b.n	80071ce <_printf_i+0x1a6>
 80071c8:	066d      	lsls	r5, r5, #25
 80071ca:	d5fb      	bpl.n	80071c4 <_printf_i+0x19c>
 80071cc:	8019      	strh	r1, [r3, #0]
 80071ce:	2300      	movs	r3, #0
 80071d0:	9e04      	ldr	r6, [sp, #16]
 80071d2:	6123      	str	r3, [r4, #16]
 80071d4:	e7d2      	b.n	800717c <_printf_i+0x154>
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	1d11      	adds	r1, r2, #4
 80071da:	6019      	str	r1, [r3, #0]
 80071dc:	6816      	ldr	r6, [r2, #0]
 80071de:	2100      	movs	r1, #0
 80071e0:	0030      	movs	r0, r6
 80071e2:	6862      	ldr	r2, [r4, #4]
 80071e4:	f000 fb66 	bl	80078b4 <memchr>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d001      	beq.n	80071f0 <_printf_i+0x1c8>
 80071ec:	1b80      	subs	r0, r0, r6
 80071ee:	6060      	str	r0, [r4, #4]
 80071f0:	6863      	ldr	r3, [r4, #4]
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	2300      	movs	r3, #0
 80071f6:	9a04      	ldr	r2, [sp, #16]
 80071f8:	7013      	strb	r3, [r2, #0]
 80071fa:	e7bf      	b.n	800717c <_printf_i+0x154>
 80071fc:	6923      	ldr	r3, [r4, #16]
 80071fe:	0032      	movs	r2, r6
 8007200:	9906      	ldr	r1, [sp, #24]
 8007202:	9805      	ldr	r0, [sp, #20]
 8007204:	9d07      	ldr	r5, [sp, #28]
 8007206:	47a8      	blx	r5
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d0c1      	beq.n	8007190 <_printf_i+0x168>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	079b      	lsls	r3, r3, #30
 8007210:	d415      	bmi.n	800723e <_printf_i+0x216>
 8007212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007214:	68e0      	ldr	r0, [r4, #12]
 8007216:	4298      	cmp	r0, r3
 8007218:	dabc      	bge.n	8007194 <_printf_i+0x16c>
 800721a:	0018      	movs	r0, r3
 800721c:	e7ba      	b.n	8007194 <_printf_i+0x16c>
 800721e:	0022      	movs	r2, r4
 8007220:	2301      	movs	r3, #1
 8007222:	9906      	ldr	r1, [sp, #24]
 8007224:	9805      	ldr	r0, [sp, #20]
 8007226:	9e07      	ldr	r6, [sp, #28]
 8007228:	3219      	adds	r2, #25
 800722a:	47b0      	blx	r6
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d0af      	beq.n	8007190 <_printf_i+0x168>
 8007230:	3501      	adds	r5, #1
 8007232:	68e3      	ldr	r3, [r4, #12]
 8007234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	42ab      	cmp	r3, r5
 800723a:	dcf0      	bgt.n	800721e <_printf_i+0x1f6>
 800723c:	e7e9      	b.n	8007212 <_printf_i+0x1ea>
 800723e:	2500      	movs	r5, #0
 8007240:	e7f7      	b.n	8007232 <_printf_i+0x20a>
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	08008985 	.word	0x08008985
 8007248:	08008996 	.word	0x08008996

0800724c <siprintf>:
 800724c:	b40e      	push	{r1, r2, r3}
 800724e:	b500      	push	{lr}
 8007250:	490b      	ldr	r1, [pc, #44]	; (8007280 <siprintf+0x34>)
 8007252:	b09c      	sub	sp, #112	; 0x70
 8007254:	ab1d      	add	r3, sp, #116	; 0x74
 8007256:	9002      	str	r0, [sp, #8]
 8007258:	9006      	str	r0, [sp, #24]
 800725a:	9107      	str	r1, [sp, #28]
 800725c:	9104      	str	r1, [sp, #16]
 800725e:	4809      	ldr	r0, [pc, #36]	; (8007284 <siprintf+0x38>)
 8007260:	4909      	ldr	r1, [pc, #36]	; (8007288 <siprintf+0x3c>)
 8007262:	cb04      	ldmia	r3!, {r2}
 8007264:	9105      	str	r1, [sp, #20]
 8007266:	6800      	ldr	r0, [r0, #0]
 8007268:	a902      	add	r1, sp, #8
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	f000 fc70 	bl	8007b50 <_svfiprintf_r>
 8007270:	2300      	movs	r3, #0
 8007272:	9a02      	ldr	r2, [sp, #8]
 8007274:	7013      	strb	r3, [r2, #0]
 8007276:	b01c      	add	sp, #112	; 0x70
 8007278:	bc08      	pop	{r3}
 800727a:	b003      	add	sp, #12
 800727c:	4718      	bx	r3
 800727e:	46c0      	nop			; (mov r8, r8)
 8007280:	7fffffff 	.word	0x7fffffff
 8007284:	200000f4 	.word	0x200000f4
 8007288:	ffff0208 	.word	0xffff0208

0800728c <__swbuf_r>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	0005      	movs	r5, r0
 8007290:	000e      	movs	r6, r1
 8007292:	0014      	movs	r4, r2
 8007294:	2800      	cmp	r0, #0
 8007296:	d004      	beq.n	80072a2 <__swbuf_r+0x16>
 8007298:	6983      	ldr	r3, [r0, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <__swbuf_r+0x16>
 800729e:	f000 f9f9 	bl	8007694 <__sinit>
 80072a2:	4b22      	ldr	r3, [pc, #136]	; (800732c <__swbuf_r+0xa0>)
 80072a4:	429c      	cmp	r4, r3
 80072a6:	d12e      	bne.n	8007306 <__swbuf_r+0x7a>
 80072a8:	686c      	ldr	r4, [r5, #4]
 80072aa:	69a3      	ldr	r3, [r4, #24]
 80072ac:	60a3      	str	r3, [r4, #8]
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	071b      	lsls	r3, r3, #28
 80072b2:	d532      	bpl.n	800731a <__swbuf_r+0x8e>
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d02f      	beq.n	800731a <__swbuf_r+0x8e>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	6922      	ldr	r2, [r4, #16]
 80072be:	b2f7      	uxtb	r7, r6
 80072c0:	1a98      	subs	r0, r3, r2
 80072c2:	6963      	ldr	r3, [r4, #20]
 80072c4:	b2f6      	uxtb	r6, r6
 80072c6:	4283      	cmp	r3, r0
 80072c8:	dc05      	bgt.n	80072d6 <__swbuf_r+0x4a>
 80072ca:	0021      	movs	r1, r4
 80072cc:	0028      	movs	r0, r5
 80072ce:	f000 f93f 	bl	8007550 <_fflush_r>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d127      	bne.n	8007326 <__swbuf_r+0x9a>
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	3001      	adds	r0, #1
 80072da:	3b01      	subs	r3, #1
 80072dc:	60a3      	str	r3, [r4, #8]
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	701f      	strb	r7, [r3, #0]
 80072e6:	6963      	ldr	r3, [r4, #20]
 80072e8:	4283      	cmp	r3, r0
 80072ea:	d004      	beq.n	80072f6 <__swbuf_r+0x6a>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	07db      	lsls	r3, r3, #31
 80072f0:	d507      	bpl.n	8007302 <__swbuf_r+0x76>
 80072f2:	2e0a      	cmp	r6, #10
 80072f4:	d105      	bne.n	8007302 <__swbuf_r+0x76>
 80072f6:	0021      	movs	r1, r4
 80072f8:	0028      	movs	r0, r5
 80072fa:	f000 f929 	bl	8007550 <_fflush_r>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d111      	bne.n	8007326 <__swbuf_r+0x9a>
 8007302:	0030      	movs	r0, r6
 8007304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007306:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <__swbuf_r+0xa4>)
 8007308:	429c      	cmp	r4, r3
 800730a:	d101      	bne.n	8007310 <__swbuf_r+0x84>
 800730c:	68ac      	ldr	r4, [r5, #8]
 800730e:	e7cc      	b.n	80072aa <__swbuf_r+0x1e>
 8007310:	4b08      	ldr	r3, [pc, #32]	; (8007334 <__swbuf_r+0xa8>)
 8007312:	429c      	cmp	r4, r3
 8007314:	d1c9      	bne.n	80072aa <__swbuf_r+0x1e>
 8007316:	68ec      	ldr	r4, [r5, #12]
 8007318:	e7c7      	b.n	80072aa <__swbuf_r+0x1e>
 800731a:	0021      	movs	r1, r4
 800731c:	0028      	movs	r0, r5
 800731e:	f000 f80b 	bl	8007338 <__swsetup_r>
 8007322:	2800      	cmp	r0, #0
 8007324:	d0c9      	beq.n	80072ba <__swbuf_r+0x2e>
 8007326:	2601      	movs	r6, #1
 8007328:	4276      	negs	r6, r6
 800732a:	e7ea      	b.n	8007302 <__swbuf_r+0x76>
 800732c:	080089c8 	.word	0x080089c8
 8007330:	080089e8 	.word	0x080089e8
 8007334:	080089a8 	.word	0x080089a8

08007338 <__swsetup_r>:
 8007338:	4b37      	ldr	r3, [pc, #220]	; (8007418 <__swsetup_r+0xe0>)
 800733a:	b570      	push	{r4, r5, r6, lr}
 800733c:	681d      	ldr	r5, [r3, #0]
 800733e:	0006      	movs	r6, r0
 8007340:	000c      	movs	r4, r1
 8007342:	2d00      	cmp	r5, #0
 8007344:	d005      	beq.n	8007352 <__swsetup_r+0x1a>
 8007346:	69ab      	ldr	r3, [r5, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <__swsetup_r+0x1a>
 800734c:	0028      	movs	r0, r5
 800734e:	f000 f9a1 	bl	8007694 <__sinit>
 8007352:	4b32      	ldr	r3, [pc, #200]	; (800741c <__swsetup_r+0xe4>)
 8007354:	429c      	cmp	r4, r3
 8007356:	d10f      	bne.n	8007378 <__swsetup_r+0x40>
 8007358:	686c      	ldr	r4, [r5, #4]
 800735a:	230c      	movs	r3, #12
 800735c:	5ee2      	ldrsh	r2, [r4, r3]
 800735e:	b293      	uxth	r3, r2
 8007360:	0711      	lsls	r1, r2, #28
 8007362:	d42d      	bmi.n	80073c0 <__swsetup_r+0x88>
 8007364:	06d9      	lsls	r1, r3, #27
 8007366:	d411      	bmi.n	800738c <__swsetup_r+0x54>
 8007368:	2309      	movs	r3, #9
 800736a:	2001      	movs	r0, #1
 800736c:	6033      	str	r3, [r6, #0]
 800736e:	3337      	adds	r3, #55	; 0x37
 8007370:	4313      	orrs	r3, r2
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	4240      	negs	r0, r0
 8007376:	bd70      	pop	{r4, r5, r6, pc}
 8007378:	4b29      	ldr	r3, [pc, #164]	; (8007420 <__swsetup_r+0xe8>)
 800737a:	429c      	cmp	r4, r3
 800737c:	d101      	bne.n	8007382 <__swsetup_r+0x4a>
 800737e:	68ac      	ldr	r4, [r5, #8]
 8007380:	e7eb      	b.n	800735a <__swsetup_r+0x22>
 8007382:	4b28      	ldr	r3, [pc, #160]	; (8007424 <__swsetup_r+0xec>)
 8007384:	429c      	cmp	r4, r3
 8007386:	d1e8      	bne.n	800735a <__swsetup_r+0x22>
 8007388:	68ec      	ldr	r4, [r5, #12]
 800738a:	e7e6      	b.n	800735a <__swsetup_r+0x22>
 800738c:	075b      	lsls	r3, r3, #29
 800738e:	d513      	bpl.n	80073b8 <__swsetup_r+0x80>
 8007390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007392:	2900      	cmp	r1, #0
 8007394:	d008      	beq.n	80073a8 <__swsetup_r+0x70>
 8007396:	0023      	movs	r3, r4
 8007398:	3344      	adds	r3, #68	; 0x44
 800739a:	4299      	cmp	r1, r3
 800739c:	d002      	beq.n	80073a4 <__swsetup_r+0x6c>
 800739e:	0030      	movs	r0, r6
 80073a0:	f000 faa6 	bl	80078f0 <_free_r>
 80073a4:	2300      	movs	r3, #0
 80073a6:	6363      	str	r3, [r4, #52]	; 0x34
 80073a8:	2224      	movs	r2, #36	; 0x24
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	4393      	bics	r3, r2
 80073ae:	81a3      	strh	r3, [r4, #12]
 80073b0:	2300      	movs	r3, #0
 80073b2:	6063      	str	r3, [r4, #4]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	2308      	movs	r3, #8
 80073ba:	89a2      	ldrh	r2, [r4, #12]
 80073bc:	4313      	orrs	r3, r2
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <__swsetup_r+0xa6>
 80073c6:	21a0      	movs	r1, #160	; 0xa0
 80073c8:	2280      	movs	r2, #128	; 0x80
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	0089      	lsls	r1, r1, #2
 80073ce:	0092      	lsls	r2, r2, #2
 80073d0:	400b      	ands	r3, r1
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d003      	beq.n	80073de <__swsetup_r+0xa6>
 80073d6:	0021      	movs	r1, r4
 80073d8:	0030      	movs	r0, r6
 80073da:	f000 fa27 	bl	800782c <__smakebuf_r>
 80073de:	220c      	movs	r2, #12
 80073e0:	5ea3      	ldrsh	r3, [r4, r2]
 80073e2:	2001      	movs	r0, #1
 80073e4:	001a      	movs	r2, r3
 80073e6:	b299      	uxth	r1, r3
 80073e8:	4002      	ands	r2, r0
 80073ea:	4203      	tst	r3, r0
 80073ec:	d00f      	beq.n	800740e <__swsetup_r+0xd6>
 80073ee:	2200      	movs	r2, #0
 80073f0:	60a2      	str	r2, [r4, #8]
 80073f2:	6962      	ldr	r2, [r4, #20]
 80073f4:	4252      	negs	r2, r2
 80073f6:	61a2      	str	r2, [r4, #24]
 80073f8:	2000      	movs	r0, #0
 80073fa:	6922      	ldr	r2, [r4, #16]
 80073fc:	4282      	cmp	r2, r0
 80073fe:	d1ba      	bne.n	8007376 <__swsetup_r+0x3e>
 8007400:	060a      	lsls	r2, r1, #24
 8007402:	d5b8      	bpl.n	8007376 <__swsetup_r+0x3e>
 8007404:	2240      	movs	r2, #64	; 0x40
 8007406:	4313      	orrs	r3, r2
 8007408:	81a3      	strh	r3, [r4, #12]
 800740a:	3801      	subs	r0, #1
 800740c:	e7b3      	b.n	8007376 <__swsetup_r+0x3e>
 800740e:	0788      	lsls	r0, r1, #30
 8007410:	d400      	bmi.n	8007414 <__swsetup_r+0xdc>
 8007412:	6962      	ldr	r2, [r4, #20]
 8007414:	60a2      	str	r2, [r4, #8]
 8007416:	e7ef      	b.n	80073f8 <__swsetup_r+0xc0>
 8007418:	200000f4 	.word	0x200000f4
 800741c:	080089c8 	.word	0x080089c8
 8007420:	080089e8 	.word	0x080089e8
 8007424:	080089a8 	.word	0x080089a8

08007428 <abort>:
 8007428:	2006      	movs	r0, #6
 800742a:	b510      	push	{r4, lr}
 800742c:	f000 fccc 	bl	8007dc8 <raise>
 8007430:	2001      	movs	r0, #1
 8007432:	f000 ff81 	bl	8008338 <_exit>
	...

08007438 <__sflush_r>:
 8007438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800743a:	898b      	ldrh	r3, [r1, #12]
 800743c:	0005      	movs	r5, r0
 800743e:	000c      	movs	r4, r1
 8007440:	071a      	lsls	r2, r3, #28
 8007442:	d45f      	bmi.n	8007504 <__sflush_r+0xcc>
 8007444:	684a      	ldr	r2, [r1, #4]
 8007446:	2a00      	cmp	r2, #0
 8007448:	dc04      	bgt.n	8007454 <__sflush_r+0x1c>
 800744a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800744c:	2a00      	cmp	r2, #0
 800744e:	dc01      	bgt.n	8007454 <__sflush_r+0x1c>
 8007450:	2000      	movs	r0, #0
 8007452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007454:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007456:	2f00      	cmp	r7, #0
 8007458:	d0fa      	beq.n	8007450 <__sflush_r+0x18>
 800745a:	2200      	movs	r2, #0
 800745c:	2180      	movs	r1, #128	; 0x80
 800745e:	682e      	ldr	r6, [r5, #0]
 8007460:	602a      	str	r2, [r5, #0]
 8007462:	001a      	movs	r2, r3
 8007464:	0149      	lsls	r1, r1, #5
 8007466:	400a      	ands	r2, r1
 8007468:	420b      	tst	r3, r1
 800746a:	d034      	beq.n	80074d6 <__sflush_r+0x9e>
 800746c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800746e:	89a3      	ldrh	r3, [r4, #12]
 8007470:	075b      	lsls	r3, r3, #29
 8007472:	d506      	bpl.n	8007482 <__sflush_r+0x4a>
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	1ac0      	subs	r0, r0, r3
 8007478:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <__sflush_r+0x4a>
 800747e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007480:	1ac0      	subs	r0, r0, r3
 8007482:	0002      	movs	r2, r0
 8007484:	6a21      	ldr	r1, [r4, #32]
 8007486:	2300      	movs	r3, #0
 8007488:	0028      	movs	r0, r5
 800748a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800748c:	47b8      	blx	r7
 800748e:	89a1      	ldrh	r1, [r4, #12]
 8007490:	1c43      	adds	r3, r0, #1
 8007492:	d106      	bne.n	80074a2 <__sflush_r+0x6a>
 8007494:	682b      	ldr	r3, [r5, #0]
 8007496:	2b1d      	cmp	r3, #29
 8007498:	d831      	bhi.n	80074fe <__sflush_r+0xc6>
 800749a:	4a2c      	ldr	r2, [pc, #176]	; (800754c <__sflush_r+0x114>)
 800749c:	40da      	lsrs	r2, r3
 800749e:	07d3      	lsls	r3, r2, #31
 80074a0:	d52d      	bpl.n	80074fe <__sflush_r+0xc6>
 80074a2:	2300      	movs	r3, #0
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	04cb      	lsls	r3, r1, #19
 80074ac:	d505      	bpl.n	80074ba <__sflush_r+0x82>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	d102      	bne.n	80074b8 <__sflush_r+0x80>
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d100      	bne.n	80074ba <__sflush_r+0x82>
 80074b8:	6560      	str	r0, [r4, #84]	; 0x54
 80074ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074bc:	602e      	str	r6, [r5, #0]
 80074be:	2900      	cmp	r1, #0
 80074c0:	d0c6      	beq.n	8007450 <__sflush_r+0x18>
 80074c2:	0023      	movs	r3, r4
 80074c4:	3344      	adds	r3, #68	; 0x44
 80074c6:	4299      	cmp	r1, r3
 80074c8:	d002      	beq.n	80074d0 <__sflush_r+0x98>
 80074ca:	0028      	movs	r0, r5
 80074cc:	f000 fa10 	bl	80078f0 <_free_r>
 80074d0:	2000      	movs	r0, #0
 80074d2:	6360      	str	r0, [r4, #52]	; 0x34
 80074d4:	e7bd      	b.n	8007452 <__sflush_r+0x1a>
 80074d6:	2301      	movs	r3, #1
 80074d8:	0028      	movs	r0, r5
 80074da:	6a21      	ldr	r1, [r4, #32]
 80074dc:	47b8      	blx	r7
 80074de:	1c43      	adds	r3, r0, #1
 80074e0:	d1c5      	bne.n	800746e <__sflush_r+0x36>
 80074e2:	682b      	ldr	r3, [r5, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0c2      	beq.n	800746e <__sflush_r+0x36>
 80074e8:	2b1d      	cmp	r3, #29
 80074ea:	d001      	beq.n	80074f0 <__sflush_r+0xb8>
 80074ec:	2b16      	cmp	r3, #22
 80074ee:	d101      	bne.n	80074f4 <__sflush_r+0xbc>
 80074f0:	602e      	str	r6, [r5, #0]
 80074f2:	e7ad      	b.n	8007450 <__sflush_r+0x18>
 80074f4:	2340      	movs	r3, #64	; 0x40
 80074f6:	89a2      	ldrh	r2, [r4, #12]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	81a3      	strh	r3, [r4, #12]
 80074fc:	e7a9      	b.n	8007452 <__sflush_r+0x1a>
 80074fe:	2340      	movs	r3, #64	; 0x40
 8007500:	430b      	orrs	r3, r1
 8007502:	e7fa      	b.n	80074fa <__sflush_r+0xc2>
 8007504:	690f      	ldr	r7, [r1, #16]
 8007506:	2f00      	cmp	r7, #0
 8007508:	d0a2      	beq.n	8007450 <__sflush_r+0x18>
 800750a:	680a      	ldr	r2, [r1, #0]
 800750c:	600f      	str	r7, [r1, #0]
 800750e:	1bd2      	subs	r2, r2, r7
 8007510:	9201      	str	r2, [sp, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	079b      	lsls	r3, r3, #30
 8007516:	d100      	bne.n	800751a <__sflush_r+0xe2>
 8007518:	694a      	ldr	r2, [r1, #20]
 800751a:	60a2      	str	r2, [r4, #8]
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	dc00      	bgt.n	8007524 <__sflush_r+0xec>
 8007522:	e795      	b.n	8007450 <__sflush_r+0x18>
 8007524:	003a      	movs	r2, r7
 8007526:	0028      	movs	r0, r5
 8007528:	9b01      	ldr	r3, [sp, #4]
 800752a:	6a21      	ldr	r1, [r4, #32]
 800752c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800752e:	47b0      	blx	r6
 8007530:	2800      	cmp	r0, #0
 8007532:	dc06      	bgt.n	8007542 <__sflush_r+0x10a>
 8007534:	2340      	movs	r3, #64	; 0x40
 8007536:	2001      	movs	r0, #1
 8007538:	89a2      	ldrh	r2, [r4, #12]
 800753a:	4240      	negs	r0, r0
 800753c:	4313      	orrs	r3, r2
 800753e:	81a3      	strh	r3, [r4, #12]
 8007540:	e787      	b.n	8007452 <__sflush_r+0x1a>
 8007542:	9b01      	ldr	r3, [sp, #4]
 8007544:	183f      	adds	r7, r7, r0
 8007546:	1a1b      	subs	r3, r3, r0
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	e7e7      	b.n	800751c <__sflush_r+0xe4>
 800754c:	20400001 	.word	0x20400001

08007550 <_fflush_r>:
 8007550:	690b      	ldr	r3, [r1, #16]
 8007552:	b570      	push	{r4, r5, r6, lr}
 8007554:	0005      	movs	r5, r0
 8007556:	000c      	movs	r4, r1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d102      	bne.n	8007562 <_fflush_r+0x12>
 800755c:	2500      	movs	r5, #0
 800755e:	0028      	movs	r0, r5
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	2800      	cmp	r0, #0
 8007564:	d004      	beq.n	8007570 <_fflush_r+0x20>
 8007566:	6983      	ldr	r3, [r0, #24]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <_fflush_r+0x20>
 800756c:	f000 f892 	bl	8007694 <__sinit>
 8007570:	4b14      	ldr	r3, [pc, #80]	; (80075c4 <_fflush_r+0x74>)
 8007572:	429c      	cmp	r4, r3
 8007574:	d11b      	bne.n	80075ae <_fflush_r+0x5e>
 8007576:	686c      	ldr	r4, [r5, #4]
 8007578:	220c      	movs	r2, #12
 800757a:	5ea3      	ldrsh	r3, [r4, r2]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0ed      	beq.n	800755c <_fflush_r+0xc>
 8007580:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007582:	07d2      	lsls	r2, r2, #31
 8007584:	d404      	bmi.n	8007590 <_fflush_r+0x40>
 8007586:	059b      	lsls	r3, r3, #22
 8007588:	d402      	bmi.n	8007590 <_fflush_r+0x40>
 800758a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800758c:	f000 f923 	bl	80077d6 <__retarget_lock_acquire_recursive>
 8007590:	0028      	movs	r0, r5
 8007592:	0021      	movs	r1, r4
 8007594:	f7ff ff50 	bl	8007438 <__sflush_r>
 8007598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800759a:	0005      	movs	r5, r0
 800759c:	07db      	lsls	r3, r3, #31
 800759e:	d4de      	bmi.n	800755e <_fflush_r+0xe>
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	059b      	lsls	r3, r3, #22
 80075a4:	d4db      	bmi.n	800755e <_fflush_r+0xe>
 80075a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075a8:	f000 f916 	bl	80077d8 <__retarget_lock_release_recursive>
 80075ac:	e7d7      	b.n	800755e <_fflush_r+0xe>
 80075ae:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <_fflush_r+0x78>)
 80075b0:	429c      	cmp	r4, r3
 80075b2:	d101      	bne.n	80075b8 <_fflush_r+0x68>
 80075b4:	68ac      	ldr	r4, [r5, #8]
 80075b6:	e7df      	b.n	8007578 <_fflush_r+0x28>
 80075b8:	4b04      	ldr	r3, [pc, #16]	; (80075cc <_fflush_r+0x7c>)
 80075ba:	429c      	cmp	r4, r3
 80075bc:	d1dc      	bne.n	8007578 <_fflush_r+0x28>
 80075be:	68ec      	ldr	r4, [r5, #12]
 80075c0:	e7da      	b.n	8007578 <_fflush_r+0x28>
 80075c2:	46c0      	nop			; (mov r8, r8)
 80075c4:	080089c8 	.word	0x080089c8
 80075c8:	080089e8 	.word	0x080089e8
 80075cc:	080089a8 	.word	0x080089a8

080075d0 <std>:
 80075d0:	2300      	movs	r3, #0
 80075d2:	b510      	push	{r4, lr}
 80075d4:	0004      	movs	r4, r0
 80075d6:	6003      	str	r3, [r0, #0]
 80075d8:	6043      	str	r3, [r0, #4]
 80075da:	6083      	str	r3, [r0, #8]
 80075dc:	8181      	strh	r1, [r0, #12]
 80075de:	6643      	str	r3, [r0, #100]	; 0x64
 80075e0:	0019      	movs	r1, r3
 80075e2:	81c2      	strh	r2, [r0, #14]
 80075e4:	6103      	str	r3, [r0, #16]
 80075e6:	6143      	str	r3, [r0, #20]
 80075e8:	6183      	str	r3, [r0, #24]
 80075ea:	2208      	movs	r2, #8
 80075ec:	305c      	adds	r0, #92	; 0x5c
 80075ee:	f7ff fb42 	bl	8006c76 <memset>
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <std+0x38>)
 80075f4:	6263      	str	r3, [r4, #36]	; 0x24
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <std+0x3c>)
 80075f8:	6224      	str	r4, [r4, #32]
 80075fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <std+0x40>)
 80075fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007600:	4b04      	ldr	r3, [pc, #16]	; (8007614 <std+0x44>)
 8007602:	6323      	str	r3, [r4, #48]	; 0x30
 8007604:	bd10      	pop	{r4, pc}
 8007606:	46c0      	nop			; (mov r8, r8)
 8007608:	08007e09 	.word	0x08007e09
 800760c:	08007e31 	.word	0x08007e31
 8007610:	08007e69 	.word	0x08007e69
 8007614:	08007e95 	.word	0x08007e95

08007618 <_cleanup_r>:
 8007618:	b510      	push	{r4, lr}
 800761a:	4902      	ldr	r1, [pc, #8]	; (8007624 <_cleanup_r+0xc>)
 800761c:	f000 f8ba 	bl	8007794 <_fwalk_reent>
 8007620:	bd10      	pop	{r4, pc}
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	08007551 	.word	0x08007551

08007628 <__sfmoreglue>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	2568      	movs	r5, #104	; 0x68
 800762c:	1e4a      	subs	r2, r1, #1
 800762e:	4355      	muls	r5, r2
 8007630:	000e      	movs	r6, r1
 8007632:	0029      	movs	r1, r5
 8007634:	3174      	adds	r1, #116	; 0x74
 8007636:	f000 f9a5 	bl	8007984 <_malloc_r>
 800763a:	1e04      	subs	r4, r0, #0
 800763c:	d008      	beq.n	8007650 <__sfmoreglue+0x28>
 800763e:	2100      	movs	r1, #0
 8007640:	002a      	movs	r2, r5
 8007642:	6001      	str	r1, [r0, #0]
 8007644:	6046      	str	r6, [r0, #4]
 8007646:	300c      	adds	r0, #12
 8007648:	60a0      	str	r0, [r4, #8]
 800764a:	3268      	adds	r2, #104	; 0x68
 800764c:	f7ff fb13 	bl	8006c76 <memset>
 8007650:	0020      	movs	r0, r4
 8007652:	bd70      	pop	{r4, r5, r6, pc}

08007654 <__sfp_lock_acquire>:
 8007654:	b510      	push	{r4, lr}
 8007656:	4802      	ldr	r0, [pc, #8]	; (8007660 <__sfp_lock_acquire+0xc>)
 8007658:	f000 f8bd 	bl	80077d6 <__retarget_lock_acquire_recursive>
 800765c:	bd10      	pop	{r4, pc}
 800765e:	46c0      	nop			; (mov r8, r8)
 8007660:	20000690 	.word	0x20000690

08007664 <__sfp_lock_release>:
 8007664:	b510      	push	{r4, lr}
 8007666:	4802      	ldr	r0, [pc, #8]	; (8007670 <__sfp_lock_release+0xc>)
 8007668:	f000 f8b6 	bl	80077d8 <__retarget_lock_release_recursive>
 800766c:	bd10      	pop	{r4, pc}
 800766e:	46c0      	nop			; (mov r8, r8)
 8007670:	20000690 	.word	0x20000690

08007674 <__sinit_lock_acquire>:
 8007674:	b510      	push	{r4, lr}
 8007676:	4802      	ldr	r0, [pc, #8]	; (8007680 <__sinit_lock_acquire+0xc>)
 8007678:	f000 f8ad 	bl	80077d6 <__retarget_lock_acquire_recursive>
 800767c:	bd10      	pop	{r4, pc}
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	2000068b 	.word	0x2000068b

08007684 <__sinit_lock_release>:
 8007684:	b510      	push	{r4, lr}
 8007686:	4802      	ldr	r0, [pc, #8]	; (8007690 <__sinit_lock_release+0xc>)
 8007688:	f000 f8a6 	bl	80077d8 <__retarget_lock_release_recursive>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	2000068b 	.word	0x2000068b

08007694 <__sinit>:
 8007694:	b513      	push	{r0, r1, r4, lr}
 8007696:	0004      	movs	r4, r0
 8007698:	f7ff ffec 	bl	8007674 <__sinit_lock_acquire>
 800769c:	69a3      	ldr	r3, [r4, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <__sinit+0x14>
 80076a2:	f7ff ffef 	bl	8007684 <__sinit_lock_release>
 80076a6:	bd13      	pop	{r0, r1, r4, pc}
 80076a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80076aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80076ac:	6523      	str	r3, [r4, #80]	; 0x50
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <__sinit+0x68>)
 80076b0:	4a13      	ldr	r2, [pc, #76]	; (8007700 <__sinit+0x6c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	42a3      	cmp	r3, r4
 80076ba:	d101      	bne.n	80076c0 <__sinit+0x2c>
 80076bc:	2301      	movs	r3, #1
 80076be:	61a3      	str	r3, [r4, #24]
 80076c0:	0020      	movs	r0, r4
 80076c2:	f000 f81f 	bl	8007704 <__sfp>
 80076c6:	6060      	str	r0, [r4, #4]
 80076c8:	0020      	movs	r0, r4
 80076ca:	f000 f81b 	bl	8007704 <__sfp>
 80076ce:	60a0      	str	r0, [r4, #8]
 80076d0:	0020      	movs	r0, r4
 80076d2:	f000 f817 	bl	8007704 <__sfp>
 80076d6:	2200      	movs	r2, #0
 80076d8:	2104      	movs	r1, #4
 80076da:	60e0      	str	r0, [r4, #12]
 80076dc:	6860      	ldr	r0, [r4, #4]
 80076de:	f7ff ff77 	bl	80075d0 <std>
 80076e2:	2201      	movs	r2, #1
 80076e4:	2109      	movs	r1, #9
 80076e6:	68a0      	ldr	r0, [r4, #8]
 80076e8:	f7ff ff72 	bl	80075d0 <std>
 80076ec:	2202      	movs	r2, #2
 80076ee:	2112      	movs	r1, #18
 80076f0:	68e0      	ldr	r0, [r4, #12]
 80076f2:	f7ff ff6d 	bl	80075d0 <std>
 80076f6:	2301      	movs	r3, #1
 80076f8:	61a3      	str	r3, [r4, #24]
 80076fa:	e7d2      	b.n	80076a2 <__sinit+0xe>
 80076fc:	08008970 	.word	0x08008970
 8007700:	08007619 	.word	0x08007619

08007704 <__sfp>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	0007      	movs	r7, r0
 8007708:	f7ff ffa4 	bl	8007654 <__sfp_lock_acquire>
 800770c:	4b1f      	ldr	r3, [pc, #124]	; (800778c <__sfp+0x88>)
 800770e:	681e      	ldr	r6, [r3, #0]
 8007710:	69b3      	ldr	r3, [r6, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d102      	bne.n	800771c <__sfp+0x18>
 8007716:	0030      	movs	r0, r6
 8007718:	f7ff ffbc 	bl	8007694 <__sinit>
 800771c:	3648      	adds	r6, #72	; 0x48
 800771e:	68b4      	ldr	r4, [r6, #8]
 8007720:	6873      	ldr	r3, [r6, #4]
 8007722:	3b01      	subs	r3, #1
 8007724:	d504      	bpl.n	8007730 <__sfp+0x2c>
 8007726:	6833      	ldr	r3, [r6, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d022      	beq.n	8007772 <__sfp+0x6e>
 800772c:	6836      	ldr	r6, [r6, #0]
 800772e:	e7f6      	b.n	800771e <__sfp+0x1a>
 8007730:	220c      	movs	r2, #12
 8007732:	5ea5      	ldrsh	r5, [r4, r2]
 8007734:	2d00      	cmp	r5, #0
 8007736:	d11a      	bne.n	800776e <__sfp+0x6a>
 8007738:	0020      	movs	r0, r4
 800773a:	4b15      	ldr	r3, [pc, #84]	; (8007790 <__sfp+0x8c>)
 800773c:	3058      	adds	r0, #88	; 0x58
 800773e:	60e3      	str	r3, [r4, #12]
 8007740:	6665      	str	r5, [r4, #100]	; 0x64
 8007742:	f000 f847 	bl	80077d4 <__retarget_lock_init_recursive>
 8007746:	f7ff ff8d 	bl	8007664 <__sfp_lock_release>
 800774a:	0020      	movs	r0, r4
 800774c:	2208      	movs	r2, #8
 800774e:	0029      	movs	r1, r5
 8007750:	6025      	str	r5, [r4, #0]
 8007752:	60a5      	str	r5, [r4, #8]
 8007754:	6065      	str	r5, [r4, #4]
 8007756:	6125      	str	r5, [r4, #16]
 8007758:	6165      	str	r5, [r4, #20]
 800775a:	61a5      	str	r5, [r4, #24]
 800775c:	305c      	adds	r0, #92	; 0x5c
 800775e:	f7ff fa8a 	bl	8006c76 <memset>
 8007762:	6365      	str	r5, [r4, #52]	; 0x34
 8007764:	63a5      	str	r5, [r4, #56]	; 0x38
 8007766:	64a5      	str	r5, [r4, #72]	; 0x48
 8007768:	64e5      	str	r5, [r4, #76]	; 0x4c
 800776a:	0020      	movs	r0, r4
 800776c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800776e:	3468      	adds	r4, #104	; 0x68
 8007770:	e7d7      	b.n	8007722 <__sfp+0x1e>
 8007772:	2104      	movs	r1, #4
 8007774:	0038      	movs	r0, r7
 8007776:	f7ff ff57 	bl	8007628 <__sfmoreglue>
 800777a:	1e04      	subs	r4, r0, #0
 800777c:	6030      	str	r0, [r6, #0]
 800777e:	d1d5      	bne.n	800772c <__sfp+0x28>
 8007780:	f7ff ff70 	bl	8007664 <__sfp_lock_release>
 8007784:	230c      	movs	r3, #12
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	e7ef      	b.n	800776a <__sfp+0x66>
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	08008970 	.word	0x08008970
 8007790:	ffff0001 	.word	0xffff0001

08007794 <_fwalk_reent>:
 8007794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007796:	0004      	movs	r4, r0
 8007798:	0006      	movs	r6, r0
 800779a:	2700      	movs	r7, #0
 800779c:	9101      	str	r1, [sp, #4]
 800779e:	3448      	adds	r4, #72	; 0x48
 80077a0:	6863      	ldr	r3, [r4, #4]
 80077a2:	68a5      	ldr	r5, [r4, #8]
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	9b00      	ldr	r3, [sp, #0]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	d504      	bpl.n	80077b8 <_fwalk_reent+0x24>
 80077ae:	6824      	ldr	r4, [r4, #0]
 80077b0:	2c00      	cmp	r4, #0
 80077b2:	d1f5      	bne.n	80077a0 <_fwalk_reent+0xc>
 80077b4:	0038      	movs	r0, r7
 80077b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077b8:	89ab      	ldrh	r3, [r5, #12]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d908      	bls.n	80077d0 <_fwalk_reent+0x3c>
 80077be:	220e      	movs	r2, #14
 80077c0:	5eab      	ldrsh	r3, [r5, r2]
 80077c2:	3301      	adds	r3, #1
 80077c4:	d004      	beq.n	80077d0 <_fwalk_reent+0x3c>
 80077c6:	0029      	movs	r1, r5
 80077c8:	0030      	movs	r0, r6
 80077ca:	9b01      	ldr	r3, [sp, #4]
 80077cc:	4798      	blx	r3
 80077ce:	4307      	orrs	r7, r0
 80077d0:	3568      	adds	r5, #104	; 0x68
 80077d2:	e7e8      	b.n	80077a6 <_fwalk_reent+0x12>

080077d4 <__retarget_lock_init_recursive>:
 80077d4:	4770      	bx	lr

080077d6 <__retarget_lock_acquire_recursive>:
 80077d6:	4770      	bx	lr

080077d8 <__retarget_lock_release_recursive>:
 80077d8:	4770      	bx	lr
	...

080077dc <__swhatbuf_r>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	000e      	movs	r6, r1
 80077e0:	001d      	movs	r5, r3
 80077e2:	230e      	movs	r3, #14
 80077e4:	5ec9      	ldrsh	r1, [r1, r3]
 80077e6:	0014      	movs	r4, r2
 80077e8:	b096      	sub	sp, #88	; 0x58
 80077ea:	2900      	cmp	r1, #0
 80077ec:	da07      	bge.n	80077fe <__swhatbuf_r+0x22>
 80077ee:	2300      	movs	r3, #0
 80077f0:	602b      	str	r3, [r5, #0]
 80077f2:	89b3      	ldrh	r3, [r6, #12]
 80077f4:	061b      	lsls	r3, r3, #24
 80077f6:	d411      	bmi.n	800781c <__swhatbuf_r+0x40>
 80077f8:	2380      	movs	r3, #128	; 0x80
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	e00f      	b.n	800781e <__swhatbuf_r+0x42>
 80077fe:	466a      	mov	r2, sp
 8007800:	f000 fb74 	bl	8007eec <_fstat_r>
 8007804:	2800      	cmp	r0, #0
 8007806:	dbf2      	blt.n	80077ee <__swhatbuf_r+0x12>
 8007808:	23f0      	movs	r3, #240	; 0xf0
 800780a:	9901      	ldr	r1, [sp, #4]
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	4019      	ands	r1, r3
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <__swhatbuf_r+0x4c>)
 8007812:	18c9      	adds	r1, r1, r3
 8007814:	424b      	negs	r3, r1
 8007816:	4159      	adcs	r1, r3
 8007818:	6029      	str	r1, [r5, #0]
 800781a:	e7ed      	b.n	80077f8 <__swhatbuf_r+0x1c>
 800781c:	2340      	movs	r3, #64	; 0x40
 800781e:	2000      	movs	r0, #0
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	b016      	add	sp, #88	; 0x58
 8007824:	bd70      	pop	{r4, r5, r6, pc}
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	ffffe000 	.word	0xffffe000

0800782c <__smakebuf_r>:
 800782c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800782e:	2602      	movs	r6, #2
 8007830:	898b      	ldrh	r3, [r1, #12]
 8007832:	0005      	movs	r5, r0
 8007834:	000c      	movs	r4, r1
 8007836:	4233      	tst	r3, r6
 8007838:	d006      	beq.n	8007848 <__smakebuf_r+0x1c>
 800783a:	0023      	movs	r3, r4
 800783c:	3347      	adds	r3, #71	; 0x47
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	2301      	movs	r3, #1
 8007844:	6163      	str	r3, [r4, #20]
 8007846:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007848:	466a      	mov	r2, sp
 800784a:	ab01      	add	r3, sp, #4
 800784c:	f7ff ffc6 	bl	80077dc <__swhatbuf_r>
 8007850:	9900      	ldr	r1, [sp, #0]
 8007852:	0007      	movs	r7, r0
 8007854:	0028      	movs	r0, r5
 8007856:	f000 f895 	bl	8007984 <_malloc_r>
 800785a:	2800      	cmp	r0, #0
 800785c:	d108      	bne.n	8007870 <__smakebuf_r+0x44>
 800785e:	220c      	movs	r2, #12
 8007860:	5ea3      	ldrsh	r3, [r4, r2]
 8007862:	059a      	lsls	r2, r3, #22
 8007864:	d4ef      	bmi.n	8007846 <__smakebuf_r+0x1a>
 8007866:	2203      	movs	r2, #3
 8007868:	4393      	bics	r3, r2
 800786a:	431e      	orrs	r6, r3
 800786c:	81a6      	strh	r6, [r4, #12]
 800786e:	e7e4      	b.n	800783a <__smakebuf_r+0xe>
 8007870:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <__smakebuf_r+0x84>)
 8007872:	62ab      	str	r3, [r5, #40]	; 0x28
 8007874:	2380      	movs	r3, #128	; 0x80
 8007876:	89a2      	ldrh	r2, [r4, #12]
 8007878:	6020      	str	r0, [r4, #0]
 800787a:	4313      	orrs	r3, r2
 800787c:	81a3      	strh	r3, [r4, #12]
 800787e:	9b00      	ldr	r3, [sp, #0]
 8007880:	6120      	str	r0, [r4, #16]
 8007882:	6163      	str	r3, [r4, #20]
 8007884:	9b01      	ldr	r3, [sp, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00d      	beq.n	80078a6 <__smakebuf_r+0x7a>
 800788a:	0028      	movs	r0, r5
 800788c:	230e      	movs	r3, #14
 800788e:	5ee1      	ldrsh	r1, [r4, r3]
 8007890:	f000 fb3e 	bl	8007f10 <_isatty_r>
 8007894:	2800      	cmp	r0, #0
 8007896:	d006      	beq.n	80078a6 <__smakebuf_r+0x7a>
 8007898:	2203      	movs	r2, #3
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	4393      	bics	r3, r2
 800789e:	001a      	movs	r2, r3
 80078a0:	2301      	movs	r3, #1
 80078a2:	4313      	orrs	r3, r2
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	89a0      	ldrh	r0, [r4, #12]
 80078a8:	4307      	orrs	r7, r0
 80078aa:	81a7      	strh	r7, [r4, #12]
 80078ac:	e7cb      	b.n	8007846 <__smakebuf_r+0x1a>
 80078ae:	46c0      	nop			; (mov r8, r8)
 80078b0:	08007619 	.word	0x08007619

080078b4 <memchr>:
 80078b4:	b2c9      	uxtb	r1, r1
 80078b6:	1882      	adds	r2, r0, r2
 80078b8:	4290      	cmp	r0, r2
 80078ba:	d101      	bne.n	80078c0 <memchr+0xc>
 80078bc:	2000      	movs	r0, #0
 80078be:	4770      	bx	lr
 80078c0:	7803      	ldrb	r3, [r0, #0]
 80078c2:	428b      	cmp	r3, r1
 80078c4:	d0fb      	beq.n	80078be <memchr+0xa>
 80078c6:	3001      	adds	r0, #1
 80078c8:	e7f6      	b.n	80078b8 <memchr+0x4>

080078ca <memmove>:
 80078ca:	b510      	push	{r4, lr}
 80078cc:	4288      	cmp	r0, r1
 80078ce:	d902      	bls.n	80078d6 <memmove+0xc>
 80078d0:	188b      	adds	r3, r1, r2
 80078d2:	4298      	cmp	r0, r3
 80078d4:	d303      	bcc.n	80078de <memmove+0x14>
 80078d6:	2300      	movs	r3, #0
 80078d8:	e007      	b.n	80078ea <memmove+0x20>
 80078da:	5c8b      	ldrb	r3, [r1, r2]
 80078dc:	5483      	strb	r3, [r0, r2]
 80078de:	3a01      	subs	r2, #1
 80078e0:	d2fb      	bcs.n	80078da <memmove+0x10>
 80078e2:	bd10      	pop	{r4, pc}
 80078e4:	5ccc      	ldrb	r4, [r1, r3]
 80078e6:	54c4      	strb	r4, [r0, r3]
 80078e8:	3301      	adds	r3, #1
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d1fa      	bne.n	80078e4 <memmove+0x1a>
 80078ee:	e7f8      	b.n	80078e2 <memmove+0x18>

080078f0 <_free_r>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	0005      	movs	r5, r0
 80078f4:	2900      	cmp	r1, #0
 80078f6:	d010      	beq.n	800791a <_free_r+0x2a>
 80078f8:	1f0c      	subs	r4, r1, #4
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	da00      	bge.n	8007902 <_free_r+0x12>
 8007900:	18e4      	adds	r4, r4, r3
 8007902:	0028      	movs	r0, r5
 8007904:	f000 fb2a 	bl	8007f5c <__malloc_lock>
 8007908:	4a1d      	ldr	r2, [pc, #116]	; (8007980 <_free_r+0x90>)
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <_free_r+0x2c>
 8007910:	6063      	str	r3, [r4, #4]
 8007912:	6014      	str	r4, [r2, #0]
 8007914:	0028      	movs	r0, r5
 8007916:	f000 fb29 	bl	8007f6c <__malloc_unlock>
 800791a:	bd70      	pop	{r4, r5, r6, pc}
 800791c:	42a3      	cmp	r3, r4
 800791e:	d908      	bls.n	8007932 <_free_r+0x42>
 8007920:	6821      	ldr	r1, [r4, #0]
 8007922:	1860      	adds	r0, r4, r1
 8007924:	4283      	cmp	r3, r0
 8007926:	d1f3      	bne.n	8007910 <_free_r+0x20>
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	1841      	adds	r1, r0, r1
 800792e:	6021      	str	r1, [r4, #0]
 8007930:	e7ee      	b.n	8007910 <_free_r+0x20>
 8007932:	001a      	movs	r2, r3
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <_free_r+0x4e>
 800793a:	42a3      	cmp	r3, r4
 800793c:	d9f9      	bls.n	8007932 <_free_r+0x42>
 800793e:	6811      	ldr	r1, [r2, #0]
 8007940:	1850      	adds	r0, r2, r1
 8007942:	42a0      	cmp	r0, r4
 8007944:	d10b      	bne.n	800795e <_free_r+0x6e>
 8007946:	6820      	ldr	r0, [r4, #0]
 8007948:	1809      	adds	r1, r1, r0
 800794a:	1850      	adds	r0, r2, r1
 800794c:	6011      	str	r1, [r2, #0]
 800794e:	4283      	cmp	r3, r0
 8007950:	d1e0      	bne.n	8007914 <_free_r+0x24>
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	1841      	adds	r1, r0, r1
 8007958:	6011      	str	r1, [r2, #0]
 800795a:	6053      	str	r3, [r2, #4]
 800795c:	e7da      	b.n	8007914 <_free_r+0x24>
 800795e:	42a0      	cmp	r0, r4
 8007960:	d902      	bls.n	8007968 <_free_r+0x78>
 8007962:	230c      	movs	r3, #12
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	e7d5      	b.n	8007914 <_free_r+0x24>
 8007968:	6821      	ldr	r1, [r4, #0]
 800796a:	1860      	adds	r0, r4, r1
 800796c:	4283      	cmp	r3, r0
 800796e:	d103      	bne.n	8007978 <_free_r+0x88>
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	1841      	adds	r1, r0, r1
 8007976:	6021      	str	r1, [r4, #0]
 8007978:	6063      	str	r3, [r4, #4]
 800797a:	6054      	str	r4, [r2, #4]
 800797c:	e7ca      	b.n	8007914 <_free_r+0x24>
 800797e:	46c0      	nop			; (mov r8, r8)
 8007980:	2000021c 	.word	0x2000021c

08007984 <_malloc_r>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	2303      	movs	r3, #3
 8007988:	1ccd      	adds	r5, r1, #3
 800798a:	439d      	bics	r5, r3
 800798c:	3508      	adds	r5, #8
 800798e:	0006      	movs	r6, r0
 8007990:	2d0c      	cmp	r5, #12
 8007992:	d21f      	bcs.n	80079d4 <_malloc_r+0x50>
 8007994:	250c      	movs	r5, #12
 8007996:	42a9      	cmp	r1, r5
 8007998:	d81e      	bhi.n	80079d8 <_malloc_r+0x54>
 800799a:	0030      	movs	r0, r6
 800799c:	f000 fade 	bl	8007f5c <__malloc_lock>
 80079a0:	4925      	ldr	r1, [pc, #148]	; (8007a38 <_malloc_r+0xb4>)
 80079a2:	680a      	ldr	r2, [r1, #0]
 80079a4:	0014      	movs	r4, r2
 80079a6:	2c00      	cmp	r4, #0
 80079a8:	d11a      	bne.n	80079e0 <_malloc_r+0x5c>
 80079aa:	4f24      	ldr	r7, [pc, #144]	; (8007a3c <_malloc_r+0xb8>)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d104      	bne.n	80079bc <_malloc_r+0x38>
 80079b2:	0021      	movs	r1, r4
 80079b4:	0030      	movs	r0, r6
 80079b6:	f000 f9cb 	bl	8007d50 <_sbrk_r>
 80079ba:	6038      	str	r0, [r7, #0]
 80079bc:	0029      	movs	r1, r5
 80079be:	0030      	movs	r0, r6
 80079c0:	f000 f9c6 	bl	8007d50 <_sbrk_r>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d12b      	bne.n	8007a20 <_malloc_r+0x9c>
 80079c8:	230c      	movs	r3, #12
 80079ca:	0030      	movs	r0, r6
 80079cc:	6033      	str	r3, [r6, #0]
 80079ce:	f000 facd 	bl	8007f6c <__malloc_unlock>
 80079d2:	e003      	b.n	80079dc <_malloc_r+0x58>
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	dade      	bge.n	8007996 <_malloc_r+0x12>
 80079d8:	230c      	movs	r3, #12
 80079da:	6033      	str	r3, [r6, #0]
 80079dc:	2000      	movs	r0, #0
 80079de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	1b5b      	subs	r3, r3, r5
 80079e4:	d419      	bmi.n	8007a1a <_malloc_r+0x96>
 80079e6:	2b0b      	cmp	r3, #11
 80079e8:	d903      	bls.n	80079f2 <_malloc_r+0x6e>
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	18e4      	adds	r4, r4, r3
 80079ee:	6025      	str	r5, [r4, #0]
 80079f0:	e003      	b.n	80079fa <_malloc_r+0x76>
 80079f2:	6863      	ldr	r3, [r4, #4]
 80079f4:	42a2      	cmp	r2, r4
 80079f6:	d10e      	bne.n	8007a16 <_malloc_r+0x92>
 80079f8:	600b      	str	r3, [r1, #0]
 80079fa:	0030      	movs	r0, r6
 80079fc:	f000 fab6 	bl	8007f6c <__malloc_unlock>
 8007a00:	0020      	movs	r0, r4
 8007a02:	2207      	movs	r2, #7
 8007a04:	300b      	adds	r0, #11
 8007a06:	1d23      	adds	r3, r4, #4
 8007a08:	4390      	bics	r0, r2
 8007a0a:	1ac2      	subs	r2, r0, r3
 8007a0c:	4298      	cmp	r0, r3
 8007a0e:	d0e6      	beq.n	80079de <_malloc_r+0x5a>
 8007a10:	1a1b      	subs	r3, r3, r0
 8007a12:	50a3      	str	r3, [r4, r2]
 8007a14:	e7e3      	b.n	80079de <_malloc_r+0x5a>
 8007a16:	6053      	str	r3, [r2, #4]
 8007a18:	e7ef      	b.n	80079fa <_malloc_r+0x76>
 8007a1a:	0022      	movs	r2, r4
 8007a1c:	6864      	ldr	r4, [r4, #4]
 8007a1e:	e7c2      	b.n	80079a6 <_malloc_r+0x22>
 8007a20:	2303      	movs	r3, #3
 8007a22:	1cc4      	adds	r4, r0, #3
 8007a24:	439c      	bics	r4, r3
 8007a26:	42a0      	cmp	r0, r4
 8007a28:	d0e1      	beq.n	80079ee <_malloc_r+0x6a>
 8007a2a:	1a21      	subs	r1, r4, r0
 8007a2c:	0030      	movs	r0, r6
 8007a2e:	f000 f98f 	bl	8007d50 <_sbrk_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d1db      	bne.n	80079ee <_malloc_r+0x6a>
 8007a36:	e7c7      	b.n	80079c8 <_malloc_r+0x44>
 8007a38:	2000021c 	.word	0x2000021c
 8007a3c:	20000220 	.word	0x20000220

08007a40 <_realloc_r>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	0007      	movs	r7, r0
 8007a44:	000d      	movs	r5, r1
 8007a46:	0016      	movs	r6, r2
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	d105      	bne.n	8007a58 <_realloc_r+0x18>
 8007a4c:	0011      	movs	r1, r2
 8007a4e:	f7ff ff99 	bl	8007984 <_malloc_r>
 8007a52:	0004      	movs	r4, r0
 8007a54:	0020      	movs	r0, r4
 8007a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	d103      	bne.n	8007a64 <_realloc_r+0x24>
 8007a5c:	f7ff ff48 	bl	80078f0 <_free_r>
 8007a60:	0034      	movs	r4, r6
 8007a62:	e7f7      	b.n	8007a54 <_realloc_r+0x14>
 8007a64:	f000 fa8a 	bl	8007f7c <_malloc_usable_size_r>
 8007a68:	002c      	movs	r4, r5
 8007a6a:	42b0      	cmp	r0, r6
 8007a6c:	d2f2      	bcs.n	8007a54 <_realloc_r+0x14>
 8007a6e:	0031      	movs	r1, r6
 8007a70:	0038      	movs	r0, r7
 8007a72:	f7ff ff87 	bl	8007984 <_malloc_r>
 8007a76:	1e04      	subs	r4, r0, #0
 8007a78:	d0ec      	beq.n	8007a54 <_realloc_r+0x14>
 8007a7a:	0029      	movs	r1, r5
 8007a7c:	0032      	movs	r2, r6
 8007a7e:	f7ff f8f1 	bl	8006c64 <memcpy>
 8007a82:	0029      	movs	r1, r5
 8007a84:	0038      	movs	r0, r7
 8007a86:	f7ff ff33 	bl	80078f0 <_free_r>
 8007a8a:	e7e3      	b.n	8007a54 <_realloc_r+0x14>

08007a8c <__ssputs_r>:
 8007a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8e:	688e      	ldr	r6, [r1, #8]
 8007a90:	b085      	sub	sp, #20
 8007a92:	0007      	movs	r7, r0
 8007a94:	000c      	movs	r4, r1
 8007a96:	9203      	str	r2, [sp, #12]
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	429e      	cmp	r6, r3
 8007a9c:	d83c      	bhi.n	8007b18 <__ssputs_r+0x8c>
 8007a9e:	2390      	movs	r3, #144	; 0x90
 8007aa0:	898a      	ldrh	r2, [r1, #12]
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	421a      	tst	r2, r3
 8007aa6:	d034      	beq.n	8007b12 <__ssputs_r+0x86>
 8007aa8:	2503      	movs	r5, #3
 8007aaa:	6909      	ldr	r1, [r1, #16]
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	1a5b      	subs	r3, r3, r1
 8007ab0:	9302      	str	r3, [sp, #8]
 8007ab2:	6963      	ldr	r3, [r4, #20]
 8007ab4:	9802      	ldr	r0, [sp, #8]
 8007ab6:	435d      	muls	r5, r3
 8007ab8:	0feb      	lsrs	r3, r5, #31
 8007aba:	195d      	adds	r5, r3, r5
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	106d      	asrs	r5, r5, #1
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	181b      	adds	r3, r3, r0
 8007ac4:	42ab      	cmp	r3, r5
 8007ac6:	d900      	bls.n	8007aca <__ssputs_r+0x3e>
 8007ac8:	001d      	movs	r5, r3
 8007aca:	0553      	lsls	r3, r2, #21
 8007acc:	d532      	bpl.n	8007b34 <__ssputs_r+0xa8>
 8007ace:	0029      	movs	r1, r5
 8007ad0:	0038      	movs	r0, r7
 8007ad2:	f7ff ff57 	bl	8007984 <_malloc_r>
 8007ad6:	1e06      	subs	r6, r0, #0
 8007ad8:	d109      	bne.n	8007aee <__ssputs_r+0x62>
 8007ada:	230c      	movs	r3, #12
 8007adc:	603b      	str	r3, [r7, #0]
 8007ade:	2340      	movs	r3, #64	; 0x40
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	89a2      	ldrh	r2, [r4, #12]
 8007ae4:	4240      	negs	r0, r0
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	81a3      	strh	r3, [r4, #12]
 8007aea:	b005      	add	sp, #20
 8007aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aee:	9a02      	ldr	r2, [sp, #8]
 8007af0:	6921      	ldr	r1, [r4, #16]
 8007af2:	f7ff f8b7 	bl	8006c64 <memcpy>
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	4a14      	ldr	r2, [pc, #80]	; (8007b4c <__ssputs_r+0xc0>)
 8007afa:	401a      	ands	r2, r3
 8007afc:	2380      	movs	r3, #128	; 0x80
 8007afe:	4313      	orrs	r3, r2
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	9b02      	ldr	r3, [sp, #8]
 8007b04:	6126      	str	r6, [r4, #16]
 8007b06:	18f6      	adds	r6, r6, r3
 8007b08:	6026      	str	r6, [r4, #0]
 8007b0a:	6165      	str	r5, [r4, #20]
 8007b0c:	9e01      	ldr	r6, [sp, #4]
 8007b0e:	1aed      	subs	r5, r5, r3
 8007b10:	60a5      	str	r5, [r4, #8]
 8007b12:	9b01      	ldr	r3, [sp, #4]
 8007b14:	429e      	cmp	r6, r3
 8007b16:	d900      	bls.n	8007b1a <__ssputs_r+0x8e>
 8007b18:	9e01      	ldr	r6, [sp, #4]
 8007b1a:	0032      	movs	r2, r6
 8007b1c:	9903      	ldr	r1, [sp, #12]
 8007b1e:	6820      	ldr	r0, [r4, #0]
 8007b20:	f7ff fed3 	bl	80078ca <memmove>
 8007b24:	68a3      	ldr	r3, [r4, #8]
 8007b26:	2000      	movs	r0, #0
 8007b28:	1b9b      	subs	r3, r3, r6
 8007b2a:	60a3      	str	r3, [r4, #8]
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	199e      	adds	r6, r3, r6
 8007b30:	6026      	str	r6, [r4, #0]
 8007b32:	e7da      	b.n	8007aea <__ssputs_r+0x5e>
 8007b34:	002a      	movs	r2, r5
 8007b36:	0038      	movs	r0, r7
 8007b38:	f7ff ff82 	bl	8007a40 <_realloc_r>
 8007b3c:	1e06      	subs	r6, r0, #0
 8007b3e:	d1e0      	bne.n	8007b02 <__ssputs_r+0x76>
 8007b40:	0038      	movs	r0, r7
 8007b42:	6921      	ldr	r1, [r4, #16]
 8007b44:	f7ff fed4 	bl	80078f0 <_free_r>
 8007b48:	e7c7      	b.n	8007ada <__ssputs_r+0x4e>
 8007b4a:	46c0      	nop			; (mov r8, r8)
 8007b4c:	fffffb7f 	.word	0xfffffb7f

08007b50 <_svfiprintf_r>:
 8007b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b52:	b0a1      	sub	sp, #132	; 0x84
 8007b54:	9003      	str	r0, [sp, #12]
 8007b56:	001d      	movs	r5, r3
 8007b58:	898b      	ldrh	r3, [r1, #12]
 8007b5a:	000f      	movs	r7, r1
 8007b5c:	0016      	movs	r6, r2
 8007b5e:	061b      	lsls	r3, r3, #24
 8007b60:	d511      	bpl.n	8007b86 <_svfiprintf_r+0x36>
 8007b62:	690b      	ldr	r3, [r1, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10e      	bne.n	8007b86 <_svfiprintf_r+0x36>
 8007b68:	2140      	movs	r1, #64	; 0x40
 8007b6a:	f7ff ff0b 	bl	8007984 <_malloc_r>
 8007b6e:	6038      	str	r0, [r7, #0]
 8007b70:	6138      	str	r0, [r7, #16]
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d105      	bne.n	8007b82 <_svfiprintf_r+0x32>
 8007b76:	230c      	movs	r3, #12
 8007b78:	9a03      	ldr	r2, [sp, #12]
 8007b7a:	3801      	subs	r0, #1
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	b021      	add	sp, #132	; 0x84
 8007b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b82:	2340      	movs	r3, #64	; 0x40
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	2300      	movs	r3, #0
 8007b88:	ac08      	add	r4, sp, #32
 8007b8a:	6163      	str	r3, [r4, #20]
 8007b8c:	3320      	adds	r3, #32
 8007b8e:	7663      	strb	r3, [r4, #25]
 8007b90:	3310      	adds	r3, #16
 8007b92:	76a3      	strb	r3, [r4, #26]
 8007b94:	9507      	str	r5, [sp, #28]
 8007b96:	0035      	movs	r5, r6
 8007b98:	782b      	ldrb	r3, [r5, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <_svfiprintf_r+0x52>
 8007b9e:	2b25      	cmp	r3, #37	; 0x25
 8007ba0:	d147      	bne.n	8007c32 <_svfiprintf_r+0xe2>
 8007ba2:	1bab      	subs	r3, r5, r6
 8007ba4:	9305      	str	r3, [sp, #20]
 8007ba6:	42b5      	cmp	r5, r6
 8007ba8:	d00c      	beq.n	8007bc4 <_svfiprintf_r+0x74>
 8007baa:	0032      	movs	r2, r6
 8007bac:	0039      	movs	r1, r7
 8007bae:	9803      	ldr	r0, [sp, #12]
 8007bb0:	f7ff ff6c 	bl	8007a8c <__ssputs_r>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d100      	bne.n	8007bba <_svfiprintf_r+0x6a>
 8007bb8:	e0ae      	b.n	8007d18 <_svfiprintf_r+0x1c8>
 8007bba:	6962      	ldr	r2, [r4, #20]
 8007bbc:	9b05      	ldr	r3, [sp, #20]
 8007bbe:	4694      	mov	ip, r2
 8007bc0:	4463      	add	r3, ip
 8007bc2:	6163      	str	r3, [r4, #20]
 8007bc4:	782b      	ldrb	r3, [r5, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d100      	bne.n	8007bcc <_svfiprintf_r+0x7c>
 8007bca:	e0a5      	b.n	8007d18 <_svfiprintf_r+0x1c8>
 8007bcc:	2201      	movs	r2, #1
 8007bce:	2300      	movs	r3, #0
 8007bd0:	4252      	negs	r2, r2
 8007bd2:	6062      	str	r2, [r4, #4]
 8007bd4:	a904      	add	r1, sp, #16
 8007bd6:	3254      	adds	r2, #84	; 0x54
 8007bd8:	1852      	adds	r2, r2, r1
 8007bda:	1c6e      	adds	r6, r5, #1
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	60e3      	str	r3, [r4, #12]
 8007be0:	60a3      	str	r3, [r4, #8]
 8007be2:	7013      	strb	r3, [r2, #0]
 8007be4:	65a3      	str	r3, [r4, #88]	; 0x58
 8007be6:	2205      	movs	r2, #5
 8007be8:	7831      	ldrb	r1, [r6, #0]
 8007bea:	4854      	ldr	r0, [pc, #336]	; (8007d3c <_svfiprintf_r+0x1ec>)
 8007bec:	f7ff fe62 	bl	80078b4 <memchr>
 8007bf0:	1c75      	adds	r5, r6, #1
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d11f      	bne.n	8007c36 <_svfiprintf_r+0xe6>
 8007bf6:	6822      	ldr	r2, [r4, #0]
 8007bf8:	06d3      	lsls	r3, r2, #27
 8007bfa:	d504      	bpl.n	8007c06 <_svfiprintf_r+0xb6>
 8007bfc:	2353      	movs	r3, #83	; 0x53
 8007bfe:	a904      	add	r1, sp, #16
 8007c00:	185b      	adds	r3, r3, r1
 8007c02:	2120      	movs	r1, #32
 8007c04:	7019      	strb	r1, [r3, #0]
 8007c06:	0713      	lsls	r3, r2, #28
 8007c08:	d504      	bpl.n	8007c14 <_svfiprintf_r+0xc4>
 8007c0a:	2353      	movs	r3, #83	; 0x53
 8007c0c:	a904      	add	r1, sp, #16
 8007c0e:	185b      	adds	r3, r3, r1
 8007c10:	212b      	movs	r1, #43	; 0x2b
 8007c12:	7019      	strb	r1, [r3, #0]
 8007c14:	7833      	ldrb	r3, [r6, #0]
 8007c16:	2b2a      	cmp	r3, #42	; 0x2a
 8007c18:	d016      	beq.n	8007c48 <_svfiprintf_r+0xf8>
 8007c1a:	0035      	movs	r5, r6
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	200a      	movs	r0, #10
 8007c20:	68e3      	ldr	r3, [r4, #12]
 8007c22:	782a      	ldrb	r2, [r5, #0]
 8007c24:	1c6e      	adds	r6, r5, #1
 8007c26:	3a30      	subs	r2, #48	; 0x30
 8007c28:	2a09      	cmp	r2, #9
 8007c2a:	d94e      	bls.n	8007cca <_svfiprintf_r+0x17a>
 8007c2c:	2900      	cmp	r1, #0
 8007c2e:	d111      	bne.n	8007c54 <_svfiprintf_r+0x104>
 8007c30:	e017      	b.n	8007c62 <_svfiprintf_r+0x112>
 8007c32:	3501      	adds	r5, #1
 8007c34:	e7b0      	b.n	8007b98 <_svfiprintf_r+0x48>
 8007c36:	4b41      	ldr	r3, [pc, #260]	; (8007d3c <_svfiprintf_r+0x1ec>)
 8007c38:	6822      	ldr	r2, [r4, #0]
 8007c3a:	1ac0      	subs	r0, r0, r3
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	4083      	lsls	r3, r0
 8007c40:	4313      	orrs	r3, r2
 8007c42:	002e      	movs	r6, r5
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	e7ce      	b.n	8007be6 <_svfiprintf_r+0x96>
 8007c48:	9b07      	ldr	r3, [sp, #28]
 8007c4a:	1d19      	adds	r1, r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	9107      	str	r1, [sp, #28]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	db01      	blt.n	8007c58 <_svfiprintf_r+0x108>
 8007c54:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c56:	e004      	b.n	8007c62 <_svfiprintf_r+0x112>
 8007c58:	425b      	negs	r3, r3
 8007c5a:	60e3      	str	r3, [r4, #12]
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	782b      	ldrb	r3, [r5, #0]
 8007c64:	2b2e      	cmp	r3, #46	; 0x2e
 8007c66:	d10a      	bne.n	8007c7e <_svfiprintf_r+0x12e>
 8007c68:	786b      	ldrb	r3, [r5, #1]
 8007c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c6c:	d135      	bne.n	8007cda <_svfiprintf_r+0x18a>
 8007c6e:	9b07      	ldr	r3, [sp, #28]
 8007c70:	3502      	adds	r5, #2
 8007c72:	1d1a      	adds	r2, r3, #4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	9207      	str	r2, [sp, #28]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	db2b      	blt.n	8007cd4 <_svfiprintf_r+0x184>
 8007c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7e:	4e30      	ldr	r6, [pc, #192]	; (8007d40 <_svfiprintf_r+0x1f0>)
 8007c80:	2203      	movs	r2, #3
 8007c82:	0030      	movs	r0, r6
 8007c84:	7829      	ldrb	r1, [r5, #0]
 8007c86:	f7ff fe15 	bl	80078b4 <memchr>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d006      	beq.n	8007c9c <_svfiprintf_r+0x14c>
 8007c8e:	2340      	movs	r3, #64	; 0x40
 8007c90:	1b80      	subs	r0, r0, r6
 8007c92:	4083      	lsls	r3, r0
 8007c94:	6822      	ldr	r2, [r4, #0]
 8007c96:	3501      	adds	r5, #1
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	7829      	ldrb	r1, [r5, #0]
 8007c9e:	2206      	movs	r2, #6
 8007ca0:	4828      	ldr	r0, [pc, #160]	; (8007d44 <_svfiprintf_r+0x1f4>)
 8007ca2:	1c6e      	adds	r6, r5, #1
 8007ca4:	7621      	strb	r1, [r4, #24]
 8007ca6:	f7ff fe05 	bl	80078b4 <memchr>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d03c      	beq.n	8007d28 <_svfiprintf_r+0x1d8>
 8007cae:	4b26      	ldr	r3, [pc, #152]	; (8007d48 <_svfiprintf_r+0x1f8>)
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d125      	bne.n	8007d00 <_svfiprintf_r+0x1b0>
 8007cb4:	2207      	movs	r2, #7
 8007cb6:	9b07      	ldr	r3, [sp, #28]
 8007cb8:	3307      	adds	r3, #7
 8007cba:	4393      	bics	r3, r2
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	9307      	str	r3, [sp, #28]
 8007cc0:	6963      	ldr	r3, [r4, #20]
 8007cc2:	9a04      	ldr	r2, [sp, #16]
 8007cc4:	189b      	adds	r3, r3, r2
 8007cc6:	6163      	str	r3, [r4, #20]
 8007cc8:	e765      	b.n	8007b96 <_svfiprintf_r+0x46>
 8007cca:	4343      	muls	r3, r0
 8007ccc:	0035      	movs	r5, r6
 8007cce:	2101      	movs	r1, #1
 8007cd0:	189b      	adds	r3, r3, r2
 8007cd2:	e7a6      	b.n	8007c22 <_svfiprintf_r+0xd2>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	425b      	negs	r3, r3
 8007cd8:	e7d0      	b.n	8007c7c <_svfiprintf_r+0x12c>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	200a      	movs	r0, #10
 8007cde:	001a      	movs	r2, r3
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	6063      	str	r3, [r4, #4]
 8007ce4:	7829      	ldrb	r1, [r5, #0]
 8007ce6:	1c6e      	adds	r6, r5, #1
 8007ce8:	3930      	subs	r1, #48	; 0x30
 8007cea:	2909      	cmp	r1, #9
 8007cec:	d903      	bls.n	8007cf6 <_svfiprintf_r+0x1a6>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d0c5      	beq.n	8007c7e <_svfiprintf_r+0x12e>
 8007cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8007cf4:	e7c3      	b.n	8007c7e <_svfiprintf_r+0x12e>
 8007cf6:	4342      	muls	r2, r0
 8007cf8:	0035      	movs	r5, r6
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	1852      	adds	r2, r2, r1
 8007cfe:	e7f1      	b.n	8007ce4 <_svfiprintf_r+0x194>
 8007d00:	ab07      	add	r3, sp, #28
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	003a      	movs	r2, r7
 8007d06:	0021      	movs	r1, r4
 8007d08:	4b10      	ldr	r3, [pc, #64]	; (8007d4c <_svfiprintf_r+0x1fc>)
 8007d0a:	9803      	ldr	r0, [sp, #12]
 8007d0c:	e000      	b.n	8007d10 <_svfiprintf_r+0x1c0>
 8007d0e:	bf00      	nop
 8007d10:	9004      	str	r0, [sp, #16]
 8007d12:	9b04      	ldr	r3, [sp, #16]
 8007d14:	3301      	adds	r3, #1
 8007d16:	d1d3      	bne.n	8007cc0 <_svfiprintf_r+0x170>
 8007d18:	89bb      	ldrh	r3, [r7, #12]
 8007d1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d1c:	065b      	lsls	r3, r3, #25
 8007d1e:	d400      	bmi.n	8007d22 <_svfiprintf_r+0x1d2>
 8007d20:	e72d      	b.n	8007b7e <_svfiprintf_r+0x2e>
 8007d22:	2001      	movs	r0, #1
 8007d24:	4240      	negs	r0, r0
 8007d26:	e72a      	b.n	8007b7e <_svfiprintf_r+0x2e>
 8007d28:	ab07      	add	r3, sp, #28
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	003a      	movs	r2, r7
 8007d2e:	0021      	movs	r1, r4
 8007d30:	4b06      	ldr	r3, [pc, #24]	; (8007d4c <_svfiprintf_r+0x1fc>)
 8007d32:	9803      	ldr	r0, [sp, #12]
 8007d34:	f7ff f978 	bl	8007028 <_printf_i>
 8007d38:	e7ea      	b.n	8007d10 <_svfiprintf_r+0x1c0>
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	08008974 	.word	0x08008974
 8007d40:	0800897a 	.word	0x0800897a
 8007d44:	0800897e 	.word	0x0800897e
 8007d48:	00000000 	.word	0x00000000
 8007d4c:	08007a8d 	.word	0x08007a8d

08007d50 <_sbrk_r>:
 8007d50:	2300      	movs	r3, #0
 8007d52:	b570      	push	{r4, r5, r6, lr}
 8007d54:	4d06      	ldr	r5, [pc, #24]	; (8007d70 <_sbrk_r+0x20>)
 8007d56:	0004      	movs	r4, r0
 8007d58:	0008      	movs	r0, r1
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	f000 fad4 	bl	8008308 <_sbrk>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d103      	bne.n	8007d6c <_sbrk_r+0x1c>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d000      	beq.n	8007d6c <_sbrk_r+0x1c>
 8007d6a:	6023      	str	r3, [r4, #0]
 8007d6c:	bd70      	pop	{r4, r5, r6, pc}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	20000694 	.word	0x20000694

08007d74 <_raise_r>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	0004      	movs	r4, r0
 8007d78:	000d      	movs	r5, r1
 8007d7a:	291f      	cmp	r1, #31
 8007d7c:	d904      	bls.n	8007d88 <_raise_r+0x14>
 8007d7e:	2316      	movs	r3, #22
 8007d80:	6003      	str	r3, [r0, #0]
 8007d82:	2001      	movs	r0, #1
 8007d84:	4240      	negs	r0, r0
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d004      	beq.n	8007d98 <_raise_r+0x24>
 8007d8e:	008a      	lsls	r2, r1, #2
 8007d90:	189b      	adds	r3, r3, r2
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	2a00      	cmp	r2, #0
 8007d96:	d108      	bne.n	8007daa <_raise_r+0x36>
 8007d98:	0020      	movs	r0, r4
 8007d9a:	f000 f831 	bl	8007e00 <_getpid_r>
 8007d9e:	002a      	movs	r2, r5
 8007da0:	0001      	movs	r1, r0
 8007da2:	0020      	movs	r0, r4
 8007da4:	f000 f81a 	bl	8007ddc <_kill_r>
 8007da8:	e7ed      	b.n	8007d86 <_raise_r+0x12>
 8007daa:	2000      	movs	r0, #0
 8007dac:	2a01      	cmp	r2, #1
 8007dae:	d0ea      	beq.n	8007d86 <_raise_r+0x12>
 8007db0:	1c51      	adds	r1, r2, #1
 8007db2:	d103      	bne.n	8007dbc <_raise_r+0x48>
 8007db4:	2316      	movs	r3, #22
 8007db6:	3001      	adds	r0, #1
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	e7e4      	b.n	8007d86 <_raise_r+0x12>
 8007dbc:	2400      	movs	r4, #0
 8007dbe:	0028      	movs	r0, r5
 8007dc0:	601c      	str	r4, [r3, #0]
 8007dc2:	4790      	blx	r2
 8007dc4:	0020      	movs	r0, r4
 8007dc6:	e7de      	b.n	8007d86 <_raise_r+0x12>

08007dc8 <raise>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4b03      	ldr	r3, [pc, #12]	; (8007dd8 <raise+0x10>)
 8007dcc:	0001      	movs	r1, r0
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	f7ff ffd0 	bl	8007d74 <_raise_r>
 8007dd4:	bd10      	pop	{r4, pc}
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	200000f4 	.word	0x200000f4

08007ddc <_kill_r>:
 8007ddc:	2300      	movs	r3, #0
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	4d06      	ldr	r5, [pc, #24]	; (8007dfc <_kill_r+0x20>)
 8007de2:	0004      	movs	r4, r0
 8007de4:	0008      	movs	r0, r1
 8007de6:	0011      	movs	r1, r2
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	f000 fa75 	bl	80082d8 <_kill>
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	d103      	bne.n	8007dfa <_kill_r+0x1e>
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d000      	beq.n	8007dfa <_kill_r+0x1e>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd70      	pop	{r4, r5, r6, pc}
 8007dfc:	20000694 	.word	0x20000694

08007e00 <_getpid_r>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	f000 fa59 	bl	80082b8 <_getpid>
 8007e06:	bd10      	pop	{r4, pc}

08007e08 <__sread>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	000c      	movs	r4, r1
 8007e0c:	250e      	movs	r5, #14
 8007e0e:	5f49      	ldrsh	r1, [r1, r5]
 8007e10:	f000 f8bc 	bl	8007f8c <_read_r>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	db03      	blt.n	8007e20 <__sread+0x18>
 8007e18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007e1a:	181b      	adds	r3, r3, r0
 8007e1c:	6563      	str	r3, [r4, #84]	; 0x54
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	4a02      	ldr	r2, [pc, #8]	; (8007e2c <__sread+0x24>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	81a3      	strh	r3, [r4, #12]
 8007e28:	e7f9      	b.n	8007e1e <__sread+0x16>
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	ffffefff 	.word	0xffffefff

08007e30 <__swrite>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	001f      	movs	r7, r3
 8007e34:	898b      	ldrh	r3, [r1, #12]
 8007e36:	0005      	movs	r5, r0
 8007e38:	000c      	movs	r4, r1
 8007e3a:	0016      	movs	r6, r2
 8007e3c:	05db      	lsls	r3, r3, #23
 8007e3e:	d505      	bpl.n	8007e4c <__swrite+0x1c>
 8007e40:	230e      	movs	r3, #14
 8007e42:	5ec9      	ldrsh	r1, [r1, r3]
 8007e44:	2200      	movs	r2, #0
 8007e46:	2302      	movs	r3, #2
 8007e48:	f000 f874 	bl	8007f34 <_lseek_r>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	4a05      	ldr	r2, [pc, #20]	; (8007e64 <__swrite+0x34>)
 8007e50:	0028      	movs	r0, r5
 8007e52:	4013      	ands	r3, r2
 8007e54:	81a3      	strh	r3, [r4, #12]
 8007e56:	0032      	movs	r2, r6
 8007e58:	230e      	movs	r3, #14
 8007e5a:	5ee1      	ldrsh	r1, [r4, r3]
 8007e5c:	003b      	movs	r3, r7
 8007e5e:	f000 f81f 	bl	8007ea0 <_write_r>
 8007e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e64:	ffffefff 	.word	0xffffefff

08007e68 <__sseek>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	000c      	movs	r4, r1
 8007e6c:	250e      	movs	r5, #14
 8007e6e:	5f49      	ldrsh	r1, [r1, r5]
 8007e70:	f000 f860 	bl	8007f34 <_lseek_r>
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	1c42      	adds	r2, r0, #1
 8007e78:	d103      	bne.n	8007e82 <__sseek+0x1a>
 8007e7a:	4a05      	ldr	r2, [pc, #20]	; (8007e90 <__sseek+0x28>)
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	bd70      	pop	{r4, r5, r6, pc}
 8007e82:	2280      	movs	r2, #128	; 0x80
 8007e84:	0152      	lsls	r2, r2, #5
 8007e86:	4313      	orrs	r3, r2
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e8c:	e7f8      	b.n	8007e80 <__sseek+0x18>
 8007e8e:	46c0      	nop			; (mov r8, r8)
 8007e90:	ffffefff 	.word	0xffffefff

08007e94 <__sclose>:
 8007e94:	b510      	push	{r4, lr}
 8007e96:	230e      	movs	r3, #14
 8007e98:	5ec9      	ldrsh	r1, [r1, r3]
 8007e9a:	f000 f815 	bl	8007ec8 <_close_r>
 8007e9e:	bd10      	pop	{r4, pc}

08007ea0 <_write_r>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	0004      	movs	r4, r0
 8007ea4:	0008      	movs	r0, r1
 8007ea6:	0011      	movs	r1, r2
 8007ea8:	001a      	movs	r2, r3
 8007eaa:	2300      	movs	r3, #0
 8007eac:	4d05      	ldr	r5, [pc, #20]	; (8007ec4 <_write_r+0x24>)
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	f000 fa3a 	bl	8008328 <_write>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d103      	bne.n	8007ec0 <_write_r+0x20>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d000      	beq.n	8007ec0 <_write_r+0x20>
 8007ebe:	6023      	str	r3, [r4, #0]
 8007ec0:	bd70      	pop	{r4, r5, r6, pc}
 8007ec2:	46c0      	nop			; (mov r8, r8)
 8007ec4:	20000694 	.word	0x20000694

08007ec8 <_close_r>:
 8007ec8:	2300      	movs	r3, #0
 8007eca:	b570      	push	{r4, r5, r6, lr}
 8007ecc:	4d06      	ldr	r5, [pc, #24]	; (8007ee8 <_close_r+0x20>)
 8007ece:	0004      	movs	r4, r0
 8007ed0:	0008      	movs	r0, r1
 8007ed2:	602b      	str	r3, [r5, #0]
 8007ed4:	f000 f9e0 	bl	8008298 <_close>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d103      	bne.n	8007ee4 <_close_r+0x1c>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d000      	beq.n	8007ee4 <_close_r+0x1c>
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	bd70      	pop	{r4, r5, r6, pc}
 8007ee6:	46c0      	nop			; (mov r8, r8)
 8007ee8:	20000694 	.word	0x20000694

08007eec <_fstat_r>:
 8007eec:	2300      	movs	r3, #0
 8007eee:	b570      	push	{r4, r5, r6, lr}
 8007ef0:	4d06      	ldr	r5, [pc, #24]	; (8007f0c <_fstat_r+0x20>)
 8007ef2:	0004      	movs	r4, r0
 8007ef4:	0008      	movs	r0, r1
 8007ef6:	0011      	movs	r1, r2
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	f000 f9d5 	bl	80082a8 <_fstat>
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	d103      	bne.n	8007f0a <_fstat_r+0x1e>
 8007f02:	682b      	ldr	r3, [r5, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d000      	beq.n	8007f0a <_fstat_r+0x1e>
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	20000694 	.word	0x20000694

08007f10 <_isatty_r>:
 8007f10:	2300      	movs	r3, #0
 8007f12:	b570      	push	{r4, r5, r6, lr}
 8007f14:	4d06      	ldr	r5, [pc, #24]	; (8007f30 <_isatty_r+0x20>)
 8007f16:	0004      	movs	r4, r0
 8007f18:	0008      	movs	r0, r1
 8007f1a:	602b      	str	r3, [r5, #0]
 8007f1c:	f000 f9d4 	bl	80082c8 <_isatty>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	d103      	bne.n	8007f2c <_isatty_r+0x1c>
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d000      	beq.n	8007f2c <_isatty_r+0x1c>
 8007f2a:	6023      	str	r3, [r4, #0]
 8007f2c:	bd70      	pop	{r4, r5, r6, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	20000694 	.word	0x20000694

08007f34 <_lseek_r>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	0004      	movs	r4, r0
 8007f38:	0008      	movs	r0, r1
 8007f3a:	0011      	movs	r1, r2
 8007f3c:	001a      	movs	r2, r3
 8007f3e:	2300      	movs	r3, #0
 8007f40:	4d05      	ldr	r5, [pc, #20]	; (8007f58 <_lseek_r+0x24>)
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f000 f9d0 	bl	80082e8 <_lseek>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d103      	bne.n	8007f54 <_lseek_r+0x20>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d000      	beq.n	8007f54 <_lseek_r+0x20>
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	bd70      	pop	{r4, r5, r6, pc}
 8007f56:	46c0      	nop			; (mov r8, r8)
 8007f58:	20000694 	.word	0x20000694

08007f5c <__malloc_lock>:
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	4802      	ldr	r0, [pc, #8]	; (8007f68 <__malloc_lock+0xc>)
 8007f60:	f7ff fc39 	bl	80077d6 <__retarget_lock_acquire_recursive>
 8007f64:	bd10      	pop	{r4, pc}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	2000068c 	.word	0x2000068c

08007f6c <__malloc_unlock>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	4802      	ldr	r0, [pc, #8]	; (8007f78 <__malloc_unlock+0xc>)
 8007f70:	f7ff fc32 	bl	80077d8 <__retarget_lock_release_recursive>
 8007f74:	bd10      	pop	{r4, pc}
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	2000068c 	.word	0x2000068c

08007f7c <_malloc_usable_size_r>:
 8007f7c:	1f0b      	subs	r3, r1, #4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	1f18      	subs	r0, r3, #4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da01      	bge.n	8007f8a <_malloc_usable_size_r+0xe>
 8007f86:	580b      	ldr	r3, [r1, r0]
 8007f88:	18c0      	adds	r0, r0, r3
 8007f8a:	4770      	bx	lr

08007f8c <_read_r>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	0004      	movs	r4, r0
 8007f90:	0008      	movs	r0, r1
 8007f92:	0011      	movs	r1, r2
 8007f94:	001a      	movs	r2, r3
 8007f96:	2300      	movs	r3, #0
 8007f98:	4d05      	ldr	r5, [pc, #20]	; (8007fb0 <_read_r+0x24>)
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f000 f9ac 	bl	80082f8 <_read>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d103      	bne.n	8007fac <_read_r+0x20>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d000      	beq.n	8007fac <_read_r+0x20>
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	bd70      	pop	{r4, r5, r6, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	20000694 	.word	0x20000694

08007fb4 <logf>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	1c05      	adds	r5, r0, #0
 8007fb8:	f000 f82e 	bl	8008018 <__ieee754_logf>
 8007fbc:	4b13      	ldr	r3, [pc, #76]	; (800800c <logf+0x58>)
 8007fbe:	1c04      	adds	r4, r0, #0
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	d016      	beq.n	8007ff6 <logf+0x42>
 8007fc8:	1c29      	adds	r1, r5, #0
 8007fca:	1c28      	adds	r0, r5, #0
 8007fcc:	f7f9 f80a 	bl	8000fe4 <__aeabi_fcmpun>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d110      	bne.n	8007ff6 <logf+0x42>
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	1c28      	adds	r0, r5, #0
 8007fd8:	f7f8 f990 	bl	80002fc <__aeabi_fcmpgt>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d10a      	bne.n	8007ff6 <logf+0x42>
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	1c28      	adds	r0, r5, #0
 8007fe4:	f7f8 f970 	bl	80002c8 <__aeabi_fcmpeq>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d006      	beq.n	8007ffa <logf+0x46>
 8007fec:	f000 f94e 	bl	800828c <__errno>
 8007ff0:	2322      	movs	r3, #34	; 0x22
 8007ff2:	4c07      	ldr	r4, [pc, #28]	; (8008010 <logf+0x5c>)
 8007ff4:	6003      	str	r3, [r0, #0]
 8007ff6:	1c20      	adds	r0, r4, #0
 8007ff8:	bd70      	pop	{r4, r5, r6, pc}
 8007ffa:	f000 f947 	bl	800828c <__errno>
 8007ffe:	2321      	movs	r3, #33	; 0x21
 8008000:	6003      	str	r3, [r0, #0]
 8008002:	4804      	ldr	r0, [pc, #16]	; (8008014 <logf+0x60>)
 8008004:	f000 f93e 	bl	8008284 <nanf>
 8008008:	1c04      	adds	r4, r0, #0
 800800a:	e7f4      	b.n	8007ff6 <logf+0x42>
 800800c:	20000158 	.word	0x20000158
 8008010:	ff800000 	.word	0xff800000
 8008014:	0800896e 	.word	0x0800896e

08008018 <__ieee754_logf>:
 8008018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801a:	0003      	movs	r3, r0
 800801c:	b085      	sub	sp, #20
 800801e:	0042      	lsls	r2, r0, #1
 8008020:	d106      	bne.n	8008030 <__ieee754_logf+0x18>
 8008022:	20cc      	movs	r0, #204	; 0xcc
 8008024:	2100      	movs	r1, #0
 8008026:	0600      	lsls	r0, r0, #24
 8008028:	f7f8 fb30 	bl	800068c <__aeabi_fdiv>
 800802c:	b005      	add	sp, #20
 800802e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008030:	2800      	cmp	r0, #0
 8008032:	da04      	bge.n	800803e <__ieee754_logf+0x26>
 8008034:	1c01      	adds	r1, r0, #0
 8008036:	f7f8 fe0d 	bl	8000c54 <__aeabi_fsub>
 800803a:	2100      	movs	r1, #0
 800803c:	e7f4      	b.n	8008028 <__ieee754_logf+0x10>
 800803e:	22ff      	movs	r2, #255	; 0xff
 8008040:	1c01      	adds	r1, r0, #0
 8008042:	05d2      	lsls	r2, r2, #23
 8008044:	4290      	cmp	r0, r2
 8008046:	da3d      	bge.n	80080c4 <__ieee754_logf+0xac>
 8008048:	2180      	movs	r1, #128	; 0x80
 800804a:	2200      	movs	r2, #0
 800804c:	0409      	lsls	r1, r1, #16
 800804e:	4288      	cmp	r0, r1
 8008050:	da06      	bge.n	8008060 <__ieee754_logf+0x48>
 8008052:	2198      	movs	r1, #152	; 0x98
 8008054:	05c9      	lsls	r1, r1, #23
 8008056:	f7f8 fce3 	bl	8000a20 <__aeabi_fmul>
 800805a:	2219      	movs	r2, #25
 800805c:	0003      	movs	r3, r0
 800805e:	4252      	negs	r2, r2
 8008060:	15dd      	asrs	r5, r3, #23
 8008062:	3d7f      	subs	r5, #127	; 0x7f
 8008064:	18ad      	adds	r5, r5, r2
 8008066:	025b      	lsls	r3, r3, #9
 8008068:	4a78      	ldr	r2, [pc, #480]	; (800824c <__ieee754_logf+0x234>)
 800806a:	0a5b      	lsrs	r3, r3, #9
 800806c:	1898      	adds	r0, r3, r2
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2380      	movs	r3, #128	; 0x80
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	4003      	ands	r3, r0
 8008076:	20fe      	movs	r0, #254	; 0xfe
 8008078:	21fe      	movs	r1, #254	; 0xfe
 800807a:	0580      	lsls	r0, r0, #22
 800807c:	15da      	asrs	r2, r3, #23
 800807e:	4058      	eors	r0, r3
 8008080:	9b00      	ldr	r3, [sp, #0]
 8008082:	0589      	lsls	r1, r1, #22
 8008084:	4318      	orrs	r0, r3
 8008086:	1955      	adds	r5, r2, r5
 8008088:	f7f8 fde4 	bl	8000c54 <__aeabi_fsub>
 800808c:	9a00      	ldr	r2, [sp, #0]
 800808e:	4b70      	ldr	r3, [pc, #448]	; (8008250 <__ieee754_logf+0x238>)
 8008090:	320f      	adds	r2, #15
 8008092:	1c04      	adds	r4, r0, #0
 8008094:	421a      	tst	r2, r3
 8008096:	d147      	bne.n	8008128 <__ieee754_logf+0x110>
 8008098:	2100      	movs	r1, #0
 800809a:	f7f8 f915 	bl	80002c8 <__aeabi_fcmpeq>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d013      	beq.n	80080ca <__ieee754_logf+0xb2>
 80080a2:	2000      	movs	r0, #0
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	d0c1      	beq.n	800802c <__ieee754_logf+0x14>
 80080a8:	0028      	movs	r0, r5
 80080aa:	f7f8 ffd1 	bl	8001050 <__aeabi_i2f>
 80080ae:	4969      	ldr	r1, [pc, #420]	; (8008254 <__ieee754_logf+0x23c>)
 80080b0:	1c04      	adds	r4, r0, #0
 80080b2:	f7f8 fcb5 	bl	8000a20 <__aeabi_fmul>
 80080b6:	4968      	ldr	r1, [pc, #416]	; (8008258 <__ieee754_logf+0x240>)
 80080b8:	1c05      	adds	r5, r0, #0
 80080ba:	1c20      	adds	r0, r4, #0
 80080bc:	f7f8 fcb0 	bl	8000a20 <__aeabi_fmul>
 80080c0:	1c01      	adds	r1, r0, #0
 80080c2:	1c28      	adds	r0, r5, #0
 80080c4:	f7f8 f946 	bl	8000354 <__aeabi_fadd>
 80080c8:	e7b0      	b.n	800802c <__ieee754_logf+0x14>
 80080ca:	4964      	ldr	r1, [pc, #400]	; (800825c <__ieee754_logf+0x244>)
 80080cc:	1c20      	adds	r0, r4, #0
 80080ce:	f7f8 fca7 	bl	8000a20 <__aeabi_fmul>
 80080d2:	1c01      	adds	r1, r0, #0
 80080d4:	20fc      	movs	r0, #252	; 0xfc
 80080d6:	0580      	lsls	r0, r0, #22
 80080d8:	f7f8 fdbc 	bl	8000c54 <__aeabi_fsub>
 80080dc:	1c21      	adds	r1, r4, #0
 80080de:	1c06      	adds	r6, r0, #0
 80080e0:	1c20      	adds	r0, r4, #0
 80080e2:	f7f8 fc9d 	bl	8000a20 <__aeabi_fmul>
 80080e6:	1c01      	adds	r1, r0, #0
 80080e8:	1c30      	adds	r0, r6, #0
 80080ea:	f7f8 fc99 	bl	8000a20 <__aeabi_fmul>
 80080ee:	1c06      	adds	r6, r0, #0
 80080f0:	2d00      	cmp	r5, #0
 80080f2:	d101      	bne.n	80080f8 <__ieee754_logf+0xe0>
 80080f4:	1c31      	adds	r1, r6, #0
 80080f6:	e07c      	b.n	80081f2 <__ieee754_logf+0x1da>
 80080f8:	0028      	movs	r0, r5
 80080fa:	f7f8 ffa9 	bl	8001050 <__aeabi_i2f>
 80080fe:	4955      	ldr	r1, [pc, #340]	; (8008254 <__ieee754_logf+0x23c>)
 8008100:	1c05      	adds	r5, r0, #0
 8008102:	f7f8 fc8d 	bl	8000a20 <__aeabi_fmul>
 8008106:	4954      	ldr	r1, [pc, #336]	; (8008258 <__ieee754_logf+0x240>)
 8008108:	1c07      	adds	r7, r0, #0
 800810a:	1c28      	adds	r0, r5, #0
 800810c:	f7f8 fc88 	bl	8000a20 <__aeabi_fmul>
 8008110:	1c01      	adds	r1, r0, #0
 8008112:	1c30      	adds	r0, r6, #0
 8008114:	f7f8 fd9e 	bl	8000c54 <__aeabi_fsub>
 8008118:	1c21      	adds	r1, r4, #0
 800811a:	f7f8 fd9b 	bl	8000c54 <__aeabi_fsub>
 800811e:	1c01      	adds	r1, r0, #0
 8008120:	1c38      	adds	r0, r7, #0
 8008122:	f7f8 fd97 	bl	8000c54 <__aeabi_fsub>
 8008126:	e781      	b.n	800802c <__ieee754_logf+0x14>
 8008128:	2180      	movs	r1, #128	; 0x80
 800812a:	05c9      	lsls	r1, r1, #23
 800812c:	f7f8 f912 	bl	8000354 <__aeabi_fadd>
 8008130:	1c01      	adds	r1, r0, #0
 8008132:	1c20      	adds	r0, r4, #0
 8008134:	f7f8 faaa 	bl	800068c <__aeabi_fdiv>
 8008138:	9001      	str	r0, [sp, #4]
 800813a:	0028      	movs	r0, r5
 800813c:	f7f8 ff88 	bl	8001050 <__aeabi_i2f>
 8008140:	9901      	ldr	r1, [sp, #4]
 8008142:	9002      	str	r0, [sp, #8]
 8008144:	1c08      	adds	r0, r1, #0
 8008146:	f7f8 fc6b 	bl	8000a20 <__aeabi_fmul>
 800814a:	4a45      	ldr	r2, [pc, #276]	; (8008260 <__ieee754_logf+0x248>)
 800814c:	9b00      	ldr	r3, [sp, #0]
 800814e:	4694      	mov	ip, r2
 8008150:	1c01      	adds	r1, r0, #0
 8008152:	4463      	add	r3, ip
 8008154:	9303      	str	r3, [sp, #12]
 8008156:	1c07      	adds	r7, r0, #0
 8008158:	f7f8 fc62 	bl	8000a20 <__aeabi_fmul>
 800815c:	4941      	ldr	r1, [pc, #260]	; (8008264 <__ieee754_logf+0x24c>)
 800815e:	1c06      	adds	r6, r0, #0
 8008160:	f7f8 fc5e 	bl	8000a20 <__aeabi_fmul>
 8008164:	4940      	ldr	r1, [pc, #256]	; (8008268 <__ieee754_logf+0x250>)
 8008166:	f7f8 f8f5 	bl	8000354 <__aeabi_fadd>
 800816a:	1c31      	adds	r1, r6, #0
 800816c:	f7f8 fc58 	bl	8000a20 <__aeabi_fmul>
 8008170:	493e      	ldr	r1, [pc, #248]	; (800826c <__ieee754_logf+0x254>)
 8008172:	f7f8 f8ef 	bl	8000354 <__aeabi_fadd>
 8008176:	1c31      	adds	r1, r6, #0
 8008178:	f7f8 fc52 	bl	8000a20 <__aeabi_fmul>
 800817c:	493c      	ldr	r1, [pc, #240]	; (8008270 <__ieee754_logf+0x258>)
 800817e:	f7f8 f8e9 	bl	8000354 <__aeabi_fadd>
 8008182:	1c39      	adds	r1, r7, #0
 8008184:	f7f8 fc4c 	bl	8000a20 <__aeabi_fmul>
 8008188:	493a      	ldr	r1, [pc, #232]	; (8008274 <__ieee754_logf+0x25c>)
 800818a:	1c07      	adds	r7, r0, #0
 800818c:	1c30      	adds	r0, r6, #0
 800818e:	f7f8 fc47 	bl	8000a20 <__aeabi_fmul>
 8008192:	4939      	ldr	r1, [pc, #228]	; (8008278 <__ieee754_logf+0x260>)
 8008194:	f7f8 f8de 	bl	8000354 <__aeabi_fadd>
 8008198:	1c31      	adds	r1, r6, #0
 800819a:	f7f8 fc41 	bl	8000a20 <__aeabi_fmul>
 800819e:	4937      	ldr	r1, [pc, #220]	; (800827c <__ieee754_logf+0x264>)
 80081a0:	f7f8 f8d8 	bl	8000354 <__aeabi_fadd>
 80081a4:	1c31      	adds	r1, r6, #0
 80081a6:	f7f8 fc3b 	bl	8000a20 <__aeabi_fmul>
 80081aa:	1c01      	adds	r1, r0, #0
 80081ac:	1c38      	adds	r0, r7, #0
 80081ae:	f7f8 f8d1 	bl	8000354 <__aeabi_fadd>
 80081b2:	9b00      	ldr	r3, [sp, #0]
 80081b4:	1c07      	adds	r7, r0, #0
 80081b6:	4832      	ldr	r0, [pc, #200]	; (8008280 <__ieee754_logf+0x268>)
 80081b8:	1ac0      	subs	r0, r0, r3
 80081ba:	9b03      	ldr	r3, [sp, #12]
 80081bc:	4318      	orrs	r0, r3
 80081be:	2800      	cmp	r0, #0
 80081c0:	dd2f      	ble.n	8008222 <__ieee754_logf+0x20a>
 80081c2:	21fc      	movs	r1, #252	; 0xfc
 80081c4:	1c20      	adds	r0, r4, #0
 80081c6:	0589      	lsls	r1, r1, #22
 80081c8:	f7f8 fc2a 	bl	8000a20 <__aeabi_fmul>
 80081cc:	1c21      	adds	r1, r4, #0
 80081ce:	f7f8 fc27 	bl	8000a20 <__aeabi_fmul>
 80081d2:	1c01      	adds	r1, r0, #0
 80081d4:	1c06      	adds	r6, r0, #0
 80081d6:	1c38      	adds	r0, r7, #0
 80081d8:	f7f8 f8bc 	bl	8000354 <__aeabi_fadd>
 80081dc:	9901      	ldr	r1, [sp, #4]
 80081de:	f7f8 fc1f 	bl	8000a20 <__aeabi_fmul>
 80081e2:	1c07      	adds	r7, r0, #0
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	d106      	bne.n	80081f6 <__ieee754_logf+0x1de>
 80081e8:	1c01      	adds	r1, r0, #0
 80081ea:	1c30      	adds	r0, r6, #0
 80081ec:	f7f8 fd32 	bl	8000c54 <__aeabi_fsub>
 80081f0:	1c01      	adds	r1, r0, #0
 80081f2:	1c20      	adds	r0, r4, #0
 80081f4:	e795      	b.n	8008122 <__ieee754_logf+0x10a>
 80081f6:	4917      	ldr	r1, [pc, #92]	; (8008254 <__ieee754_logf+0x23c>)
 80081f8:	9802      	ldr	r0, [sp, #8]
 80081fa:	f7f8 fc11 	bl	8000a20 <__aeabi_fmul>
 80081fe:	4916      	ldr	r1, [pc, #88]	; (8008258 <__ieee754_logf+0x240>)
 8008200:	1c05      	adds	r5, r0, #0
 8008202:	9802      	ldr	r0, [sp, #8]
 8008204:	f7f8 fc0c 	bl	8000a20 <__aeabi_fmul>
 8008208:	1c39      	adds	r1, r7, #0
 800820a:	f7f8 f8a3 	bl	8000354 <__aeabi_fadd>
 800820e:	1c01      	adds	r1, r0, #0
 8008210:	1c30      	adds	r0, r6, #0
 8008212:	f7f8 fd1f 	bl	8000c54 <__aeabi_fsub>
 8008216:	1c21      	adds	r1, r4, #0
 8008218:	f7f8 fd1c 	bl	8000c54 <__aeabi_fsub>
 800821c:	1c01      	adds	r1, r0, #0
 800821e:	1c28      	adds	r0, r5, #0
 8008220:	e77f      	b.n	8008122 <__ieee754_logf+0x10a>
 8008222:	1c39      	adds	r1, r7, #0
 8008224:	1c20      	adds	r0, r4, #0
 8008226:	f7f8 fd15 	bl	8000c54 <__aeabi_fsub>
 800822a:	9901      	ldr	r1, [sp, #4]
 800822c:	f7f8 fbf8 	bl	8000a20 <__aeabi_fmul>
 8008230:	1c06      	adds	r6, r0, #0
 8008232:	2d00      	cmp	r5, #0
 8008234:	d100      	bne.n	8008238 <__ieee754_logf+0x220>
 8008236:	e75d      	b.n	80080f4 <__ieee754_logf+0xdc>
 8008238:	4906      	ldr	r1, [pc, #24]	; (8008254 <__ieee754_logf+0x23c>)
 800823a:	9802      	ldr	r0, [sp, #8]
 800823c:	f7f8 fbf0 	bl	8000a20 <__aeabi_fmul>
 8008240:	4905      	ldr	r1, [pc, #20]	; (8008258 <__ieee754_logf+0x240>)
 8008242:	1c05      	adds	r5, r0, #0
 8008244:	9802      	ldr	r0, [sp, #8]
 8008246:	f7f8 fbeb 	bl	8000a20 <__aeabi_fmul>
 800824a:	e7e0      	b.n	800820e <__ieee754_logf+0x1f6>
 800824c:	004afb20 	.word	0x004afb20
 8008250:	007ffff0 	.word	0x007ffff0
 8008254:	3f317180 	.word	0x3f317180
 8008258:	3717f7d1 	.word	0x3717f7d1
 800825c:	3eaaaaab 	.word	0x3eaaaaab
 8008260:	ffcf5c30 	.word	0xffcf5c30
 8008264:	3e178897 	.word	0x3e178897
 8008268:	3e3a3325 	.word	0x3e3a3325
 800826c:	3e924925 	.word	0x3e924925
 8008270:	3f2aaaab 	.word	0x3f2aaaab
 8008274:	3e1cd04f 	.word	0x3e1cd04f
 8008278:	3e638e29 	.word	0x3e638e29
 800827c:	3ecccccd 	.word	0x3ecccccd
 8008280:	0035c288 	.word	0x0035c288

08008284 <nanf>:
 8008284:	4800      	ldr	r0, [pc, #0]	; (8008288 <nanf+0x4>)
 8008286:	4770      	bx	lr
 8008288:	7fc00000 	.word	0x7fc00000

0800828c <__errno>:
 800828c:	4b01      	ldr	r3, [pc, #4]	; (8008294 <__errno+0x8>)
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	4770      	bx	lr
 8008292:	46c0      	nop			; (mov r8, r8)
 8008294:	200000f4 	.word	0x200000f4

08008298 <_close>:
 8008298:	2258      	movs	r2, #88	; 0x58
 800829a:	2001      	movs	r0, #1
 800829c:	4b01      	ldr	r3, [pc, #4]	; (80082a4 <_close+0xc>)
 800829e:	4240      	negs	r0, r0
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	4770      	bx	lr
 80082a4:	20000694 	.word	0x20000694

080082a8 <_fstat>:
 80082a8:	2258      	movs	r2, #88	; 0x58
 80082aa:	2001      	movs	r0, #1
 80082ac:	4b01      	ldr	r3, [pc, #4]	; (80082b4 <_fstat+0xc>)
 80082ae:	4240      	negs	r0, r0
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	4770      	bx	lr
 80082b4:	20000694 	.word	0x20000694

080082b8 <_getpid>:
 80082b8:	2258      	movs	r2, #88	; 0x58
 80082ba:	2001      	movs	r0, #1
 80082bc:	4b01      	ldr	r3, [pc, #4]	; (80082c4 <_getpid+0xc>)
 80082be:	4240      	negs	r0, r0
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	4770      	bx	lr
 80082c4:	20000694 	.word	0x20000694

080082c8 <_isatty>:
 80082c8:	2258      	movs	r2, #88	; 0x58
 80082ca:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <_isatty+0xc>)
 80082cc:	2000      	movs	r0, #0
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	4770      	bx	lr
 80082d2:	46c0      	nop			; (mov r8, r8)
 80082d4:	20000694 	.word	0x20000694

080082d8 <_kill>:
 80082d8:	2258      	movs	r2, #88	; 0x58
 80082da:	2001      	movs	r0, #1
 80082dc:	4b01      	ldr	r3, [pc, #4]	; (80082e4 <_kill+0xc>)
 80082de:	4240      	negs	r0, r0
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	4770      	bx	lr
 80082e4:	20000694 	.word	0x20000694

080082e8 <_lseek>:
 80082e8:	2258      	movs	r2, #88	; 0x58
 80082ea:	2001      	movs	r0, #1
 80082ec:	4b01      	ldr	r3, [pc, #4]	; (80082f4 <_lseek+0xc>)
 80082ee:	4240      	negs	r0, r0
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	4770      	bx	lr
 80082f4:	20000694 	.word	0x20000694

080082f8 <_read>:
 80082f8:	2258      	movs	r2, #88	; 0x58
 80082fa:	2001      	movs	r0, #1
 80082fc:	4b01      	ldr	r3, [pc, #4]	; (8008304 <_read+0xc>)
 80082fe:	4240      	negs	r0, r0
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	4770      	bx	lr
 8008304:	20000694 	.word	0x20000694

08008308 <_sbrk>:
 8008308:	4a05      	ldr	r2, [pc, #20]	; (8008320 <_sbrk+0x18>)
 800830a:	0003      	movs	r3, r0
 800830c:	6811      	ldr	r1, [r2, #0]
 800830e:	2900      	cmp	r1, #0
 8008310:	d101      	bne.n	8008316 <_sbrk+0xe>
 8008312:	4904      	ldr	r1, [pc, #16]	; (8008324 <_sbrk+0x1c>)
 8008314:	6011      	str	r1, [r2, #0]
 8008316:	6810      	ldr	r0, [r2, #0]
 8008318:	18c3      	adds	r3, r0, r3
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	4770      	bx	lr
 800831e:	46c0      	nop			; (mov r8, r8)
 8008320:	20000224 	.word	0x20000224
 8008324:	20000698 	.word	0x20000698

08008328 <_write>:
 8008328:	2258      	movs	r2, #88	; 0x58
 800832a:	2001      	movs	r0, #1
 800832c:	4b01      	ldr	r3, [pc, #4]	; (8008334 <_write+0xc>)
 800832e:	4240      	negs	r0, r0
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	4770      	bx	lr
 8008334:	20000694 	.word	0x20000694

08008338 <_exit>:
 8008338:	e7fe      	b.n	8008338 <_exit>
	...

0800833c <_init>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr

08008348 <_fini>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834e:	bc08      	pop	{r3}
 8008350:	469e      	mov	lr, r3
 8008352:	4770      	bx	lr
